
mmcov4_controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001c450  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004284  0801c600  0801c600  0002c600  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08020884  08020884  00040088  2**0
                  CONTENTS
  4 .ARM          00000008  08020884  08020884  00030884  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802088c  0802088c  00040088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802088c  0802088c  0003088c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08020890  08020890  00030890  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08020894  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00010c50  20000088  0802091c  00040088  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20010cd8  0802091c  00040cd8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00040088  2**0
                  CONTENTS, READONLY
 12 .debug_info   0006bfa4  00000000  00000000  000400b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00009cdb  00000000  00000000  000ac05c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002790  00000000  00000000  000b5d38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000025f8  00000000  00000000  000b84c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00039d8b  00000000  00000000  000baac0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00042c00  00000000  00000000  000f484b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010606b  00000000  00000000  0013744b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0023d4b6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000ab08  00000000  00000000  0023d50c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000088 	.word	0x20000088
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0801c5e8 	.word	0x0801c5e8

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000008c 	.word	0x2000008c
 80001ec:	0801c5e8 	.word	0x0801c5e8

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96e 	b.w	8000584 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468c      	mov	ip, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	f040 8083 	bne.w	80003d6 <__udivmoddi4+0x116>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d947      	bls.n	8000366 <__udivmoddi4+0xa6>
 80002d6:	fab2 f282 	clz	r2, r2
 80002da:	b142      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002dc:	f1c2 0020 	rsb	r0, r2, #32
 80002e0:	fa24 f000 	lsr.w	r0, r4, r0
 80002e4:	4091      	lsls	r1, r2
 80002e6:	4097      	lsls	r7, r2
 80002e8:	ea40 0c01 	orr.w	ip, r0, r1
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbbc f6f8 	udiv	r6, ip, r8
 80002f8:	fa1f fe87 	uxth.w	lr, r7
 80002fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb06 f10e 	mul.w	r1, r6, lr
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18fb      	adds	r3, r7, r3
 800030e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000312:	f080 8119 	bcs.w	8000548 <__udivmoddi4+0x288>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8116 	bls.w	8000548 <__udivmoddi4+0x288>
 800031c:	3e02      	subs	r6, #2
 800031e:	443b      	add	r3, r7
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0f8 	udiv	r0, r3, r8
 8000328:	fb08 3310 	mls	r3, r8, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fe0e 	mul.w	lr, r0, lr
 8000334:	45a6      	cmp	lr, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	193c      	adds	r4, r7, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8105 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000342:	45a6      	cmp	lr, r4
 8000344:	f240 8102 	bls.w	800054c <__udivmoddi4+0x28c>
 8000348:	3802      	subs	r0, #2
 800034a:	443c      	add	r4, r7
 800034c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000350:	eba4 040e 	sub.w	r4, r4, lr
 8000354:	2600      	movs	r6, #0
 8000356:	b11d      	cbz	r5, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c5 4300 	strd	r4, r3, [r5]
 8000360:	4631      	mov	r1, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	b902      	cbnz	r2, 800036a <__udivmoddi4+0xaa>
 8000368:	deff      	udf	#255	; 0xff
 800036a:	fab2 f282 	clz	r2, r2
 800036e:	2a00      	cmp	r2, #0
 8000370:	d150      	bne.n	8000414 <__udivmoddi4+0x154>
 8000372:	1bcb      	subs	r3, r1, r7
 8000374:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	2601      	movs	r6, #1
 800037e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000382:	0c21      	lsrs	r1, r4, #16
 8000384:	fb0e 331c 	mls	r3, lr, ip, r3
 8000388:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800038c:	fb08 f30c 	mul.w	r3, r8, ip
 8000390:	428b      	cmp	r3, r1
 8000392:	d907      	bls.n	80003a4 <__udivmoddi4+0xe4>
 8000394:	1879      	adds	r1, r7, r1
 8000396:	f10c 30ff 	add.w	r0, ip, #4294967295
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0xe2>
 800039c:	428b      	cmp	r3, r1
 800039e:	f200 80e9 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003a2:	4684      	mov	ip, r0
 80003a4:	1ac9      	subs	r1, r1, r3
 80003a6:	b2a3      	uxth	r3, r4
 80003a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80003b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003b4:	fb08 f800 	mul.w	r8, r8, r0
 80003b8:	45a0      	cmp	r8, r4
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x10c>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x10a>
 80003c4:	45a0      	cmp	r8, r4
 80003c6:	f200 80d9 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003ca:	4618      	mov	r0, r3
 80003cc:	eba4 0408 	sub.w	r4, r4, r8
 80003d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003d4:	e7bf      	b.n	8000356 <__udivmoddi4+0x96>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d909      	bls.n	80003ee <__udivmoddi4+0x12e>
 80003da:	2d00      	cmp	r5, #0
 80003dc:	f000 80b1 	beq.w	8000542 <__udivmoddi4+0x282>
 80003e0:	2600      	movs	r6, #0
 80003e2:	e9c5 0100 	strd	r0, r1, [r5]
 80003e6:	4630      	mov	r0, r6
 80003e8:	4631      	mov	r1, r6
 80003ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ee:	fab3 f683 	clz	r6, r3
 80003f2:	2e00      	cmp	r6, #0
 80003f4:	d14a      	bne.n	800048c <__udivmoddi4+0x1cc>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d302      	bcc.n	8000400 <__udivmoddi4+0x140>
 80003fa:	4282      	cmp	r2, r0
 80003fc:	f200 80b8 	bhi.w	8000570 <__udivmoddi4+0x2b0>
 8000400:	1a84      	subs	r4, r0, r2
 8000402:	eb61 0103 	sbc.w	r1, r1, r3
 8000406:	2001      	movs	r0, #1
 8000408:	468c      	mov	ip, r1
 800040a:	2d00      	cmp	r5, #0
 800040c:	d0a8      	beq.n	8000360 <__udivmoddi4+0xa0>
 800040e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000412:	e7a5      	b.n	8000360 <__udivmoddi4+0xa0>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f603 	lsr.w	r6, r0, r3
 800041c:	4097      	lsls	r7, r2
 800041e:	fa01 f002 	lsl.w	r0, r1, r2
 8000422:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000426:	40d9      	lsrs	r1, r3
 8000428:	4330      	orrs	r0, r6
 800042a:	0c03      	lsrs	r3, r0, #16
 800042c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000430:	fa1f f887 	uxth.w	r8, r7
 8000434:	fb0e 1116 	mls	r1, lr, r6, r1
 8000438:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043c:	fb06 f108 	mul.w	r1, r6, r8
 8000440:	4299      	cmp	r1, r3
 8000442:	fa04 f402 	lsl.w	r4, r4, r2
 8000446:	d909      	bls.n	800045c <__udivmoddi4+0x19c>
 8000448:	18fb      	adds	r3, r7, r3
 800044a:	f106 3cff 	add.w	ip, r6, #4294967295
 800044e:	f080 808d 	bcs.w	800056c <__udivmoddi4+0x2ac>
 8000452:	4299      	cmp	r1, r3
 8000454:	f240 808a 	bls.w	800056c <__udivmoddi4+0x2ac>
 8000458:	3e02      	subs	r6, #2
 800045a:	443b      	add	r3, r7
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b281      	uxth	r1, r0
 8000460:	fbb3 f0fe 	udiv	r0, r3, lr
 8000464:	fb0e 3310 	mls	r3, lr, r0, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb00 f308 	mul.w	r3, r0, r8
 8000470:	428b      	cmp	r3, r1
 8000472:	d907      	bls.n	8000484 <__udivmoddi4+0x1c4>
 8000474:	1879      	adds	r1, r7, r1
 8000476:	f100 3cff 	add.w	ip, r0, #4294967295
 800047a:	d273      	bcs.n	8000564 <__udivmoddi4+0x2a4>
 800047c:	428b      	cmp	r3, r1
 800047e:	d971      	bls.n	8000564 <__udivmoddi4+0x2a4>
 8000480:	3802      	subs	r0, #2
 8000482:	4439      	add	r1, r7
 8000484:	1acb      	subs	r3, r1, r3
 8000486:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800048a:	e778      	b.n	800037e <__udivmoddi4+0xbe>
 800048c:	f1c6 0c20 	rsb	ip, r6, #32
 8000490:	fa03 f406 	lsl.w	r4, r3, r6
 8000494:	fa22 f30c 	lsr.w	r3, r2, ip
 8000498:	431c      	orrs	r4, r3
 800049a:	fa20 f70c 	lsr.w	r7, r0, ip
 800049e:	fa01 f306 	lsl.w	r3, r1, r6
 80004a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004aa:	431f      	orrs	r7, r3
 80004ac:	0c3b      	lsrs	r3, r7, #16
 80004ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b2:	fa1f f884 	uxth.w	r8, r4
 80004b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004be:	fb09 fa08 	mul.w	sl, r9, r8
 80004c2:	458a      	cmp	sl, r1
 80004c4:	fa02 f206 	lsl.w	r2, r2, r6
 80004c8:	fa00 f306 	lsl.w	r3, r0, r6
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x220>
 80004ce:	1861      	adds	r1, r4, r1
 80004d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004d4:	d248      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 80004d6:	458a      	cmp	sl, r1
 80004d8:	d946      	bls.n	8000568 <__udivmoddi4+0x2a8>
 80004da:	f1a9 0902 	sub.w	r9, r9, #2
 80004de:	4421      	add	r1, r4
 80004e0:	eba1 010a 	sub.w	r1, r1, sl
 80004e4:	b2bf      	uxth	r7, r7
 80004e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004f2:	fb00 f808 	mul.w	r8, r0, r8
 80004f6:	45b8      	cmp	r8, r7
 80004f8:	d907      	bls.n	800050a <__udivmoddi4+0x24a>
 80004fa:	19e7      	adds	r7, r4, r7
 80004fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000500:	d22e      	bcs.n	8000560 <__udivmoddi4+0x2a0>
 8000502:	45b8      	cmp	r8, r7
 8000504:	d92c      	bls.n	8000560 <__udivmoddi4+0x2a0>
 8000506:	3802      	subs	r0, #2
 8000508:	4427      	add	r7, r4
 800050a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800050e:	eba7 0708 	sub.w	r7, r7, r8
 8000512:	fba0 8902 	umull	r8, r9, r0, r2
 8000516:	454f      	cmp	r7, r9
 8000518:	46c6      	mov	lr, r8
 800051a:	4649      	mov	r1, r9
 800051c:	d31a      	bcc.n	8000554 <__udivmoddi4+0x294>
 800051e:	d017      	beq.n	8000550 <__udivmoddi4+0x290>
 8000520:	b15d      	cbz	r5, 800053a <__udivmoddi4+0x27a>
 8000522:	ebb3 020e 	subs.w	r2, r3, lr
 8000526:	eb67 0701 	sbc.w	r7, r7, r1
 800052a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800052e:	40f2      	lsrs	r2, r6
 8000530:	ea4c 0202 	orr.w	r2, ip, r2
 8000534:	40f7      	lsrs	r7, r6
 8000536:	e9c5 2700 	strd	r2, r7, [r5]
 800053a:	2600      	movs	r6, #0
 800053c:	4631      	mov	r1, r6
 800053e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e70b      	b.n	8000360 <__udivmoddi4+0xa0>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e9      	b.n	8000320 <__udivmoddi4+0x60>
 800054c:	4618      	mov	r0, r3
 800054e:	e6fd      	b.n	800034c <__udivmoddi4+0x8c>
 8000550:	4543      	cmp	r3, r8
 8000552:	d2e5      	bcs.n	8000520 <__udivmoddi4+0x260>
 8000554:	ebb8 0e02 	subs.w	lr, r8, r2
 8000558:	eb69 0104 	sbc.w	r1, r9, r4
 800055c:	3801      	subs	r0, #1
 800055e:	e7df      	b.n	8000520 <__udivmoddi4+0x260>
 8000560:	4608      	mov	r0, r1
 8000562:	e7d2      	b.n	800050a <__udivmoddi4+0x24a>
 8000564:	4660      	mov	r0, ip
 8000566:	e78d      	b.n	8000484 <__udivmoddi4+0x1c4>
 8000568:	4681      	mov	r9, r0
 800056a:	e7b9      	b.n	80004e0 <__udivmoddi4+0x220>
 800056c:	4666      	mov	r6, ip
 800056e:	e775      	b.n	800045c <__udivmoddi4+0x19c>
 8000570:	4630      	mov	r0, r6
 8000572:	e74a      	b.n	800040a <__udivmoddi4+0x14a>
 8000574:	f1ac 0c02 	sub.w	ip, ip, #2
 8000578:	4439      	add	r1, r7
 800057a:	e713      	b.n	80003a4 <__udivmoddi4+0xe4>
 800057c:	3802      	subs	r0, #2
 800057e:	443c      	add	r4, r7
 8000580:	e724      	b.n	80003cc <__udivmoddi4+0x10c>
 8000582:	bf00      	nop

08000584 <__aeabi_idiv0>:
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop

08000588 <board_i2c_init>:
 * transsaction and can release it after reading i2c.
 * it was easier to do that in the sensor handler than here
 */

static void board_i2c_init(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	af00      	add	r7, sp, #0
	g_hi2c1.Instance = I2C1;
 800058c:	4b1b      	ldr	r3, [pc, #108]	; (80005fc <board_i2c_init+0x74>)
 800058e:	4a1c      	ldr	r2, [pc, #112]	; (8000600 <board_i2c_init+0x78>)
 8000590:	601a      	str	r2, [r3, #0]
	g_hi2c1.Init.ClockSpeed = 100000;
 8000592:	4b1a      	ldr	r3, [pc, #104]	; (80005fc <board_i2c_init+0x74>)
 8000594:	4a1b      	ldr	r2, [pc, #108]	; (8000604 <board_i2c_init+0x7c>)
 8000596:	605a      	str	r2, [r3, #4]
	g_hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000598:	4b18      	ldr	r3, [pc, #96]	; (80005fc <board_i2c_init+0x74>)
 800059a:	2200      	movs	r2, #0
 800059c:	609a      	str	r2, [r3, #8]
	g_hi2c1.Init.OwnAddress1 = 0;
 800059e:	4b17      	ldr	r3, [pc, #92]	; (80005fc <board_i2c_init+0x74>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	60da      	str	r2, [r3, #12]
	g_hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005a4:	4b15      	ldr	r3, [pc, #84]	; (80005fc <board_i2c_init+0x74>)
 80005a6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80005aa:	611a      	str	r2, [r3, #16]
	g_hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005ac:	4b13      	ldr	r3, [pc, #76]	; (80005fc <board_i2c_init+0x74>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	615a      	str	r2, [r3, #20]
	g_hi2c1.Init.OwnAddress2 = 0;
 80005b2:	4b12      	ldr	r3, [pc, #72]	; (80005fc <board_i2c_init+0x74>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	619a      	str	r2, [r3, #24]
	g_hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80005b8:	4b10      	ldr	r3, [pc, #64]	; (80005fc <board_i2c_init+0x74>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	61da      	str	r2, [r3, #28]
	g_hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80005be:	4b0f      	ldr	r3, [pc, #60]	; (80005fc <board_i2c_init+0x74>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&g_hi2c1) != HAL_OK)
 80005c4:	480d      	ldr	r0, [pc, #52]	; (80005fc <board_i2c_init+0x74>)
 80005c6:	f004 fbdb 	bl	8004d80 <HAL_I2C_Init>
 80005ca:	4603      	mov	r3, r0
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d001      	beq.n	80005d4 <board_i2c_init+0x4c>
	{
		Error_Handler();
 80005d0:	f000 fcec 	bl	8000fac <Error_Handler>
	}
	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&g_hi2c1, I2C_ANALOGFILTER_ENABLE)
 80005d4:	2100      	movs	r1, #0
 80005d6:	4809      	ldr	r0, [pc, #36]	; (80005fc <board_i2c_init+0x74>)
 80005d8:	f005 fb67 	bl	8005caa <HAL_I2CEx_ConfigAnalogFilter>
 80005dc:	4603      	mov	r3, r0
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d001      	beq.n	80005e6 <board_i2c_init+0x5e>
			!= HAL_OK)
	{
		Error_Handler();
 80005e2:	f000 fce3 	bl	8000fac <Error_Handler>
	}
	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&g_hi2c1, 0) != HAL_OK)
 80005e6:	2100      	movs	r1, #0
 80005e8:	4804      	ldr	r0, [pc, #16]	; (80005fc <board_i2c_init+0x74>)
 80005ea:	f005 fb9a 	bl	8005d22 <HAL_I2CEx_ConfigDigitalFilter>
 80005ee:	4603      	mov	r3, r0
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d001      	beq.n	80005f8 <board_i2c_init+0x70>
	{
		Error_Handler();
 80005f4:	f000 fcda 	bl	8000fac <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 80005f8:	bf00      	nop
 80005fa:	bd80      	pop	{r7, pc}
 80005fc:	2000a124 	.word	0x2000a124
 8000600:	40005400 	.word	0x40005400
 8000604:	000186a0 	.word	0x000186a0

08000608 <board_spi_init>:

static void board_spi_init(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
	g_hspi1.Instance = SPI1;
 800060c:	4b18      	ldr	r3, [pc, #96]	; (8000670 <board_spi_init+0x68>)
 800060e:	4a19      	ldr	r2, [pc, #100]	; (8000674 <board_spi_init+0x6c>)
 8000610:	601a      	str	r2, [r3, #0]
	g_hspi1.Init.Mode = SPI_MODE_MASTER;
 8000612:	4b17      	ldr	r3, [pc, #92]	; (8000670 <board_spi_init+0x68>)
 8000614:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000618:	605a      	str	r2, [r3, #4]
	g_hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800061a:	4b15      	ldr	r3, [pc, #84]	; (8000670 <board_spi_init+0x68>)
 800061c:	2200      	movs	r2, #0
 800061e:	609a      	str	r2, [r3, #8]
	g_hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000620:	4b13      	ldr	r3, [pc, #76]	; (8000670 <board_spi_init+0x68>)
 8000622:	2200      	movs	r2, #0
 8000624:	60da      	str	r2, [r3, #12]
	g_hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000626:	4b12      	ldr	r3, [pc, #72]	; (8000670 <board_spi_init+0x68>)
 8000628:	2200      	movs	r2, #0
 800062a:	611a      	str	r2, [r3, #16]
	g_hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800062c:	4b10      	ldr	r3, [pc, #64]	; (8000670 <board_spi_init+0x68>)
 800062e:	2200      	movs	r2, #0
 8000630:	615a      	str	r2, [r3, #20]
	g_hspi1.Init.NSS = SPI_NSS_SOFT;
 8000632:	4b0f      	ldr	r3, [pc, #60]	; (8000670 <board_spi_init+0x68>)
 8000634:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000638:	619a      	str	r2, [r3, #24]
	g_hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800063a:	4b0d      	ldr	r3, [pc, #52]	; (8000670 <board_spi_init+0x68>)
 800063c:	2200      	movs	r2, #0
 800063e:	61da      	str	r2, [r3, #28]
	g_hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000640:	4b0b      	ldr	r3, [pc, #44]	; (8000670 <board_spi_init+0x68>)
 8000642:	2200      	movs	r2, #0
 8000644:	621a      	str	r2, [r3, #32]
	g_hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000646:	4b0a      	ldr	r3, [pc, #40]	; (8000670 <board_spi_init+0x68>)
 8000648:	2200      	movs	r2, #0
 800064a:	625a      	str	r2, [r3, #36]	; 0x24
	g_hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800064c:	4b08      	ldr	r3, [pc, #32]	; (8000670 <board_spi_init+0x68>)
 800064e:	2200      	movs	r2, #0
 8000650:	629a      	str	r2, [r3, #40]	; 0x28
	g_hspi1.Init.CRCPolynomial = 10;
 8000652:	4b07      	ldr	r3, [pc, #28]	; (8000670 <board_spi_init+0x68>)
 8000654:	220a      	movs	r2, #10
 8000656:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&g_hspi1) != HAL_OK)
 8000658:	4805      	ldr	r0, [pc, #20]	; (8000670 <board_spi_init+0x68>)
 800065a:	f006 f83f 	bl	80066dc <HAL_SPI_Init>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d002      	beq.n	800066a <board_spi_init+0x62>
	{
		Error_Handler();
 8000664:	f000 fca2 	bl	8000fac <Error_Handler>
	}
	return;
 8000668:	bf00      	nop
 800066a:	bf00      	nop
}
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	2000a180 	.word	0x2000a180
 8000674:	40013000 	.word	0x40013000

08000678 <board_en_pins_init>:
//  }
//  return;
//}

static void board_en_pins_init(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b086      	sub	sp, #24
 800067c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct =
 800067e:	1d3b      	adds	r3, r7, #4
 8000680:	2200      	movs	r2, #0
 8000682:	601a      	str	r2, [r3, #0]
 8000684:	605a      	str	r2, [r3, #4]
 8000686:	609a      	str	r2, [r3, #8]
 8000688:	60da      	str	r2, [r3, #12]
 800068a:	611a      	str	r2, [r3, #16]
	{ 0 };

	GPIO_InitStruct.Pin = EN_SUP_1_Pin;
 800068c:	2310      	movs	r3, #16
 800068e:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000690:	2301      	movs	r3, #1
 8000692:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000694:	2300      	movs	r3, #0
 8000696:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000698:	2300      	movs	r3, #0
 800069a:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(EN_SUP_1_Port, &GPIO_InitStruct);
 800069c:	1d3b      	adds	r3, r7, #4
 800069e:	4619      	mov	r1, r3
 80006a0:	485a      	ldr	r0, [pc, #360]	; (800080c <board_en_pins_init+0x194>)
 80006a2:	f004 f98d 	bl	80049c0 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = EN_SUP_2_Pin;
 80006a6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80006aa:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ac:	2301      	movs	r3, #1
 80006ae:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b0:	2300      	movs	r3, #0
 80006b2:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006b4:	2300      	movs	r3, #0
 80006b6:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(EN_SUP_2_Port, &GPIO_InitStruct);
 80006b8:	1d3b      	adds	r3, r7, #4
 80006ba:	4619      	mov	r1, r3
 80006bc:	4854      	ldr	r0, [pc, #336]	; (8000810 <board_en_pins_init+0x198>)
 80006be:	f004 f97f 	bl	80049c0 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = EN_SUP_3_Pin;
 80006c2:	2320      	movs	r3, #32
 80006c4:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006c6:	2301      	movs	r3, #1
 80006c8:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ca:	2300      	movs	r3, #0
 80006cc:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ce:	2300      	movs	r3, #0
 80006d0:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(EN_SUP_3_Port, &GPIO_InitStruct);
 80006d2:	1d3b      	adds	r3, r7, #4
 80006d4:	4619      	mov	r1, r3
 80006d6:	484f      	ldr	r0, [pc, #316]	; (8000814 <board_en_pins_init+0x19c>)
 80006d8:	f004 f972 	bl	80049c0 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = EN_SUP_4_Pin;
 80006dc:	2308      	movs	r3, #8
 80006de:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006e0:	2301      	movs	r3, #1
 80006e2:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e4:	2300      	movs	r3, #0
 80006e6:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006e8:	2300      	movs	r3, #0
 80006ea:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(EN_SUP_4_Port, &GPIO_InitStruct);
 80006ec:	1d3b      	adds	r3, r7, #4
 80006ee:	4619      	mov	r1, r3
 80006f0:	4849      	ldr	r0, [pc, #292]	; (8000818 <board_en_pins_init+0x1a0>)
 80006f2:	f004 f965 	bl	80049c0 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = EN_SUP_5_Pin;
 80006f6:	2310      	movs	r3, #16
 80006f8:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006fa:	2301      	movs	r3, #1
 80006fc:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006fe:	2300      	movs	r3, #0
 8000700:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000702:	2300      	movs	r3, #0
 8000704:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(EN_SUP_5_Port, &GPIO_InitStruct);
 8000706:	1d3b      	adds	r3, r7, #4
 8000708:	4619      	mov	r1, r3
 800070a:	4842      	ldr	r0, [pc, #264]	; (8000814 <board_en_pins_init+0x19c>)
 800070c:	f004 f958 	bl	80049c0 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = EN_POW_BOARD_Pin;
 8000710:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000714:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000716:	2301      	movs	r3, #1
 8000718:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071a:	2300      	movs	r3, #0
 800071c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800071e:	2300      	movs	r3, #0
 8000720:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(EN_POW_BOARD_Port, &GPIO_InitStruct);
 8000722:	1d3b      	adds	r3, r7, #4
 8000724:	4619      	mov	r1, r3
 8000726:	483a      	ldr	r0, [pc, #232]	; (8000810 <board_en_pins_init+0x198>)
 8000728:	f004 f94a 	bl	80049c0 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = SYNTH_POW_Pin;
 800072c:	2380      	movs	r3, #128	; 0x80
 800072e:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000730:	2301      	movs	r3, #1
 8000732:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000734:	2300      	movs	r3, #0
 8000736:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000738:	2300      	movs	r3, #0
 800073a:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(SYNTH_POW_Port, &GPIO_InitStruct);
 800073c:	1d3b      	adds	r3, r7, #4
 800073e:	4619      	mov	r1, r3
 8000740:	4833      	ldr	r0, [pc, #204]	; (8000810 <board_en_pins_init+0x198>)
 8000742:	f004 f93d 	bl	80049c0 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = EN_3V3_POW_Pin;
 8000746:	2302      	movs	r3, #2
 8000748:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800074a:	2301      	movs	r3, #1
 800074c:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074e:	2300      	movs	r3, #0
 8000750:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000752:	2300      	movs	r3, #0
 8000754:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(EN_3V3_POW_Port, &GPIO_InitStruct);
 8000756:	1d3b      	adds	r3, r7, #4
 8000758:	4619      	mov	r1, r3
 800075a:	482c      	ldr	r0, [pc, #176]	; (800080c <board_en_pins_init+0x194>)
 800075c:	f004 f930 	bl	80049c0 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = LO_SW1_Pin;
 8000760:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000764:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000766:	2301      	movs	r3, #1
 8000768:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076a:	2300      	movs	r3, #0
 800076c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800076e:	2300      	movs	r3, #0
 8000770:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(LO_SW1_Port, &GPIO_InitStruct);
 8000772:	1d3b      	adds	r3, r7, #4
 8000774:	4619      	mov	r1, r3
 8000776:	4825      	ldr	r0, [pc, #148]	; (800080c <board_en_pins_init+0x194>)
 8000778:	f004 f922 	bl	80049c0 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = LO_SW2_Pin;
 800077c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000780:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000782:	2301      	movs	r3, #1
 8000784:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000786:	2300      	movs	r3, #0
 8000788:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800078a:	2300      	movs	r3, #0
 800078c:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(LO_SW2_Port, &GPIO_InitStruct);
 800078e:	1d3b      	adds	r3, r7, #4
 8000790:	4619      	mov	r1, r3
 8000792:	481e      	ldr	r0, [pc, #120]	; (800080c <board_en_pins_init+0x194>)
 8000794:	f004 f914 	bl	80049c0 <HAL_GPIO_Init>

	// power board enable pins are active low
	HAL_GPIO_WritePin(EN_SUP_1_Port, EN_SUP_1_Pin, GPIO_PIN_SET);
 8000798:	2201      	movs	r2, #1
 800079a:	2110      	movs	r1, #16
 800079c:	481b      	ldr	r0, [pc, #108]	; (800080c <board_en_pins_init+0x194>)
 800079e:	f004 fabb 	bl	8004d18 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN_SUP_2_Port, EN_SUP_2_Pin, GPIO_PIN_SET);
 80007a2:	2201      	movs	r2, #1
 80007a4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80007a8:	4819      	ldr	r0, [pc, #100]	; (8000810 <board_en_pins_init+0x198>)
 80007aa:	f004 fab5 	bl	8004d18 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN_SUP_3_Port, EN_SUP_3_Pin, GPIO_PIN_SET);
 80007ae:	2201      	movs	r2, #1
 80007b0:	2120      	movs	r1, #32
 80007b2:	4818      	ldr	r0, [pc, #96]	; (8000814 <board_en_pins_init+0x19c>)
 80007b4:	f004 fab0 	bl	8004d18 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN_SUP_4_Port, EN_SUP_4_Pin, GPIO_PIN_SET);
 80007b8:	2201      	movs	r2, #1
 80007ba:	2108      	movs	r1, #8
 80007bc:	4816      	ldr	r0, [pc, #88]	; (8000818 <board_en_pins_init+0x1a0>)
 80007be:	f004 faab 	bl	8004d18 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN_SUP_5_Port, EN_SUP_5_Pin, GPIO_PIN_SET);
 80007c2:	2201      	movs	r2, #1
 80007c4:	2110      	movs	r1, #16
 80007c6:	4813      	ldr	r0, [pc, #76]	; (8000814 <board_en_pins_init+0x19c>)
 80007c8:	f004 faa6 	bl	8004d18 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN_POW_BOARD_Port, EN_POW_BOARD_Pin, GPIO_PIN_RESET); // without this there is no control
 80007cc:	2200      	movs	r2, #0
 80007ce:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007d2:	480f      	ldr	r0, [pc, #60]	; (8000810 <board_en_pins_init+0x198>)
 80007d4:	f004 faa0 	bl	8004d18 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(SYNTH_POW_Port, SYNTH_POW_Pin, GPIO_PIN_RESET);
 80007d8:	2200      	movs	r2, #0
 80007da:	2180      	movs	r1, #128	; 0x80
 80007dc:	480c      	ldr	r0, [pc, #48]	; (8000810 <board_en_pins_init+0x198>)
 80007de:	f004 fa9b 	bl	8004d18 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN_3V3_POW_Port, EN_3V3_POW_Pin, GPIO_PIN_SET);
 80007e2:	2201      	movs	r2, #1
 80007e4:	2102      	movs	r1, #2
 80007e6:	4809      	ldr	r0, [pc, #36]	; (800080c <board_en_pins_init+0x194>)
 80007e8:	f004 fa96 	bl	8004d18 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LO_SW1_Port, LO_SW1_Pin, GPIO_PIN_RESET);
 80007ec:	2200      	movs	r2, #0
 80007ee:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007f2:	4806      	ldr	r0, [pc, #24]	; (800080c <board_en_pins_init+0x194>)
 80007f4:	f004 fa90 	bl	8004d18 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LO_SW2_Port, LO_SW2_Pin, GPIO_PIN_RESET);
 80007f8:	2200      	movs	r2, #0
 80007fa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80007fe:	4803      	ldr	r0, [pc, #12]	; (800080c <board_en_pins_init+0x194>)
 8000800:	f004 fa8a 	bl	8004d18 <HAL_GPIO_WritePin>
}
 8000804:	bf00      	nop
 8000806:	3718      	adds	r7, #24
 8000808:	46bd      	mov	sp, r7
 800080a:	bd80      	pop	{r7, pc}
 800080c:	40020400 	.word	0x40020400
 8000810:	40020800 	.word	0x40020800
 8000814:	40021400 	.word	0x40021400
 8000818:	40020000 	.word	0x40020000

0800081c <board_gpio_init>:

static void board_gpio_init(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b08e      	sub	sp, #56	; 0x38
 8000820:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct =
 8000822:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000826:	2200      	movs	r2, #0
 8000828:	601a      	str	r2, [r3, #0]
 800082a:	605a      	str	r2, [r3, #4]
 800082c:	609a      	str	r2, [r3, #8]
 800082e:	60da      	str	r2, [r3, #12]
 8000830:	611a      	str	r2, [r3, #16]
	{ 0 };

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000832:	2300      	movs	r3, #0
 8000834:	623b      	str	r3, [r7, #32]
 8000836:	4baf      	ldr	r3, [pc, #700]	; (8000af4 <board_gpio_init+0x2d8>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083a:	4aae      	ldr	r2, [pc, #696]	; (8000af4 <board_gpio_init+0x2d8>)
 800083c:	f043 0301 	orr.w	r3, r3, #1
 8000840:	6313      	str	r3, [r2, #48]	; 0x30
 8000842:	4bac      	ldr	r3, [pc, #688]	; (8000af4 <board_gpio_init+0x2d8>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000846:	f003 0301 	and.w	r3, r3, #1
 800084a:	623b      	str	r3, [r7, #32]
 800084c:	6a3b      	ldr	r3, [r7, #32]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800084e:	2300      	movs	r3, #0
 8000850:	61fb      	str	r3, [r7, #28]
 8000852:	4ba8      	ldr	r3, [pc, #672]	; (8000af4 <board_gpio_init+0x2d8>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000856:	4aa7      	ldr	r2, [pc, #668]	; (8000af4 <board_gpio_init+0x2d8>)
 8000858:	f043 0302 	orr.w	r3, r3, #2
 800085c:	6313      	str	r3, [r2, #48]	; 0x30
 800085e:	4ba5      	ldr	r3, [pc, #660]	; (8000af4 <board_gpio_init+0x2d8>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000862:	f003 0302 	and.w	r3, r3, #2
 8000866:	61fb      	str	r3, [r7, #28]
 8000868:	69fb      	ldr	r3, [r7, #28]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800086a:	2300      	movs	r3, #0
 800086c:	61bb      	str	r3, [r7, #24]
 800086e:	4ba1      	ldr	r3, [pc, #644]	; (8000af4 <board_gpio_init+0x2d8>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000872:	4aa0      	ldr	r2, [pc, #640]	; (8000af4 <board_gpio_init+0x2d8>)
 8000874:	f043 0304 	orr.w	r3, r3, #4
 8000878:	6313      	str	r3, [r2, #48]	; 0x30
 800087a:	4b9e      	ldr	r3, [pc, #632]	; (8000af4 <board_gpio_init+0x2d8>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087e:	f003 0304 	and.w	r3, r3, #4
 8000882:	61bb      	str	r3, [r7, #24]
 8000884:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000886:	2300      	movs	r3, #0
 8000888:	617b      	str	r3, [r7, #20]
 800088a:	4b9a      	ldr	r3, [pc, #616]	; (8000af4 <board_gpio_init+0x2d8>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088e:	4a99      	ldr	r2, [pc, #612]	; (8000af4 <board_gpio_init+0x2d8>)
 8000890:	f043 0308 	orr.w	r3, r3, #8
 8000894:	6313      	str	r3, [r2, #48]	; 0x30
 8000896:	4b97      	ldr	r3, [pc, #604]	; (8000af4 <board_gpio_init+0x2d8>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089a:	f003 0308 	and.w	r3, r3, #8
 800089e:	617b      	str	r3, [r7, #20]
 80008a0:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 80008a2:	2300      	movs	r3, #0
 80008a4:	613b      	str	r3, [r7, #16]
 80008a6:	4b93      	ldr	r3, [pc, #588]	; (8000af4 <board_gpio_init+0x2d8>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008aa:	4a92      	ldr	r2, [pc, #584]	; (8000af4 <board_gpio_init+0x2d8>)
 80008ac:	f043 0310 	orr.w	r3, r3, #16
 80008b0:	6313      	str	r3, [r2, #48]	; 0x30
 80008b2:	4b90      	ldr	r3, [pc, #576]	; (8000af4 <board_gpio_init+0x2d8>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b6:	f003 0310 	and.w	r3, r3, #16
 80008ba:	613b      	str	r3, [r7, #16]
 80008bc:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 80008be:	2300      	movs	r3, #0
 80008c0:	60fb      	str	r3, [r7, #12]
 80008c2:	4b8c      	ldr	r3, [pc, #560]	; (8000af4 <board_gpio_init+0x2d8>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c6:	4a8b      	ldr	r2, [pc, #556]	; (8000af4 <board_gpio_init+0x2d8>)
 80008c8:	f043 0320 	orr.w	r3, r3, #32
 80008cc:	6313      	str	r3, [r2, #48]	; 0x30
 80008ce:	4b89      	ldr	r3, [pc, #548]	; (8000af4 <board_gpio_init+0x2d8>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d2:	f003 0320 	and.w	r3, r3, #32
 80008d6:	60fb      	str	r3, [r7, #12]
 80008d8:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 80008da:	2300      	movs	r3, #0
 80008dc:	60bb      	str	r3, [r7, #8]
 80008de:	4b85      	ldr	r3, [pc, #532]	; (8000af4 <board_gpio_init+0x2d8>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e2:	4a84      	ldr	r2, [pc, #528]	; (8000af4 <board_gpio_init+0x2d8>)
 80008e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008e8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ea:	4b82      	ldr	r3, [pc, #520]	; (8000af4 <board_gpio_init+0x2d8>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008f2:	60bb      	str	r3, [r7, #8]
 80008f4:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80008f6:	2300      	movs	r3, #0
 80008f8:	607b      	str	r3, [r7, #4]
 80008fa:	4b7e      	ldr	r3, [pc, #504]	; (8000af4 <board_gpio_init+0x2d8>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fe:	4a7d      	ldr	r2, [pc, #500]	; (8000af4 <board_gpio_init+0x2d8>)
 8000900:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000904:	6313      	str	r3, [r2, #48]	; 0x30
 8000906:	4b7b      	ldr	r3, [pc, #492]	; (8000af4 <board_gpio_init+0x2d8>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800090e:	607b      	str	r3, [r7, #4]
 8000910:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_4 | GPIO_PIN_5, GPIO_PIN_RESET);
 8000912:	2200      	movs	r2, #0
 8000914:	2130      	movs	r1, #48	; 0x30
 8000916:	4878      	ldr	r0, [pc, #480]	; (8000af8 <board_gpio_init+0x2dc>)
 8000918:	f004 f9fe 	bl	8004d18 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(
 800091c:	2200      	movs	r2, #0
 800091e:	f64d 5193 	movw	r1, #56723	; 0xdd93
 8000922:	4876      	ldr	r0, [pc, #472]	; (8000afc <board_gpio_init+0x2e0>)
 8000924:	f004 f9f8 	bl	8004d18 <HAL_GPIO_WritePin>
			GPIO_PIN_1 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | LED_RED_Pin
					| GPIO_PIN_15 | GPIO_PIN_4 | LED_BLUE_Pin | LED_GREEN_Pin
					| GPIO_PIN_8, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin,
 8000928:	2200      	movs	r2, #0
 800092a:	2140      	movs	r1, #64	; 0x40
 800092c:	4874      	ldr	r0, [pc, #464]	; (8000b00 <board_gpio_init+0x2e4>)
 800092e:	f004 f9f3 	bl	8004d18 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(
 8000932:	2200      	movs	r2, #0
 8000934:	f44f 615c 	mov.w	r1, #3520	; 0xdc0
 8000938:	4872      	ldr	r0, [pc, #456]	; (8000b04 <board_gpio_init+0x2e8>)
 800093a:	f004 f9ed 	bl	8004d18 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : PE2 PE3 PE4 PE5
	 PE6 PE7 PE8 PE9
	 PE10 PE11 PE12 PE13
	 PE14 PE15 PE0 PE1 */
	GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5
 800093e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000942:	627b      	str	r3, [r7, #36]	; 0x24
			| GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10
			| GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14
			| GPIO_PIN_15 | GPIO_PIN_0 | GPIO_PIN_1;
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000944:	2303      	movs	r3, #3
 8000946:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000948:	2300      	movs	r3, #0
 800094a:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800094c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000950:	4619      	mov	r1, r3
 8000952:	486d      	ldr	r0, [pc, #436]	; (8000b08 <board_gpio_init+0x2ec>)
 8000954:	f004 f834 	bl	80049c0 <HAL_GPIO_Init>

	/*Configure GPIO pin : USER_Btn_Pin */
	GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000958:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800095c:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800095e:	4b6b      	ldr	r3, [pc, #428]	; (8000b0c <board_gpio_init+0x2f0>)
 8000960:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000962:	2300      	movs	r3, #0
 8000964:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000966:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800096a:	4619      	mov	r1, r3
 800096c:	4865      	ldr	r0, [pc, #404]	; (8000b04 <board_gpio_init+0x2e8>)
 800096e:	f004 f827 	bl	80049c0 <HAL_GPIO_Init>

	/*Configure GPIO pins : PF0 PF1 PF2 PF3
	 PF6 PF7 PF8 PF9
	 PF10 PF11 PF12 PF13
	 PF14 PF15 */
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3
 8000972:	f64f 73cf 	movw	r3, #65487	; 0xffcf
 8000976:	627b      	str	r3, [r7, #36]	; 0x24
			| GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10
			| GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14
			| GPIO_PIN_15;
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000978:	2303      	movs	r3, #3
 800097a:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097c:	2300      	movs	r3, #0
 800097e:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000980:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000984:	4619      	mov	r1, r3
 8000986:	485c      	ldr	r0, [pc, #368]	; (8000af8 <board_gpio_init+0x2dc>)
 8000988:	f004 f81a 	bl	80049c0 <HAL_GPIO_Init>

	/*Configure GPIO pins : PF4 PF5 */
	GPIO_InitStruct.Pin = GPIO_PIN_4 | GPIO_PIN_5;
 800098c:	2330      	movs	r3, #48	; 0x30
 800098e:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000990:	2301      	movs	r3, #1
 8000992:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000994:	2300      	movs	r3, #0
 8000996:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000998:	2300      	movs	r3, #0
 800099a:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800099c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009a0:	4619      	mov	r1, r3
 80009a2:	4855      	ldr	r0, [pc, #340]	; (8000af8 <board_gpio_init+0x2dc>)
 80009a4:	f004 f80c 	bl	80049c0 <HAL_GPIO_Init>

	/*Configure GPIO pins : PC0 PC2 PC3 PC12 */
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_12;
 80009a8:	f241 030d 	movw	r3, #4109	; 0x100d
 80009ac:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009ae:	2303      	movs	r3, #3
 80009b0:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b2:	2300      	movs	r3, #0
 80009b4:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009ba:	4619      	mov	r1, r3
 80009bc:	4851      	ldr	r0, [pc, #324]	; (8000b04 <board_gpio_init+0x2e8>)
 80009be:	f003 ffff 	bl	80049c0 <HAL_GPIO_Init>

	/*Configure GPIO pins : PA0 PA4 PA15 */
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_4 | GPIO_PIN_15;
 80009c2:	f248 0311 	movw	r3, #32785	; 0x8011
 80009c6:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009c8:	2303      	movs	r3, #3
 80009ca:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009cc:	2300      	movs	r3, #0
 80009ce:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009d4:	4619      	mov	r1, r3
 80009d6:	484e      	ldr	r0, [pc, #312]	; (8000b10 <board_gpio_init+0x2f4>)
 80009d8:	f003 fff2 	bl	80049c0 <HAL_GPIO_Init>

	/*Configure GPIO pins : PB0 PB2 */
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_2;
 80009dc:	2305      	movs	r3, #5
 80009de:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009e0:	2303      	movs	r3, #3
 80009e2:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e4:	2300      	movs	r3, #0
 80009e6:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009ec:	4619      	mov	r1, r3
 80009ee:	4843      	ldr	r0, [pc, #268]	; (8000afc <board_gpio_init+0x2e0>)
 80009f0:	f003 ffe6 	bl	80049c0 <HAL_GPIO_Init>

	/*Configure GPIO pins : PB1 PB10 PB11 PB12
	 LD3_Pin PB15 PB4 LED_BLUE_Pin
	 PB8 */
	GPIO_InitStruct.Pin = GPIO_PIN_1 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12
 80009f4:	f64d 5393 	movw	r3, #56723	; 0xdd93
 80009f8:	627b      	str	r3, [r7, #36]	; 0x24
			| LED_RED_Pin | GPIO_PIN_15 | GPIO_PIN_4 | LED_BLUE_Pin
			| LED_GREEN_Pin | GPIO_PIN_8;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009fa:	2301      	movs	r3, #1
 80009fc:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fe:	2300      	movs	r3, #0
 8000a00:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a02:	2300      	movs	r3, #0
 8000a04:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a0a:	4619      	mov	r1, r3
 8000a0c:	483b      	ldr	r0, [pc, #236]	; (8000afc <board_gpio_init+0x2e0>)
 8000a0e:	f003 ffd7 	bl	80049c0 <HAL_GPIO_Init>

	/*Configure GPIO pins : PG0 PG1 PG3 PG4
	 PG5 PG8 PG9 PG10
	 PG12 PG14 PG15 */
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_3 | GPIO_PIN_4
 8000a12:	f24d 733b 	movw	r3, #55099	; 0xd73b
 8000a16:	627b      	str	r3, [r7, #36]	; 0x24
			| GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_12
			| GPIO_PIN_14 | GPIO_PIN_15;
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a18:	2303      	movs	r3, #3
 8000a1a:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a24:	4619      	mov	r1, r3
 8000a26:	4836      	ldr	r0, [pc, #216]	; (8000b00 <board_gpio_init+0x2e4>)
 8000a28:	f003 ffca 	bl	80049c0 <HAL_GPIO_Init>

	/*Configure GPIO pins : PD10 PD11 PD12 PD13
	 PD14 PD15 PD0 PD1
	 PD2 PD3 PD4 PD5
	 PD6 PD7 */
	GPIO_InitStruct.Pin = GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13
 8000a2c:	f64f 43ff 	movw	r3, #64767	; 0xfcff
 8000a30:	627b      	str	r3, [r7, #36]	; 0x24
			| GPIO_PIN_14 | GPIO_PIN_15 | GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2
			| GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a32:	2303      	movs	r3, #3
 8000a34:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a36:	2300      	movs	r3, #0
 8000a38:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a3e:	4619      	mov	r1, r3
 8000a40:	4834      	ldr	r0, [pc, #208]	; (8000b14 <board_gpio_init+0x2f8>)
 8000a42:	f003 ffbd 	bl	80049c0 <HAL_GPIO_Init>

	/*Configure GPIO pin : PG2 */
	GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000a46:	2304      	movs	r3, #4
 8000a48:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a4a:	4b30      	ldr	r3, [pc, #192]	; (8000b0c <board_gpio_init+0x2f0>)
 8000a4c:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a56:	4619      	mov	r1, r3
 8000a58:	4829      	ldr	r0, [pc, #164]	; (8000b00 <board_gpio_init+0x2e4>)
 8000a5a:	f003 ffb1 	bl	80049c0 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_PowerSwitchOn_Pin */
	GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000a5e:	2340      	movs	r3, #64	; 0x40
 8000a60:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a62:	2301      	movs	r3, #1
 8000a64:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a66:	2300      	movs	r3, #0
 8000a68:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000a6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a72:	4619      	mov	r1, r3
 8000a74:	4822      	ldr	r0, [pc, #136]	; (8000b00 <board_gpio_init+0x2e4>)
 8000a76:	f003 ffa3 	bl	80049c0 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_OverCurrent_Pin */
	GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000a7a:	2380      	movs	r3, #128	; 0x80
 8000a7c:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a82:	2300      	movs	r3, #0
 8000a84:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	481c      	ldr	r0, [pc, #112]	; (8000b00 <board_gpio_init+0x2e4>)
 8000a8e:	f003 ff97 	bl	80049c0 <HAL_GPIO_Init>

	/*Configure GPIO pins : PC6 PC7 PC8 LD1_Pin
	 PC10 PC11 */
	GPIO_InitStruct.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_10
 8000a92:	f44f 635c 	mov.w	r3, #3520	; 0xdc0
 8000a96:	627b      	str	r3, [r7, #36]	; 0x24
			| GPIO_PIN_11;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a98:	2301      	movs	r3, #1
 8000a9a:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000aa4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	4816      	ldr	r0, [pc, #88]	; (8000b04 <board_gpio_init+0x2e8>)
 8000aac:	f003 ff88 	bl	80049c0 <HAL_GPIO_Init>

	/*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
	GPIO_InitStruct.Pin = USB_SOF_Pin | USB_ID_Pin | USB_DM_Pin | USB_DP_Pin;
 8000ab0:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000ab4:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab6:	2302      	movs	r3, #2
 8000ab8:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aba:	2300      	movs	r3, #0
 8000abc:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000abe:	2303      	movs	r3, #3
 8000ac0:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000ac2:	230a      	movs	r3, #10
 8000ac4:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ac6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aca:	4619      	mov	r1, r3
 8000acc:	4810      	ldr	r0, [pc, #64]	; (8000b10 <board_gpio_init+0x2f4>)
 8000ace:	f003 ff77 	bl	80049c0 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_VBUS_Pin */
	GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000ad2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ad6:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000adc:	2300      	movs	r3, #0
 8000ade:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000ae0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	480a      	ldr	r0, [pc, #40]	; (8000b10 <board_gpio_init+0x2f4>)
 8000ae8:	f003 ff6a 	bl	80049c0 <HAL_GPIO_Init>

}
 8000aec:	bf00      	nop
 8000aee:	3738      	adds	r7, #56	; 0x38
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	40023800 	.word	0x40023800
 8000af8:	40021400 	.word	0x40021400
 8000afc:	40020400 	.word	0x40020400
 8000b00:	40021800 	.word	0x40021800
 8000b04:	40020800 	.word	0x40020800
 8000b08:	40021000 	.word	0x40021000
 8000b0c:	10110000 	.word	0x10110000
 8000b10:	40020000 	.word	0x40020000
 8000b14:	40020c00 	.word	0x40020c00

08000b18 <board_red_led_toggle>:

void board_red_led_toggle(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_RED_Port, LED_RED_Pin);
 8000b1c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b20:	4802      	ldr	r0, [pc, #8]	; (8000b2c <board_red_led_toggle+0x14>)
 8000b22:	f004 f912 	bl	8004d4a <HAL_GPIO_TogglePin>
	return;
 8000b26:	bf00      	nop
}
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	40020400 	.word	0x40020400

08000b30 <board_green_led_toggle>:
void board_green_led_toggle(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_GREEN_Port, LED_GREEN_Pin);
 8000b34:	2101      	movs	r1, #1
 8000b36:	4802      	ldr	r0, [pc, #8]	; (8000b40 <board_green_led_toggle+0x10>)
 8000b38:	f004 f907 	bl	8004d4a <HAL_GPIO_TogglePin>
	return;
 8000b3c:	bf00      	nop
}
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	40020400 	.word	0x40020400

08000b44 <board_blue_led_toggle>:
void board_blue_led_toggle(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_BLUE_Port, LED_BLUE_Pin);
 8000b48:	2180      	movs	r1, #128	; 0x80
 8000b4a:	4802      	ldr	r0, [pc, #8]	; (8000b54 <board_blue_led_toggle+0x10>)
 8000b4c:	f004 f8fd 	bl	8004d4a <HAL_GPIO_TogglePin>
	return;
 8000b50:	bf00      	nop
}
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	40020400 	.word	0x40020400

08000b58 <board_synth_power_on>:
void board_synth_power_on(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SYNTH_POW_Port, SYNTH_POW_Pin, GPIO_PIN_SET);
 8000b5c:	2201      	movs	r2, #1
 8000b5e:	2180      	movs	r1, #128	; 0x80
 8000b60:	4802      	ldr	r0, [pc, #8]	; (8000b6c <board_synth_power_on+0x14>)
 8000b62:	f004 f8d9 	bl	8004d18 <HAL_GPIO_WritePin>

	return;
 8000b66:	bf00      	nop
}
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	40020800 	.word	0x40020800

08000b70 <board_synth_power_off>:
void board_synth_power_off(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SYNTH_POW_Port, SYNTH_POW_Pin, GPIO_PIN_RESET);
 8000b74:	2200      	movs	r2, #0
 8000b76:	2180      	movs	r1, #128	; 0x80
 8000b78:	4802      	ldr	r0, [pc, #8]	; (8000b84 <board_synth_power_off+0x14>)
 8000b7a:	f004 f8cd 	bl	8004d18 <HAL_GPIO_WritePin>

	return;
 8000b7e:	bf00      	nop
}
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	40020800 	.word	0x40020800

08000b88 <board_3v3_power_on>:
void board_3v3_power_on(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(EN_3V3_POW_Port, EN_3V3_POW_Pin, GPIO_PIN_SET);
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	2102      	movs	r1, #2
 8000b90:	4802      	ldr	r0, [pc, #8]	; (8000b9c <board_3v3_power_on+0x14>)
 8000b92:	f004 f8c1 	bl	8004d18 <HAL_GPIO_WritePin>

	return;
 8000b96:	bf00      	nop
}
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	40020400 	.word	0x40020400

08000ba0 <board_3v3_power_off>:
void board_3v3_power_off(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(EN_3V3_POW_Port, EN_3V3_POW_Pin, GPIO_PIN_RESET);
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	2102      	movs	r1, #2
 8000ba8:	4802      	ldr	r0, [pc, #8]	; (8000bb4 <board_3v3_power_off+0x14>)
 8000baa:	f004 f8b5 	bl	8004d18 <HAL_GPIO_WritePin>

	return;
 8000bae:	bf00      	nop
}
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	40020400 	.word	0x40020400

08000bb8 <board_set_lo_switch>:
void board_set_lo_switch(uint8_t val)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b082      	sub	sp, #8
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	71fb      	strb	r3, [r7, #7]
	switch (val)
 8000bc2:	79fb      	ldrb	r3, [r7, #7]
 8000bc4:	2b02      	cmp	r3, #2
 8000bc6:	d020      	beq.n	8000c0a <board_set_lo_switch+0x52>
 8000bc8:	2b02      	cmp	r3, #2
 8000bca:	dc2c      	bgt.n	8000c26 <board_set_lo_switch+0x6e>
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d002      	beq.n	8000bd6 <board_set_lo_switch+0x1e>
 8000bd0:	2b01      	cmp	r3, #1
 8000bd2:	d00d      	beq.n	8000bf0 <board_set_lo_switch+0x38>
		HAL_GPIO_WritePin(LO_SW1_Port, LO_SW1_Pin, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(LO_SW2_Port, LO_SW2_Pin, GPIO_PIN_SET);
		break;
	}
	}
	return;
 8000bd4:	e027      	b.n	8000c26 <board_set_lo_switch+0x6e>
		HAL_GPIO_WritePin(LO_SW1_Port, LO_SW1_Pin, GPIO_PIN_RESET);
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000bdc:	4814      	ldr	r0, [pc, #80]	; (8000c30 <board_set_lo_switch+0x78>)
 8000bde:	f004 f89b 	bl	8004d18 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LO_SW2_Port, LO_SW2_Pin, GPIO_PIN_RESET);
 8000be2:	2200      	movs	r2, #0
 8000be4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000be8:	4811      	ldr	r0, [pc, #68]	; (8000c30 <board_set_lo_switch+0x78>)
 8000bea:	f004 f895 	bl	8004d18 <HAL_GPIO_WritePin>
		break;
 8000bee:	e019      	b.n	8000c24 <board_set_lo_switch+0x6c>
		HAL_GPIO_WritePin(LO_SW1_Port, LO_SW1_Pin, GPIO_PIN_SET);
 8000bf0:	2201      	movs	r2, #1
 8000bf2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000bf6:	480e      	ldr	r0, [pc, #56]	; (8000c30 <board_set_lo_switch+0x78>)
 8000bf8:	f004 f88e 	bl	8004d18 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LO_SW2_Port, LO_SW2_Pin, GPIO_PIN_RESET);
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c02:	480b      	ldr	r0, [pc, #44]	; (8000c30 <board_set_lo_switch+0x78>)
 8000c04:	f004 f888 	bl	8004d18 <HAL_GPIO_WritePin>
		break;
 8000c08:	e00c      	b.n	8000c24 <board_set_lo_switch+0x6c>
		HAL_GPIO_WritePin(LO_SW1_Port, LO_SW1_Pin, GPIO_PIN_RESET);
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c10:	4807      	ldr	r0, [pc, #28]	; (8000c30 <board_set_lo_switch+0x78>)
 8000c12:	f004 f881 	bl	8004d18 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LO_SW2_Port, LO_SW2_Pin, GPIO_PIN_SET);
 8000c16:	2201      	movs	r2, #1
 8000c18:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c1c:	4804      	ldr	r0, [pc, #16]	; (8000c30 <board_set_lo_switch+0x78>)
 8000c1e:	f004 f87b 	bl	8004d18 <HAL_GPIO_WritePin>
		break;
 8000c22:	bf00      	nop
	return;
 8000c24:	bf00      	nop
 8000c26:	bf00      	nop
}
 8000c28:	3708      	adds	r7, #8
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	40020400 	.word	0x40020400

08000c34 <board_pb_sup1_en>:
void board_pb_sup1_en(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(EN_SUP_1_Port, EN_SUP_1_Pin, GPIO_PIN_RESET);
 8000c38:	2200      	movs	r2, #0
 8000c3a:	2110      	movs	r1, #16
 8000c3c:	4802      	ldr	r0, [pc, #8]	; (8000c48 <board_pb_sup1_en+0x14>)
 8000c3e:	f004 f86b 	bl	8004d18 <HAL_GPIO_WritePin>
	return;
 8000c42:	bf00      	nop
}
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	40020400 	.word	0x40020400

08000c4c <board_pb_sup1_dis>:
void board_pb_sup1_dis(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(EN_SUP_1_Port, EN_SUP_1_Pin, GPIO_PIN_SET);
 8000c50:	2201      	movs	r2, #1
 8000c52:	2110      	movs	r1, #16
 8000c54:	4802      	ldr	r0, [pc, #8]	; (8000c60 <board_pb_sup1_dis+0x14>)
 8000c56:	f004 f85f 	bl	8004d18 <HAL_GPIO_WritePin>
	return;
 8000c5a:	bf00      	nop
}
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	40020400 	.word	0x40020400

08000c64 <board_pb_sup2_en>:
void board_pb_sup2_en(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(EN_SUP_2_Port, EN_SUP_2_Pin, GPIO_PIN_RESET);
 8000c68:	2200      	movs	r2, #0
 8000c6a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c6e:	4802      	ldr	r0, [pc, #8]	; (8000c78 <board_pb_sup2_en+0x14>)
 8000c70:	f004 f852 	bl	8004d18 <HAL_GPIO_WritePin>
	return;
 8000c74:	bf00      	nop
}
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	40020800 	.word	0x40020800

08000c7c <board_pb_sup2_dis>:
void board_pb_sup2_dis(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(EN_SUP_2_Port, EN_SUP_2_Pin, GPIO_PIN_SET);
 8000c80:	2201      	movs	r2, #1
 8000c82:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c86:	4802      	ldr	r0, [pc, #8]	; (8000c90 <board_pb_sup2_dis+0x14>)
 8000c88:	f004 f846 	bl	8004d18 <HAL_GPIO_WritePin>
	return;
 8000c8c:	bf00      	nop
}
 8000c8e:	bd80      	pop	{r7, pc}
 8000c90:	40020800 	.word	0x40020800

08000c94 <board_pb_sup3_en>:
void board_pb_sup3_en(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(EN_SUP_3_Port, EN_SUP_3_Pin, GPIO_PIN_RESET);
 8000c98:	2200      	movs	r2, #0
 8000c9a:	2120      	movs	r1, #32
 8000c9c:	4802      	ldr	r0, [pc, #8]	; (8000ca8 <board_pb_sup3_en+0x14>)
 8000c9e:	f004 f83b 	bl	8004d18 <HAL_GPIO_WritePin>
	return;
 8000ca2:	bf00      	nop
}
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	40021400 	.word	0x40021400

08000cac <board_pb_sup3_dis>:
void board_pb_sup3_dis(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(EN_SUP_3_Port, EN_SUP_3_Pin, GPIO_PIN_SET);
 8000cb0:	2201      	movs	r2, #1
 8000cb2:	2120      	movs	r1, #32
 8000cb4:	4802      	ldr	r0, [pc, #8]	; (8000cc0 <board_pb_sup3_dis+0x14>)
 8000cb6:	f004 f82f 	bl	8004d18 <HAL_GPIO_WritePin>
	return;
 8000cba:	bf00      	nop
}
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	40021400 	.word	0x40021400

08000cc4 <board_pb_sup4_en>:
void board_pb_sup4_en(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(EN_SUP_4_Port, EN_SUP_4_Pin, GPIO_PIN_RESET);
 8000cc8:	2200      	movs	r2, #0
 8000cca:	2108      	movs	r1, #8
 8000ccc:	4802      	ldr	r0, [pc, #8]	; (8000cd8 <board_pb_sup4_en+0x14>)
 8000cce:	f004 f823 	bl	8004d18 <HAL_GPIO_WritePin>
	return;
 8000cd2:	bf00      	nop
}
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	40020000 	.word	0x40020000

08000cdc <board_pb_sup4_dis>:
void board_pb_sup4_dis(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(EN_SUP_4_Port, EN_SUP_4_Pin, GPIO_PIN_SET);
 8000ce0:	2201      	movs	r2, #1
 8000ce2:	2108      	movs	r1, #8
 8000ce4:	4802      	ldr	r0, [pc, #8]	; (8000cf0 <board_pb_sup4_dis+0x14>)
 8000ce6:	f004 f817 	bl	8004d18 <HAL_GPIO_WritePin>
	return;
 8000cea:	bf00      	nop
}
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	40020000 	.word	0x40020000

08000cf4 <board_pb_sup5_en>:
void board_pb_sup5_en(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(EN_SUP_5_Port, EN_SUP_5_Pin, GPIO_PIN_RESET);
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	2110      	movs	r1, #16
 8000cfc:	4802      	ldr	r0, [pc, #8]	; (8000d08 <board_pb_sup5_en+0x14>)
 8000cfe:	f004 f80b 	bl	8004d18 <HAL_GPIO_WritePin>
	return;
 8000d02:	bf00      	nop
}
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	40021400 	.word	0x40021400

08000d0c <board_pb_sup5_dis>:
void board_pb_sup5_dis(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(EN_SUP_5_Port, EN_SUP_5_Pin, GPIO_PIN_SET);
 8000d10:	2201      	movs	r2, #1
 8000d12:	2110      	movs	r1, #16
 8000d14:	4802      	ldr	r0, [pc, #8]	; (8000d20 <board_pb_sup5_dis+0x14>)
 8000d16:	f003 ffff 	bl	8004d18 <HAL_GPIO_WritePin>
	return;
 8000d1a:	bf00      	nop
}
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	40021400 	.word	0x40021400

08000d24 <board_pb_lcl5v_en>:
void board_pb_lcl5v_en(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(EN_POW_BOARD_Port, EN_POW_BOARD_Pin, GPIO_PIN_RESET);
 8000d28:	2200      	movs	r2, #0
 8000d2a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d2e:	4802      	ldr	r0, [pc, #8]	; (8000d38 <board_pb_lcl5v_en+0x14>)
 8000d30:	f003 fff2 	bl	8004d18 <HAL_GPIO_WritePin>
	return;
 8000d34:	bf00      	nop
}
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	40020800 	.word	0x40020800

08000d3c <board_pb_lcl5v_dis>:
void board_pb_lcl5v_dis(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(EN_POW_BOARD_Port, EN_POW_BOARD_Pin, GPIO_PIN_SET);
 8000d40:	2201      	movs	r2, #1
 8000d42:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d46:	4802      	ldr	r0, [pc, #8]	; (8000d50 <board_pb_lcl5v_dis+0x14>)
 8000d48:	f003 ffe6 	bl	8004d18 <HAL_GPIO_WritePin>
	return;
 8000d4c:	bf00      	nop
}
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	40020800 	.word	0x40020800

08000d54 <board_init>:

void board_init(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	af00      	add	r7, sp, #0
	board_gpio_init();
 8000d58:	f7ff fd60 	bl	800081c <board_gpio_init>
	board_en_pins_init();
 8000d5c:	f7ff fc8c 	bl	8000678 <board_en_pins_init>
	board_i2c_init();
 8000d60:	f7ff fc12 	bl	8000588 <board_i2c_init>
	board_spi_init();
 8000d64:	f7ff fc50 	bl	8000608 <board_spi_init>
//	board_uart_init();
//	board_wdog_init();

	g_mutex_i2c_op = xSemaphoreCreateMutex();
 8000d68:	2001      	movs	r0, #1
 8000d6a:	f007 fb6e 	bl	800844a <xQueueCreateMutex>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	4a0e      	ldr	r2, [pc, #56]	; (8000dac <board_init+0x58>)
 8000d72:	6013      	str	r3, [r2, #0]
	if (NULL == g_mutex_i2c_op)
 8000d74:	4b0d      	ldr	r3, [pc, #52]	; (8000dac <board_init+0x58>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d104      	bne.n	8000d86 <board_init+0x32>
	{
		trace_printf("failed to create global mutex for i2c\n");
 8000d7c:	480c      	ldr	r0, [pc, #48]	; (8000db0 <board_init+0x5c>)
 8000d7e:	f01a f9c9 	bl	801b114 <trace_printf>
		Error_Handler();
 8000d82:	f000 f913 	bl	8000fac <Error_Handler>
	}
	g_mutex_spi_op = xSemaphoreCreateMutex();
 8000d86:	2001      	movs	r0, #1
 8000d88:	f007 fb5f 	bl	800844a <xQueueCreateMutex>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	4a09      	ldr	r2, [pc, #36]	; (8000db4 <board_init+0x60>)
 8000d90:	6013      	str	r3, [r2, #0]
	if (NULL == g_mutex_i2c_op)
 8000d92:	4b06      	ldr	r3, [pc, #24]	; (8000dac <board_init+0x58>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d105      	bne.n	8000da6 <board_init+0x52>
	{
		trace_printf("failed to create global mutex for spi\n");
 8000d9a:	4807      	ldr	r0, [pc, #28]	; (8000db8 <board_init+0x64>)
 8000d9c:	f01a f9ba 	bl	801b114 <trace_printf>
		Error_Handler();
 8000da0:	f000 f904 	bl	8000fac <Error_Handler>
	}
	return;
 8000da4:	bf00      	nop
 8000da6:	bf00      	nop
}
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	2000a17c 	.word	0x2000a17c
 8000db0:	0801c600 	.word	0x0801c600
 8000db4:	2000a178 	.word	0x2000a178
 8000db8:	0801c628 	.word	0x0801c628

08000dbc <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	b085      	sub	sp, #20
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	60f8      	str	r0, [r7, #12]
 8000dc4:	60b9      	str	r1, [r7, #8]
 8000dc6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	4a07      	ldr	r2, [pc, #28]	; (8000de8 <vApplicationGetIdleTaskMemory+0x2c>)
 8000dcc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000dce:	68bb      	ldr	r3, [r7, #8]
 8000dd0:	4a06      	ldr	r2, [pc, #24]	; (8000dec <vApplicationGetIdleTaskMemory+0x30>)
 8000dd2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	2280      	movs	r2, #128	; 0x80
 8000dd8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000dda:	bf00      	nop
 8000ddc:	3714      	adds	r7, #20
 8000dde:	46bd      	mov	sp, r7
 8000de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de4:	4770      	bx	lr
 8000de6:	bf00      	nop
 8000de8:	200000a4 	.word	0x200000a4
 8000dec:	200000f8 	.word	0x200000f8

08000df0 <vLEDFlashTask>:
 */

#include "main.h"

static portTASK_FUNCTION( vLEDFlashTask, pvParameters )
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b084      	sub	sp, #16
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]


	/* The parameters are not used. */
	( void ) pvParameters;

	xFlashRate = LED_FLASH_RATE_BASE;
 8000df8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dfc:	60fb      	str	r3, [r7, #12]
	xFlashRate /= portTICK_PERIOD_MS;

	/* We will turn the LED on and off again in the delay period, so each
	delay is only half the total period. */
	xFlashRate /= ( TickType_t ) 2;
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	085b      	lsrs	r3, r3, #1
 8000e02:	60fb      	str	r3, [r7, #12]

	/* We need to initialise xLastFlashTime prior to the first call to
	vTaskDelayUntil(). */
	xLastFlashTime = xTaskGetTickCount();
 8000e04:	f008 fce6 	bl	80097d4 <xTaskGetTickCount>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	60bb      	str	r3, [r7, #8]

	for(;;)
	{

		vTaskDelayUntil( &xLastFlashTime, xFlashRate );
 8000e0c:	f107 0308 	add.w	r3, r7, #8
 8000e10:	68f9      	ldr	r1, [r7, #12]
 8000e12:	4618      	mov	r0, r3
 8000e14:	f008 fb22 	bl	800945c <vTaskDelayUntil>
		//board_red_led_toggle();
		//board_blue_led_toggle();
		board_green_led_toggle();
 8000e18:	f7ff fe8a 	bl	8000b30 <board_green_led_toggle>
		vTaskDelayUntil( &xLastFlashTime, xFlashRate );
 8000e1c:	f107 0308 	add.w	r3, r7, #8
 8000e20:	68f9      	ldr	r1, [r7, #12]
 8000e22:	4618      	mov	r0, r3
 8000e24:	f008 fb1a 	bl	800945c <vTaskDelayUntil>
		//board_red_led_toggle();
		//board_blue_led_toggle();
		board_green_led_toggle();
 8000e28:	f7ff fe82 	bl	8000b30 <board_green_led_toggle>
		vTaskDelayUntil( &xLastFlashTime, xFlashRate );
 8000e2c:	e7ee      	b.n	8000e0c <vLEDFlashTask+0x1c>
	...

08000e30 <vStartLEDFlashTasks>:
	}
} /*lint !e715 !e818 !e830 Function definition must be standard for task creation. */


void vStartLEDFlashTasks( UBaseType_t uxPriority )
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b086      	sub	sp, #24
 8000e34:	af02      	add	r7, sp, #8
 8000e36:	6078      	str	r0, [r7, #4]
	BaseType_t xReturned;

	xReturned = xTaskCreate( vLEDFlashTask, "LEDx", LED_STACK_SIZE, NULL, uxPriority, ( TaskHandle_t * ) NULL );
 8000e38:	2300      	movs	r3, #0
 8000e3a:	9301      	str	r3, [sp, #4]
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	9300      	str	r3, [sp, #0]
 8000e40:	2300      	movs	r3, #0
 8000e42:	2280      	movs	r2, #128	; 0x80
 8000e44:	4907      	ldr	r1, [pc, #28]	; (8000e64 <vStartLEDFlashTasks+0x34>)
 8000e46:	4808      	ldr	r0, [pc, #32]	; (8000e68 <vStartLEDFlashTasks+0x38>)
 8000e48:	f008 f9d1 	bl	80091ee <xTaskCreate>
 8000e4c:	60f8      	str	r0, [r7, #12]
	if( xReturned != pdPASS )
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	2b01      	cmp	r3, #1
 8000e52:	d002      	beq.n	8000e5a <vStartLEDFlashTasks+0x2a>
	{
		/* The task was created.  Use the task's handle to delete the task. */
		trace_printf("failed to create the LED task\n");
 8000e54:	4805      	ldr	r0, [pc, #20]	; (8000e6c <vStartLEDFlashTasks+0x3c>)
 8000e56:	f01a f95d 	bl	801b114 <trace_printf>
	}
}
 8000e5a:	bf00      	nop
 8000e5c:	3710      	adds	r7, #16
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	0801c650 	.word	0x0801c650
 8000e68:	08000df1 	.word	0x08000df1
 8000e6c:	0801c658 	.word	0x0801c658

08000e70 <main>:

/* Private function prototypes -----------------------------------------------*/
static void SystemClock_Config(void);

int main(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	af00      	add	r7, sp, #0
	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000e74:	f002 fab6 	bl	80033e4 <HAL_Init>
	/* Configure the system clock */
	SystemClock_Config();
 8000e78:	f000 f81c 	bl	8000eb4 <SystemClock_Config>
	trace_init();
 8000e7c:	f01a f927 	bl	801b0ce <trace_init>

	/* Initialize all configured peripherals */
	// MX_WWDG_Init();
	board_init();
 8000e80:	f7ff ff68 	bl	8000d54 <board_init>

	MX_LWIP_Init();
 8000e84:	f005 fecc 	bl	8006c20 <MX_LWIP_Init>

	vStartLEDFlashTasks( LED_FLASH_TASK_PRIORITY);
 8000e88:	2000      	movs	r0, #0
 8000e8a:	f7ff ffd1 	bl	8000e30 <vStartLEDFlashTasks>
	vStartMlabHandlerTask( MATLAB_HANLDER_TASK_PRIORITY);
 8000e8e:	2002      	movs	r0, #2
 8000e90:	f000 fc8a 	bl	80017a8 <vStartMlabHandlerTask>
	vStartChipRegTask( CHIP_REG_HANDLER_TASK_PRIORITY);
 8000e94:	2006      	movs	r0, #6
 8000e96:	f001 fa45 	bl	8002324 <vStartChipRegTask>
	vStartSynthTask( SYNTH_TASK_PRIORITY);
 8000e9a:	2003      	movs	r0, #3
 8000e9c:	f002 f972 	bl	8003184 <vStartSynthTask>
	vStartPotTask( POT_TASK_PRIORITY);
 8000ea0:	2003      	movs	r0, #3
 8000ea2:	f000 fdc5 	bl	8001a30 <vStartPotTask>
	vStartSensorTask( SENSOR_TASK_PRIORITY);
 8000ea6:	2001      	movs	r0, #1
 8000ea8:	f001 ff92 	bl	8002dd0 <vStartSensorTask>

	/* Start scheduler */
	osKernelStart();
 8000eac:	f006 fddc 	bl	8007a68 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	while (1)
 8000eb0:	e7fe      	b.n	8000eb0 <main+0x40>
	...

08000eb4 <SystemClock_Config>:
 * @brief System Clock Configuration
 * @retval None
 */

static void SystemClock_Config(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b094      	sub	sp, #80	; 0x50
 8000eb8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct =
 8000eba:	f107 0320 	add.w	r3, r7, #32
 8000ebe:	2230      	movs	r2, #48	; 0x30
 8000ec0:	2100      	movs	r1, #0
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f01a f9a2 	bl	801b20c <memset>
	{ 0 };
	RCC_ClkInitTypeDef RCC_ClkInitStruct =
 8000ec8:	f107 030c 	add.w	r3, r7, #12
 8000ecc:	2200      	movs	r2, #0
 8000ece:	601a      	str	r2, [r3, #0]
 8000ed0:	605a      	str	r2, [r3, #4]
 8000ed2:	609a      	str	r2, [r3, #8]
 8000ed4:	60da      	str	r2, [r3, #12]
 8000ed6:	611a      	str	r2, [r3, #16]
	{ 0 };

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000ed8:	2300      	movs	r3, #0
 8000eda:	60bb      	str	r3, [r7, #8]
 8000edc:	4b28      	ldr	r3, [pc, #160]	; (8000f80 <SystemClock_Config+0xcc>)
 8000ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ee0:	4a27      	ldr	r2, [pc, #156]	; (8000f80 <SystemClock_Config+0xcc>)
 8000ee2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ee6:	6413      	str	r3, [r2, #64]	; 0x40
 8000ee8:	4b25      	ldr	r3, [pc, #148]	; (8000f80 <SystemClock_Config+0xcc>)
 8000eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ef0:	60bb      	str	r3, [r7, #8]
 8000ef2:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	607b      	str	r3, [r7, #4]
 8000ef8:	4b22      	ldr	r3, [pc, #136]	; (8000f84 <SystemClock_Config+0xd0>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	4a21      	ldr	r2, [pc, #132]	; (8000f84 <SystemClock_Config+0xd0>)
 8000efe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000f02:	6013      	str	r3, [r2, #0]
 8000f04:	4b1f      	ldr	r3, [pc, #124]	; (8000f84 <SystemClock_Config+0xd0>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f0c:	607b      	str	r3, [r7, #4]
 8000f0e:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f10:	2301      	movs	r3, #1
 8000f12:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000f14:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000f18:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f1a:	2302      	movs	r3, #2
 8000f1c:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f1e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000f22:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 4;
 8000f24:	2304      	movs	r3, #4
 8000f26:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 168;
 8000f28:	23a8      	movs	r3, #168	; 0xa8
 8000f2a:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f2c:	2302      	movs	r3, #2
 8000f2e:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8000f30:	2307      	movs	r3, #7
 8000f32:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f34:	f107 0320 	add.w	r3, r7, #32
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f004 ff31 	bl	8005da0 <HAL_RCC_OscConfig>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d001      	beq.n	8000f48 <SystemClock_Config+0x94>
	{
		Error_Handler();
 8000f44:	f000 f832 	bl	8000fac <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000f48:	230f      	movs	r3, #15
 8000f4a:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f4c:	2302      	movs	r3, #2
 8000f4e:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f50:	2300      	movs	r3, #0
 8000f52:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000f54:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000f58:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000f5a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f5e:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000f60:	f107 030c 	add.w	r3, r7, #12
 8000f64:	2105      	movs	r1, #5
 8000f66:	4618      	mov	r0, r3
 8000f68:	f005 f98a 	bl	8006280 <HAL_RCC_ClockConfig>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d001      	beq.n	8000f76 <SystemClock_Config+0xc2>
	{
		Error_Handler();
 8000f72:	f000 f81b 	bl	8000fac <Error_Handler>
	}
}
 8000f76:	bf00      	nop
 8000f78:	3750      	adds	r7, #80	; 0x50
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	40023800 	.word	0x40023800
 8000f84:	40007000 	.word	0x40007000

08000f88 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM1)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	4a04      	ldr	r2, [pc, #16]	; (8000fa8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000f96:	4293      	cmp	r3, r2
 8000f98:	d101      	bne.n	8000f9e <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		HAL_IncTick();
 8000f9a:	f002 fa45 	bl	8003428 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8000f9e:	bf00      	nop
 8000fa0:	3708      	adds	r7, #8
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	40010000 	.word	0x40010000

08000fac <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fb0:	b672      	cpsid	i
}
 8000fb2:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	trace_printf("Error: halting");
 8000fb4:	4801      	ldr	r0, [pc, #4]	; (8000fbc <Error_Handler+0x10>)
 8000fb6:	f01a f8ad 	bl	801b114 <trace_printf>
	while (1)
 8000fba:	e7fe      	b.n	8000fba <Error_Handler+0xe>
 8000fbc:	0801c678 	.word	0x0801c678

08000fc0 <handle_command>:

static TaskHandle_t g_handle_mlab_task;
static sensor_data_t *sensor_queue_ptr;

static uint16_t handle_command(mlab_data_t *raw_data_p)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b096      	sub	sp, #88	; 0x58
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
	uint16_t data_to_return = 0;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

	switch (raw_data_p->command_code)
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	795b      	ldrb	r3, [r3, #5]
 8000fd2:	3b01      	subs	r3, #1
 8000fd4:	2b0f      	cmp	r3, #15
 8000fd6:	f200 81ab 	bhi.w	8001330 <handle_command+0x370>
 8000fda:	a201      	add	r2, pc, #4	; (adr r2, 8000fe0 <handle_command+0x20>)
 8000fdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fe0:	08001021 	.word	0x08001021
 8000fe4:	08001099 	.word	0x08001099
 8000fe8:	0800114b 	.word	0x0800114b
 8000fec:	080010f5 	.word	0x080010f5
 8000ff0:	080011a1 	.word	0x080011a1
 8000ff4:	080011cd 	.word	0x080011cd
 8000ff8:	080011f9 	.word	0x080011f9
 8000ffc:	08001331 	.word	0x08001331
 8001000:	08001225 	.word	0x08001225
 8001004:	08001245 	.word	0x08001245
 8001008:	0800124d 	.word	0x0800124d
 800100c:	08001311 	.word	0x08001311
 8001010:	08001331 	.word	0x08001331
 8001014:	0800126d 	.word	0x0800126d
 8001018:	0800126d 	.word	0x0800126d
 800101c:	080012d7 	.word	0x080012d7
		uint8_t i, num_chunks; //number of chunks of sub data
		reg_t *local_reg_ptr;

		pc_queue_data_t queue_post;

		trace_printf("command: set_reg \n");
 8001020:	48c6      	ldr	r0, [pc, #792]	; (800133c <handle_command+0x37c>)
 8001022:	f01a f877 	bl	801b114 <trace_printf>

		ic_id = raw_data_p->ic_id;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	791b      	ldrb	r3, [r3, #4]
 800102a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		num_chunks = raw_data_p->num_chunks;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	799b      	ldrb	r3, [r3, #6]
 8001032:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		for (i = 0; i < num_chunks; i++)
 8001036:	2300      	movs	r3, #0
 8001038:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
 800103c:	e025      	b.n	800108a <handle_command+0xca>
		{
			//&raw_data_p->data[0] is a pointer to void and is of size 4, so adding 2 will increment it by8
			local_reg_ptr = (reg_t*) ((uint8_t*) (&raw_data_p->data[0])
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	1dd9      	adds	r1, r3, #7
					+ i * sizeof(reg_t));
 8001042:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 8001046:	4613      	mov	r3, r2
 8001048:	005b      	lsls	r3, r3, #1
 800104a:	4413      	add	r3, r2
 800104c:	009b      	lsls	r3, r3, #2
			local_reg_ptr = (reg_t*) ((uint8_t*) (&raw_data_p->data[0])
 800104e:	440b      	add	r3, r1
 8001050:	61fb      	str	r3, [r7, #28]
			pc_set_curr_value(ic_id, local_reg_ptr);
 8001052:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001056:	69f9      	ldr	r1, [r7, #28]
 8001058:	4618      	mov	r0, r3
 800105a:	f000 fd75 	bl	8001b48 <pc_set_curr_value>

			queue_post.command_code = G_UC_SET_REG_CONFIG;
 800105e:	2301      	movs	r3, #1
 8001060:	763b      	strb	r3, [r7, #24]
			queue_post.ic_id = ic_id;
 8001062:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001066:	76bb      	strb	r3, [r7, #26]
			queue_post.reg_id = local_reg_ptr->reg_id;
 8001068:	69fb      	ldr	r3, [r7, #28]
 800106a:	781b      	ldrb	r3, [r3, #0]
 800106c:	767b      	strb	r3, [r7, #25]

			xQueueSendToBack(g_pc_queue_handle, &queue_post, portMAX_DELAY);
 800106e:	4bb4      	ldr	r3, [pc, #720]	; (8001340 <handle_command+0x380>)
 8001070:	6818      	ldr	r0, [r3, #0]
 8001072:	f107 0118 	add.w	r1, r7, #24
 8001076:	2300      	movs	r3, #0
 8001078:	f04f 32ff 	mov.w	r2, #4294967295
 800107c:	f007 fa18 	bl	80084b0 <xQueueGenericSend>
		for (i = 0; i < num_chunks; i++)
 8001080:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8001084:	3301      	adds	r3, #1
 8001086:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
 800108a:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 800108e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001092:	429a      	cmp	r2, r3
 8001094:	d3d3      	bcc.n	800103e <handle_command+0x7e>
		}
		break;
 8001096:	e14b      	b.n	8001330 <handle_command+0x370>
	{
		uint8_t ic_id;
		uint8_t i, num_chunks; //number of chunks of sub data
		reg_t *local_reg_ptr;

		trace_printf("command: save_def, num_chunks:%d \n", num_chunks);
 8001098:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800109c:	4619      	mov	r1, r3
 800109e:	48a9      	ldr	r0, [pc, #676]	; (8001344 <handle_command+0x384>)
 80010a0:	f01a f838 	bl	801b114 <trace_printf>

		ic_id = raw_data_p->ic_id;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	791b      	ldrb	r3, [r3, #4]
 80010a8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
		num_chunks = raw_data_p->num_chunks;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	799b      	ldrb	r3, [r3, #6]
 80010b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
		for (i = 0; i < num_chunks; i++)
 80010b4:	2300      	movs	r3, #0
 80010b6:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
 80010ba:	e014      	b.n	80010e6 <handle_command+0x126>
		{
			local_reg_ptr = (reg_t*) ((uint8_t*) (&raw_data_p->data[0])
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	1dd9      	adds	r1, r3, #7
					+ i * sizeof(reg_t));
 80010c0:	f897 2054 	ldrb.w	r2, [r7, #84]	; 0x54
 80010c4:	4613      	mov	r3, r2
 80010c6:	005b      	lsls	r3, r3, #1
 80010c8:	4413      	add	r3, r2
 80010ca:	009b      	lsls	r3, r3, #2
			local_reg_ptr = (reg_t*) ((uint8_t*) (&raw_data_p->data[0])
 80010cc:	440b      	add	r3, r1
 80010ce:	627b      	str	r3, [r7, #36]	; 0x24
			pc_save_default_value(ic_id, local_reg_ptr);
 80010d0:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80010d4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80010d6:	4618      	mov	r0, r3
 80010d8:	f000 fd92 	bl	8001c00 <pc_save_default_value>
		for (i = 0; i < num_chunks; i++)
 80010dc:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 80010e0:	3301      	adds	r3, #1
 80010e2:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
 80010e6:	f897 2054 	ldrb.w	r2, [r7, #84]	; 0x54
 80010ea:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80010ee:	429a      	cmp	r2, r3
 80010f0:	d3e4      	bcc.n	80010bc <handle_command+0xfc>
		}
		break;
 80010f2:	e11d      	b.n	8001330 <handle_command+0x370>
	{
		uint8_t ic_id;
		uint8_t i, num_chunks; //number of chunks of sub data
		reg_t *local_reg_ptr;

		trace_printf("command: save_mini \n");
 80010f4:	4894      	ldr	r0, [pc, #592]	; (8001348 <handle_command+0x388>)
 80010f6:	f01a f80d 	bl	801b114 <trace_printf>

		ic_id = raw_data_p->ic_id;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	791b      	ldrb	r3, [r3, #4]
 80010fe:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
		num_chunks = raw_data_p->num_chunks;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	799b      	ldrb	r3, [r3, #6]
 8001106:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		for (i = 0; i < num_chunks; i++)
 800110a:	2300      	movs	r3, #0
 800110c:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
 8001110:	e014      	b.n	800113c <handle_command+0x17c>
		{
			local_reg_ptr = (reg_t*) ((uint8_t*) (&raw_data_p->data[0])
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	1dd9      	adds	r1, r3, #7
					+ i * sizeof(reg_t));
 8001116:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
 800111a:	4613      	mov	r3, r2
 800111c:	005b      	lsls	r3, r3, #1
 800111e:	4413      	add	r3, r2
 8001120:	009b      	lsls	r3, r3, #2
			local_reg_ptr = (reg_t*) ((uint8_t*) (&raw_data_p->data[0])
 8001122:	440b      	add	r3, r1
 8001124:	637b      	str	r3, [r7, #52]	; 0x34
			pc_save_mini_value(ic_id, local_reg_ptr);
 8001126:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800112a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800112c:	4618      	mov	r0, r3
 800112e:	f000 fdc9 	bl	8001cc4 <pc_save_mini_value>
		for (i = 0; i < num_chunks; i++)
 8001132:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8001136:	3301      	adds	r3, #1
 8001138:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
 800113c:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
 8001140:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001144:	429a      	cmp	r2, r3
 8001146:	d3e4      	bcc.n	8001112 <handle_command+0x152>
		}
		break;
 8001148:	e0f2      	b.n	8001330 <handle_command+0x370>
	{
		uint8_t ic_id;
		uint8_t i, num_chunks; //number of chunks of sub data
		reg_t *local_reg_ptr;

		trace_printf("command: save_maxi \n");
 800114a:	4880      	ldr	r0, [pc, #512]	; (800134c <handle_command+0x38c>)
 800114c:	f019 ffe2 	bl	801b114 <trace_printf>

		ic_id = raw_data_p->ic_id;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	791b      	ldrb	r3, [r3, #4]
 8001154:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		num_chunks = raw_data_p->num_chunks;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	799b      	ldrb	r3, [r3, #6]
 800115c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
		for (i = 0; i < num_chunks; i++)
 8001160:	2300      	movs	r3, #0
 8001162:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
 8001166:	e014      	b.n	8001192 <handle_command+0x1d2>
		{
			local_reg_ptr = (reg_t*) ((uint8_t*) (&raw_data_p->data[0])
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	1dd9      	adds	r1, r3, #7
					+ i * sizeof(reg_t));
 800116c:	f897 2052 	ldrb.w	r2, [r7, #82]	; 0x52
 8001170:	4613      	mov	r3, r2
 8001172:	005b      	lsls	r3, r3, #1
 8001174:	4413      	add	r3, r2
 8001176:	009b      	lsls	r3, r3, #2
			local_reg_ptr = (reg_t*) ((uint8_t*) (&raw_data_p->data[0])
 8001178:	440b      	add	r3, r1
 800117a:	62fb      	str	r3, [r7, #44]	; 0x2c
			pc_save_maxi_value(ic_id, local_reg_ptr);
 800117c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001180:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001182:	4618      	mov	r0, r3
 8001184:	f000 fe00 	bl	8001d88 <pc_save_maxi_value>
		for (i = 0; i < num_chunks; i++)
 8001188:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 800118c:	3301      	adds	r3, #1
 800118e:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
 8001192:	f897 2052 	ldrb.w	r2, [r7, #82]	; 0x52
 8001196:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800119a:	429a      	cmp	r2, r3
 800119c:	d3e4      	bcc.n	8001168 <handle_command+0x1a8>
		}
		break;
 800119e:	e0c7      	b.n	8001330 <handle_command+0x370>
	case G_UC_APPLY_DEF_REG_CONFIG:
	{
		uint8_t ic_id;
		pc_queue_data_t queue_post;

		trace_printf("command: apply_def \n");
 80011a0:	486b      	ldr	r0, [pc, #428]	; (8001350 <handle_command+0x390>)
 80011a2:	f019 ffb7 	bl	801b114 <trace_printf>

		ic_id = raw_data_p->ic_id;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	791b      	ldrb	r3, [r3, #4]
 80011aa:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
		queue_post.command_code = G_UC_APPLY_DEF_REG_CONFIG;
 80011ae:	2305      	movs	r3, #5
 80011b0:	753b      	strb	r3, [r7, #20]
		queue_post.ic_id = ic_id;
 80011b2:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80011b6:	75bb      	strb	r3, [r7, #22]
//			queue_post.reg_id = local_reg_ptr->reg_id;

		xQueueSendToBack(g_pc_queue_handle, &queue_post, portMAX_DELAY);
 80011b8:	4b61      	ldr	r3, [pc, #388]	; (8001340 <handle_command+0x380>)
 80011ba:	6818      	ldr	r0, [r3, #0]
 80011bc:	f107 0114 	add.w	r1, r7, #20
 80011c0:	2300      	movs	r3, #0
 80011c2:	f04f 32ff 	mov.w	r2, #4294967295
 80011c6:	f007 f973 	bl	80084b0 <xQueueGenericSend>
		break;
 80011ca:	e0b1      	b.n	8001330 <handle_command+0x370>
	case G_UC_APPLY_MAXI_REG_CONFIG:
	{
		uint8_t ic_id;
		pc_queue_data_t queue_post;

		trace_printf("command: apply_maxi \n");
 80011cc:	4861      	ldr	r0, [pc, #388]	; (8001354 <handle_command+0x394>)
 80011ce:	f019 ffa1 	bl	801b114 <trace_printf>

		ic_id = raw_data_p->ic_id;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	791b      	ldrb	r3, [r3, #4]
 80011d6:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
		queue_post.command_code = G_UC_APPLY_MAXI_REG_CONFIG;
 80011da:	2306      	movs	r3, #6
 80011dc:	743b      	strb	r3, [r7, #16]
		queue_post.ic_id = ic_id;
 80011de:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80011e2:	74bb      	strb	r3, [r7, #18]
//			queue_post.reg_id = local_reg_ptr->reg_id;

		xQueueSendToBack(g_pc_queue_handle, &queue_post, portMAX_DELAY);
 80011e4:	4b56      	ldr	r3, [pc, #344]	; (8001340 <handle_command+0x380>)
 80011e6:	6818      	ldr	r0, [r3, #0]
 80011e8:	f107 0110 	add.w	r1, r7, #16
 80011ec:	2300      	movs	r3, #0
 80011ee:	f04f 32ff 	mov.w	r2, #4294967295
 80011f2:	f007 f95d 	bl	80084b0 <xQueueGenericSend>
		break;
 80011f6:	e09b      	b.n	8001330 <handle_command+0x370>
	case G_UC_APPLY_MINI_REG_CONFIG:
	{
		uint8_t ic_id;
		pc_queue_data_t queue_post;

		trace_printf("command: apply_def \n");
 80011f8:	4855      	ldr	r0, [pc, #340]	; (8001350 <handle_command+0x390>)
 80011fa:	f019 ff8b 	bl	801b114 <trace_printf>

		ic_id = raw_data_p->ic_id;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	791b      	ldrb	r3, [r3, #4]
 8001202:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		queue_post.command_code = G_UC_APPLY_MINI_REG_CONFIG;
 8001206:	2307      	movs	r3, #7
 8001208:	733b      	strb	r3, [r7, #12]
		queue_post.ic_id = ic_id;
 800120a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800120e:	73bb      	strb	r3, [r7, #14]
//			queue_post.reg_id = local_reg_ptr->reg_id;

		xQueueSendToBack(g_pc_queue_handle, &queue_post, portMAX_DELAY);
 8001210:	4b4b      	ldr	r3, [pc, #300]	; (8001340 <handle_command+0x380>)
 8001212:	6818      	ldr	r0, [r3, #0]
 8001214:	f107 010c 	add.w	r1, r7, #12
 8001218:	2300      	movs	r3, #0
 800121a:	f04f 32ff 	mov.w	r2, #4294967295
 800121e:	f007 f947 	bl	80084b0 <xQueueGenericSend>
		break;
 8001222:	e085      	b.n	8001330 <handle_command+0x370>

	case G_UC_SYNTH_POWER:
	{
		uint32_t val;

		trace_printf("command: synth_power \n");
 8001224:	484c      	ldr	r0, [pc, #304]	; (8001358 <handle_command+0x398>)
 8001226:	f019 ff75 	bl	801b114 <trace_printf>
		val = (uint32_t) (raw_data_p->data[0]); // make power value out of pointer
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	f8d3 3007 	ldr.w	r3, [r3, #7]
 8001230:	643b      	str	r3, [r7, #64]	; 0x40
		if (val)
 8001232:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001234:	2b00      	cmp	r3, #0
 8001236:	d002      	beq.n	800123e <handle_command+0x27e>
			board_synth_power_on();
 8001238:	f7ff fc8e 	bl	8000b58 <board_synth_power_on>
		else
			board_synth_power_off();

		break;
 800123c:	e078      	b.n	8001330 <handle_command+0x370>
			board_synth_power_off();
 800123e:	f7ff fc97 	bl	8000b70 <board_synth_power_off>
		break;
 8001242:	e075      	b.n	8001330 <handle_command+0x370>
	}

	case G_UC_SYNTH_CONFIG:
	{
		trace_printf("command: synth_config \n");
 8001244:	4845      	ldr	r0, [pc, #276]	; (800135c <handle_command+0x39c>)
 8001246:	f019 ff65 	bl	801b114 <trace_printf>

		break;
 800124a:	e071      	b.n	8001330 <handle_command+0x370>

	case G_UC_3V3_POWER:
	{
		uint32_t val;

		trace_printf("command: 3V3_power \n");
 800124c:	4844      	ldr	r0, [pc, #272]	; (8001360 <handle_command+0x3a0>)
 800124e:	f019 ff61 	bl	801b114 <trace_printf>
		val = (uint32_t) (raw_data_p->data[0]); // make power value out of pointer
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	f8d3 3007 	ldr.w	r3, [r3, #7]
 8001258:	647b      	str	r3, [r7, #68]	; 0x44
		if (val)
 800125a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800125c:	2b00      	cmp	r3, #0
 800125e:	d002      	beq.n	8001266 <handle_command+0x2a6>
			board_3v3_power_on();
 8001260:	f7ff fc92 	bl	8000b88 <board_3v3_power_on>
		else
			board_3v3_power_off();

		break;
 8001264:	e064      	b.n	8001330 <handle_command+0x370>
			board_3v3_power_off();
 8001266:	f7ff fc9b 	bl	8000ba0 <board_3v3_power_off>
		break;
 800126a:	e061      	b.n	8001330 <handle_command+0x370>
	case G_UC_PB_SUP_VAL:
	{
		pot_data_t *local_reg_ptr;
		uint8_t i, num_chunks; //number of chunks of sub data

		trace_printf("command: power_board_supply \n");
 800126c:	483d      	ldr	r0, [pc, #244]	; (8001364 <handle_command+0x3a4>)
 800126e:	f019 ff51 	bl	801b114 <trace_printf>

		pot_queue_data_t queue_post;
		num_chunks = raw_data_p->num_chunks;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	799b      	ldrb	r3, [r3, #6]
 8001276:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
		for (i = 0; i < num_chunks; i++)
 800127a:	2300      	movs	r3, #0
 800127c:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
 8001280:	e022      	b.n	80012c8 <handle_command+0x308>
		{
			local_reg_ptr = (pot_data_t*) ((uint8_t*) (&raw_data_p->data[0])
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	1dd9      	adds	r1, r3, #7
					+ i * sizeof(pot_data_t));
 8001286:	f897 2051 	ldrb.w	r2, [r7, #81]	; 0x51
 800128a:	4613      	mov	r3, r2
 800128c:	005b      	lsls	r3, r3, #1
 800128e:	4413      	add	r3, r2
			local_reg_ptr = (pot_data_t*) ((uint8_t*) (&raw_data_p->data[0])
 8001290:	440b      	add	r3, r1
 8001292:	64fb      	str	r3, [r7, #76]	; 0x4c

			queue_post.command_code = raw_data_p->command_code;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	795b      	ldrb	r3, [r3, #5]
 8001298:	723b      	strb	r3, [r7, #8]
			queue_post.pot_data.sup_id = local_reg_ptr->sup_id;
 800129a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800129c:	781b      	ldrb	r3, [r3, #0]
 800129e:	727b      	strb	r3, [r7, #9]
			queue_post.pot_data.sup_status = local_reg_ptr->sup_status;
 80012a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80012a2:	785b      	ldrb	r3, [r3, #1]
 80012a4:	72bb      	strb	r3, [r7, #10]
			queue_post.pot_data.pot_val = local_reg_ptr->pot_val;
 80012a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80012a8:	789b      	ldrb	r3, [r3, #2]
 80012aa:	72fb      	strb	r3, [r7, #11]

			xQueueSendToBack(g_pot_queue_handle, &queue_post, portMAX_DELAY);
 80012ac:	4b2e      	ldr	r3, [pc, #184]	; (8001368 <handle_command+0x3a8>)
 80012ae:	6818      	ldr	r0, [r3, #0]
 80012b0:	f107 0108 	add.w	r1, r7, #8
 80012b4:	2300      	movs	r3, #0
 80012b6:	f04f 32ff 	mov.w	r2, #4294967295
 80012ba:	f007 f8f9 	bl	80084b0 <xQueueGenericSend>
		for (i = 0; i < num_chunks; i++)
 80012be:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 80012c2:	3301      	adds	r3, #1
 80012c4:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
 80012c8:	f897 2051 	ldrb.w	r2, [r7, #81]	; 0x51
 80012cc:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 80012d0:	429a      	cmp	r2, r3
 80012d2:	d3d6      	bcc.n	8001282 <handle_command+0x2c2>
		}
		break;
 80012d4:	e02c      	b.n	8001330 <handle_command+0x370>
	}

	case G_UC_PB_SENSORS:
	{
		trace_printf("command: get pb sensors\n");
 80012d6:	4825      	ldr	r0, [pc, #148]	; (800136c <handle_command+0x3ac>)
 80012d8:	f019 ff1c 	bl	801b114 <trace_printf>
		xTaskNotifyGive(g_handle_sensor_task);
 80012dc:	4b24      	ldr	r3, [pc, #144]	; (8001370 <handle_command+0x3b0>)
 80012de:	6818      	ldr	r0, [r3, #0]
 80012e0:	2300      	movs	r3, #0
 80012e2:	2202      	movs	r2, #2
 80012e4:	2100      	movs	r1, #0
 80012e6:	f008 ffa5 	bl	800a234 <xTaskGenericNotify>

		if (xQueueReceive(g_sensor_queue_handle, &sensor_queue_ptr,
 80012ea:	4b22      	ldr	r3, [pc, #136]	; (8001374 <handle_command+0x3b4>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80012f2:	4921      	ldr	r1, [pc, #132]	; (8001378 <handle_command+0x3b8>)
 80012f4:	4618      	mov	r0, r3
 80012f6:	f007 faff 	bl	80088f8 <xQueueReceive>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b01      	cmp	r3, #1
 80012fe:	d103      	bne.n	8001308 <handle_command+0x348>
				(300 / portTICK_PERIOD_MS)) == pdPASS)
		{
			data_to_return = sizeof(sensor_data_t);
 8001300:	2328      	movs	r3, #40	; 0x28
 8001302:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
		}
		else
			data_to_return = 0;

		break;
 8001306:	e013      	b.n	8001330 <handle_command+0x370>
			data_to_return = 0;
 8001308:	2300      	movs	r3, #0
 800130a:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
		break;
 800130e:	e00f      	b.n	8001330 <handle_command+0x370>

	case G_UC_LO_SWITCH:
	{
		uint32_t val;

		trace_printf("command: set LO switch \n");
 8001310:	481a      	ldr	r0, [pc, #104]	; (800137c <handle_command+0x3bc>)
 8001312:	f019 feff 	bl	801b114 <trace_printf>
		val = (uint32_t) (raw_data_p->data[0]); // make LO switch value out of pointer
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	f8d3 3007 	ldr.w	r3, [r3, #7]
 800131c:	64bb      	str	r3, [r7, #72]	; 0x48
		board_set_lo_switch((val & 0x3)); // only 2 bits are used
 800131e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001320:	b2db      	uxtb	r3, r3
 8001322:	f003 0303 	and.w	r3, r3, #3
 8001326:	b2db      	uxtb	r3, r3
 8001328:	4618      	mov	r0, r3
 800132a:	f7ff fc45 	bl	8000bb8 <board_set_lo_switch>

		break;
 800132e:	bf00      	nop
	}

	}

	return data_to_return;
 8001330:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
}
 8001334:	4618      	mov	r0, r3
 8001336:	3758      	adds	r7, #88	; 0x58
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}
 800133c:	0801c688 	.word	0x0801c688
 8001340:	2000a218 	.word	0x2000a218
 8001344:	0801c69c 	.word	0x0801c69c
 8001348:	0801c6c0 	.word	0x0801c6c0
 800134c:	0801c6d8 	.word	0x0801c6d8
 8001350:	0801c6f0 	.word	0x0801c6f0
 8001354:	0801c708 	.word	0x0801c708
 8001358:	0801c720 	.word	0x0801c720
 800135c:	0801c738 	.word	0x0801c738
 8001360:	0801c750 	.word	0x0801c750
 8001364:	0801c768 	.word	0x0801c768
 8001368:	2000a21c 	.word	0x2000a21c
 800136c:	0801c788 	.word	0x0801c788
 8001370:	2000a24c 	.word	0x2000a24c
 8001374:	2000a248 	.word	0x2000a248
 8001378:	20000afc 	.word	0x20000afc
 800137c:	0801c7a4 	.word	0x0801c7a4

08001380 <sanity_check>:
static uint8_t sanity_check(mlab_data_t *raw_data_p)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b08a      	sub	sp, #40	; 0x28
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
	uint8_t sane = 0;
 8001388:	2300      	movs	r3, #0
 800138a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

	if ((raw_data_p->command_code <= G_UC_MIN_COMMAND_CODE)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	795b      	ldrb	r3, [r3, #5]
 8001392:	2b00      	cmp	r3, #0
 8001394:	d003      	beq.n	800139e <sanity_check+0x1e>
			|| (raw_data_p->command_code >= G_UC_MAX_COMMAND_CODE))
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	795b      	ldrb	r3, [r3, #5]
 800139a:	2b13      	cmp	r3, #19
 800139c:	d90b      	bls.n	80013b6 <sanity_check+0x36>
	{
		trace_printf("invalid command code : %d\n", raw_data_p->command_code);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	795b      	ldrb	r3, [r3, #5]
 80013a2:	4619      	mov	r1, r3
 80013a4:	486a      	ldr	r0, [pc, #424]	; (8001550 <sanity_check+0x1d0>)
 80013a6:	f019 feb5 	bl	801b114 <trace_printf>
		sane = 0;
 80013aa:	2300      	movs	r3, #0
 80013ac:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		return sane;
 80013b0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80013b4:	e0c7      	b.n	8001546 <sanity_check+0x1c6>
	}

	if ((raw_data_p->ic_id == 0) || (raw_data_p->ic_id > G_MAX_ICS_PER_UC))
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	791b      	ldrb	r3, [r3, #4]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d003      	beq.n	80013c6 <sanity_check+0x46>
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	791b      	ldrb	r3, [r3, #4]
 80013c2:	2b02      	cmp	r3, #2
 80013c4:	d908      	bls.n	80013d8 <sanity_check+0x58>
	{
		trace_printf("invalid ic_id\n");
 80013c6:	4863      	ldr	r0, [pc, #396]	; (8001554 <sanity_check+0x1d4>)
 80013c8:	f019 fea4 	bl	801b114 <trace_printf>
		sane = 0;
 80013cc:	2300      	movs	r3, #0
 80013ce:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		return sane;
 80013d2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80013d6:	e0b6      	b.n	8001546 <sanity_check+0x1c6>
	}

	if ((raw_data_p->num_chunks > G_MAX_NUM_REGS)) //num_chunks is 0 for apply_preset_config
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	799b      	ldrb	r3, [r3, #6]
 80013dc:	2b3f      	cmp	r3, #63	; 0x3f
 80013de:	d908      	bls.n	80013f2 <sanity_check+0x72>
	{
		trace_printf("invalid num_chunks\n");
 80013e0:	485d      	ldr	r0, [pc, #372]	; (8001558 <sanity_check+0x1d8>)
 80013e2:	f019 fe97 	bl	801b114 <trace_printf>
		sane = 0;
 80013e6:	2300      	movs	r3, #0
 80013e8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		return sane;
 80013ec:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80013f0:	e0a9      	b.n	8001546 <sanity_check+0x1c6>
	}

	if (raw_data_p->command_code == G_UC_SET_REG_CONFIG)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	795b      	ldrb	r3, [r3, #5]
 80013f6:	2b01      	cmp	r3, #1
 80013f8:	d13e      	bne.n	8001478 <sanity_check+0xf8>
	{
		uint8_t num_regs, i;

		num_regs = raw_data_p->num_chunks;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	799b      	ldrb	r3, [r3, #6]
 80013fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

		if (num_regs == 0)
 8001402:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001406:	2b00      	cmp	r3, #0
 8001408:	d108      	bne.n	800141c <sanity_check+0x9c>
		{
			trace_printf("invalid number of registers in the buffer\n");
 800140a:	4854      	ldr	r0, [pc, #336]	; (800155c <sanity_check+0x1dc>)
 800140c:	f019 fe82 	bl	801b114 <trace_printf>
			sane = 0;
 8001410:	2300      	movs	r3, #0
 8001412:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
			return sane;
 8001416:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800141a:	e094      	b.n	8001546 <sanity_check+0x1c6>
		}
		for (i = 0; i < num_regs; i++)
 800141c:	2300      	movs	r3, #0
 800141e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001422:	e023      	b.n	800146c <sanity_check+0xec>
		{
			reg_t *local_reg_ptr;
			uint8_t reg_id, cascade;

			local_reg_ptr = (reg_t*) (&raw_data_p->data[0] + i * sizeof(reg_t));
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	1dd9      	adds	r1, r3, #7
 8001428:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800142c:	4613      	mov	r3, r2
 800142e:	005b      	lsls	r3, r3, #1
 8001430:	4413      	add	r3, r2
 8001432:	011b      	lsls	r3, r3, #4
 8001434:	440b      	add	r3, r1
 8001436:	61fb      	str	r3, [r7, #28]
			reg_id = local_reg_ptr->reg_id;
 8001438:	69fb      	ldr	r3, [r7, #28]
 800143a:	781b      	ldrb	r3, [r3, #0]
 800143c:	76fb      	strb	r3, [r7, #27]
			cascade = local_reg_ptr->cascade;
 800143e:	69fb      	ldr	r3, [r7, #28]
 8001440:	785b      	ldrb	r3, [r3, #1]
 8001442:	76bb      	strb	r3, [r7, #26]

			if ((cascade > G_REGS_PER_REG) || (reg_id > G_MAX_NUM_REGS))
 8001444:	7ebb      	ldrb	r3, [r7, #26]
 8001446:	2b04      	cmp	r3, #4
 8001448:	d802      	bhi.n	8001450 <sanity_check+0xd0>
 800144a:	7efb      	ldrb	r3, [r7, #27]
 800144c:	2b3f      	cmp	r3, #63	; 0x3f
 800144e:	d908      	bls.n	8001462 <sanity_check+0xe2>
			{
				trace_printf("invalid arguments\n");
 8001450:	4843      	ldr	r0, [pc, #268]	; (8001560 <sanity_check+0x1e0>)
 8001452:	f019 fe5f 	bl	801b114 <trace_printf>
				sane = 0;
 8001456:	2300      	movs	r3, #0
 8001458:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
				return sane;
 800145c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001460:	e071      	b.n	8001546 <sanity_check+0x1c6>
		for (i = 0; i < num_regs; i++)
 8001462:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001466:	3301      	adds	r3, #1
 8001468:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800146c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001470:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001474:	429a      	cmp	r2, r3
 8001476:	d3d5      	bcc.n	8001424 <sanity_check+0xa4>
			}
		}
	}

	if (raw_data_p->command_code == G_UC_PB_SUP_EN)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	795b      	ldrb	r3, [r3, #5]
 800147c:	2b0e      	cmp	r3, #14
 800147e:	d12c      	bne.n	80014da <sanity_check+0x15a>
	{
		pot_data_t *local_reg_ptr;
		uint8_t i, num_chunks, sup_id; //number of chunks of sub data

		num_chunks = raw_data_p->num_chunks;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	799b      	ldrb	r3, [r3, #6]
 8001484:	767b      	strb	r3, [r7, #25]
		for (i = 0; i < num_chunks; i++)
 8001486:	2300      	movs	r3, #0
 8001488:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800148c:	e020      	b.n	80014d0 <sanity_check+0x150>
		{
			local_reg_ptr = (pot_data_t*) (&raw_data_p->data[0]
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	1dd9      	adds	r1, r3, #7
					+ i * sizeof(pot_data_t));
 8001492:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001496:	4613      	mov	r3, r2
 8001498:	005b      	lsls	r3, r3, #1
 800149a:	4413      	add	r3, r2
 800149c:	009b      	lsls	r3, r3, #2
			local_reg_ptr = (pot_data_t*) (&raw_data_p->data[0]
 800149e:	440b      	add	r3, r1
 80014a0:	617b      	str	r3, [r7, #20]

			sup_id = local_reg_ptr->sup_id;
 80014a2:	697b      	ldr	r3, [r7, #20]
 80014a4:	781b      	ldrb	r3, [r3, #0]
 80014a6:	74fb      	strb	r3, [r7, #19]
			if ((sup_id == 0) || (sup_id > G_PB_SUP_ALL))
 80014a8:	7cfb      	ldrb	r3, [r7, #19]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d002      	beq.n	80014b4 <sanity_check+0x134>
 80014ae:	7cfb      	ldrb	r3, [r7, #19]
 80014b0:	2b07      	cmp	r3, #7
 80014b2:	d908      	bls.n	80014c6 <sanity_check+0x146>
			{
				sane = 0;
 80014b4:	2300      	movs	r3, #0
 80014b6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
				trace_printf("invalid supply id\n");
 80014ba:	482a      	ldr	r0, [pc, #168]	; (8001564 <sanity_check+0x1e4>)
 80014bc:	f019 fe2a 	bl	801b114 <trace_printf>
				return sane;
 80014c0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80014c4:	e03f      	b.n	8001546 <sanity_check+0x1c6>
		for (i = 0; i < num_chunks; i++)
 80014c6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80014ca:	3301      	adds	r3, #1
 80014cc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80014d0:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80014d4:	7e7b      	ldrb	r3, [r7, #25]
 80014d6:	429a      	cmp	r2, r3
 80014d8:	d3d9      	bcc.n	800148e <sanity_check+0x10e>
			}

		}
	}
	if (raw_data_p->command_code == G_UC_PB_SUP_VAL)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	795b      	ldrb	r3, [r3, #5]
 80014de:	2b0f      	cmp	r3, #15
 80014e0:	d12c      	bne.n	800153c <sanity_check+0x1bc>
	{
		pot_data_t *local_reg_ptr;
		uint8_t i, num_chunks, sup_id; //number of chunks of sub data

		num_chunks = raw_data_p->num_chunks;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	799b      	ldrb	r3, [r3, #6]
 80014e6:	74bb      	strb	r3, [r7, #18]
		for (i = 0; i < num_chunks; i++)
 80014e8:	2300      	movs	r3, #0
 80014ea:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80014ee:	e020      	b.n	8001532 <sanity_check+0x1b2>
		{
			local_reg_ptr = (pot_data_t*) (&raw_data_p->data[0]
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	1dd9      	adds	r1, r3, #7
					+ i * sizeof(pot_data_t));
 80014f4:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 80014f8:	4613      	mov	r3, r2
 80014fa:	005b      	lsls	r3, r3, #1
 80014fc:	4413      	add	r3, r2
 80014fe:	009b      	lsls	r3, r3, #2
			local_reg_ptr = (pot_data_t*) (&raw_data_p->data[0]
 8001500:	440b      	add	r3, r1
 8001502:	60fb      	str	r3, [r7, #12]

			sup_id = local_reg_ptr->sup_id;
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	781b      	ldrb	r3, [r3, #0]
 8001508:	72fb      	strb	r3, [r7, #11]
			if ((sup_id == 0) || (sup_id >= G_PB_SUP_ALL))
 800150a:	7afb      	ldrb	r3, [r7, #11]
 800150c:	2b00      	cmp	r3, #0
 800150e:	d002      	beq.n	8001516 <sanity_check+0x196>
 8001510:	7afb      	ldrb	r3, [r7, #11]
 8001512:	2b06      	cmp	r3, #6
 8001514:	d908      	bls.n	8001528 <sanity_check+0x1a8>
			{
				sane = 0;
 8001516:	2300      	movs	r3, #0
 8001518:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
				trace_printf("invalid supply id\n");
 800151c:	4811      	ldr	r0, [pc, #68]	; (8001564 <sanity_check+0x1e4>)
 800151e:	f019 fdf9 	bl	801b114 <trace_printf>
				return sane;
 8001522:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001526:	e00e      	b.n	8001546 <sanity_check+0x1c6>
		for (i = 0; i < num_chunks; i++)
 8001528:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800152c:	3301      	adds	r3, #1
 800152e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8001532:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8001536:	7cbb      	ldrb	r3, [r7, #18]
 8001538:	429a      	cmp	r2, r3
 800153a:	d3d9      	bcc.n	80014f0 <sanity_check+0x170>
			}

		}
	}

	sane = 1;
 800153c:	2301      	movs	r3, #1
 800153e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	return sane;
 8001542:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
}
 8001546:	4618      	mov	r0, r3
 8001548:	3728      	adds	r7, #40	; 0x28
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	0801c7c0 	.word	0x0801c7c0
 8001554:	0801c7dc 	.word	0x0801c7dc
 8001558:	0801c7ec 	.word	0x0801c7ec
 800155c:	0801c800 	.word	0x0801c800
 8001560:	0801c82c 	.word	0x0801c82c
 8001564:	0801c840 	.word	0x0801c840

08001568 <vMlabHandlerTask>:
static portTASK_FUNCTION( vMlabHandlerTask, pvParameters )
{
 8001568:	b590      	push	{r4, r7, lr}
 800156a:	b08d      	sub	sp, #52	; 0x34
 800156c:	af02      	add	r7, sp, #8
 800156e:	6078      	str	r0, [r7, #4]
	static struct netbuf *buf;
	static ip_addr_t *addr;
	static unsigned short port;
	err_t err;
	int8_t ret_data[4];
	void *ptr_payload = NULL;
 8001570:	2300      	movs	r3, #0
 8001572:	613b      	str	r3, [r7, #16]

	conn = netconn_new(NETCONN_UDP);
 8001574:	2200      	movs	r2, #0
 8001576:	2100      	movs	r1, #0
 8001578:	2020      	movs	r0, #32
 800157a:	f009 fbbf 	bl	800acfc <netconn_new_with_proto_and_callback>
 800157e:	4603      	mov	r3, r0
 8001580:	4a78      	ldr	r2, [pc, #480]	; (8001764 <vMlabHandlerTask+0x1fc>)
 8001582:	6013      	str	r3, [r2, #0]
	LWIP_ASSERT("con != NULL", conn != NULL);
 8001584:	4b77      	ldr	r3, [pc, #476]	; (8001764 <vMlabHandlerTask+0x1fc>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d10a      	bne.n	80015a2 <vMlabHandlerTask+0x3a>
 800158c:	f44f 72b9 	mov.w	r2, #370	; 0x172
 8001590:	4975      	ldr	r1, [pc, #468]	; (8001768 <vMlabHandlerTask+0x200>)
 8001592:	4876      	ldr	r0, [pc, #472]	; (800176c <vMlabHandlerTask+0x204>)
 8001594:	f019 fdbe 	bl	801b114 <trace_printf>
 8001598:	4975      	ldr	r1, [pc, #468]	; (8001770 <vMlabHandlerTask+0x208>)
 800159a:	4876      	ldr	r0, [pc, #472]	; (8001774 <vMlabHandlerTask+0x20c>)
 800159c:	f019 fdba 	bl	801b114 <trace_printf>
 80015a0:	e7fe      	b.n	80015a0 <vMlabHandlerTask+0x38>
	netconn_bind(conn, NULL, G_NUCLEO_PORT_NUM);
 80015a2:	4b70      	ldr	r3, [pc, #448]	; (8001764 <vMlabHandlerTask+0x1fc>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f640 72c8 	movw	r2, #4040	; 0xfc8
 80015aa:	2100      	movs	r1, #0
 80015ac:	4618      	mov	r0, r3
 80015ae:	f009 fc31 	bl	800ae14 <netconn_bind>

	while (1)
	{
		err = netconn_recv(conn, &buf);
 80015b2:	4b6c      	ldr	r3, [pc, #432]	; (8001764 <vMlabHandlerTask+0x1fc>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	4970      	ldr	r1, [pc, #448]	; (8001778 <vMlabHandlerTask+0x210>)
 80015b8:	4618      	mov	r0, r3
 80015ba:	f009 fdef 	bl	800b19c <netconn_recv>
 80015be:	4603      	mov	r3, r0
 80015c0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		if (err == ERR_OK)
 80015c4:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d1f2      	bne.n	80015b2 <vMlabHandlerTask+0x4a>
			uint16_t len;
			uint32_t running_id;
			uint16_t data_to_return;
			uint16_t tot_amt_to_return;

			addr = netbuf_fromaddr(buf);
 80015cc:	4b6a      	ldr	r3, [pc, #424]	; (8001778 <vMlabHandlerTask+0x210>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	3308      	adds	r3, #8
 80015d2:	4a6a      	ldr	r2, [pc, #424]	; (800177c <vMlabHandlerTask+0x214>)
 80015d4:	6013      	str	r3, [r2, #0]
			port = netbuf_fromport(buf);
 80015d6:	4b68      	ldr	r3, [pc, #416]	; (8001778 <vMlabHandlerTask+0x210>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	899a      	ldrh	r2, [r3, #12]
 80015dc:	4b68      	ldr	r3, [pc, #416]	; (8001780 <vMlabHandlerTask+0x218>)
 80015de:	801a      	strh	r2, [r3, #0]
			//netconn_connect(conn, addr, port);
			if (sizeof(g_rcv_buffer) <= buf->p->tot_len)
 80015e0:	4b65      	ldr	r3, [pc, #404]	; (8001778 <vMlabHandlerTask+0x210>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	891b      	ldrh	r3, [r3, #8]
 80015e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80015ec:	d304      	bcc.n	80015f8 <vMlabHandlerTask+0x90>
			{
				trace_printf("total packet bigger than available buffer\n");
 80015ee:	4865      	ldr	r0, [pc, #404]	; (8001784 <vMlabHandlerTask+0x21c>)
 80015f0:	f019 fd90 	bl	801b114 <trace_printf>
				Error_Handler();
 80015f4:	f7ff fcda 	bl	8000fac <Error_Handler>
			}
			netbuf_copy(buf, g_rcv_buffer, buf->p->tot_len);
 80015f8:	4b5f      	ldr	r3, [pc, #380]	; (8001778 <vMlabHandlerTask+0x210>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	6818      	ldr	r0, [r3, #0]
 80015fe:	4b5e      	ldr	r3, [pc, #376]	; (8001778 <vMlabHandlerTask+0x210>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	891a      	ldrh	r2, [r3, #8]
 8001606:	2300      	movs	r3, #0
 8001608:	495f      	ldr	r1, [pc, #380]	; (8001788 <vMlabHandlerTask+0x220>)
 800160a:	f00d fae9 	bl	800ebe0 <pbuf_copy_partial>

			trace_printf("rcvd udp, src_port:%d, ipaddr:", port);
 800160e:	4b5c      	ldr	r3, [pc, #368]	; (8001780 <vMlabHandlerTask+0x218>)
 8001610:	881b      	ldrh	r3, [r3, #0]
 8001612:	4619      	mov	r1, r3
 8001614:	485d      	ldr	r0, [pc, #372]	; (800178c <vMlabHandlerTask+0x224>)
 8001616:	f019 fd7d 	bl	801b114 <trace_printf>
			ip4_addr_debug_print(LWIP_DBG_ON, addr);
 800161a:	4b58      	ldr	r3, [pc, #352]	; (800177c <vMlabHandlerTask+0x214>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d004      	beq.n	800162c <vMlabHandlerTask+0xc4>
 8001622:	4b56      	ldr	r3, [pc, #344]	; (800177c <vMlabHandlerTask+0x214>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	781b      	ldrb	r3, [r3, #0]
 8001628:	4619      	mov	r1, r3
 800162a:	e000      	b.n	800162e <vMlabHandlerTask+0xc6>
 800162c:	2100      	movs	r1, #0
 800162e:	4b53      	ldr	r3, [pc, #332]	; (800177c <vMlabHandlerTask+0x214>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d005      	beq.n	8001642 <vMlabHandlerTask+0xda>
 8001636:	4b51      	ldr	r3, [pc, #324]	; (800177c <vMlabHandlerTask+0x214>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	3301      	adds	r3, #1
 800163c:	781b      	ldrb	r3, [r3, #0]
 800163e:	461a      	mov	r2, r3
 8001640:	e000      	b.n	8001644 <vMlabHandlerTask+0xdc>
 8001642:	2200      	movs	r2, #0
 8001644:	4b4d      	ldr	r3, [pc, #308]	; (800177c <vMlabHandlerTask+0x214>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	2b00      	cmp	r3, #0
 800164a:	d005      	beq.n	8001658 <vMlabHandlerTask+0xf0>
 800164c:	4b4b      	ldr	r3, [pc, #300]	; (800177c <vMlabHandlerTask+0x214>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	3302      	adds	r3, #2
 8001652:	781b      	ldrb	r3, [r3, #0]
 8001654:	4618      	mov	r0, r3
 8001656:	e000      	b.n	800165a <vMlabHandlerTask+0xf2>
 8001658:	2000      	movs	r0, #0
 800165a:	4b48      	ldr	r3, [pc, #288]	; (800177c <vMlabHandlerTask+0x214>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d004      	beq.n	800166c <vMlabHandlerTask+0x104>
 8001662:	4b46      	ldr	r3, [pc, #280]	; (800177c <vMlabHandlerTask+0x214>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	3303      	adds	r3, #3
 8001668:	781b      	ldrb	r3, [r3, #0]
 800166a:	e000      	b.n	800166e <vMlabHandlerTask+0x106>
 800166c:	2300      	movs	r3, #0
 800166e:	9300      	str	r3, [sp, #0]
 8001670:	4603      	mov	r3, r0
 8001672:	4847      	ldr	r0, [pc, #284]	; (8001790 <vMlabHandlerTask+0x228>)
 8001674:	f019 fd4e 	bl	801b114 <trace_printf>
			trace_printf("\n");
 8001678:	4846      	ldr	r0, [pc, #280]	; (8001794 <vMlabHandlerTask+0x22c>)
 800167a:	f019 fd4b 	bl	801b114 <trace_printf>

			//g_rcv_buffer[buf->p->tot_len] = '\0';

			raw_data_p = (mlab_data_t*) (&g_rcv_buffer[0]);
 800167e:	4b42      	ldr	r3, [pc, #264]	; (8001788 <vMlabHandlerTask+0x220>)
 8001680:	623b      	str	r3, [r7, #32]
			running_id = ntohl(raw_data_p->running_id);
 8001682:	6a3b      	ldr	r3, [r7, #32]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4618      	mov	r0, r3
 8001688:	f00b fb71 	bl	800cd6e <lwip_htonl>
 800168c:	61f8      	str	r0, [r7, #28]

			sane = sanity_check(raw_data_p);
 800168e:	6a38      	ldr	r0, [r7, #32]
 8001690:	f7ff fe76 	bl	8001380 <sanity_check>
 8001694:	4603      	mov	r3, r0
 8001696:	76fb      	strb	r3, [r7, #27]

			if (sane)
 8001698:	7efb      	ldrb	r3, [r7, #27]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d00e      	beq.n	80016bc <vMlabHandlerTask+0x154>
			{
				strcpy(ret_data, "OK");
 800169e:	f107 0314 	add.w	r3, r7, #20
 80016a2:	4a3d      	ldr	r2, [pc, #244]	; (8001798 <vMlabHandlerTask+0x230>)
 80016a4:	6812      	ldr	r2, [r2, #0]
 80016a6:	4611      	mov	r1, r2
 80016a8:	8019      	strh	r1, [r3, #0]
 80016aa:	3302      	adds	r3, #2
 80016ac:	0c12      	lsrs	r2, r2, #16
 80016ae:	701a      	strb	r2, [r3, #0]
				data_to_return = handle_command(raw_data_p);
 80016b0:	6a38      	ldr	r0, [r7, #32]
 80016b2:	f7ff fc85 	bl	8000fc0 <handle_command>
 80016b6:	4603      	mov	r3, r0
 80016b8:	84fb      	strh	r3, [r7, #38]	; 0x26
 80016ba:	e001      	b.n	80016c0 <vMlabHandlerTask+0x158>
			}
			else
			{
				strcpy(ret_data, "NOK");
 80016bc:	4b37      	ldr	r3, [pc, #220]	; (800179c <vMlabHandlerTask+0x234>)
 80016be:	617b      	str	r3, [r7, #20]
			}

			netbuf_data(buf, &ptr_payload, &len);
 80016c0:	4b2d      	ldr	r3, [pc, #180]	; (8001778 <vMlabHandlerTask+0x210>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f107 020e 	add.w	r2, r7, #14
 80016c8:	f107 0110 	add.w	r1, r7, #16
 80016cc:	4618      	mov	r0, r3
 80016ce:	f00b f911 	bl	800c8f4 <netbuf_data>
			//trace_printf("len of buf=%d\n", len);
			tot_amt_to_return = data_to_return + sizeof(running_id)
 80016d2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80016d4:	3308      	adds	r3, #8
 80016d6:	833b      	strh	r3, [r7, #24]
					+ sizeof(ret_data);
			if (len < tot_amt_to_return)
 80016d8:	89fb      	ldrh	r3, [r7, #14]
 80016da:	8b3a      	ldrh	r2, [r7, #24]
 80016dc:	429a      	cmp	r2, r3
 80016de:	d90d      	bls.n	80016fc <vMlabHandlerTask+0x194>
			{
				//trace_printf("FIXME:less bytes availabel");
				netbuf_free(buf);
 80016e0:	4b25      	ldr	r3, [pc, #148]	; (8001778 <vMlabHandlerTask+0x210>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4618      	mov	r0, r3
 80016e6:	f00b f8d9 	bl	800c89c <netbuf_free>
				ptr_payload = netbuf_alloc(buf, tot_amt_to_return);
 80016ea:	4b23      	ldr	r3, [pc, #140]	; (8001778 <vMlabHandlerTask+0x210>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	8b3a      	ldrh	r2, [r7, #24]
 80016f0:	4611      	mov	r1, r2
 80016f2:	4618      	mov	r0, r3
 80016f4:	f00b f880 	bl	800c7f8 <netbuf_alloc>
 80016f8:	4603      	mov	r3, r0
 80016fa:	613b      	str	r3, [r7, #16]
			}

			if (NULL != ptr_payload)
 80016fc:	693b      	ldr	r3, [r7, #16]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d02c      	beq.n	800175c <vMlabHandlerTask+0x1f4>
			{
				*(uint32_t*) (ptr_payload) = htonl(running_id);
 8001702:	693c      	ldr	r4, [r7, #16]
 8001704:	69f8      	ldr	r0, [r7, #28]
 8001706:	f00b fb32 	bl	800cd6e <lwip_htonl>
 800170a:	4603      	mov	r3, r0
 800170c:	6023      	str	r3, [r4, #0]
//				memcpy(ptr_payload + sizeof(running_id), ret_data,
//						sizeof(ret_data) + sizeof(uint32_t));
				memcpy(ptr_payload + sizeof(running_id), ret_data,
 800170e:	693b      	ldr	r3, [r7, #16]
 8001710:	3304      	adds	r3, #4
 8001712:	697a      	ldr	r2, [r7, #20]
 8001714:	601a      	str	r2, [r3, #0]
						sizeof(ret_data));
				if (data_to_return)
 8001716:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001718:	2b00      	cmp	r3, #0
 800171a:	d007      	beq.n	800172c <vMlabHandlerTask+0x1c4>
				{
					memcpy(ptr_payload + sizeof(running_id) + sizeof(ret_data),
 800171c:	693b      	ldr	r3, [r7, #16]
 800171e:	3308      	adds	r3, #8
 8001720:	4a1f      	ldr	r2, [pc, #124]	; (80017a0 <vMlabHandlerTask+0x238>)
 8001722:	6811      	ldr	r1, [r2, #0]
 8001724:	2228      	movs	r2, #40	; 0x28
 8001726:	4618      	mov	r0, r3
 8001728:	f019 fd48 	bl	801b1bc <memcpy>
							sensor_queue_ptr, sizeof(sensor_data_t));
				}
				buf->p->tot_len = tot_amt_to_return;
 800172c:	4b12      	ldr	r3, [pc, #72]	; (8001778 <vMlabHandlerTask+0x210>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	8b3a      	ldrh	r2, [r7, #24]
 8001734:	811a      	strh	r2, [r3, #8]
				buf->p->len = tot_amt_to_return;
 8001736:	4b10      	ldr	r3, [pc, #64]	; (8001778 <vMlabHandlerTask+0x210>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	8b3a      	ldrh	r2, [r7, #24]
 800173e:	815a      	strh	r2, [r3, #10]

				netconn_send(conn, buf);
 8001740:	4b08      	ldr	r3, [pc, #32]	; (8001764 <vMlabHandlerTask+0x1fc>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a0c      	ldr	r2, [pc, #48]	; (8001778 <vMlabHandlerTask+0x210>)
 8001746:	6812      	ldr	r2, [r2, #0]
 8001748:	4611      	mov	r1, r2
 800174a:	4618      	mov	r0, r3
 800174c:	f009 fda8 	bl	800b2a0 <netconn_send>
				//LWIP_DEBUGF(LWIP_DBG_ON, ("got %s\n", buffer));
				netbuf_delete(buf);
 8001750:	4b09      	ldr	r3, [pc, #36]	; (8001778 <vMlabHandlerTask+0x210>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4618      	mov	r0, r3
 8001756:	f00b f82f 	bl	800c7b8 <netbuf_delete>
 800175a:	e72a      	b.n	80015b2 <vMlabHandlerTask+0x4a>

			}
			else
			{
				trace_printf("unable to allocate return data \n");
 800175c:	4811      	ldr	r0, [pc, #68]	; (80017a4 <vMlabHandlerTask+0x23c>)
 800175e:	f019 fcd9 	bl	801b114 <trace_printf>
		err = netconn_recv(conn, &buf);
 8001762:	e726      	b.n	80015b2 <vMlabHandlerTask+0x4a>
 8001764:	20000b00 	.word	0x20000b00
 8001768:	0801c854 	.word	0x0801c854
 800176c:	0801c860 	.word	0x0801c860
 8001770:	0801c880 	.word	0x0801c880
 8001774:	0801c89c 	.word	0x0801c89c
 8001778:	20000b04 	.word	0x20000b04
 800177c:	20000b08 	.word	0x20000b08
 8001780:	20000b0c 	.word	0x20000b0c
 8001784:	0801c8a0 	.word	0x0801c8a0
 8001788:	200002f8 	.word	0x200002f8
 800178c:	0801c8cc 	.word	0x0801c8cc
 8001790:	0801c8ec 	.word	0x0801c8ec
 8001794:	0801c8fc 	.word	0x0801c8fc
 8001798:	0801c900 	.word	0x0801c900
 800179c:	004b4f4e 	.word	0x004b4f4e
 80017a0:	20000afc 	.word	0x20000afc
 80017a4:	0801c904 	.word	0x0801c904

080017a8 <vStartMlabHandlerTask>:
		}
	}
} /*lint !e715 !e818 !e830 Function definition must be standard for task creation. */

void vStartMlabHandlerTask(UBaseType_t uxPriority)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b086      	sub	sp, #24
 80017ac:	af02      	add	r7, sp, #8
 80017ae:	6078      	str	r0, [r7, #4]
	BaseType_t xReturned;

	xReturned = xTaskCreate(vMlabHandlerTask, "MLABHx",
 80017b0:	4b0a      	ldr	r3, [pc, #40]	; (80017dc <vStartMlabHandlerTask+0x34>)
 80017b2:	9301      	str	r3, [sp, #4]
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	9300      	str	r3, [sp, #0]
 80017b8:	2300      	movs	r3, #0
 80017ba:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80017be:	4908      	ldr	r1, [pc, #32]	; (80017e0 <vStartMlabHandlerTask+0x38>)
 80017c0:	4808      	ldr	r0, [pc, #32]	; (80017e4 <vStartMlabHandlerTask+0x3c>)
 80017c2:	f007 fd14 	bl	80091ee <xTaskCreate>
 80017c6:	60f8      	str	r0, [r7, #12]
	MATLAB_HANLDER_STACK_SIZE, NULL, uxPriority,
			(TaskHandle_t*) &g_handle_mlab_task);
	if (xReturned != pdPASS)
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	2b01      	cmp	r3, #1
 80017cc:	d002      	beq.n	80017d4 <vStartMlabHandlerTask+0x2c>
	{
		/* The task was created.  Use the task's handle to delete the task. */
		trace_printf("failed to create the matlab handler task\n");
 80017ce:	4806      	ldr	r0, [pc, #24]	; (80017e8 <vStartMlabHandlerTask+0x40>)
 80017d0:	f019 fca0 	bl	801b114 <trace_printf>
	}
}
 80017d4:	bf00      	nop
 80017d6:	3710      	adds	r7, #16
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}
 80017dc:	20000af8 	.word	0x20000af8
 80017e0:	0801c928 	.word	0x0801c928
 80017e4:	08001569 	.word	0x08001569
 80017e8:	0801c930 	.word	0x0801c930

080017ec <pot_id_to_addr_map>:
static StaticQueue_t pot_queue_ds;
static uint8_t pot_queue_storage_area[POT_QUEUE_LENGTH
		* sizeof(pot_queue_data_t)];

static void pot_id_to_addr_map(uint8_t id, uint8_t *addr, uint8_t *channel)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b085      	sub	sp, #20
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	4603      	mov	r3, r0
 80017f4:	60b9      	str	r1, [r7, #8]
 80017f6:	607a      	str	r2, [r7, #4]
 80017f8:	73fb      	strb	r3, [r7, #15]

	switch (id)
 80017fa:	7bfb      	ldrb	r3, [r7, #15]
 80017fc:	3b01      	subs	r3, #1
 80017fe:	2b04      	cmp	r3, #4
 8001800:	d830      	bhi.n	8001864 <pot_id_to_addr_map+0x78>
 8001802:	a201      	add	r2, pc, #4	; (adr r2, 8001808 <pot_id_to_addr_map+0x1c>)
 8001804:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001808:	0800181d 	.word	0x0800181d
 800180c:	0800182b 	.word	0x0800182b
 8001810:	08001839 	.word	0x08001839
 8001814:	08001847 	.word	0x08001847
 8001818:	08001855 	.word	0x08001855
	{
	case G_PB_SUP1:
	{
		*addr = I2C_POT_SUP1_ADDRESS;
 800181c:	68bb      	ldr	r3, [r7, #8]
 800181e:	2258      	movs	r2, #88	; 0x58
 8001820:	701a      	strb	r2, [r3, #0]
		*channel = I2C_POT_SUP1_CHANNEL;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	2200      	movs	r2, #0
 8001826:	701a      	strb	r2, [r3, #0]
		break;
 8001828:	e01b      	b.n	8001862 <pot_id_to_addr_map+0x76>
	}
	case G_PB_SUP2:
	{
		*addr = I2C_POT_SUP2_ADDRESS;
 800182a:	68bb      	ldr	r3, [r7, #8]
 800182c:	225c      	movs	r2, #92	; 0x5c
 800182e:	701a      	strb	r2, [r3, #0]
		*channel = I2C_POT_SUP2_CHANNEL;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2201      	movs	r2, #1
 8001834:	701a      	strb	r2, [r3, #0]
		break;
 8001836:	e014      	b.n	8001862 <pot_id_to_addr_map+0x76>
	}
	case G_PB_SUP3:
	{
		*addr = I2C_POT_SUP3_ADDRESS;
 8001838:	68bb      	ldr	r3, [r7, #8]
 800183a:	225c      	movs	r2, #92	; 0x5c
 800183c:	701a      	strb	r2, [r3, #0]
		*channel = I2C_POT_SUP3_CHANNEL;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	2200      	movs	r2, #0
 8001842:	701a      	strb	r2, [r3, #0]
		break;
 8001844:	e00d      	b.n	8001862 <pot_id_to_addr_map+0x76>
	}
	case G_PB_SUP4:
	{
		*addr = I2C_POT_SUP4_ADDRESS;
 8001846:	68bb      	ldr	r3, [r7, #8]
 8001848:	225a      	movs	r2, #90	; 0x5a
 800184a:	701a      	strb	r2, [r3, #0]
		*channel = I2C_POT_SUP4_CHANNEL;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	2201      	movs	r2, #1
 8001850:	701a      	strb	r2, [r3, #0]
		break;
 8001852:	e006      	b.n	8001862 <pot_id_to_addr_map+0x76>
	}
	case G_PB_SUP5:
	{
		*addr = I2C_POT_SUP5_ADDRESS;
 8001854:	68bb      	ldr	r3, [r7, #8]
 8001856:	2258      	movs	r2, #88	; 0x58
 8001858:	701a      	strb	r2, [r3, #0]
		*channel = I2C_POT_SUP5_CHANNEL;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	2201      	movs	r2, #1
 800185e:	701a      	strb	r2, [r3, #0]
		break;
 8001860:	bf00      	nop
	}

	}
	return;
 8001862:	bf00      	nop
 8001864:	bf00      	nop
}
 8001866:	3714      	adds	r7, #20
 8001868:	46bd      	mov	sp, r7
 800186a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186e:	4770      	bx	lr

08001870 <i2c_ll_set_pot>:
static uint8_t i2c_ll_set_pot(uint8_t addr, uint8_t channel, uint8_t val)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b086      	sub	sp, #24
 8001874:	af02      	add	r7, sp, #8
 8001876:	4603      	mov	r3, r0
 8001878:	71fb      	strb	r3, [r7, #7]
 800187a:	460b      	mov	r3, r1
 800187c:	71bb      	strb	r3, [r7, #6]
 800187e:	4613      	mov	r3, r2
 8001880:	717b      	strb	r3, [r7, #5]
	uint8_t data[2], ret_val;
	HAL_StatusTypeDef ret;

	data[0] = (uint8_t) ((channel & 0x1) << 7);
 8001882:	79bb      	ldrb	r3, [r7, #6]
 8001884:	01db      	lsls	r3, r3, #7
 8001886:	b2db      	uxtb	r3, r3
 8001888:	733b      	strb	r3, [r7, #12]
	data[1] = val;
 800188a:	797b      	ldrb	r3, [r7, #5]
 800188c:	737b      	strb	r3, [r7, #13]

	if (xSemaphoreTake(g_mutex_i2c_op, portMAX_DELAY) == pdTRUE)
 800188e:	4b16      	ldr	r3, [pc, #88]	; (80018e8 <i2c_ll_set_pot+0x78>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f04f 31ff 	mov.w	r1, #4294967295
 8001896:	4618      	mov	r0, r3
 8001898:	f007 f90e 	bl	8008ab8 <xQueueSemaphoreTake>
 800189c:	4603      	mov	r3, r0
 800189e:	2b01      	cmp	r3, #1
 80018a0:	d112      	bne.n	80018c8 <i2c_ll_set_pot+0x58>
	{
		ret = HAL_I2C_Master_Transmit(&g_hi2c1, addr, data, sizeof(data), 100);
 80018a2:	79fb      	ldrb	r3, [r7, #7]
 80018a4:	b299      	uxth	r1, r3
 80018a6:	f107 020c 	add.w	r2, r7, #12
 80018aa:	2364      	movs	r3, #100	; 0x64
 80018ac:	9300      	str	r3, [sp, #0]
 80018ae:	2302      	movs	r3, #2
 80018b0:	480e      	ldr	r0, [pc, #56]	; (80018ec <i2c_ll_set_pot+0x7c>)
 80018b2:	f003 fba9 	bl	8005008 <HAL_I2C_Master_Transmit>
 80018b6:	4603      	mov	r3, r0
 80018b8:	73bb      	strb	r3, [r7, #14]
		xSemaphoreGive(g_mutex_i2c_op);
 80018ba:	4b0b      	ldr	r3, [pc, #44]	; (80018e8 <i2c_ll_set_pot+0x78>)
 80018bc:	6818      	ldr	r0, [r3, #0]
 80018be:	2300      	movs	r3, #0
 80018c0:	2200      	movs	r2, #0
 80018c2:	2100      	movs	r1, #0
 80018c4:	f006 fdf4 	bl	80084b0 <xQueueGenericSend>
	}
	if (ret == HAL_OK)
 80018c8:	7bbb      	ldrb	r3, [r7, #14]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d102      	bne.n	80018d4 <i2c_ll_set_pot+0x64>
		ret_val = 0;
 80018ce:	2300      	movs	r3, #0
 80018d0:	73fb      	strb	r3, [r7, #15]
 80018d2:	e004      	b.n	80018de <i2c_ll_set_pot+0x6e>
	else
	{
		trace_printf("i2c_op failed: %d\n", ret);
 80018d4:	7bbb      	ldrb	r3, [r7, #14]
 80018d6:	4619      	mov	r1, r3
 80018d8:	4805      	ldr	r0, [pc, #20]	; (80018f0 <i2c_ll_set_pot+0x80>)
 80018da:	f019 fc1b 	bl	801b114 <trace_printf>
	}
	return ret_val;
 80018de:	7bfb      	ldrb	r3, [r7, #15]
}
 80018e0:	4618      	mov	r0, r3
 80018e2:	3710      	adds	r7, #16
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}
 80018e8:	2000a17c 	.word	0x2000a17c
 80018ec:	2000a124 	.word	0x2000a124
 80018f0:	0801c95c 	.word	0x0801c95c

080018f4 <vPotHandlerTask>:

void vPotHandlerTask(void *pvParameters)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b086      	sub	sp, #24
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
	pot_queue_data_t pot_queue_local_copy;

	while (1)
	{
		if (xQueueReceive(g_pot_queue_handle, &pot_queue_local_copy,
 80018fc:	4b4b      	ldr	r3, [pc, #300]	; (8001a2c <vPotHandlerTask+0x138>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f107 010c 	add.w	r1, r7, #12
 8001904:	f04f 32ff 	mov.w	r2, #4294967295
 8001908:	4618      	mov	r0, r3
 800190a:	f006 fff5 	bl	80088f8 <xQueueReceive>
 800190e:	4603      	mov	r3, r0
 8001910:	2b01      	cmp	r3, #1
 8001912:	f040 8086 	bne.w	8001a22 <vPotHandlerTask+0x12e>
		portMAX_DELAY) == pdPASS)
		{
			switch (pot_queue_local_copy.command_code)
 8001916:	7b3b      	ldrb	r3, [r7, #12]
 8001918:	2b0e      	cmp	r3, #14
 800191a:	d002      	beq.n	8001922 <vPotHandlerTask+0x2e>
 800191c:	2b0f      	cmp	r3, #15
 800191e:	d06b      	beq.n	80019f8 <vPotHandlerTask+0x104>
 8001920:	e082      	b.n	8001a28 <vPotHandlerTask+0x134>
			{

			case G_UC_PB_SUP_EN:
			{
				uint8_t id, status;
				id = pot_queue_local_copy.pot_data.sup_id;
 8001922:	7b7b      	ldrb	r3, [r7, #13]
 8001924:	753b      	strb	r3, [r7, #20]
				status = pot_queue_local_copy.pot_data.sup_status;
 8001926:	7bbb      	ldrb	r3, [r7, #14]
 8001928:	74fb      	strb	r3, [r7, #19]

				switch (id)
 800192a:	7d3b      	ldrb	r3, [r7, #20]
 800192c:	3b01      	subs	r3, #1
 800192e:	2b06      	cmp	r3, #6
 8001930:	d879      	bhi.n	8001a26 <vPotHandlerTask+0x132>
 8001932:	a201      	add	r2, pc, #4	; (adr r2, 8001938 <vPotHandlerTask+0x44>)
 8001934:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001938:	08001955 	.word	0x08001955
 800193c:	08001967 	.word	0x08001967
 8001940:	08001979 	.word	0x08001979
 8001944:	0800198b 	.word	0x0800198b
 8001948:	0800199d 	.word	0x0800199d
 800194c:	080019af 	.word	0x080019af
 8001950:	080019c1 	.word	0x080019c1
				{

				case G_PB_SUP1:
				{
					if (status)
 8001954:	7cfb      	ldrb	r3, [r7, #19]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d002      	beq.n	8001960 <vPotHandlerTask+0x6c>
						board_pb_sup1_en();
 800195a:	f7ff f96b 	bl	8000c34 <board_pb_sup1_en>
					else
						board_pb_sup1_dis();

					break;
 800195e:	e04a      	b.n	80019f6 <vPotHandlerTask+0x102>
						board_pb_sup1_dis();
 8001960:	f7ff f974 	bl	8000c4c <board_pb_sup1_dis>
					break;
 8001964:	e047      	b.n	80019f6 <vPotHandlerTask+0x102>
				}
				case G_PB_SUP2:
				{
					if (status)
 8001966:	7cfb      	ldrb	r3, [r7, #19]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d002      	beq.n	8001972 <vPotHandlerTask+0x7e>
						board_pb_sup2_en();
 800196c:	f7ff f97a 	bl	8000c64 <board_pb_sup2_en>
					else
						board_pb_sup2_dis();

					break;
 8001970:	e041      	b.n	80019f6 <vPotHandlerTask+0x102>
						board_pb_sup2_dis();
 8001972:	f7ff f983 	bl	8000c7c <board_pb_sup2_dis>
					break;
 8001976:	e03e      	b.n	80019f6 <vPotHandlerTask+0x102>
				}
				case G_PB_SUP3:
				{
					if (status)
 8001978:	7cfb      	ldrb	r3, [r7, #19]
 800197a:	2b00      	cmp	r3, #0
 800197c:	d002      	beq.n	8001984 <vPotHandlerTask+0x90>
						board_pb_sup3_en();
 800197e:	f7ff f989 	bl	8000c94 <board_pb_sup3_en>
					else
						board_pb_sup3_dis();

					break;
 8001982:	e038      	b.n	80019f6 <vPotHandlerTask+0x102>
						board_pb_sup3_dis();
 8001984:	f7ff f992 	bl	8000cac <board_pb_sup3_dis>
					break;
 8001988:	e035      	b.n	80019f6 <vPotHandlerTask+0x102>
				}
				case G_PB_SUP4:
				{
					if (status)
 800198a:	7cfb      	ldrb	r3, [r7, #19]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d002      	beq.n	8001996 <vPotHandlerTask+0xa2>
						board_pb_sup4_en();
 8001990:	f7ff f998 	bl	8000cc4 <board_pb_sup4_en>
					else
						board_pb_sup4_dis();

					break;
 8001994:	e02f      	b.n	80019f6 <vPotHandlerTask+0x102>
						board_pb_sup4_dis();
 8001996:	f7ff f9a1 	bl	8000cdc <board_pb_sup4_dis>
					break;
 800199a:	e02c      	b.n	80019f6 <vPotHandlerTask+0x102>
				}
				case G_PB_SUP5:
				{
					if (status)
 800199c:	7cfb      	ldrb	r3, [r7, #19]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d002      	beq.n	80019a8 <vPotHandlerTask+0xb4>
						board_pb_sup5_en();
 80019a2:	f7ff f9a7 	bl	8000cf4 <board_pb_sup5_en>
					else
						board_pb_sup5_dis();

					break;
 80019a6:	e026      	b.n	80019f6 <vPotHandlerTask+0x102>
						board_pb_sup5_dis();
 80019a8:	f7ff f9b0 	bl	8000d0c <board_pb_sup5_dis>
					break;
 80019ac:	e023      	b.n	80019f6 <vPotHandlerTask+0x102>
				}
				case G_PB_SUP_LCL_5V:
				{
					if (status)
 80019ae:	7cfb      	ldrb	r3, [r7, #19]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d002      	beq.n	80019ba <vPotHandlerTask+0xc6>
						board_pb_lcl5v_en();
 80019b4:	f7ff f9b6 	bl	8000d24 <board_pb_lcl5v_en>
					else
						board_pb_lcl5v_dis();

					break;
 80019b8:	e01d      	b.n	80019f6 <vPotHandlerTask+0x102>
						board_pb_lcl5v_dis();
 80019ba:	f7ff f9bf 	bl	8000d3c <board_pb_lcl5v_dis>
					break;
 80019be:	e01a      	b.n	80019f6 <vPotHandlerTask+0x102>
				}
				case G_PB_SUP_ALL:
				{
					if (status)
 80019c0:	7cfb      	ldrb	r3, [r7, #19]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d00c      	beq.n	80019e0 <vPotHandlerTask+0xec>
					{
						board_pb_lcl5v_en();
 80019c6:	f7ff f9ad 	bl	8000d24 <board_pb_lcl5v_en>
						board_pb_sup1_en();
 80019ca:	f7ff f933 	bl	8000c34 <board_pb_sup1_en>
						board_pb_sup2_en();
 80019ce:	f7ff f949 	bl	8000c64 <board_pb_sup2_en>
						board_pb_sup3_en();
 80019d2:	f7ff f95f 	bl	8000c94 <board_pb_sup3_en>
						board_pb_sup4_en();
 80019d6:	f7ff f975 	bl	8000cc4 <board_pb_sup4_en>
						board_pb_sup5_en();
 80019da:	f7ff f98b 	bl	8000cf4 <board_pb_sup5_en>
						board_pb_sup4_dis();
						board_pb_sup5_dis();
						//board_pb_lcl5v_dis();
					}

					break;
 80019de:	e009      	b.n	80019f4 <vPotHandlerTask+0x100>
						board_pb_sup1_dis();
 80019e0:	f7ff f934 	bl	8000c4c <board_pb_sup1_dis>
						board_pb_sup2_dis();
 80019e4:	f7ff f94a 	bl	8000c7c <board_pb_sup2_dis>
						board_pb_sup3_dis();
 80019e8:	f7ff f960 	bl	8000cac <board_pb_sup3_dis>
						board_pb_sup4_dis();
 80019ec:	f7ff f976 	bl	8000cdc <board_pb_sup4_dis>
						board_pb_sup5_dis();
 80019f0:	f7ff f98c 	bl	8000d0c <board_pb_sup5_dis>
					break;
 80019f4:	bf00      	nop
				}
				}

				break;
 80019f6:	e016      	b.n	8001a26 <vPotHandlerTask+0x132>

			case G_UC_PB_SUP_VAL:
			{
				uint8_t ret;
				uint8_t id, addr, channel, raw_val;
				id = pot_queue_local_copy.pot_data.sup_id;
 80019f8:	7b7b      	ldrb	r3, [r7, #13]
 80019fa:	75fb      	strb	r3, [r7, #23]
				raw_val = pot_queue_local_copy.pot_data.pot_val;
 80019fc:	7bfb      	ldrb	r3, [r7, #15]
 80019fe:	75bb      	strb	r3, [r7, #22]

				pot_id_to_addr_map(id, &addr, &channel);
 8001a00:	f107 020a 	add.w	r2, r7, #10
 8001a04:	f107 010b 	add.w	r1, r7, #11
 8001a08:	7dfb      	ldrb	r3, [r7, #23]
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f7ff feee 	bl	80017ec <pot_id_to_addr_map>

				ret = i2c_ll_set_pot(addr, channel, raw_val);
 8001a10:	7afb      	ldrb	r3, [r7, #11]
 8001a12:	7ab9      	ldrb	r1, [r7, #10]
 8001a14:	7dba      	ldrb	r2, [r7, #22]
 8001a16:	4618      	mov	r0, r3
 8001a18:	f7ff ff2a 	bl	8001870 <i2c_ll_set_pot>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	757b      	strb	r3, [r7, #21]

				break;
 8001a20:	e002      	b.n	8001a28 <vPotHandlerTask+0x134>
			}

			}

		}
 8001a22:	bf00      	nop
 8001a24:	e76a      	b.n	80018fc <vPotHandlerTask+0x8>
				break;
 8001a26:	bf00      	nop
		if (xQueueReceive(g_pot_queue_handle, &pot_queue_local_copy,
 8001a28:	e768      	b.n	80018fc <vPotHandlerTask+0x8>
 8001a2a:	bf00      	nop
 8001a2c:	2000a21c 	.word	0x2000a21c

08001a30 <vStartPotTask>:
	}
	return;
}

void vStartPotTask(UBaseType_t uxPriority)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b086      	sub	sp, #24
 8001a34:	af02      	add	r7, sp, #8
 8001a36:	6078      	str	r0, [r7, #4]
	BaseType_t xReturned;
	g_pot_queue_handle = xQueueCreateStatic(POT_QUEUE_LENGTH,
 8001a38:	2300      	movs	r3, #0
 8001a3a:	9300      	str	r3, [sp, #0]
 8001a3c:	4b15      	ldr	r3, [pc, #84]	; (8001a94 <vStartPotTask+0x64>)
 8001a3e:	4a16      	ldr	r2, [pc, #88]	; (8001a98 <vStartPotTask+0x68>)
 8001a40:	2104      	movs	r1, #4
 8001a42:	2005      	movs	r0, #5
 8001a44:	f006 fc10 	bl	8008268 <xQueueGenericCreateStatic>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	4a14      	ldr	r2, [pc, #80]	; (8001a9c <vStartPotTask+0x6c>)
 8001a4c:	6013      	str	r3, [r2, #0]
			sizeof(pot_queue_data_t), pot_queue_storage_area, &pot_queue_ds);
	if ( NULL == g_pot_queue_handle)
 8001a4e:	4b13      	ldr	r3, [pc, #76]	; (8001a9c <vStartPotTask+0x6c>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d104      	bne.n	8001a60 <vStartPotTask+0x30>
	{
		trace_printf("failed to create the pot queue\n");
 8001a56:	4812      	ldr	r0, [pc, #72]	; (8001aa0 <vStartPotTask+0x70>)
 8001a58:	f019 fb5c 	bl	801b114 <trace_printf>
		Error_Handler();
 8001a5c:	f7ff faa6 	bl	8000fac <Error_Handler>
	}
	/* Spawn the task. */
	xReturned = xTaskCreate(vPotHandlerTask, "POT", POT_STACK_SIZE, NULL,
 8001a60:	4b10      	ldr	r3, [pc, #64]	; (8001aa4 <vStartPotTask+0x74>)
 8001a62:	9301      	str	r3, [sp, #4]
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	9300      	str	r3, [sp, #0]
 8001a68:	2300      	movs	r3, #0
 8001a6a:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8001a6e:	490e      	ldr	r1, [pc, #56]	; (8001aa8 <vStartPotTask+0x78>)
 8001a70:	480e      	ldr	r0, [pc, #56]	; (8001aac <vStartPotTask+0x7c>)
 8001a72:	f007 fbbc 	bl	80091ee <xTaskCreate>
 8001a76:	60f8      	str	r0, [r7, #12]
			uxPriority, (TaskHandle_t*) &g_handle_pot_task);
	if (xReturned != pdPASS)
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	2b01      	cmp	r3, #1
 8001a7c:	d005      	beq.n	8001a8a <vStartPotTask+0x5a>
	{
		trace_printf("failed to create the pot handling task\n");
 8001a7e:	480c      	ldr	r0, [pc, #48]	; (8001ab0 <vStartPotTask+0x80>)
 8001a80:	f019 fb48 	bl	801b114 <trace_printf>
		Error_Handler();
 8001a84:	f7ff fa92 	bl	8000fac <Error_Handler>
	}

	return;
 8001a88:	bf00      	nop
 8001a8a:	bf00      	nop
}
 8001a8c:	3710      	adds	r7, #16
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	20000b14 	.word	0x20000b14
 8001a98:	20000b5c 	.word	0x20000b5c
 8001a9c:	2000a21c 	.word	0x2000a21c
 8001aa0:	0801c970 	.word	0x0801c970
 8001aa4:	20000b10 	.word	0x20000b10
 8001aa8:	0801c990 	.word	0x0801c990
 8001aac:	080018f5 	.word	0x080018f5
 8001ab0:	0801c994 	.word	0x0801c994

08001ab4 <pc_get_curr_value>:
static reg_t pc_dflt_reg_dbase[G_MAX_ICS_PER_UC][G_MAX_NUM_REGS];
static reg_t pc_mini_reg_dbase[G_MAX_ICS_PER_UC][G_MAX_NUM_REGS];
static reg_t pc_maxi_reg_dbase[G_MAX_ICS_PER_UC][G_MAX_NUM_REGS];

void pc_get_curr_value(uint8_t ic_id, reg_t *local_copy)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b084      	sub	sp, #16
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	4603      	mov	r3, r0
 8001abc:	6039      	str	r1, [r7, #0]
 8001abe:	71fb      	strb	r3, [r7, #7]
	if ( xSemaphoreTake( pc_mutex_handle, portMAX_DELAY ) == pdTRUE)
 8001ac0:	4b1f      	ldr	r3, [pc, #124]	; (8001b40 <pc_get_curr_value+0x8c>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f04f 31ff 	mov.w	r1, #4294967295
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f006 fff5 	bl	8008ab8 <xQueueSemaphoreTake>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	2b01      	cmp	r3, #1
 8001ad2:	d131      	bne.n	8001b38 <pc_get_curr_value+0x84>
	{
		uint8_t reg_id = local_copy->reg_id;
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	781b      	ldrb	r3, [r3, #0]
 8001ad8:	73fb      	strb	r3, [r7, #15]
		local_copy->cascade = pc_curr_reg_dbase[ic_id - 1][reg_id].cascade;
 8001ada:	79fb      	ldrb	r3, [r7, #7]
 8001adc:	1e59      	subs	r1, r3, #1
 8001ade:	7bfa      	ldrb	r2, [r7, #15]
 8001ae0:	4818      	ldr	r0, [pc, #96]	; (8001b44 <pc_get_curr_value+0x90>)
 8001ae2:	4613      	mov	r3, r2
 8001ae4:	005b      	lsls	r3, r3, #1
 8001ae6:	4413      	add	r3, r2
 8001ae8:	009b      	lsls	r3, r3, #2
 8001aea:	f44f 723d 	mov.w	r2, #756	; 0x2f4
 8001aee:	fb02 f201 	mul.w	r2, r2, r1
 8001af2:	4413      	add	r3, r2
 8001af4:	4403      	add	r3, r0
 8001af6:	3301      	adds	r3, #1
 8001af8:	781a      	ldrb	r2, [r3, #0]
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	705a      	strb	r2, [r3, #1]
		memcpy((void*) local_copy->reg_val,
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	1c98      	adds	r0, r3, #2
				(const void*) pc_curr_reg_dbase[ic_id - 1][reg_id].reg_val,
 8001b02:	79fb      	ldrb	r3, [r7, #7]
 8001b04:	1e59      	subs	r1, r3, #1
 8001b06:	7bfa      	ldrb	r2, [r7, #15]
 8001b08:	4613      	mov	r3, r2
 8001b0a:	005b      	lsls	r3, r3, #1
 8001b0c:	4413      	add	r3, r2
 8001b0e:	009b      	lsls	r3, r3, #2
 8001b10:	f44f 723d 	mov.w	r2, #756	; 0x2f4
 8001b14:	fb02 f201 	mul.w	r2, r2, r1
 8001b18:	4413      	add	r3, r2
 8001b1a:	4a0a      	ldr	r2, [pc, #40]	; (8001b44 <pc_get_curr_value+0x90>)
 8001b1c:	4413      	add	r3, r2
 8001b1e:	3302      	adds	r3, #2
		memcpy((void*) local_copy->reg_val,
 8001b20:	220a      	movs	r2, #10
 8001b22:	4619      	mov	r1, r3
 8001b24:	f019 fb4a 	bl	801b1bc <memcpy>
				sizeof(local_copy->reg_val));

		xSemaphoreGive(pc_mutex_handle);
 8001b28:	4b05      	ldr	r3, [pc, #20]	; (8001b40 <pc_get_curr_value+0x8c>)
 8001b2a:	6818      	ldr	r0, [r3, #0]
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	2200      	movs	r2, #0
 8001b30:	2100      	movs	r1, #0
 8001b32:	f006 fcbd 	bl	80084b0 <xQueueGenericSend>
	}
	return;
 8001b36:	bf00      	nop
 8001b38:	bf00      	nop
}
 8001b3a:	3710      	adds	r7, #16
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}
 8001b40:	20000b70 	.word	0x20000b70
 8001b44:	20000cd4 	.word	0x20000cd4

08001b48 <pc_set_curr_value>:

void pc_set_curr_value(uint8_t ic_id, reg_t *local_copy)
{
 8001b48:	b590      	push	{r4, r7, lr}
 8001b4a:	b085      	sub	sp, #20
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	4603      	mov	r3, r0
 8001b50:	6039      	str	r1, [r7, #0]
 8001b52:	71fb      	strb	r3, [r7, #7]
	if ( xSemaphoreTake( pc_mutex_handle, portMAX_DELAY ) == pdTRUE)
 8001b54:	4b28      	ldr	r3, [pc, #160]	; (8001bf8 <pc_set_curr_value+0xb0>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f04f 31ff 	mov.w	r1, #4294967295
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f006 ffab 	bl	8008ab8 <xQueueSemaphoreTake>
 8001b62:	4603      	mov	r3, r0
 8001b64:	2b01      	cmp	r3, #1
 8001b66:	d142      	bne.n	8001bee <pc_set_curr_value+0xa6>
	{
		uint8_t reg_id = local_copy->reg_id;
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	781b      	ldrb	r3, [r3, #0]
 8001b6c:	73fb      	strb	r3, [r7, #15]
		pc_curr_reg_dbase[ic_id - 1][reg_id].reg_id = reg_id;
 8001b6e:	79fb      	ldrb	r3, [r7, #7]
 8001b70:	1e59      	subs	r1, r3, #1
 8001b72:	7bfa      	ldrb	r2, [r7, #15]
 8001b74:	4821      	ldr	r0, [pc, #132]	; (8001bfc <pc_set_curr_value+0xb4>)
 8001b76:	4613      	mov	r3, r2
 8001b78:	005b      	lsls	r3, r3, #1
 8001b7a:	4413      	add	r3, r2
 8001b7c:	009b      	lsls	r3, r3, #2
 8001b7e:	f44f 723d 	mov.w	r2, #756	; 0x2f4
 8001b82:	fb02 f201 	mul.w	r2, r2, r1
 8001b86:	4413      	add	r3, r2
 8001b88:	4403      	add	r3, r0
 8001b8a:	7bfa      	ldrb	r2, [r7, #15]
 8001b8c:	701a      	strb	r2, [r3, #0]
		pc_curr_reg_dbase[ic_id - 1][reg_id].cascade = local_copy->cascade;
 8001b8e:	79fb      	ldrb	r3, [r7, #7]
 8001b90:	1e59      	subs	r1, r3, #1
 8001b92:	7bfa      	ldrb	r2, [r7, #15]
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	785c      	ldrb	r4, [r3, #1]
 8001b98:	4818      	ldr	r0, [pc, #96]	; (8001bfc <pc_set_curr_value+0xb4>)
 8001b9a:	4613      	mov	r3, r2
 8001b9c:	005b      	lsls	r3, r3, #1
 8001b9e:	4413      	add	r3, r2
 8001ba0:	009b      	lsls	r3, r3, #2
 8001ba2:	f44f 723d 	mov.w	r2, #756	; 0x2f4
 8001ba6:	fb02 f201 	mul.w	r2, r2, r1
 8001baa:	4413      	add	r3, r2
 8001bac:	4403      	add	r3, r0
 8001bae:	3301      	adds	r3, #1
 8001bb0:	4622      	mov	r2, r4
 8001bb2:	701a      	strb	r2, [r3, #0]
		memcpy((void*) pc_curr_reg_dbase[ic_id - 1][reg_id].reg_val,
 8001bb4:	79fb      	ldrb	r3, [r7, #7]
 8001bb6:	1e59      	subs	r1, r3, #1
 8001bb8:	7bfa      	ldrb	r2, [r7, #15]
 8001bba:	4613      	mov	r3, r2
 8001bbc:	005b      	lsls	r3, r3, #1
 8001bbe:	4413      	add	r3, r2
 8001bc0:	009b      	lsls	r3, r3, #2
 8001bc2:	f44f 723d 	mov.w	r2, #756	; 0x2f4
 8001bc6:	fb02 f201 	mul.w	r2, r2, r1
 8001bca:	4413      	add	r3, r2
 8001bcc:	4a0b      	ldr	r2, [pc, #44]	; (8001bfc <pc_set_curr_value+0xb4>)
 8001bce:	4413      	add	r3, r2
 8001bd0:	1c98      	adds	r0, r3, #2
				(const void*) local_copy->reg_val, sizeof(local_copy->reg_val));
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	3302      	adds	r3, #2
		memcpy((void*) pc_curr_reg_dbase[ic_id - 1][reg_id].reg_val,
 8001bd6:	220a      	movs	r2, #10
 8001bd8:	4619      	mov	r1, r3
 8001bda:	f019 faef 	bl	801b1bc <memcpy>

		xSemaphoreGive(pc_mutex_handle);
 8001bde:	4b06      	ldr	r3, [pc, #24]	; (8001bf8 <pc_set_curr_value+0xb0>)
 8001be0:	6818      	ldr	r0, [r3, #0]
 8001be2:	2300      	movs	r3, #0
 8001be4:	2200      	movs	r2, #0
 8001be6:	2100      	movs	r1, #0
 8001be8:	f006 fc62 	bl	80084b0 <xQueueGenericSend>
	}
	return;
 8001bec:	bf00      	nop
 8001bee:	bf00      	nop
}
 8001bf0:	3714      	adds	r7, #20
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd90      	pop	{r4, r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	20000b70 	.word	0x20000b70
 8001bfc:	20000cd4 	.word	0x20000cd4

08001c00 <pc_save_default_value>:

void pc_save_default_value(uint8_t ic_id, reg_t *local_copy)
{
 8001c00:	b590      	push	{r4, r7, lr}
 8001c02:	b085      	sub	sp, #20
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	4603      	mov	r3, r0
 8001c08:	6039      	str	r1, [r7, #0]
 8001c0a:	71fb      	strb	r3, [r7, #7]
	if ( xSemaphoreTake( pc_mutex_handle, portMAX_DELAY ) == pdTRUE)
 8001c0c:	4b2a      	ldr	r3, [pc, #168]	; (8001cb8 <pc_save_default_value+0xb8>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f04f 31ff 	mov.w	r1, #4294967295
 8001c14:	4618      	mov	r0, r3
 8001c16:	f006 ff4f 	bl	8008ab8 <xQueueSemaphoreTake>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	2b01      	cmp	r3, #1
 8001c1e:	d146      	bne.n	8001cae <pc_save_default_value+0xae>
	{
		uint8_t reg_id = local_copy->reg_id;
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	781b      	ldrb	r3, [r3, #0]
 8001c24:	73fb      	strb	r3, [r7, #15]
		pc_dflt_reg_dbase[ic_id - 1][reg_id].reg_id = reg_id;
 8001c26:	79fb      	ldrb	r3, [r7, #7]
 8001c28:	1e59      	subs	r1, r3, #1
 8001c2a:	7bfa      	ldrb	r2, [r7, #15]
 8001c2c:	4823      	ldr	r0, [pc, #140]	; (8001cbc <pc_save_default_value+0xbc>)
 8001c2e:	4613      	mov	r3, r2
 8001c30:	005b      	lsls	r3, r3, #1
 8001c32:	4413      	add	r3, r2
 8001c34:	009b      	lsls	r3, r3, #2
 8001c36:	f44f 723d 	mov.w	r2, #756	; 0x2f4
 8001c3a:	fb02 f201 	mul.w	r2, r2, r1
 8001c3e:	4413      	add	r3, r2
 8001c40:	4403      	add	r3, r0
 8001c42:	7bfa      	ldrb	r2, [r7, #15]
 8001c44:	701a      	strb	r2, [r3, #0]
		pc_dflt_reg_dbase[ic_id - 1][reg_id].cascade = local_copy->cascade;
 8001c46:	79fb      	ldrb	r3, [r7, #7]
 8001c48:	1e59      	subs	r1, r3, #1
 8001c4a:	7bfa      	ldrb	r2, [r7, #15]
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	785c      	ldrb	r4, [r3, #1]
 8001c50:	481a      	ldr	r0, [pc, #104]	; (8001cbc <pc_save_default_value+0xbc>)
 8001c52:	4613      	mov	r3, r2
 8001c54:	005b      	lsls	r3, r3, #1
 8001c56:	4413      	add	r3, r2
 8001c58:	009b      	lsls	r3, r3, #2
 8001c5a:	f44f 723d 	mov.w	r2, #756	; 0x2f4
 8001c5e:	fb02 f201 	mul.w	r2, r2, r1
 8001c62:	4413      	add	r3, r2
 8001c64:	4403      	add	r3, r0
 8001c66:	3301      	adds	r3, #1
 8001c68:	4622      	mov	r2, r4
 8001c6a:	701a      	strb	r2, [r3, #0]
		trace_printf("size is %d\n", sizeof(local_copy->reg_val));
 8001c6c:	210a      	movs	r1, #10
 8001c6e:	4814      	ldr	r0, [pc, #80]	; (8001cc0 <pc_save_default_value+0xc0>)
 8001c70:	f019 fa50 	bl	801b114 <trace_printf>
		memcpy((void*) pc_dflt_reg_dbase[ic_id - 1][reg_id].reg_val,
 8001c74:	79fb      	ldrb	r3, [r7, #7]
 8001c76:	1e59      	subs	r1, r3, #1
 8001c78:	7bfa      	ldrb	r2, [r7, #15]
 8001c7a:	4613      	mov	r3, r2
 8001c7c:	005b      	lsls	r3, r3, #1
 8001c7e:	4413      	add	r3, r2
 8001c80:	009b      	lsls	r3, r3, #2
 8001c82:	f44f 723d 	mov.w	r2, #756	; 0x2f4
 8001c86:	fb02 f201 	mul.w	r2, r2, r1
 8001c8a:	4413      	add	r3, r2
 8001c8c:	4a0b      	ldr	r2, [pc, #44]	; (8001cbc <pc_save_default_value+0xbc>)
 8001c8e:	4413      	add	r3, r2
 8001c90:	1c98      	adds	r0, r3, #2
				(const void*) local_copy->reg_val, sizeof(local_copy->reg_val));
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	3302      	adds	r3, #2
		memcpy((void*) pc_dflt_reg_dbase[ic_id - 1][reg_id].reg_val,
 8001c96:	220a      	movs	r2, #10
 8001c98:	4619      	mov	r1, r3
 8001c9a:	f019 fa8f 	bl	801b1bc <memcpy>

		xSemaphoreGive(pc_mutex_handle);
 8001c9e:	4b06      	ldr	r3, [pc, #24]	; (8001cb8 <pc_save_default_value+0xb8>)
 8001ca0:	6818      	ldr	r0, [r3, #0]
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	2100      	movs	r1, #0
 8001ca8:	f006 fc02 	bl	80084b0 <xQueueGenericSend>
	}
	return;
 8001cac:	bf00      	nop
 8001cae:	bf00      	nop
}
 8001cb0:	3714      	adds	r7, #20
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd90      	pop	{r4, r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	20000b70 	.word	0x20000b70
 8001cbc:	200012bc 	.word	0x200012bc
 8001cc0:	0801c9bc 	.word	0x0801c9bc

08001cc4 <pc_save_mini_value>:

void pc_save_mini_value(uint8_t ic_id, reg_t *local_copy)
{
 8001cc4:	b590      	push	{r4, r7, lr}
 8001cc6:	b085      	sub	sp, #20
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	4603      	mov	r3, r0
 8001ccc:	6039      	str	r1, [r7, #0]
 8001cce:	71fb      	strb	r3, [r7, #7]
	if ( xSemaphoreTake( pc_mutex_handle, portMAX_DELAY ) == pdTRUE)
 8001cd0:	4b2a      	ldr	r3, [pc, #168]	; (8001d7c <pc_save_mini_value+0xb8>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f04f 31ff 	mov.w	r1, #4294967295
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f006 feed 	bl	8008ab8 <xQueueSemaphoreTake>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	2b01      	cmp	r3, #1
 8001ce2:	d146      	bne.n	8001d72 <pc_save_mini_value+0xae>
	{
		uint8_t reg_id = local_copy->reg_id;
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	781b      	ldrb	r3, [r3, #0]
 8001ce8:	73fb      	strb	r3, [r7, #15]
		pc_mini_reg_dbase[ic_id - 1][reg_id].reg_id = reg_id;
 8001cea:	79fb      	ldrb	r3, [r7, #7]
 8001cec:	1e59      	subs	r1, r3, #1
 8001cee:	7bfa      	ldrb	r2, [r7, #15]
 8001cf0:	4823      	ldr	r0, [pc, #140]	; (8001d80 <pc_save_mini_value+0xbc>)
 8001cf2:	4613      	mov	r3, r2
 8001cf4:	005b      	lsls	r3, r3, #1
 8001cf6:	4413      	add	r3, r2
 8001cf8:	009b      	lsls	r3, r3, #2
 8001cfa:	f44f 723d 	mov.w	r2, #756	; 0x2f4
 8001cfe:	fb02 f201 	mul.w	r2, r2, r1
 8001d02:	4413      	add	r3, r2
 8001d04:	4403      	add	r3, r0
 8001d06:	7bfa      	ldrb	r2, [r7, #15]
 8001d08:	701a      	strb	r2, [r3, #0]
		pc_mini_reg_dbase[ic_id - 1][reg_id].cascade = local_copy->cascade;
 8001d0a:	79fb      	ldrb	r3, [r7, #7]
 8001d0c:	1e59      	subs	r1, r3, #1
 8001d0e:	7bfa      	ldrb	r2, [r7, #15]
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	785c      	ldrb	r4, [r3, #1]
 8001d14:	481a      	ldr	r0, [pc, #104]	; (8001d80 <pc_save_mini_value+0xbc>)
 8001d16:	4613      	mov	r3, r2
 8001d18:	005b      	lsls	r3, r3, #1
 8001d1a:	4413      	add	r3, r2
 8001d1c:	009b      	lsls	r3, r3, #2
 8001d1e:	f44f 723d 	mov.w	r2, #756	; 0x2f4
 8001d22:	fb02 f201 	mul.w	r2, r2, r1
 8001d26:	4413      	add	r3, r2
 8001d28:	4403      	add	r3, r0
 8001d2a:	3301      	adds	r3, #1
 8001d2c:	4622      	mov	r2, r4
 8001d2e:	701a      	strb	r2, [r3, #0]
		trace_printf("size is %d\n", sizeof(local_copy->reg_val));
 8001d30:	210a      	movs	r1, #10
 8001d32:	4814      	ldr	r0, [pc, #80]	; (8001d84 <pc_save_mini_value+0xc0>)
 8001d34:	f019 f9ee 	bl	801b114 <trace_printf>
		memcpy((void*) pc_mini_reg_dbase[ic_id - 1][reg_id].reg_val,
 8001d38:	79fb      	ldrb	r3, [r7, #7]
 8001d3a:	1e59      	subs	r1, r3, #1
 8001d3c:	7bfa      	ldrb	r2, [r7, #15]
 8001d3e:	4613      	mov	r3, r2
 8001d40:	005b      	lsls	r3, r3, #1
 8001d42:	4413      	add	r3, r2
 8001d44:	009b      	lsls	r3, r3, #2
 8001d46:	f44f 723d 	mov.w	r2, #756	; 0x2f4
 8001d4a:	fb02 f201 	mul.w	r2, r2, r1
 8001d4e:	4413      	add	r3, r2
 8001d50:	4a0b      	ldr	r2, [pc, #44]	; (8001d80 <pc_save_mini_value+0xbc>)
 8001d52:	4413      	add	r3, r2
 8001d54:	1c98      	adds	r0, r3, #2
				(const void*) local_copy->reg_val, sizeof(local_copy->reg_val));
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	3302      	adds	r3, #2
		memcpy((void*) pc_mini_reg_dbase[ic_id - 1][reg_id].reg_val,
 8001d5a:	220a      	movs	r2, #10
 8001d5c:	4619      	mov	r1, r3
 8001d5e:	f019 fa2d 	bl	801b1bc <memcpy>

		xSemaphoreGive(pc_mutex_handle);
 8001d62:	4b06      	ldr	r3, [pc, #24]	; (8001d7c <pc_save_mini_value+0xb8>)
 8001d64:	6818      	ldr	r0, [r3, #0]
 8001d66:	2300      	movs	r3, #0
 8001d68:	2200      	movs	r2, #0
 8001d6a:	2100      	movs	r1, #0
 8001d6c:	f006 fba0 	bl	80084b0 <xQueueGenericSend>
	}
	return;
 8001d70:	bf00      	nop
 8001d72:	bf00      	nop
}
 8001d74:	3714      	adds	r7, #20
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd90      	pop	{r4, r7, pc}
 8001d7a:	bf00      	nop
 8001d7c:	20000b70 	.word	0x20000b70
 8001d80:	200018a4 	.word	0x200018a4
 8001d84:	0801c9bc 	.word	0x0801c9bc

08001d88 <pc_save_maxi_value>:

void pc_save_maxi_value(uint8_t ic_id, reg_t *local_copy)
{
 8001d88:	b590      	push	{r4, r7, lr}
 8001d8a:	b085      	sub	sp, #20
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	4603      	mov	r3, r0
 8001d90:	6039      	str	r1, [r7, #0]
 8001d92:	71fb      	strb	r3, [r7, #7]
	if ( xSemaphoreTake( pc_mutex_handle, portMAX_DELAY ) == pdTRUE)
 8001d94:	4b2a      	ldr	r3, [pc, #168]	; (8001e40 <pc_save_maxi_value+0xb8>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f04f 31ff 	mov.w	r1, #4294967295
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f006 fe8b 	bl	8008ab8 <xQueueSemaphoreTake>
 8001da2:	4603      	mov	r3, r0
 8001da4:	2b01      	cmp	r3, #1
 8001da6:	d146      	bne.n	8001e36 <pc_save_maxi_value+0xae>
	{
		uint8_t reg_id = local_copy->reg_id;
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	781b      	ldrb	r3, [r3, #0]
 8001dac:	73fb      	strb	r3, [r7, #15]
		pc_maxi_reg_dbase[ic_id - 1][reg_id].reg_id = reg_id;
 8001dae:	79fb      	ldrb	r3, [r7, #7]
 8001db0:	1e59      	subs	r1, r3, #1
 8001db2:	7bfa      	ldrb	r2, [r7, #15]
 8001db4:	4823      	ldr	r0, [pc, #140]	; (8001e44 <pc_save_maxi_value+0xbc>)
 8001db6:	4613      	mov	r3, r2
 8001db8:	005b      	lsls	r3, r3, #1
 8001dba:	4413      	add	r3, r2
 8001dbc:	009b      	lsls	r3, r3, #2
 8001dbe:	f44f 723d 	mov.w	r2, #756	; 0x2f4
 8001dc2:	fb02 f201 	mul.w	r2, r2, r1
 8001dc6:	4413      	add	r3, r2
 8001dc8:	4403      	add	r3, r0
 8001dca:	7bfa      	ldrb	r2, [r7, #15]
 8001dcc:	701a      	strb	r2, [r3, #0]
		pc_maxi_reg_dbase[ic_id - 1][reg_id].cascade = local_copy->cascade;
 8001dce:	79fb      	ldrb	r3, [r7, #7]
 8001dd0:	1e59      	subs	r1, r3, #1
 8001dd2:	7bfa      	ldrb	r2, [r7, #15]
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	785c      	ldrb	r4, [r3, #1]
 8001dd8:	481a      	ldr	r0, [pc, #104]	; (8001e44 <pc_save_maxi_value+0xbc>)
 8001dda:	4613      	mov	r3, r2
 8001ddc:	005b      	lsls	r3, r3, #1
 8001dde:	4413      	add	r3, r2
 8001de0:	009b      	lsls	r3, r3, #2
 8001de2:	f44f 723d 	mov.w	r2, #756	; 0x2f4
 8001de6:	fb02 f201 	mul.w	r2, r2, r1
 8001dea:	4413      	add	r3, r2
 8001dec:	4403      	add	r3, r0
 8001dee:	3301      	adds	r3, #1
 8001df0:	4622      	mov	r2, r4
 8001df2:	701a      	strb	r2, [r3, #0]
		trace_printf("size is %d\n", sizeof(local_copy->reg_val));
 8001df4:	210a      	movs	r1, #10
 8001df6:	4814      	ldr	r0, [pc, #80]	; (8001e48 <pc_save_maxi_value+0xc0>)
 8001df8:	f019 f98c 	bl	801b114 <trace_printf>
		memcpy((void*) pc_maxi_reg_dbase[ic_id - 1][reg_id].reg_val,
 8001dfc:	79fb      	ldrb	r3, [r7, #7]
 8001dfe:	1e59      	subs	r1, r3, #1
 8001e00:	7bfa      	ldrb	r2, [r7, #15]
 8001e02:	4613      	mov	r3, r2
 8001e04:	005b      	lsls	r3, r3, #1
 8001e06:	4413      	add	r3, r2
 8001e08:	009b      	lsls	r3, r3, #2
 8001e0a:	f44f 723d 	mov.w	r2, #756	; 0x2f4
 8001e0e:	fb02 f201 	mul.w	r2, r2, r1
 8001e12:	4413      	add	r3, r2
 8001e14:	4a0b      	ldr	r2, [pc, #44]	; (8001e44 <pc_save_maxi_value+0xbc>)
 8001e16:	4413      	add	r3, r2
 8001e18:	1c98      	adds	r0, r3, #2
				(const void*) local_copy->reg_val, sizeof(local_copy->reg_val));
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	3302      	adds	r3, #2
		memcpy((void*) pc_maxi_reg_dbase[ic_id - 1][reg_id].reg_val,
 8001e1e:	220a      	movs	r2, #10
 8001e20:	4619      	mov	r1, r3
 8001e22:	f019 f9cb 	bl	801b1bc <memcpy>

		xSemaphoreGive(pc_mutex_handle);
 8001e26:	4b06      	ldr	r3, [pc, #24]	; (8001e40 <pc_save_maxi_value+0xb8>)
 8001e28:	6818      	ldr	r0, [r3, #0]
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	2100      	movs	r1, #0
 8001e30:	f006 fb3e 	bl	80084b0 <xQueueGenericSend>
	}
	return;
 8001e34:	bf00      	nop
 8001e36:	bf00      	nop
}
 8001e38:	3714      	adds	r7, #20
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd90      	pop	{r4, r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	20000b70 	.word	0x20000b70
 8001e44:	20001e8c 	.word	0x20001e8c
 8001e48:	0801c9bc 	.word	0x0801c9bc

08001e4c <board_set_reg_data>:

static void board_set_reg_data(uint8_t data)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b082      	sub	sp, #8
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	4603      	mov	r3, r0
 8001e54:	71fb      	strb	r3, [r7, #7]
	if (data)
 8001e56:	79fb      	ldrb	r3, [r7, #7]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d006      	beq.n	8001e6a <board_set_reg_data+0x1e>
		HAL_GPIO_WritePin(IC_DATA_Port, IC_DATA_Pin, GPIO_PIN_SET);
 8001e5c:	2201      	movs	r2, #1
 8001e5e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e62:	4807      	ldr	r0, [pc, #28]	; (8001e80 <board_set_reg_data+0x34>)
 8001e64:	f002 ff58 	bl	8004d18 <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(IC_DATA_Port, IC_DATA_Pin, GPIO_PIN_RESET);
	return;
 8001e68:	e006      	b.n	8001e78 <board_set_reg_data+0x2c>
		HAL_GPIO_WritePin(IC_DATA_Port, IC_DATA_Pin, GPIO_PIN_RESET);
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e70:	4803      	ldr	r0, [pc, #12]	; (8001e80 <board_set_reg_data+0x34>)
 8001e72:	f002 ff51 	bl	8004d18 <HAL_GPIO_WritePin>
	return;
 8001e76:	bf00      	nop
}
 8001e78:	3708      	adds	r7, #8
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	40020400 	.word	0x40020400

08001e84 <board_send_reg_clock>:

static void board_send_reg_clock(void)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b082      	sub	sp, #8
 8001e88:	af00      	add	r7, sp, #0
	for (int i = 0; i < CHIP_CLK_DELAY; i++)
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	607b      	str	r3, [r7, #4]
 8001e8e:	e002      	b.n	8001e96 <board_send_reg_clock+0x12>
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	3301      	adds	r3, #1
 8001e94:	607b      	str	r3, [r7, #4]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001e9c:	dbf8      	blt.n	8001e90 <board_send_reg_clock+0xc>
		;
	HAL_GPIO_WritePin(IC_CLK_Port, IC_CLK_Pin, GPIO_PIN_SET);
 8001e9e:	2201      	movs	r2, #1
 8001ea0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ea4:	480b      	ldr	r0, [pc, #44]	; (8001ed4 <board_send_reg_clock+0x50>)
 8001ea6:	f002 ff37 	bl	8004d18 <HAL_GPIO_WritePin>

	for (int i = 0; i < CHIP_CLK_DELAY; i++)
 8001eaa:	2300      	movs	r3, #0
 8001eac:	603b      	str	r3, [r7, #0]
 8001eae:	e002      	b.n	8001eb6 <board_send_reg_clock+0x32>
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	3301      	adds	r3, #1
 8001eb4:	603b      	str	r3, [r7, #0]
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001ebc:	dbf8      	blt.n	8001eb0 <board_send_reg_clock+0x2c>
		;
	HAL_GPIO_WritePin(IC_CLK_Port, IC_CLK_Pin, GPIO_PIN_RESET);
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ec4:	4803      	ldr	r0, [pc, #12]	; (8001ed4 <board_send_reg_clock+0x50>)
 8001ec6:	f002 ff27 	bl	8004d18 <HAL_GPIO_WritePin>

	return;
 8001eca:	bf00      	nop
}
 8001ecc:	3708      	adds	r7, #8
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	40020800 	.word	0x40020800

08001ed8 <board_send_le_ic1>:

static void board_send_le_ic1(void)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b082      	sub	sp, #8
 8001edc:	af00      	add	r7, sp, #0
	for (int i = 0; i < CHIP_CLK_DELAY; i++)
 8001ede:	2300      	movs	r3, #0
 8001ee0:	607b      	str	r3, [r7, #4]
 8001ee2:	e002      	b.n	8001eea <board_send_le_ic1+0x12>
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	3301      	adds	r3, #1
 8001ee8:	607b      	str	r3, [r7, #4]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001ef0:	dbf8      	blt.n	8001ee4 <board_send_le_ic1+0xc>
		;
	HAL_GPIO_WritePin(IC1_LE_Port, IC1_LE_Pin, GPIO_PIN_SET);
 8001ef2:	2201      	movs	r2, #1
 8001ef4:	2140      	movs	r1, #64	; 0x40
 8001ef6:	480b      	ldr	r0, [pc, #44]	; (8001f24 <board_send_le_ic1+0x4c>)
 8001ef8:	f002 ff0e 	bl	8004d18 <HAL_GPIO_WritePin>

	for (int i = 0; i < CHIP_CLK_DELAY; i++)
 8001efc:	2300      	movs	r3, #0
 8001efe:	603b      	str	r3, [r7, #0]
 8001f00:	e002      	b.n	8001f08 <board_send_le_ic1+0x30>
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	3301      	adds	r3, #1
 8001f06:	603b      	str	r3, [r7, #0]
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001f0e:	dbf8      	blt.n	8001f02 <board_send_le_ic1+0x2a>
		;
	HAL_GPIO_WritePin(IC1_LE_Port, IC1_LE_Pin, GPIO_PIN_RESET);
 8001f10:	2200      	movs	r2, #0
 8001f12:	2140      	movs	r1, #64	; 0x40
 8001f14:	4803      	ldr	r0, [pc, #12]	; (8001f24 <board_send_le_ic1+0x4c>)
 8001f16:	f002 feff 	bl	8004d18 <HAL_GPIO_WritePin>
	return;
 8001f1a:	bf00      	nop
}
 8001f1c:	3708      	adds	r7, #8
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}
 8001f22:	bf00      	nop
 8001f24:	40020800 	.word	0x40020800

08001f28 <board_send_le_ic2>:

static void board_send_le_ic2(void)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b082      	sub	sp, #8
 8001f2c:	af00      	add	r7, sp, #0
	for (int i = 0; i < CHIP_CLK_DELAY; i++)
 8001f2e:	2300      	movs	r3, #0
 8001f30:	607b      	str	r3, [r7, #4]
 8001f32:	e002      	b.n	8001f3a <board_send_le_ic2+0x12>
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	3301      	adds	r3, #1
 8001f38:	607b      	str	r3, [r7, #4]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001f40:	dbf8      	blt.n	8001f34 <board_send_le_ic2+0xc>
		;
	HAL_GPIO_WritePin(IC2_LE_Port, IC2_LE_Pin, GPIO_PIN_SET);
 8001f42:	2201      	movs	r2, #1
 8001f44:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f48:	480b      	ldr	r0, [pc, #44]	; (8001f78 <board_send_le_ic2+0x50>)
 8001f4a:	f002 fee5 	bl	8004d18 <HAL_GPIO_WritePin>

	for (int i = 0; i < CHIP_CLK_DELAY; i++)
 8001f4e:	2300      	movs	r3, #0
 8001f50:	603b      	str	r3, [r7, #0]
 8001f52:	e002      	b.n	8001f5a <board_send_le_ic2+0x32>
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	3301      	adds	r3, #1
 8001f58:	603b      	str	r3, [r7, #0]
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001f60:	dbf8      	blt.n	8001f54 <board_send_le_ic2+0x2c>
		;
	HAL_GPIO_WritePin(IC2_LE_Port, IC2_LE_Pin, GPIO_PIN_RESET);
 8001f62:	2200      	movs	r2, #0
 8001f64:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f68:	4803      	ldr	r0, [pc, #12]	; (8001f78 <board_send_le_ic2+0x50>)
 8001f6a:	f002 fed5 	bl	8004d18 <HAL_GPIO_WritePin>
	return;
 8001f6e:	bf00      	nop
}
 8001f70:	3708      	adds	r7, #8
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	bf00      	nop
 8001f78:	40020400 	.word	0x40020400

08001f7c <pc_program_bits>:
 * cause it seems that there are more than 3 shift registers in cascade
 * num_data_bytes-->num of bytes, should be multiple of 5 as one register is 5 bytes
 * in the buff-->msb is at lowest address and lsb is at the highest address
 */
static void pc_program_bits(uint8_t ic_id, reg_t *tmp_reg)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b086      	sub	sp, #24
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	4603      	mov	r3, r0
 8001f84:	6039      	str	r1, [r7, #0]
 8001f86:	71fb      	strb	r3, [r7, #7]
	uint8_t ii;
	uint8_t i;
	uint8_t tmp_data;
	uint8_t tot_bits = tmp_reg->cascade * G_LENGTH_ONE_REG;
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	785b      	ldrb	r3, [r3, #1]
 8001f8c:	461a      	mov	r2, r3
 8001f8e:	0092      	lsls	r2, r2, #2
 8001f90:	4413      	add	r3, r2
 8001f92:	009b      	lsls	r3, r3, #2
 8001f94:	74bb      	strb	r3, [r7, #18]
	uint8_t bits_txmtd = 0;
 8001f96:	2300      	movs	r3, #0
 8001f98:	757b      	strb	r3, [r7, #21]
	uint8_t num_data_bytes;
	uint8_t reg_num = tmp_reg->reg_id;
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	781b      	ldrb	r3, [r3, #0]
 8001f9e:	747b      	strb	r3, [r7, #17]
	uint8_t high_reg_num, low_reg_num;

	num_data_bytes = tmp_reg->cascade * G_LENGTH_ONE_REG >> 3;
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	785b      	ldrb	r3, [r3, #1]
 8001fa4:	461a      	mov	r2, r3
 8001fa6:	4613      	mov	r3, r2
 8001fa8:	009b      	lsls	r3, r3, #2
 8001faa:	4413      	add	r3, r2
 8001fac:	009b      	lsls	r3, r3, #2
 8001fae:	10db      	asrs	r3, r3, #3
 8001fb0:	743b      	strb	r3, [r7, #16]
	num_data_bytes += (tmp_reg->cascade % 2);
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	785b      	ldrb	r3, [r3, #1]
 8001fb6:	f003 0301 	and.w	r3, r3, #1
 8001fba:	b2da      	uxtb	r2, r3
 8001fbc:	7c3b      	ldrb	r3, [r7, #16]
 8001fbe:	4413      	add	r3, r2
 8001fc0:	743b      	strb	r3, [r7, #16]

	trace_printf("num_data_bytes:%d, reg_num:%d, ic_id:%d\n", num_data_bytes,
 8001fc2:	7c39      	ldrb	r1, [r7, #16]
 8001fc4:	7c7a      	ldrb	r2, [r7, #17]
 8001fc6:	79fb      	ldrb	r3, [r7, #7]
 8001fc8:	4849      	ldr	r0, [pc, #292]	; (80020f0 <pc_program_bits+0x174>)
 8001fca:	f019 f8a3 	bl	801b114 <trace_printf>
			reg_num, ic_id);
	// shift in data fist,
	// lsb goes in first
	for (i = 0; i < num_data_bytes; i++)
 8001fce:	2300      	movs	r3, #0
 8001fd0:	75bb      	strb	r3, [r7, #22]
 8001fd2:	e02b      	b.n	800202c <pc_program_bits+0xb0>
		/*
		 * max index 9, min idex 0, last data is saved at G_STORAGE_FOR_ONE_REG_BYTES-1
		 * i.e., data for hw bits b7..b0 is saved at reg_val[9], b8...b15 is at reg_val[8]
		 * and so on. data for b72..b79 will be at reg_val[0]
		 */
		tmp_data = tmp_reg->reg_val[(G_STORAGE_FOR_ONE_REG_BYTES - 1) - (i)];
 8001fd4:	7dbb      	ldrb	r3, [r7, #22]
 8001fd6:	f1c3 0309 	rsb	r3, r3, #9
 8001fda:	683a      	ldr	r2, [r7, #0]
 8001fdc:	4413      	add	r3, r2
 8001fde:	789b      	ldrb	r3, [r3, #2]
 8001fe0:	737b      	strb	r3, [r7, #13]
		for (ii = 0; ii < 8; ii++)
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	75fb      	strb	r3, [r7, #23]
 8001fe6:	e019      	b.n	800201c <pc_program_bits+0xa0>
		{
			uint8_t val;

			val = (tmp_data & 0x1 << ii) >> ii;
 8001fe8:	7b7a      	ldrb	r2, [r7, #13]
 8001fea:	7dfb      	ldrb	r3, [r7, #23]
 8001fec:	2101      	movs	r1, #1
 8001fee:	fa01 f303 	lsl.w	r3, r1, r3
 8001ff2:	401a      	ands	r2, r3
 8001ff4:	7dfb      	ldrb	r3, [r7, #23]
 8001ff6:	fa42 f303 	asr.w	r3, r2, r3
 8001ffa:	733b      	strb	r3, [r7, #12]
			board_set_reg_data(val);
 8001ffc:	7b3b      	ldrb	r3, [r7, #12]
 8001ffe:	4618      	mov	r0, r3
 8002000:	f7ff ff24 	bl	8001e4c <board_set_reg_data>
			board_send_reg_clock();
 8002004:	f7ff ff3e 	bl	8001e84 <board_send_reg_clock>
			bits_txmtd++;
 8002008:	7d7b      	ldrb	r3, [r7, #21]
 800200a:	3301      	adds	r3, #1
 800200c:	757b      	strb	r3, [r7, #21]
			if (bits_txmtd >= tot_bits)
 800200e:	7d7a      	ldrb	r2, [r7, #21]
 8002010:	7cbb      	ldrb	r3, [r7, #18]
 8002012:	429a      	cmp	r2, r3
 8002014:	d206      	bcs.n	8002024 <pc_program_bits+0xa8>
		for (ii = 0; ii < 8; ii++)
 8002016:	7dfb      	ldrb	r3, [r7, #23]
 8002018:	3301      	adds	r3, #1
 800201a:	75fb      	strb	r3, [r7, #23]
 800201c:	7dfb      	ldrb	r3, [r7, #23]
 800201e:	2b07      	cmp	r3, #7
 8002020:	d9e2      	bls.n	8001fe8 <pc_program_bits+0x6c>
 8002022:	e000      	b.n	8002026 <pc_program_bits+0xaa>
				break;
 8002024:	bf00      	nop
	for (i = 0; i < num_data_bytes; i++)
 8002026:	7dbb      	ldrb	r3, [r7, #22]
 8002028:	3301      	adds	r3, #1
 800202a:	75bb      	strb	r3, [r7, #22]
 800202c:	7dba      	ldrb	r2, [r7, #22]
 800202e:	7c3b      	ldrb	r3, [r7, #16]
 8002030:	429a      	cmp	r2, r3
 8002032:	d3cf      	bcc.n	8001fd4 <pc_program_bits+0x58>
		}
	}
	// send address, as there are two address decoders, lower decoder handles regs 0 to 31 and
	// higher one handles regs 32 to 62. latch 0 is unused on both
	// ad0 goes first and ad9 goes last
	if (reg_num > 31)
 8002034:	7c7b      	ldrb	r3, [r7, #17]
 8002036:	2b1f      	cmp	r3, #31
 8002038:	d905      	bls.n	8002046 <pc_program_bits+0xca>
	{
		high_reg_num = reg_num - 31;
 800203a:	7c7b      	ldrb	r3, [r7, #17]
 800203c:	3b1f      	subs	r3, #31
 800203e:	753b      	strb	r3, [r7, #20]
		low_reg_num = 0;
 8002040:	2300      	movs	r3, #0
 8002042:	74fb      	strb	r3, [r7, #19]
 8002044:	e003      	b.n	800204e <pc_program_bits+0xd2>
	}
	else
	{
		high_reg_num = 0;
 8002046:	2300      	movs	r3, #0
 8002048:	753b      	strb	r3, [r7, #20]
		low_reg_num = reg_num;
 800204a:	7c7b      	ldrb	r3, [r7, #17]
 800204c:	74fb      	strb	r3, [r7, #19]
	}

	for (ii = 0; ii < 5; ii++)
 800204e:	2300      	movs	r3, #0
 8002050:	75fb      	strb	r3, [r7, #23]
 8002052:	e012      	b.n	800207a <pc_program_bits+0xfe>
	{
		uint8_t val;

		val = (low_reg_num & 0x1 << ii) >> ii;
 8002054:	7cfa      	ldrb	r2, [r7, #19]
 8002056:	7dfb      	ldrb	r3, [r7, #23]
 8002058:	2101      	movs	r1, #1
 800205a:	fa01 f303 	lsl.w	r3, r1, r3
 800205e:	401a      	ands	r2, r3
 8002060:	7dfb      	ldrb	r3, [r7, #23]
 8002062:	fa42 f303 	asr.w	r3, r2, r3
 8002066:	73bb      	strb	r3, [r7, #14]
		board_set_reg_data(val);
 8002068:	7bbb      	ldrb	r3, [r7, #14]
 800206a:	4618      	mov	r0, r3
 800206c:	f7ff feee 	bl	8001e4c <board_set_reg_data>
		board_send_reg_clock();
 8002070:	f7ff ff08 	bl	8001e84 <board_send_reg_clock>
	for (ii = 0; ii < 5; ii++)
 8002074:	7dfb      	ldrb	r3, [r7, #23]
 8002076:	3301      	adds	r3, #1
 8002078:	75fb      	strb	r3, [r7, #23]
 800207a:	7dfb      	ldrb	r3, [r7, #23]
 800207c:	2b04      	cmp	r3, #4
 800207e:	d9e9      	bls.n	8002054 <pc_program_bits+0xd8>
	}

	for (ii = 0; ii < 5; ii++)
 8002080:	2300      	movs	r3, #0
 8002082:	75fb      	strb	r3, [r7, #23]
 8002084:	e012      	b.n	80020ac <pc_program_bits+0x130>
	{
		uint8_t val;

		val = (high_reg_num & 0x1 << ii) >> ii;
 8002086:	7d3a      	ldrb	r2, [r7, #20]
 8002088:	7dfb      	ldrb	r3, [r7, #23]
 800208a:	2101      	movs	r1, #1
 800208c:	fa01 f303 	lsl.w	r3, r1, r3
 8002090:	401a      	ands	r2, r3
 8002092:	7dfb      	ldrb	r3, [r7, #23]
 8002094:	fa42 f303 	asr.w	r3, r2, r3
 8002098:	73fb      	strb	r3, [r7, #15]
		board_set_reg_data(val);
 800209a:	7bfb      	ldrb	r3, [r7, #15]
 800209c:	4618      	mov	r0, r3
 800209e:	f7ff fed5 	bl	8001e4c <board_set_reg_data>
		board_send_reg_clock();
 80020a2:	f7ff feef 	bl	8001e84 <board_send_reg_clock>
	for (ii = 0; ii < 5; ii++)
 80020a6:	7dfb      	ldrb	r3, [r7, #23]
 80020a8:	3301      	adds	r3, #1
 80020aa:	75fb      	strb	r3, [r7, #23]
 80020ac:	7dfb      	ldrb	r3, [r7, #23]
 80020ae:	2b04      	cmp	r3, #4
 80020b0:	d9e9      	bls.n	8002086 <pc_program_bits+0x10a>
	}

	//send the LE after some extra delay
	for (i = 0; i < 30; i++)
 80020b2:	2300      	movs	r3, #0
 80020b4:	75bb      	strb	r3, [r7, #22]
 80020b6:	e002      	b.n	80020be <pc_program_bits+0x142>
 80020b8:	7dbb      	ldrb	r3, [r7, #22]
 80020ba:	3301      	adds	r3, #1
 80020bc:	75bb      	strb	r3, [r7, #22]
 80020be:	7dbb      	ldrb	r3, [r7, #22]
 80020c0:	2b1d      	cmp	r3, #29
 80020c2:	d9f9      	bls.n	80020b8 <pc_program_bits+0x13c>
		;

	if (ic_id == 1)
 80020c4:	79fb      	ldrb	r3, [r7, #7]
 80020c6:	2b01      	cmp	r3, #1
 80020c8:	d102      	bne.n	80020d0 <pc_program_bits+0x154>
		board_send_le_ic1();
 80020ca:	f7ff ff05 	bl	8001ed8 <board_send_le_ic1>
	{
		trace_printf("Wrong IC ID\n");
		Error_Handler();
	}

	return;
 80020ce:	e00b      	b.n	80020e8 <pc_program_bits+0x16c>
	else if (ic_id == 2)
 80020d0:	79fb      	ldrb	r3, [r7, #7]
 80020d2:	2b02      	cmp	r3, #2
 80020d4:	d102      	bne.n	80020dc <pc_program_bits+0x160>
		board_send_le_ic2();
 80020d6:	f7ff ff27 	bl	8001f28 <board_send_le_ic2>
	return;
 80020da:	e005      	b.n	80020e8 <pc_program_bits+0x16c>
		trace_printf("Wrong IC ID\n");
 80020dc:	4805      	ldr	r0, [pc, #20]	; (80020f4 <pc_program_bits+0x178>)
 80020de:	f019 f819 	bl	801b114 <trace_printf>
		Error_Handler();
 80020e2:	f7fe ff63 	bl	8000fac <Error_Handler>
	return;
 80020e6:	bf00      	nop
}
 80020e8:	3718      	adds	r7, #24
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}
 80020ee:	bf00      	nop
 80020f0:	0801c9c8 	.word	0x0801c9c8
 80020f4:	0801c9f4 	.word	0x0801c9f4

080020f8 <vChipHandlerTask>:

void vChipHandlerTask(void *pvParameters)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b08c      	sub	sp, #48	; 0x30
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
	pc_queue_data_t pc_queue_local_copy;

	while (1)
	{
		if (xQueueReceive(g_pc_queue_handle, &pc_queue_local_copy,
 8002100:	4b81      	ldr	r3, [pc, #516]	; (8002308 <vChipHandlerTask+0x210>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f107 010c 	add.w	r1, r7, #12
 8002108:	f04f 32ff 	mov.w	r2, #4294967295
 800210c:	4618      	mov	r0, r3
 800210e:	f006 fbf3 	bl	80088f8 <xQueueReceive>
 8002112:	4603      	mov	r3, r0
 8002114:	2b01      	cmp	r3, #1
 8002116:	f040 80ee 	bne.w	80022f6 <vChipHandlerTask+0x1fe>
		portMAX_DELAY) == pdPASS)
		{
			if ((pc_queue_local_copy.ic_id == 0))
 800211a:	7bbb      	ldrb	r3, [r7, #14]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d104      	bne.n	800212a <vChipHandlerTask+0x32>
			{
				trace_printf("invalid message\n");
 8002120:	487a      	ldr	r0, [pc, #488]	; (800230c <vChipHandlerTask+0x214>)
 8002122:	f018 fff7 	bl	801b114 <trace_printf>
				Error_Handler();
 8002126:	f7fe ff41 	bl	8000fac <Error_Handler>
			}
			switch (pc_queue_local_copy.command_code)
 800212a:	7b3b      	ldrb	r3, [r7, #12]
 800212c:	3b01      	subs	r3, #1
 800212e:	2b06      	cmp	r3, #6
 8002130:	d8e6      	bhi.n	8002100 <vChipHandlerTask+0x8>
 8002132:	a201      	add	r2, pc, #4	; (adr r2, 8002138 <vChipHandlerTask+0x40>)
 8002134:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002138:	08002155 	.word	0x08002155
 800213c:	08002101 	.word	0x08002101
 8002140:	08002101 	.word	0x08002101
 8002144:	08002101 	.word	0x08002101
 8002148:	08002181 	.word	0x08002181
 800214c:	0800220b 	.word	0x0800220b
 8002150:	0800227f 	.word	0x0800227f
			{

			case G_UC_SET_REG_CONFIG:
			{
				if (pc_queue_local_copy.reg_id > G_MAX_NUM_REGS)
 8002154:	7b7b      	ldrb	r3, [r7, #13]
 8002156:	2b3f      	cmp	r3, #63	; 0x3f
 8002158:	d904      	bls.n	8002164 <vChipHandlerTask+0x6c>
				{
					trace_printf("invalid message\n");
 800215a:	486c      	ldr	r0, [pc, #432]	; (800230c <vChipHandlerTask+0x214>)
 800215c:	f018 ffda 	bl	801b114 <trace_printf>
					Error_Handler();
 8002160:	f7fe ff24 	bl	8000fac <Error_Handler>
				}

				pc_tmp_local_copy.reg_id = pc_queue_local_copy.reg_id;
 8002164:	7b7a      	ldrb	r2, [r7, #13]
 8002166:	4b6a      	ldr	r3, [pc, #424]	; (8002310 <vChipHandlerTask+0x218>)
 8002168:	701a      	strb	r2, [r3, #0]
				pc_get_curr_value(pc_queue_local_copy.ic_id,
 800216a:	7bbb      	ldrb	r3, [r7, #14]
 800216c:	4968      	ldr	r1, [pc, #416]	; (8002310 <vChipHandlerTask+0x218>)
 800216e:	4618      	mov	r0, r3
 8002170:	f7ff fca0 	bl	8001ab4 <pc_get_curr_value>
						&pc_tmp_local_copy);

				pc_program_bits(pc_queue_local_copy.ic_id, &pc_tmp_local_copy);
 8002174:	7bbb      	ldrb	r3, [r7, #14]
 8002176:	4966      	ldr	r1, [pc, #408]	; (8002310 <vChipHandlerTask+0x218>)
 8002178:	4618      	mov	r0, r3
 800217a:	f7ff feff 	bl	8001f7c <pc_program_bits>
				break;
 800217e:	e0c1      	b.n	8002304 <vChipHandlerTask+0x20c>
			}

			case G_UC_APPLY_DEF_REG_CONFIG:
			{
				uint8_t ic_id = pc_queue_local_copy.ic_id;
 8002180:	7bbb      	ldrb	r3, [r7, #14]
 8002182:	75fb      	strb	r3, [r7, #23]
				reg_t *local_ptr;
				uint8_t i;

				if ( xSemaphoreTake(pc_mutex_handle,
 8002184:	4b63      	ldr	r3, [pc, #396]	; (8002314 <vChipHandlerTask+0x21c>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f04f 31ff 	mov.w	r1, #4294967295
 800218c:	4618      	mov	r0, r3
 800218e:	f006 fc93 	bl	8008ab8 <xQueueSemaphoreTake>
 8002192:	4603      	mov	r3, r0
 8002194:	2b01      	cmp	r3, #1
 8002196:	f040 80b0 	bne.w	80022fa <vChipHandlerTask+0x202>
						portMAX_DELAY) == pdTRUE)
				{
					board_blue_led_toggle();
 800219a:	f7fe fcd3 	bl	8000b44 <board_blue_led_toggle>

					for (i = 0; i < G_MAX_NUM_REGS; i++)
 800219e:	2300      	movs	r3, #0
 80021a0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80021a4:	e023      	b.n	80021ee <vChipHandlerTask+0xf6>
					{
						local_ptr = &(pc_dflt_reg_dbase[ic_id - 1][i]);
 80021a6:	7dfb      	ldrb	r3, [r7, #23]
 80021a8:	1e59      	subs	r1, r3, #1
 80021aa:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80021ae:	4613      	mov	r3, r2
 80021b0:	005b      	lsls	r3, r3, #1
 80021b2:	4413      	add	r3, r2
 80021b4:	009b      	lsls	r3, r3, #2
 80021b6:	f44f 723d 	mov.w	r2, #756	; 0x2f4
 80021ba:	fb02 f201 	mul.w	r2, r2, r1
 80021be:	4413      	add	r3, r2
 80021c0:	4a55      	ldr	r2, [pc, #340]	; (8002318 <vChipHandlerTask+0x220>)
 80021c2:	4413      	add	r3, r2
 80021c4:	613b      	str	r3, [r7, #16]
						for (int del = 0; del < 1000; del++)
 80021c6:	2300      	movs	r3, #0
 80021c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80021ca:	e002      	b.n	80021d2 <vChipHandlerTask+0xda>
 80021cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021ce:	3301      	adds	r3, #1
 80021d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80021d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021d4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80021d8:	dbf8      	blt.n	80021cc <vChipHandlerTask+0xd4>
							;
						pc_program_bits(pc_queue_local_copy.ic_id, local_ptr);
 80021da:	7bbb      	ldrb	r3, [r7, #14]
 80021dc:	6939      	ldr	r1, [r7, #16]
 80021de:	4618      	mov	r0, r3
 80021e0:	f7ff fecc 	bl	8001f7c <pc_program_bits>
					for (i = 0; i < G_MAX_NUM_REGS; i++)
 80021e4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80021e8:	3301      	adds	r3, #1
 80021ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80021ee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80021f2:	2b3e      	cmp	r3, #62	; 0x3e
 80021f4:	d9d7      	bls.n	80021a6 <vChipHandlerTask+0xae>
					}
					board_blue_led_toggle();
 80021f6:	f7fe fca5 	bl	8000b44 <board_blue_led_toggle>

					xSemaphoreGive(pc_mutex_handle);
 80021fa:	4b46      	ldr	r3, [pc, #280]	; (8002314 <vChipHandlerTask+0x21c>)
 80021fc:	6818      	ldr	r0, [r3, #0]
 80021fe:	2300      	movs	r3, #0
 8002200:	2200      	movs	r2, #0
 8002202:	2100      	movs	r1, #0
 8002204:	f006 f954 	bl	80084b0 <xQueueGenericSend>
				}

				break;
 8002208:	e077      	b.n	80022fa <vChipHandlerTask+0x202>
			}

			case G_UC_APPLY_MAXI_REG_CONFIG:
			{
				uint8_t ic_id = pc_queue_local_copy.ic_id;
 800220a:	7bbb      	ldrb	r3, [r7, #14]
 800220c:	77fb      	strb	r3, [r7, #31]
				reg_t *local_ptr;
				uint8_t i;

				if ( xSemaphoreTake(pc_mutex_handle,
 800220e:	4b41      	ldr	r3, [pc, #260]	; (8002314 <vChipHandlerTask+0x21c>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f04f 31ff 	mov.w	r1, #4294967295
 8002216:	4618      	mov	r0, r3
 8002218:	f006 fc4e 	bl	8008ab8 <xQueueSemaphoreTake>
 800221c:	4603      	mov	r3, r0
 800221e:	2b01      	cmp	r3, #1
 8002220:	d16d      	bne.n	80022fe <vChipHandlerTask+0x206>
						portMAX_DELAY) == pdTRUE)
				{
					board_blue_led_toggle();
 8002222:	f7fe fc8f 	bl	8000b44 <board_blue_led_toggle>

					for (i = 0; i < G_MAX_NUM_REGS; i++)
 8002226:	2300      	movs	r3, #0
 8002228:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800222c:	e019      	b.n	8002262 <vChipHandlerTask+0x16a>
					{
						local_ptr = &(pc_maxi_reg_dbase[ic_id - 1][i]);
 800222e:	7ffb      	ldrb	r3, [r7, #31]
 8002230:	1e59      	subs	r1, r3, #1
 8002232:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8002236:	4613      	mov	r3, r2
 8002238:	005b      	lsls	r3, r3, #1
 800223a:	4413      	add	r3, r2
 800223c:	009b      	lsls	r3, r3, #2
 800223e:	f44f 723d 	mov.w	r2, #756	; 0x2f4
 8002242:	fb02 f201 	mul.w	r2, r2, r1
 8002246:	4413      	add	r3, r2
 8002248:	4a34      	ldr	r2, [pc, #208]	; (800231c <vChipHandlerTask+0x224>)
 800224a:	4413      	add	r3, r2
 800224c:	61bb      	str	r3, [r7, #24]
						pc_program_bits(pc_queue_local_copy.ic_id, local_ptr);
 800224e:	7bbb      	ldrb	r3, [r7, #14]
 8002250:	69b9      	ldr	r1, [r7, #24]
 8002252:	4618      	mov	r0, r3
 8002254:	f7ff fe92 	bl	8001f7c <pc_program_bits>
					for (i = 0; i < G_MAX_NUM_REGS; i++)
 8002258:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800225c:	3301      	adds	r3, #1
 800225e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002262:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002266:	2b3e      	cmp	r3, #62	; 0x3e
 8002268:	d9e1      	bls.n	800222e <vChipHandlerTask+0x136>
					}
					board_blue_led_toggle();
 800226a:	f7fe fc6b 	bl	8000b44 <board_blue_led_toggle>

					xSemaphoreGive(pc_mutex_handle);
 800226e:	4b29      	ldr	r3, [pc, #164]	; (8002314 <vChipHandlerTask+0x21c>)
 8002270:	6818      	ldr	r0, [r3, #0]
 8002272:	2300      	movs	r3, #0
 8002274:	2200      	movs	r2, #0
 8002276:	2100      	movs	r1, #0
 8002278:	f006 f91a 	bl	80084b0 <xQueueGenericSend>
				}

				break;
 800227c:	e03f      	b.n	80022fe <vChipHandlerTask+0x206>
			}

			case G_UC_APPLY_MINI_REG_CONFIG:
			{
				uint8_t ic_id = pc_queue_local_copy.ic_id;
 800227e:	7bbb      	ldrb	r3, [r7, #14]
 8002280:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
				reg_t *local_ptr;
				uint8_t i;

				if ( xSemaphoreTake(pc_mutex_handle,
 8002284:	4b23      	ldr	r3, [pc, #140]	; (8002314 <vChipHandlerTask+0x21c>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f04f 31ff 	mov.w	r1, #4294967295
 800228c:	4618      	mov	r0, r3
 800228e:	f006 fc13 	bl	8008ab8 <xQueueSemaphoreTake>
 8002292:	4603      	mov	r3, r0
 8002294:	2b01      	cmp	r3, #1
 8002296:	d134      	bne.n	8002302 <vChipHandlerTask+0x20a>
						portMAX_DELAY) == pdTRUE)
				{
					board_blue_led_toggle();
 8002298:	f7fe fc54 	bl	8000b44 <board_blue_led_toggle>

					for (i = 0; i < G_MAX_NUM_REGS; i++)
 800229c:	2300      	movs	r3, #0
 800229e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80022a2:	e01a      	b.n	80022da <vChipHandlerTask+0x1e2>
					{
						local_ptr = &(pc_mini_reg_dbase[ic_id - 1][i]);
 80022a4:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80022a8:	1e59      	subs	r1, r3, #1
 80022aa:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80022ae:	4613      	mov	r3, r2
 80022b0:	005b      	lsls	r3, r3, #1
 80022b2:	4413      	add	r3, r2
 80022b4:	009b      	lsls	r3, r3, #2
 80022b6:	f44f 723d 	mov.w	r2, #756	; 0x2f4
 80022ba:	fb02 f201 	mul.w	r2, r2, r1
 80022be:	4413      	add	r3, r2
 80022c0:	4a17      	ldr	r2, [pc, #92]	; (8002320 <vChipHandlerTask+0x228>)
 80022c2:	4413      	add	r3, r2
 80022c4:	623b      	str	r3, [r7, #32]
						pc_program_bits(pc_queue_local_copy.ic_id, local_ptr);
 80022c6:	7bbb      	ldrb	r3, [r7, #14]
 80022c8:	6a39      	ldr	r1, [r7, #32]
 80022ca:	4618      	mov	r0, r3
 80022cc:	f7ff fe56 	bl	8001f7c <pc_program_bits>
					for (i = 0; i < G_MAX_NUM_REGS; i++)
 80022d0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80022d4:	3301      	adds	r3, #1
 80022d6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80022da:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80022de:	2b3e      	cmp	r3, #62	; 0x3e
 80022e0:	d9e0      	bls.n	80022a4 <vChipHandlerTask+0x1ac>
					}

					board_blue_led_toggle();
 80022e2:	f7fe fc2f 	bl	8000b44 <board_blue_led_toggle>

					xSemaphoreGive(pc_mutex_handle);
 80022e6:	4b0b      	ldr	r3, [pc, #44]	; (8002314 <vChipHandlerTask+0x21c>)
 80022e8:	6818      	ldr	r0, [r3, #0]
 80022ea:	2300      	movs	r3, #0
 80022ec:	2200      	movs	r2, #0
 80022ee:	2100      	movs	r1, #0
 80022f0:	f006 f8de 	bl	80084b0 <xQueueGenericSend>
				}

				break;
 80022f4:	e005      	b.n	8002302 <vChipHandlerTask+0x20a>
			}
			}
		}
 80022f6:	bf00      	nop
 80022f8:	e702      	b.n	8002100 <vChipHandlerTask+0x8>
				break;
 80022fa:	bf00      	nop
 80022fc:	e700      	b.n	8002100 <vChipHandlerTask+0x8>
				break;
 80022fe:	bf00      	nop
 8002300:	e6fe      	b.n	8002100 <vChipHandlerTask+0x8>
				break;
 8002302:	bf00      	nop
		if (xQueueReceive(g_pc_queue_handle, &pc_queue_local_copy,
 8002304:	e6fc      	b.n	8002100 <vChipHandlerTask+0x8>
 8002306:	bf00      	nop
 8002308:	2000a218 	.word	0x2000a218
 800230c:	0801ca04 	.word	0x0801ca04
 8002310:	20000c04 	.word	0x20000c04
 8002314:	20000b70 	.word	0x20000b70
 8002318:	200012bc 	.word	0x200012bc
 800231c:	20001e8c 	.word	0x20001e8c
 8002320:	200018a4 	.word	0x200018a4

08002324 <vStartChipRegTask>:

	return;
}

void vStartChipRegTask(UBaseType_t uxPriority)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b086      	sub	sp, #24
 8002328:	af02      	add	r7, sp, #8
 800232a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturned;
	g_pc_queue_handle = xQueueCreateStatic(PC_QUEUE_LENGTH,
 800232c:	2300      	movs	r3, #0
 800232e:	9300      	str	r3, [sp, #0]
 8002330:	4b1d      	ldr	r3, [pc, #116]	; (80023a8 <vStartChipRegTask+0x84>)
 8002332:	4a1e      	ldr	r2, [pc, #120]	; (80023ac <vStartChipRegTask+0x88>)
 8002334:	2103      	movs	r1, #3
 8002336:	2040      	movs	r0, #64	; 0x40
 8002338:	f005 ff96 	bl	8008268 <xQueueGenericCreateStatic>
 800233c:	4603      	mov	r3, r0
 800233e:	4a1c      	ldr	r2, [pc, #112]	; (80023b0 <vStartChipRegTask+0x8c>)
 8002340:	6013      	str	r3, [r2, #0]
			sizeof(pc_queue_data_t), pc_queue_storage_area, &pc_queue_ds);
	if ( NULL == g_pc_queue_handle)
 8002342:	4b1b      	ldr	r3, [pc, #108]	; (80023b0 <vStartChipRegTask+0x8c>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d104      	bne.n	8002354 <vStartChipRegTask+0x30>
	{
		trace_printf("failed to create the pc queue\n");
 800234a:	481a      	ldr	r0, [pc, #104]	; (80023b4 <vStartChipRegTask+0x90>)
 800234c:	f018 fee2 	bl	801b114 <trace_printf>
		Error_Handler();
 8002350:	f7fe fe2c 	bl	8000fac <Error_Handler>
	}
	pc_mutex_handle = xSemaphoreCreateMutexStatic(&pc_mutex_ds);
 8002354:	4918      	ldr	r1, [pc, #96]	; (80023b8 <vStartChipRegTask+0x94>)
 8002356:	2001      	movs	r0, #1
 8002358:	f006 f88f 	bl	800847a <xQueueCreateMutexStatic>
 800235c:	4603      	mov	r3, r0
 800235e:	4a17      	ldr	r2, [pc, #92]	; (80023bc <vStartChipRegTask+0x98>)
 8002360:	6013      	str	r3, [r2, #0]
	if ( NULL == pc_mutex_handle)
 8002362:	4b16      	ldr	r3, [pc, #88]	; (80023bc <vStartChipRegTask+0x98>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d104      	bne.n	8002374 <vStartChipRegTask+0x50>
	{
		trace_printf("failed to create mutex for register storage data\n");
 800236a:	4815      	ldr	r0, [pc, #84]	; (80023c0 <vStartChipRegTask+0x9c>)
 800236c:	f018 fed2 	bl	801b114 <trace_printf>
		Error_Handler();
 8002370:	f7fe fe1c 	bl	8000fac <Error_Handler>
	}
	/* Spawn the task. */
	xReturned = xTaskCreate(vChipHandlerTask, "CHIP",
 8002374:	4b13      	ldr	r3, [pc, #76]	; (80023c4 <vStartChipRegTask+0xa0>)
 8002376:	9301      	str	r3, [sp, #4]
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	9300      	str	r3, [sp, #0]
 800237c:	2300      	movs	r3, #0
 800237e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002382:	4911      	ldr	r1, [pc, #68]	; (80023c8 <vStartChipRegTask+0xa4>)
 8002384:	4811      	ldr	r0, [pc, #68]	; (80023cc <vStartChipRegTask+0xa8>)
 8002386:	f006 ff32 	bl	80091ee <xTaskCreate>
 800238a:	60f8      	str	r0, [r7, #12]
	CHIP_REG_STACK_SIZE, NULL, uxPriority,
			(TaskHandle_t*) &g_handle_chip_reg_task);
	if (xReturned != pdPASS)
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	2b01      	cmp	r3, #1
 8002390:	d005      	beq.n	800239e <vStartChipRegTask+0x7a>
	{
		trace_printf("failed to create the chip register handling task\n");
 8002392:	480f      	ldr	r0, [pc, #60]	; (80023d0 <vStartChipRegTask+0xac>)
 8002394:	f018 febe 	bl	801b114 <trace_printf>
		Error_Handler();
 8002398:	f7fe fe08 	bl	8000fac <Error_Handler>
	}

	return;
 800239c:	bf00      	nop
 800239e:	bf00      	nop
}
 80023a0:	3710      	adds	r7, #16
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}
 80023a6:	bf00      	nop
 80023a8:	20000b74 	.word	0x20000b74
 80023ac:	20000c14 	.word	0x20000c14
 80023b0:	2000a218 	.word	0x2000a218
 80023b4:	0801ca18 	.word	0x0801ca18
 80023b8:	20000bbc 	.word	0x20000bbc
 80023bc:	20000b70 	.word	0x20000b70
 80023c0:	0801ca38 	.word	0x0801ca38
 80023c4:	20000c10 	.word	0x20000c10
 80023c8:	0801ca6c 	.word	0x0801ca6c
 80023cc:	080020f9 	.word	0x080020f9
 80023d0:	0801ca74 	.word	0x0801ca74

080023d4 <is_all_zero>:

TaskHandle_t g_handle_sensor_task;
sensor_data_t g_sensor_data;

static uint8_t is_all_zero(void)
{
 80023d4:	b480      	push	{r7}
 80023d6:	b083      	sub	sp, #12
 80023d8:	af00      	add	r7, sp, #0
	int i;
	uint8_t *dptr = (uint8_t*) (&g_sensor_data);
 80023da:	4b0d      	ldr	r3, [pc, #52]	; (8002410 <is_all_zero+0x3c>)
 80023dc:	603b      	str	r3, [r7, #0]

	for (i = 0; i < sizeof(sensor_data_t); i++)
 80023de:	2300      	movs	r3, #0
 80023e0:	607b      	str	r3, [r7, #4]
 80023e2:	e00b      	b.n	80023fc <is_all_zero+0x28>
	{
		if (*dptr)
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	781b      	ldrb	r3, [r3, #0]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d001      	beq.n	80023f0 <is_all_zero+0x1c>
		{
			return 0;
 80023ec:	2300      	movs	r3, #0
 80023ee:	e009      	b.n	8002404 <is_all_zero+0x30>
		}
		dptr++;
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	3301      	adds	r3, #1
 80023f4:	603b      	str	r3, [r7, #0]
	for (i = 0; i < sizeof(sensor_data_t); i++)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	3301      	adds	r3, #1
 80023fa:	607b      	str	r3, [r7, #4]
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2b27      	cmp	r3, #39	; 0x27
 8002400:	d9f0      	bls.n	80023e4 <is_all_zero+0x10>
	}
	return 1;
 8002402:	2301      	movs	r3, #1
}
 8002404:	4618      	mov	r0, r3
 8002406:	370c      	adds	r7, #12
 8002408:	46bd      	mov	sp, r7
 800240a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240e:	4770      	bx	lr
 8002410:	2000a220 	.word	0x2000a220

08002414 <i2c_sensor_read_reg_nomutex>:
static uint8_t i2c_sensor_read_reg_nomutex(uint16_t addr, uint8_t reg,
		uint8_t *data)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b086      	sub	sp, #24
 8002418:	af02      	add	r7, sp, #8
 800241a:	4603      	mov	r3, r0
 800241c:	603a      	str	r2, [r7, #0]
 800241e:	80fb      	strh	r3, [r7, #6]
 8002420:	460b      	mov	r3, r1
 8002422:	717b      	strb	r3, [r7, #5]
	HAL_StatusTypeDef ret1, ret2;
	uint8_t ret = 0;
 8002424:	2300      	movs	r3, #0
 8002426:	73fb      	strb	r3, [r7, #15]

	ret1 = HAL_I2C_Master_Transmit(&g_hi2c1, addr, &reg, 1, 100);
 8002428:	1d7a      	adds	r2, r7, #5
 800242a:	88f9      	ldrh	r1, [r7, #6]
 800242c:	2364      	movs	r3, #100	; 0x64
 800242e:	9300      	str	r3, [sp, #0]
 8002430:	2301      	movs	r3, #1
 8002432:	480e      	ldr	r0, [pc, #56]	; (800246c <i2c_sensor_read_reg_nomutex+0x58>)
 8002434:	f002 fde8 	bl	8005008 <HAL_I2C_Master_Transmit>
 8002438:	4603      	mov	r3, r0
 800243a:	73bb      	strb	r3, [r7, #14]
	ret2 = HAL_I2C_Master_Receive(&g_hi2c1, addr, data, 1, 100);
 800243c:	88f9      	ldrh	r1, [r7, #6]
 800243e:	2364      	movs	r3, #100	; 0x64
 8002440:	9300      	str	r3, [sp, #0]
 8002442:	2301      	movs	r3, #1
 8002444:	683a      	ldr	r2, [r7, #0]
 8002446:	4809      	ldr	r0, [pc, #36]	; (800246c <i2c_sensor_read_reg_nomutex+0x58>)
 8002448:	f002 fedc 	bl	8005204 <HAL_I2C_Master_Receive>
 800244c:	4603      	mov	r3, r0
 800244e:	737b      	strb	r3, [r7, #13]

	if ((HAL_OK != ret1) || (HAL_OK != ret2))
 8002450:	7bbb      	ldrb	r3, [r7, #14]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d102      	bne.n	800245c <i2c_sensor_read_reg_nomutex+0x48>
 8002456:	7b7b      	ldrb	r3, [r7, #13]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d001      	beq.n	8002460 <i2c_sensor_read_reg_nomutex+0x4c>
	{
		//trace_printf("failed to read sensor %x:%x \n", ret1, ret2);
		ret = -1;
 800245c:	23ff      	movs	r3, #255	; 0xff
 800245e:	73fb      	strb	r3, [r7, #15]
	}
	return ret;
 8002460:	7bfb      	ldrb	r3, [r7, #15]
}
 8002462:	4618      	mov	r0, r3
 8002464:	3710      	adds	r7, #16
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}
 800246a:	bf00      	nop
 800246c:	2000a124 	.word	0x2000a124

08002470 <i2c_sensor_set_reg>:
	}
	return ret;
}

static uint8_t i2c_sensor_set_reg(uint16_t addr, uint8_t *data, uint8_t size)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b086      	sub	sp, #24
 8002474:	af02      	add	r7, sp, #8
 8002476:	4603      	mov	r3, r0
 8002478:	6039      	str	r1, [r7, #0]
 800247a:	80fb      	strh	r3, [r7, #6]
 800247c:	4613      	mov	r3, r2
 800247e:	717b      	strb	r3, [r7, #5]
	HAL_StatusTypeDef ret1;
	uint8_t ret = 0;
 8002480:	2300      	movs	r3, #0
 8002482:	73bb      	strb	r3, [r7, #14]
	if (xSemaphoreTake(g_mutex_i2c_op, portMAX_DELAY) == pdTRUE)
 8002484:	4b12      	ldr	r3, [pc, #72]	; (80024d0 <i2c_sensor_set_reg+0x60>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f04f 31ff 	mov.w	r1, #4294967295
 800248c:	4618      	mov	r0, r3
 800248e:	f006 fb13 	bl	8008ab8 <xQueueSemaphoreTake>
 8002492:	4603      	mov	r3, r0
 8002494:	2b01      	cmp	r3, #1
 8002496:	d111      	bne.n	80024bc <i2c_sensor_set_reg+0x4c>
	{
		ret1 = HAL_I2C_Master_Transmit(&g_hi2c1, addr, data, size, 10);
 8002498:	797b      	ldrb	r3, [r7, #5]
 800249a:	b29b      	uxth	r3, r3
 800249c:	88f9      	ldrh	r1, [r7, #6]
 800249e:	220a      	movs	r2, #10
 80024a0:	9200      	str	r2, [sp, #0]
 80024a2:	683a      	ldr	r2, [r7, #0]
 80024a4:	480b      	ldr	r0, [pc, #44]	; (80024d4 <i2c_sensor_set_reg+0x64>)
 80024a6:	f002 fdaf 	bl	8005008 <HAL_I2C_Master_Transmit>
 80024aa:	4603      	mov	r3, r0
 80024ac:	73fb      	strb	r3, [r7, #15]
		xSemaphoreGive(g_mutex_i2c_op);
 80024ae:	4b08      	ldr	r3, [pc, #32]	; (80024d0 <i2c_sensor_set_reg+0x60>)
 80024b0:	6818      	ldr	r0, [r3, #0]
 80024b2:	2300      	movs	r3, #0
 80024b4:	2200      	movs	r2, #0
 80024b6:	2100      	movs	r1, #0
 80024b8:	f005 fffa 	bl	80084b0 <xQueueGenericSend>
	}
	if (HAL_OK != ret1)
 80024bc:	7bfb      	ldrb	r3, [r7, #15]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d001      	beq.n	80024c6 <i2c_sensor_set_reg+0x56>
	{
		//	trace_printf("failed to set sensor %x \n", ret1);
		ret = -1;
 80024c2:	23ff      	movs	r3, #255	; 0xff
 80024c4:	73bb      	strb	r3, [r7, #14]
	}
	return ret;
 80024c6:	7bbb      	ldrb	r3, [r7, #14]
}
 80024c8:	4618      	mov	r0, r3
 80024ca:	3710      	adds	r7, #16
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bd80      	pop	{r7, pc}
 80024d0:	2000a17c 	.word	0x2000a17c
 80024d4:	2000a124 	.word	0x2000a124

080024d8 <i2c_sensor_config_u2>:

static uint8_t i2c_sensor_config_u2(void)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b082      	sub	sp, #8
 80024dc:	af00      	add	r7, sp, #0
	uint8_t ret;
	uint8_t data[2] =
 80024de:	2300      	movs	r3, #0
 80024e0:	80bb      	strh	r3, [r7, #4]
	{ 0, 0 };

	data[0] = LTC2991_CONTROL_V1234_REG;
 80024e2:	2306      	movs	r3, #6
 80024e4:	713b      	strb	r3, [r7, #4]
	data[1] = LTC2991_V1_V2_DIFFERENTIAL_ENABLE
 80024e6:	2399      	movs	r3, #153	; 0x99
 80024e8:	717b      	strb	r3, [r7, #5]
			| LTC2991_V3_V4_DIFFERENTIAL_ENABLE | LTC2991_V1_V2_FILTER_ENABLE
			| LTC2991_V3_V4_FILTER_ENABLE;
	ret = i2c_sensor_set_reg(LTC2991_I2C_ADDRESS_U2, &data[0], 2);
 80024ea:	1d3b      	adds	r3, r7, #4
 80024ec:	2202      	movs	r2, #2
 80024ee:	4619      	mov	r1, r3
 80024f0:	209a      	movs	r0, #154	; 0x9a
 80024f2:	f7ff ffbd 	bl	8002470 <i2c_sensor_set_reg>
 80024f6:	4603      	mov	r3, r0
 80024f8:	71fb      	strb	r3, [r7, #7]
	if (ret)
 80024fa:	79fb      	ldrb	r3, [r7, #7]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d001      	beq.n	8002504 <i2c_sensor_config_u2+0x2c>
	{
//		trace_printf("I2C SENSOR U2 CONFIG V1234 FAILED : %d\n", ret);
		return ret;
 8002500:	79fb      	ldrb	r3, [r7, #7]
 8002502:	e033      	b.n	800256c <i2c_sensor_config_u2+0x94>
	}

	data[0] = LTC2991_CONTROL_V5678_REG;
 8002504:	2307      	movs	r3, #7
 8002506:	713b      	strb	r3, [r7, #4]
	data[1] = LTC2991_V5_V6_DIFFERENTIAL_ENABLE
 8002508:	2399      	movs	r3, #153	; 0x99
 800250a:	717b      	strb	r3, [r7, #5]
			| LTC2991_V7_V8_DIFFERENTIAL_ENABLE | LTC2991_V5_V6_FILTER_ENABLE
			| LTC2991_V7_V8_FILTER_ENABLE;
	ret = i2c_sensor_set_reg(LTC2991_I2C_ADDRESS_U2, &data[0], 2);
 800250c:	1d3b      	adds	r3, r7, #4
 800250e:	2202      	movs	r2, #2
 8002510:	4619      	mov	r1, r3
 8002512:	209a      	movs	r0, #154	; 0x9a
 8002514:	f7ff ffac 	bl	8002470 <i2c_sensor_set_reg>
 8002518:	4603      	mov	r3, r0
 800251a:	71fb      	strb	r3, [r7, #7]
	if (ret)
 800251c:	79fb      	ldrb	r3, [r7, #7]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d001      	beq.n	8002526 <i2c_sensor_config_u2+0x4e>
	{
		//	trace_printf("I2C SENSOR U2 CONFIG V5678 FAILED : %d\n", ret);
		return ret;
 8002522:	79fb      	ldrb	r3, [r7, #7]
 8002524:	e022      	b.n	800256c <i2c_sensor_config_u2+0x94>
	}

	// enable all measurements
	data[0] = LTC2991_CHANNEL_ENABLE_REG;
 8002526:	2301      	movs	r3, #1
 8002528:	713b      	strb	r3, [r7, #4]
	data[1] = LTC2991_ENABLE_ALL_CHANNELS;
 800252a:	23f8      	movs	r3, #248	; 0xf8
 800252c:	717b      	strb	r3, [r7, #5]
	ret = i2c_sensor_set_reg(LTC2991_I2C_ADDRESS_U2, &data[0], 2);
 800252e:	1d3b      	adds	r3, r7, #4
 8002530:	2202      	movs	r2, #2
 8002532:	4619      	mov	r1, r3
 8002534:	209a      	movs	r0, #154	; 0x9a
 8002536:	f7ff ff9b 	bl	8002470 <i2c_sensor_set_reg>
 800253a:	4603      	mov	r3, r0
 800253c:	71fb      	strb	r3, [r7, #7]
	if (ret)
 800253e:	79fb      	ldrb	r3, [r7, #7]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d001      	beq.n	8002548 <i2c_sensor_config_u2+0x70>
	{
//		trace_printf("I2C SENSOR CONFIG U2 CH_EN FAILED : %d\n", ret);
		return ret;
 8002544:	79fb      	ldrb	r3, [r7, #7]
 8002546:	e011      	b.n	800256c <i2c_sensor_config_u2+0x94>
	}

	data[0] = LTC2991_CONTROL_PWM_Tinternal_REG;
 8002548:	2308      	movs	r3, #8
 800254a:	713b      	strb	r3, [r7, #4]
	data[1] = LTC2991_REPEAT_MODE;
 800254c:	2310      	movs	r3, #16
 800254e:	717b      	strb	r3, [r7, #5]
	ret = i2c_sensor_set_reg(LTC2991_I2C_ADDRESS_U2, &data[0], 2);
 8002550:	1d3b      	adds	r3, r7, #4
 8002552:	2202      	movs	r2, #2
 8002554:	4619      	mov	r1, r3
 8002556:	209a      	movs	r0, #154	; 0x9a
 8002558:	f7ff ff8a 	bl	8002470 <i2c_sensor_set_reg>
 800255c:	4603      	mov	r3, r0
 800255e:	71fb      	strb	r3, [r7, #7]
	if (ret)
 8002560:	79fb      	ldrb	r3, [r7, #7]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d001      	beq.n	800256a <i2c_sensor_config_u2+0x92>
	{
//		trace_printf("I2C SENSOR CONFIG repeat mode FAILED : %d\n", ret);
		return ret;
 8002566:	79fb      	ldrb	r3, [r7, #7]
 8002568:	e000      	b.n	800256c <i2c_sensor_config_u2+0x94>
	}
	return ret;
 800256a:	79fb      	ldrb	r3, [r7, #7]
}
 800256c:	4618      	mov	r0, r3
 800256e:	3708      	adds	r7, #8
 8002570:	46bd      	mov	sp, r7
 8002572:	bd80      	pop	{r7, pc}

08002574 <i2c_sensor_config_u3>:

static uint8_t i2c_sensor_config_u3(void)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b082      	sub	sp, #8
 8002578:	af00      	add	r7, sp, #0
	uint8_t ret;
	uint8_t data[2] =
 800257a:	2300      	movs	r3, #0
 800257c:	80bb      	strh	r3, [r7, #4]
	{ 0, 0 };

	data[0] = LTC2991_CONTROL_V1234_REG;
 800257e:	2306      	movs	r3, #6
 8002580:	713b      	strb	r3, [r7, #4]
	data[1] = LTC2991_V1_V2_FILTER_ENABLE | LTC2991_V3_V4_FILTER_ENABLE;
 8002582:	2388      	movs	r3, #136	; 0x88
 8002584:	717b      	strb	r3, [r7, #5]
	ret = i2c_sensor_set_reg(LTC2991_I2C_ADDRESS_U3, &data[0], 2);
 8002586:	1d3b      	adds	r3, r7, #4
 8002588:	2202      	movs	r2, #2
 800258a:	4619      	mov	r1, r3
 800258c:	2098      	movs	r0, #152	; 0x98
 800258e:	f7ff ff6f 	bl	8002470 <i2c_sensor_set_reg>
 8002592:	4603      	mov	r3, r0
 8002594:	71fb      	strb	r3, [r7, #7]
	if (ret)
 8002596:	79fb      	ldrb	r3, [r7, #7]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d001      	beq.n	80025a0 <i2c_sensor_config_u3+0x2c>
	{
//		trace_printf("I2C SENSOR U3 CONFIG V1234 FAILED : %d\n", ret);
		return ret;
 800259c:	79fb      	ldrb	r3, [r7, #7]
 800259e:	e022      	b.n	80025e6 <i2c_sensor_config_u3+0x72>
	}

	// enable all measurements
	data[0] = LTC2991_CHANNEL_ENABLE_REG;
 80025a0:	2301      	movs	r3, #1
 80025a2:	713b      	strb	r3, [r7, #4]
	data[1] = LTC2991_V1_V2_TR1_ENABLE | LTC2991_V3_V4_TR2_ENABLE;
 80025a4:	2330      	movs	r3, #48	; 0x30
 80025a6:	717b      	strb	r3, [r7, #5]
	ret = i2c_sensor_set_reg(LTC2991_I2C_ADDRESS_U3, &data[0], 2);
 80025a8:	1d3b      	adds	r3, r7, #4
 80025aa:	2202      	movs	r2, #2
 80025ac:	4619      	mov	r1, r3
 80025ae:	2098      	movs	r0, #152	; 0x98
 80025b0:	f7ff ff5e 	bl	8002470 <i2c_sensor_set_reg>
 80025b4:	4603      	mov	r3, r0
 80025b6:	71fb      	strb	r3, [r7, #7]
	if (ret)
 80025b8:	79fb      	ldrb	r3, [r7, #7]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d001      	beq.n	80025c2 <i2c_sensor_config_u3+0x4e>
	{
//		trace_printf("I2C SENSOR CONFIG U3 CH_EN FAILED : %d\n", ret);
		return ret;
 80025be:	79fb      	ldrb	r3, [r7, #7]
 80025c0:	e011      	b.n	80025e6 <i2c_sensor_config_u3+0x72>
	}

	data[0] = LTC2991_CONTROL_PWM_Tinternal_REG;
 80025c2:	2308      	movs	r3, #8
 80025c4:	713b      	strb	r3, [r7, #4]
	data[1] = LTC2991_REPEAT_MODE;
 80025c6:	2310      	movs	r3, #16
 80025c8:	717b      	strb	r3, [r7, #5]
	ret = i2c_sensor_set_reg(LTC2991_I2C_ADDRESS_U3, &data[0], 2);
 80025ca:	1d3b      	adds	r3, r7, #4
 80025cc:	2202      	movs	r2, #2
 80025ce:	4619      	mov	r1, r3
 80025d0:	2098      	movs	r0, #152	; 0x98
 80025d2:	f7ff ff4d 	bl	8002470 <i2c_sensor_set_reg>
 80025d6:	4603      	mov	r3, r0
 80025d8:	71fb      	strb	r3, [r7, #7]
	if (ret)
 80025da:	79fb      	ldrb	r3, [r7, #7]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d001      	beq.n	80025e4 <i2c_sensor_config_u3+0x70>
	{
//		trace_printf("I2C SENSOR CONFIG repeat mode FAILED : %d\n", ret);
		return ret;
 80025e0:	79fb      	ldrb	r3, [r7, #7]
 80025e2:	e000      	b.n	80025e6 <i2c_sensor_config_u3+0x72>
	}
	return ret;
 80025e4:	79fb      	ldrb	r3, [r7, #7]
}
 80025e6:	4618      	mov	r0, r3
 80025e8:	3708      	adds	r7, #8
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}

080025ee <i2c_sensor_config_u4>:

static uint8_t i2c_sensor_config_u4(void)
{
 80025ee:	b580      	push	{r7, lr}
 80025f0:	b082      	sub	sp, #8
 80025f2:	af00      	add	r7, sp, #0
	uint8_t ret;
	uint8_t data[2] =
 80025f4:	2300      	movs	r3, #0
 80025f6:	80bb      	strh	r3, [r7, #4]
	{ 0, 0 };

	data[0] = LTC2991_CONTROL_V1234_REG;
 80025f8:	2306      	movs	r3, #6
 80025fa:	713b      	strb	r3, [r7, #4]
	data[1] = LTC2991_V1_V2_DIFFERENTIAL_ENABLE | LTC2991_V1_V2_FILTER_ENABLE
 80025fc:	2389      	movs	r3, #137	; 0x89
 80025fe:	717b      	strb	r3, [r7, #5]
			| LTC2991_V3_V4_FILTER_ENABLE;
	ret = i2c_sensor_set_reg(LTC2991_I2C_ADDRESS_U4, &data[0], 2);
 8002600:	1d3b      	adds	r3, r7, #4
 8002602:	2202      	movs	r2, #2
 8002604:	4619      	mov	r1, r3
 8002606:	209e      	movs	r0, #158	; 0x9e
 8002608:	f7ff ff32 	bl	8002470 <i2c_sensor_set_reg>
 800260c:	4603      	mov	r3, r0
 800260e:	71fb      	strb	r3, [r7, #7]
	if (ret)
 8002610:	79fb      	ldrb	r3, [r7, #7]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d001      	beq.n	800261a <i2c_sensor_config_u4+0x2c>
	{
//		trace_printf("I2C SENSOR U4 CONFIG V1234 FAILED : %d\n", ret);
		return ret;
 8002616:	79fb      	ldrb	r3, [r7, #7]
 8002618:	e022      	b.n	8002660 <i2c_sensor_config_u4+0x72>
	}

	// enable all measurements
	data[0] = LTC2991_CHANNEL_ENABLE_REG;
 800261a:	2301      	movs	r3, #1
 800261c:	713b      	strb	r3, [r7, #4]
	data[1] = LTC2991_V1_V2_TR1_ENABLE | LTC2991_V3_V4_TR2_ENABLE;
 800261e:	2330      	movs	r3, #48	; 0x30
 8002620:	717b      	strb	r3, [r7, #5]
	ret = i2c_sensor_set_reg(LTC2991_I2C_ADDRESS_U4, &data[0], 2);
 8002622:	1d3b      	adds	r3, r7, #4
 8002624:	2202      	movs	r2, #2
 8002626:	4619      	mov	r1, r3
 8002628:	209e      	movs	r0, #158	; 0x9e
 800262a:	f7ff ff21 	bl	8002470 <i2c_sensor_set_reg>
 800262e:	4603      	mov	r3, r0
 8002630:	71fb      	strb	r3, [r7, #7]
	if (ret)
 8002632:	79fb      	ldrb	r3, [r7, #7]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d001      	beq.n	800263c <i2c_sensor_config_u4+0x4e>
	{
//		trace_printf("I2C SENSOR CONFIG U4 CH_EN FAILED : %d\n", ret);
		return ret;
 8002638:	79fb      	ldrb	r3, [r7, #7]
 800263a:	e011      	b.n	8002660 <i2c_sensor_config_u4+0x72>
	}

	data[0] = LTC2991_CONTROL_PWM_Tinternal_REG;
 800263c:	2308      	movs	r3, #8
 800263e:	713b      	strb	r3, [r7, #4]
	data[1] = LTC2991_REPEAT_MODE;
 8002640:	2310      	movs	r3, #16
 8002642:	717b      	strb	r3, [r7, #5]
	ret = i2c_sensor_set_reg(LTC2991_I2C_ADDRESS_U4, &data[0], 2);
 8002644:	1d3b      	adds	r3, r7, #4
 8002646:	2202      	movs	r2, #2
 8002648:	4619      	mov	r1, r3
 800264a:	209e      	movs	r0, #158	; 0x9e
 800264c:	f7ff ff10 	bl	8002470 <i2c_sensor_set_reg>
 8002650:	4603      	mov	r3, r0
 8002652:	71fb      	strb	r3, [r7, #7]
	if (ret)
 8002654:	79fb      	ldrb	r3, [r7, #7]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d001      	beq.n	800265e <i2c_sensor_config_u4+0x70>
	{
//		trace_printf("I2C SENSOR CONFIG repeat mode FAILED : %d\n", ret);
		return ret;
 800265a:	79fb      	ldrb	r3, [r7, #7]
 800265c:	e000      	b.n	8002660 <i2c_sensor_config_u4+0x72>
	}
	return ret;
 800265e:	79fb      	ldrb	r3, [r7, #7]
}
 8002660:	4618      	mov	r0, r3
 8002662:	3708      	adds	r7, #8
 8002664:	46bd      	mov	sp, r7
 8002666:	bd80      	pop	{r7, pc}

08002668 <i2c_sensor_config>:

static uint8_t i2c_sensor_config(void)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b082      	sub	sp, #8
 800266c:	af00      	add	r7, sp, #0
	uint8_t ret = 0, ret1;
 800266e:	2300      	movs	r3, #0
 8002670:	71fb      	strb	r3, [r7, #7]
	ret1 = i2c_sensor_config_u2();
 8002672:	f7ff ff31 	bl	80024d8 <i2c_sensor_config_u2>
 8002676:	4603      	mov	r3, r0
 8002678:	71bb      	strb	r3, [r7, #6]
	ret |= ret1;
 800267a:	79fa      	ldrb	r2, [r7, #7]
 800267c:	79bb      	ldrb	r3, [r7, #6]
 800267e:	4313      	orrs	r3, r2
 8002680:	71fb      	strb	r3, [r7, #7]

	ret1 = i2c_sensor_config_u3();
 8002682:	f7ff ff77 	bl	8002574 <i2c_sensor_config_u3>
 8002686:	4603      	mov	r3, r0
 8002688:	71bb      	strb	r3, [r7, #6]
	ret |= ret1;
 800268a:	79fa      	ldrb	r2, [r7, #7]
 800268c:	79bb      	ldrb	r3, [r7, #6]
 800268e:	4313      	orrs	r3, r2
 8002690:	71fb      	strb	r3, [r7, #7]

	ret1 = i2c_sensor_config_u4();
 8002692:	f7ff ffac 	bl	80025ee <i2c_sensor_config_u4>
 8002696:	4603      	mov	r3, r0
 8002698:	71bb      	strb	r3, [r7, #6]
	ret |= ret1;
 800269a:	79fa      	ldrb	r2, [r7, #7]
 800269c:	79bb      	ldrb	r3, [r7, #6]
 800269e:	4313      	orrs	r3, r2
 80026a0:	71fb      	strb	r3, [r7, #7]

	return ret;
 80026a2:	79fb      	ldrb	r3, [r7, #7]
}
 80026a4:	4618      	mov	r0, r3
 80026a6:	3708      	adds	r7, #8
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bd80      	pop	{r7, pc}

080026ac <code_to_voltage>:

static void code_to_voltage(uint8_t msb, uint8_t lsb, uint32_t *val)
{
 80026ac:	b480      	push	{r7}
 80026ae:	b085      	sub	sp, #20
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	4603      	mov	r3, r0
 80026b4:	603a      	str	r2, [r7, #0]
 80026b6:	71fb      	strb	r3, [r7, #7]
 80026b8:	460b      	mov	r3, r1
 80026ba:	71bb      	strb	r3, [r7, #6]
	uint32_t voltage;
	int8_t sign;
	uint16_t code;

	code = (uint16_t) (lsb | ((uint16_t) msb << 8));
 80026bc:	79bb      	ldrb	r3, [r7, #6]
 80026be:	b21a      	sxth	r2, r3
 80026c0:	79fb      	ldrb	r3, [r7, #7]
 80026c2:	021b      	lsls	r3, r3, #8
 80026c4:	b21b      	sxth	r3, r3
 80026c6:	4313      	orrs	r3, r2
 80026c8:	b21b      	sxth	r3, r3
 80026ca:	81fb      	strh	r3, [r7, #14]
	code = code & 0x7fff; // data is 15 bit and 15th bit is the sign bit
 80026cc:	89fb      	ldrh	r3, [r7, #14]
 80026ce:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80026d2:	81fb      	strh	r3, [r7, #14]

	if (code & (0x1 << 14))
 80026d4:	89fb      	ldrh	r3, [r7, #14]
 80026d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d00a      	beq.n	80026f4 <code_to_voltage+0x48>
	{
		code = (uint16_t) ((code ^ 0x7FFF) + 1); //! 1)Converts two's complement to binary
 80026de:	89fb      	ldrh	r3, [r7, #14]
 80026e0:	f483 43ff 	eor.w	r3, r3, #32640	; 0x7f80
 80026e4:	f083 037f 	eor.w	r3, r3, #127	; 0x7f
 80026e8:	b29b      	uxth	r3, r3
 80026ea:	3301      	adds	r3, #1
 80026ec:	81fb      	strh	r3, [r7, #14]
		sign = -1;
 80026ee:	23ff      	movs	r3, #255	; 0xff
 80026f0:	737b      	strb	r3, [r7, #13]
 80026f2:	e001      	b.n	80026f8 <code_to_voltage+0x4c>
	}
	else
	{
		//code = code & 0x3fff;
		sign = 1;
 80026f4:	2301      	movs	r3, #1
 80026f6:	737b      	strb	r3, [r7, #13]
	}
	//trace_printf("V: sign = %d, code = %d, lsb = %d, msb = %d\n", sign, code,
	//		lsb, msb);
	voltage = ((uint32_t) code * LTC2991_SE_LSB_MUL) >> LTC2991_SE_LSB_RHSIFT;
 80026f8:	89fb      	ldrh	r3, [r7, #14]
 80026fa:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80026fe:	fb02 f303 	mul.w	r3, r2, r3
 8002702:	220d      	movs	r2, #13
 8002704:	40d3      	lsrs	r3, r2
 8002706:	60bb      	str	r3, [r7, #8]

	*val = (uint32_t) (voltage & 0xffffffff);	// * sign;
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	68ba      	ldr	r2, [r7, #8]
 800270c:	601a      	str	r2, [r3, #0]

	return;
 800270e:	bf00      	nop
}
 8002710:	3714      	adds	r7, #20
 8002712:	46bd      	mov	sp, r7
 8002714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002718:	4770      	bx	lr
 800271a:	0000      	movs	r0, r0
 800271c:	0000      	movs	r0, r0
	...

08002720 <code_to_current>:

static void code_to_current(uint8_t msb, uint8_t lsb, uint32_t *val)
{
 8002720:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002722:	b089      	sub	sp, #36	; 0x24
 8002724:	af02      	add	r7, sp, #8
 8002726:	4603      	mov	r3, r0
 8002728:	603a      	str	r2, [r7, #0]
 800272a:	71fb      	strb	r3, [r7, #7]
 800272c:	460b      	mov	r3, r1
 800272e:	71bb      	strb	r3, [r7, #6]
	uint64_t current;
	int8_t sign;
	uint16_t code;

	code = (uint16_t) (lsb) | ((uint16_t) msb << 8);
 8002730:	79bb      	ldrb	r3, [r7, #6]
 8002732:	b21a      	sxth	r2, r3
 8002734:	79fb      	ldrb	r3, [r7, #7]
 8002736:	021b      	lsls	r3, r3, #8
 8002738:	b21b      	sxth	r3, r3
 800273a:	4313      	orrs	r3, r2
 800273c:	b21b      	sxth	r3, r3
 800273e:	82bb      	strh	r3, [r7, #20]
	code = code & 0x7fff; // data is 15 bit and 15th bit is the sign bit
 8002740:	8abb      	ldrh	r3, [r7, #20]
 8002742:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8002746:	82bb      	strh	r3, [r7, #20]
	if (code & (0x1 << 14))
 8002748:	8abb      	ldrh	r3, [r7, #20]
 800274a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800274e:	2b00      	cmp	r3, #0
 8002750:	d00a      	beq.n	8002768 <code_to_current+0x48>
	{
		code = (uint16_t) ((code ^ 0x7FFF) + 1); //! 1)Converts two's complement to binary
 8002752:	8abb      	ldrh	r3, [r7, #20]
 8002754:	f483 43ff 	eor.w	r3, r3, #32640	; 0x7f80
 8002758:	f083 037f 	eor.w	r3, r3, #127	; 0x7f
 800275c:	b29b      	uxth	r3, r3
 800275e:	3301      	adds	r3, #1
 8002760:	82bb      	strh	r3, [r7, #20]
		sign = -1;
 8002762:	23ff      	movs	r3, #255	; 0xff
 8002764:	75fb      	strb	r3, [r7, #23]
 8002766:	e001      	b.n	800276c <code_to_current+0x4c>
	}
	else
	{
		//code = code & 0x3fff;
		sign = 1;
 8002768:	2301      	movs	r3, #1
 800276a:	75fb      	strb	r3, [r7, #23]
	}
	trace_printf("I sign = %d, code = %d, lsb = %d, msb = %d\n", sign, code,
 800276c:	f997 1017 	ldrsb.w	r1, [r7, #23]
 8002770:	8aba      	ldrh	r2, [r7, #20]
 8002772:	79b8      	ldrb	r0, [r7, #6]
 8002774:	79fb      	ldrb	r3, [r7, #7]
 8002776:	9300      	str	r3, [sp, #0]
 8002778:	4603      	mov	r3, r0
 800277a:	481b      	ldr	r0, [pc, #108]	; (80027e8 <code_to_current+0xc8>)
 800277c:	f018 fcca 	bl	801b114 <trace_printf>
			lsb, msb);

	current = (uint64_t) code * LTC2991_DIFF_LSB_MUL;
 8002780:	8aba      	ldrh	r2, [r7, #20]
 8002782:	f04f 0300 	mov.w	r3, #0
 8002786:	a116      	add	r1, pc, #88	; (adr r1, 80027e0 <code_to_current+0xc0>)
 8002788:	e9d1 0100 	ldrd	r0, r1, [r1]
 800278c:	fb00 fc03 	mul.w	ip, r0, r3
 8002790:	fb02 f601 	mul.w	r6, r2, r1
 8002794:	4466      	add	r6, ip
 8002796:	fba2 2300 	umull	r2, r3, r2, r0
 800279a:	18f1      	adds	r1, r6, r3
 800279c:	460b      	mov	r3, r1
 800279e:	e9c7 2302 	strd	r2, r3, [r7, #8]
 80027a2:	e9c7 2302 	strd	r2, r3, [r7, #8]
	current = current >> LTC2991_DIFF_LSB_RHSIFT;
 80027a6:	2311      	movs	r3, #17
 80027a8:	4619      	mov	r1, r3
 80027aa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80027ae:	f1c1 0620 	rsb	r6, r1, #32
 80027b2:	f1a1 0020 	sub.w	r0, r1, #32
 80027b6:	fa22 f401 	lsr.w	r4, r2, r1
 80027ba:	fa03 f606 	lsl.w	r6, r3, r6
 80027be:	4334      	orrs	r4, r6
 80027c0:	fa23 f000 	lsr.w	r0, r3, r0
 80027c4:	4304      	orrs	r4, r0
 80027c6:	fa23 f501 	lsr.w	r5, r3, r1
 80027ca:	e9c7 4502 	strd	r4, r5, [r7, #8]

	*val = (uint32_t) (current & 0xffffffff); // * sign;
 80027ce:	68ba      	ldr	r2, [r7, #8]
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	601a      	str	r2, [r3, #0]

	return;
 80027d4:	bf00      	nop
}
 80027d6:	371c      	adds	r7, #28
 80027d8:	46bd      	mov	sp, r7
 80027da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80027dc:	f3af 8000 	nop.w
 80027e0:	017d7840 	.word	0x017d7840
 80027e4:	00000000 	.word	0x00000000
 80027e8:	0801caa8 	.word	0x0801caa8

080027ec <i2c_sensor_u2_read_nomutex>:

static uint8_t i2c_sensor_u2_read_nomutex(sensor_data_t *op)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b086      	sub	sp, #24
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
	uint8_t status_h;
	uint8_t ret1, ret = 0;
 80027f4:	2300      	movs	r3, #0
 80027f6:	75fb      	strb	r3, [r7, #23]
	uint32_t meas;
	uint8_t v2_msb, v2_lsb, v4_msb, v4_lsb, v6_msb, v6_lsb, v8_msb, v8_lsb;
	board_red_led_toggle();
 80027f8:	f7fe f98e 	bl	8000b18 <board_red_led_toggle>
//	ret1 = i2c_sensor_read_reg_nomutex(LTC2991_I2C_ADDRESS_U2,
//	LTC2991_STATUS_HIGH_REG, &status_h);
	ret1 = i2c_sensor_read_reg_nomutex(LTC2991_I2C_ADDRESS_U2,
 80027fc:	f107 0315 	add.w	r3, r7, #21
 8002800:	461a      	mov	r2, r3
 8002802:	2100      	movs	r1, #0
 8002804:	209a      	movs	r0, #154	; 0x9a
 8002806:	f7ff fe05 	bl	8002414 <i2c_sensor_read_reg_nomutex>
 800280a:	4603      	mov	r3, r0
 800280c:	75bb      	strb	r3, [r7, #22]
	LTC2991_STATUS_LOW_REG, &status_h);
	ret = ret | ret1;
 800280e:	7dfa      	ldrb	r2, [r7, #23]
 8002810:	7dbb      	ldrb	r3, [r7, #22]
 8002812:	4313      	orrs	r3, r2
 8002814:	75fb      	strb	r3, [r7, #23]

	ret1 = i2c_sensor_read_reg_nomutex(LTC2991_I2C_ADDRESS_U2,
 8002816:	f107 030f 	add.w	r3, r7, #15
 800281a:	461a      	mov	r2, r3
 800281c:	210c      	movs	r1, #12
 800281e:	209a      	movs	r0, #154	; 0x9a
 8002820:	f7ff fdf8 	bl	8002414 <i2c_sensor_read_reg_nomutex>
 8002824:	4603      	mov	r3, r0
 8002826:	75bb      	strb	r3, [r7, #22]
	LTC2991_V2_MSB_REG, &v2_msb);
	ret = ret | ret1;
 8002828:	7dfa      	ldrb	r2, [r7, #23]
 800282a:	7dbb      	ldrb	r3, [r7, #22]
 800282c:	4313      	orrs	r3, r2
 800282e:	75fb      	strb	r3, [r7, #23]

	ret1 = i2c_sensor_read_reg_nomutex(LTC2991_I2C_ADDRESS_U2,
 8002830:	f107 030e 	add.w	r3, r7, #14
 8002834:	461a      	mov	r2, r3
 8002836:	210d      	movs	r1, #13
 8002838:	209a      	movs	r0, #154	; 0x9a
 800283a:	f7ff fdeb 	bl	8002414 <i2c_sensor_read_reg_nomutex>
 800283e:	4603      	mov	r3, r0
 8002840:	75bb      	strb	r3, [r7, #22]
	LTC2991_V2_LSB_REG, &v2_lsb);
	ret = ret | ret1;
 8002842:	7dfa      	ldrb	r2, [r7, #23]
 8002844:	7dbb      	ldrb	r3, [r7, #22]
 8002846:	4313      	orrs	r3, r2
 8002848:	75fb      	strb	r3, [r7, #23]

	ret1 = i2c_sensor_read_reg_nomutex(LTC2991_I2C_ADDRESS_U2,
 800284a:	f107 030d 	add.w	r3, r7, #13
 800284e:	461a      	mov	r2, r3
 8002850:	2110      	movs	r1, #16
 8002852:	209a      	movs	r0, #154	; 0x9a
 8002854:	f7ff fdde 	bl	8002414 <i2c_sensor_read_reg_nomutex>
 8002858:	4603      	mov	r3, r0
 800285a:	75bb      	strb	r3, [r7, #22]
	LTC2991_V4_MSB_REG, &v4_msb);
	ret = ret | ret1;
 800285c:	7dfa      	ldrb	r2, [r7, #23]
 800285e:	7dbb      	ldrb	r3, [r7, #22]
 8002860:	4313      	orrs	r3, r2
 8002862:	75fb      	strb	r3, [r7, #23]

	ret1 = i2c_sensor_read_reg_nomutex(LTC2991_I2C_ADDRESS_U2,
 8002864:	f107 030c 	add.w	r3, r7, #12
 8002868:	461a      	mov	r2, r3
 800286a:	2111      	movs	r1, #17
 800286c:	209a      	movs	r0, #154	; 0x9a
 800286e:	f7ff fdd1 	bl	8002414 <i2c_sensor_read_reg_nomutex>
 8002872:	4603      	mov	r3, r0
 8002874:	75bb      	strb	r3, [r7, #22]
	LTC2991_V4_LSB_REG, &v4_lsb);
	ret = ret | ret1;
 8002876:	7dfa      	ldrb	r2, [r7, #23]
 8002878:	7dbb      	ldrb	r3, [r7, #22]
 800287a:	4313      	orrs	r3, r2
 800287c:	75fb      	strb	r3, [r7, #23]

	ret1 = i2c_sensor_read_reg_nomutex(LTC2991_I2C_ADDRESS_U2,
 800287e:	f107 030b 	add.w	r3, r7, #11
 8002882:	461a      	mov	r2, r3
 8002884:	2114      	movs	r1, #20
 8002886:	209a      	movs	r0, #154	; 0x9a
 8002888:	f7ff fdc4 	bl	8002414 <i2c_sensor_read_reg_nomutex>
 800288c:	4603      	mov	r3, r0
 800288e:	75bb      	strb	r3, [r7, #22]
	LTC2991_V6_MSB_REG, &v6_msb);
	ret = ret | ret1;
 8002890:	7dfa      	ldrb	r2, [r7, #23]
 8002892:	7dbb      	ldrb	r3, [r7, #22]
 8002894:	4313      	orrs	r3, r2
 8002896:	75fb      	strb	r3, [r7, #23]

	ret1 = i2c_sensor_read_reg_nomutex(LTC2991_I2C_ADDRESS_U2,
 8002898:	f107 030a 	add.w	r3, r7, #10
 800289c:	461a      	mov	r2, r3
 800289e:	2115      	movs	r1, #21
 80028a0:	209a      	movs	r0, #154	; 0x9a
 80028a2:	f7ff fdb7 	bl	8002414 <i2c_sensor_read_reg_nomutex>
 80028a6:	4603      	mov	r3, r0
 80028a8:	75bb      	strb	r3, [r7, #22]
	LTC2991_V6_LSB_REG, &v6_lsb);
	ret = ret | ret1;
 80028aa:	7dfa      	ldrb	r2, [r7, #23]
 80028ac:	7dbb      	ldrb	r3, [r7, #22]
 80028ae:	4313      	orrs	r3, r2
 80028b0:	75fb      	strb	r3, [r7, #23]

	ret1 = i2c_sensor_read_reg_nomutex(LTC2991_I2C_ADDRESS_U2,
 80028b2:	f107 0309 	add.w	r3, r7, #9
 80028b6:	461a      	mov	r2, r3
 80028b8:	2118      	movs	r1, #24
 80028ba:	209a      	movs	r0, #154	; 0x9a
 80028bc:	f7ff fdaa 	bl	8002414 <i2c_sensor_read_reg_nomutex>
 80028c0:	4603      	mov	r3, r0
 80028c2:	75bb      	strb	r3, [r7, #22]
	LTC2991_V8_MSB_REG, &v8_msb);
	ret = ret | ret1;
 80028c4:	7dfa      	ldrb	r2, [r7, #23]
 80028c6:	7dbb      	ldrb	r3, [r7, #22]
 80028c8:	4313      	orrs	r3, r2
 80028ca:	75fb      	strb	r3, [r7, #23]

	ret1 = i2c_sensor_read_reg_nomutex(LTC2991_I2C_ADDRESS_U2,
 80028cc:	f107 0308 	add.w	r3, r7, #8
 80028d0:	461a      	mov	r2, r3
 80028d2:	2119      	movs	r1, #25
 80028d4:	209a      	movs	r0, #154	; 0x9a
 80028d6:	f7ff fd9d 	bl	8002414 <i2c_sensor_read_reg_nomutex>
 80028da:	4603      	mov	r3, r0
 80028dc:	75bb      	strb	r3, [r7, #22]
	LTC2991_V8_LSB_REG, &v8_lsb);
	ret = ret | ret1;
 80028de:	7dfa      	ldrb	r2, [r7, #23]
 80028e0:	7dbb      	ldrb	r3, [r7, #22]
 80028e2:	4313      	orrs	r3, r2
 80028e4:	75fb      	strb	r3, [r7, #23]

	if (ret)
 80028e6:	7dfb      	ldrb	r3, [r7, #23]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d16a      	bne.n	80029c2 <i2c_sensor_u2_read_nomutex+0x1d6>
		goto SENSOR_U2_ERROR;

	if (status_h & LTC2991_V12_READY)
 80028ec:	7d7b      	ldrb	r3, [r7, #21]
 80028ee:	f003 0301 	and.w	r3, r3, #1
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d00a      	beq.n	800290c <i2c_sensor_u2_read_nomutex+0x120>
	{
		code_to_current(v2_msb, v2_lsb, &meas);
 80028f6:	7bfb      	ldrb	r3, [r7, #15]
 80028f8:	7bb9      	ldrb	r1, [r7, #14]
 80028fa:	f107 0210 	add.w	r2, r7, #16
 80028fe:	4618      	mov	r0, r3
 8002900:	f7ff ff0e 	bl	8002720 <code_to_current>
		op->current_1v0 = meas;
 8002904:	693a      	ldr	r2, [r7, #16]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	615a      	str	r2, [r3, #20]
 800290a:	e008      	b.n	800291e <i2c_sensor_u2_read_nomutex+0x132>
	}
	else
		op->current_1v0 = 0;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2200      	movs	r2, #0
 8002910:	751a      	strb	r2, [r3, #20]
 8002912:	2200      	movs	r2, #0
 8002914:	755a      	strb	r2, [r3, #21]
 8002916:	2200      	movs	r2, #0
 8002918:	759a      	strb	r2, [r3, #22]
 800291a:	2200      	movs	r2, #0
 800291c:	75da      	strb	r2, [r3, #23]

	if (status_h & LTC2991_V34_READY)
 800291e:	7d7b      	ldrb	r3, [r7, #21]
 8002920:	f003 0304 	and.w	r3, r3, #4
 8002924:	2b00      	cmp	r3, #0
 8002926:	d00a      	beq.n	800293e <i2c_sensor_u2_read_nomutex+0x152>
	{
		code_to_current(v4_msb, v4_lsb, &meas);
 8002928:	7b7b      	ldrb	r3, [r7, #13]
 800292a:	7b39      	ldrb	r1, [r7, #12]
 800292c:	f107 0210 	add.w	r2, r7, #16
 8002930:	4618      	mov	r0, r3
 8002932:	f7ff fef5 	bl	8002720 <code_to_current>

		op->current_2v0 = meas;
 8002936:	693a      	ldr	r2, [r7, #16]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	619a      	str	r2, [r3, #24]
 800293c:	e008      	b.n	8002950 <i2c_sensor_u2_read_nomutex+0x164>
	}
	else
		op->current_2v0 = 0;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2200      	movs	r2, #0
 8002942:	761a      	strb	r2, [r3, #24]
 8002944:	2200      	movs	r2, #0
 8002946:	765a      	strb	r2, [r3, #25]
 8002948:	2200      	movs	r2, #0
 800294a:	769a      	strb	r2, [r3, #26]
 800294c:	2200      	movs	r2, #0
 800294e:	76da      	strb	r2, [r3, #27]

	if (status_h & LTC2991_V56_READY)
 8002950:	7d7b      	ldrb	r3, [r7, #21]
 8002952:	f003 0310 	and.w	r3, r3, #16
 8002956:	2b00      	cmp	r3, #0
 8002958:	d00a      	beq.n	8002970 <i2c_sensor_u2_read_nomutex+0x184>
	{
		code_to_current(v6_msb, v6_lsb, &meas);
 800295a:	7afb      	ldrb	r3, [r7, #11]
 800295c:	7ab9      	ldrb	r1, [r7, #10]
 800295e:	f107 0210 	add.w	r2, r7, #16
 8002962:	4618      	mov	r0, r3
 8002964:	f7ff fedc 	bl	8002720 <code_to_current>

		op->current_3v0 = meas;
 8002968:	693a      	ldr	r2, [r7, #16]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	61da      	str	r2, [r3, #28]
 800296e:	e008      	b.n	8002982 <i2c_sensor_u2_read_nomutex+0x196>
	}
	else
		op->current_3v0 = 0;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2200      	movs	r2, #0
 8002974:	771a      	strb	r2, [r3, #28]
 8002976:	2200      	movs	r2, #0
 8002978:	775a      	strb	r2, [r3, #29]
 800297a:	2200      	movs	r2, #0
 800297c:	779a      	strb	r2, [r3, #30]
 800297e:	2200      	movs	r2, #0
 8002980:	77da      	strb	r2, [r3, #31]

	if (status_h & LTC2991_V78_READY)
 8002982:	7d7b      	ldrb	r3, [r7, #21]
 8002984:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002988:	2b00      	cmp	r3, #0
 800298a:	d00a      	beq.n	80029a2 <i2c_sensor_u2_read_nomutex+0x1b6>
	{
		code_to_current(v8_msb, v8_lsb, &meas);
 800298c:	7a7b      	ldrb	r3, [r7, #9]
 800298e:	7a39      	ldrb	r1, [r7, #8]
 8002990:	f107 0210 	add.w	r2, r7, #16
 8002994:	4618      	mov	r0, r3
 8002996:	f7ff fec3 	bl	8002720 <code_to_current>

		op->current_4v0 = meas;
 800299a:	693a      	ldr	r2, [r7, #16]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	621a      	str	r2, [r3, #32]
 80029a0:	e00c      	b.n	80029bc <i2c_sensor_u2_read_nomutex+0x1d0>
	}
	else
		op->current_4v0 = 0;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2200      	movs	r2, #0
 80029a6:	f883 2020 	strb.w	r2, [r3, #32]
 80029aa:	2200      	movs	r2, #0
 80029ac:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 80029b0:	2200      	movs	r2, #0
 80029b2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 80029b6:	2200      	movs	r2, #0
 80029b8:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

	board_red_led_toggle();
 80029bc:	f7fe f8ac 	bl	8000b18 <board_red_led_toggle>
 80029c0:	e000      	b.n	80029c4 <i2c_sensor_u2_read_nomutex+0x1d8>
		goto SENSOR_U2_ERROR;
 80029c2:	bf00      	nop
	SENSOR_U2_ERROR: return ret;
 80029c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80029c6:	4618      	mov	r0, r3
 80029c8:	3718      	adds	r7, #24
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}

080029ce <i2c_sensor_u3_read_nomutex>:

static uint8_t i2c_sensor_u3_read_nomutex(sensor_data_t *op)
{
 80029ce:	b580      	push	{r7, lr}
 80029d0:	b086      	sub	sp, #24
 80029d2:	af00      	add	r7, sp, #0
 80029d4:	6078      	str	r0, [r7, #4]
	uint8_t status_l;
	uint8_t ret1, ret = 0;
 80029d6:	2300      	movs	r3, #0
 80029d8:	75fb      	strb	r3, [r7, #23]
	uint32_t meas;
	uint8_t v1_msb, v1_lsb, v2_msb, v2_lsb, v3_msb, v3_lsb, v4_msb, v4_lsb;

	ret1 = i2c_sensor_read_reg_nomutex(LTC2991_I2C_ADDRESS_U3,
 80029da:	f107 0315 	add.w	r3, r7, #21
 80029de:	461a      	mov	r2, r3
 80029e0:	2100      	movs	r1, #0
 80029e2:	2098      	movs	r0, #152	; 0x98
 80029e4:	f7ff fd16 	bl	8002414 <i2c_sensor_read_reg_nomutex>
 80029e8:	4603      	mov	r3, r0
 80029ea:	75bb      	strb	r3, [r7, #22]
	LTC2991_STATUS_LOW_REG, &status_l);
	ret = ret | ret1;
 80029ec:	7dfa      	ldrb	r2, [r7, #23]
 80029ee:	7dbb      	ldrb	r3, [r7, #22]
 80029f0:	4313      	orrs	r3, r2
 80029f2:	75fb      	strb	r3, [r7, #23]

	ret1 = i2c_sensor_read_reg_nomutex(LTC2991_I2C_ADDRESS_U3,
 80029f4:	f107 030f 	add.w	r3, r7, #15
 80029f8:	461a      	mov	r2, r3
 80029fa:	210a      	movs	r1, #10
 80029fc:	2098      	movs	r0, #152	; 0x98
 80029fe:	f7ff fd09 	bl	8002414 <i2c_sensor_read_reg_nomutex>
 8002a02:	4603      	mov	r3, r0
 8002a04:	75bb      	strb	r3, [r7, #22]
	LTC2991_V1_MSB_REG, &v1_msb);
	ret = ret | ret1;
 8002a06:	7dfa      	ldrb	r2, [r7, #23]
 8002a08:	7dbb      	ldrb	r3, [r7, #22]
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	75fb      	strb	r3, [r7, #23]

	ret1 = i2c_sensor_read_reg_nomutex(LTC2991_I2C_ADDRESS_U3,
 8002a0e:	f107 030e 	add.w	r3, r7, #14
 8002a12:	461a      	mov	r2, r3
 8002a14:	210b      	movs	r1, #11
 8002a16:	2098      	movs	r0, #152	; 0x98
 8002a18:	f7ff fcfc 	bl	8002414 <i2c_sensor_read_reg_nomutex>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	75bb      	strb	r3, [r7, #22]
	LTC2991_V1_LSB_REG, &v1_lsb);
	ret = ret | ret1;
 8002a20:	7dfa      	ldrb	r2, [r7, #23]
 8002a22:	7dbb      	ldrb	r3, [r7, #22]
 8002a24:	4313      	orrs	r3, r2
 8002a26:	75fb      	strb	r3, [r7, #23]

	ret1 = i2c_sensor_read_reg_nomutex(LTC2991_I2C_ADDRESS_U3,
 8002a28:	f107 030d 	add.w	r3, r7, #13
 8002a2c:	461a      	mov	r2, r3
 8002a2e:	210c      	movs	r1, #12
 8002a30:	2098      	movs	r0, #152	; 0x98
 8002a32:	f7ff fcef 	bl	8002414 <i2c_sensor_read_reg_nomutex>
 8002a36:	4603      	mov	r3, r0
 8002a38:	75bb      	strb	r3, [r7, #22]
	LTC2991_V2_MSB_REG, &v2_msb);
	ret = ret | ret1;
 8002a3a:	7dfa      	ldrb	r2, [r7, #23]
 8002a3c:	7dbb      	ldrb	r3, [r7, #22]
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	75fb      	strb	r3, [r7, #23]

	ret1 = i2c_sensor_read_reg_nomutex(LTC2991_I2C_ADDRESS_U3,
 8002a42:	f107 030c 	add.w	r3, r7, #12
 8002a46:	461a      	mov	r2, r3
 8002a48:	210d      	movs	r1, #13
 8002a4a:	2098      	movs	r0, #152	; 0x98
 8002a4c:	f7ff fce2 	bl	8002414 <i2c_sensor_read_reg_nomutex>
 8002a50:	4603      	mov	r3, r0
 8002a52:	75bb      	strb	r3, [r7, #22]
	LTC2991_V2_LSB_REG, &v2_lsb);
	ret = ret | ret1;
 8002a54:	7dfa      	ldrb	r2, [r7, #23]
 8002a56:	7dbb      	ldrb	r3, [r7, #22]
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	75fb      	strb	r3, [r7, #23]

	ret1 = i2c_sensor_read_reg_nomutex(LTC2991_I2C_ADDRESS_U3,
 8002a5c:	f107 030b 	add.w	r3, r7, #11
 8002a60:	461a      	mov	r2, r3
 8002a62:	210e      	movs	r1, #14
 8002a64:	2098      	movs	r0, #152	; 0x98
 8002a66:	f7ff fcd5 	bl	8002414 <i2c_sensor_read_reg_nomutex>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	75bb      	strb	r3, [r7, #22]
	LTC2991_V3_MSB_REG, &v3_msb);
	ret = ret | ret1;
 8002a6e:	7dfa      	ldrb	r2, [r7, #23]
 8002a70:	7dbb      	ldrb	r3, [r7, #22]
 8002a72:	4313      	orrs	r3, r2
 8002a74:	75fb      	strb	r3, [r7, #23]

	ret1 = i2c_sensor_read_reg_nomutex(LTC2991_I2C_ADDRESS_U3,
 8002a76:	f107 030a 	add.w	r3, r7, #10
 8002a7a:	461a      	mov	r2, r3
 8002a7c:	210f      	movs	r1, #15
 8002a7e:	2098      	movs	r0, #152	; 0x98
 8002a80:	f7ff fcc8 	bl	8002414 <i2c_sensor_read_reg_nomutex>
 8002a84:	4603      	mov	r3, r0
 8002a86:	75bb      	strb	r3, [r7, #22]
	LTC2991_V3_LSB_REG, &v3_lsb);
	ret = ret | ret1;
 8002a88:	7dfa      	ldrb	r2, [r7, #23]
 8002a8a:	7dbb      	ldrb	r3, [r7, #22]
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	75fb      	strb	r3, [r7, #23]

	ret1 = i2c_sensor_read_reg_nomutex(LTC2991_I2C_ADDRESS_U3,
 8002a90:	f107 0309 	add.w	r3, r7, #9
 8002a94:	461a      	mov	r2, r3
 8002a96:	2110      	movs	r1, #16
 8002a98:	2098      	movs	r0, #152	; 0x98
 8002a9a:	f7ff fcbb 	bl	8002414 <i2c_sensor_read_reg_nomutex>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	75bb      	strb	r3, [r7, #22]
	LTC2991_V4_MSB_REG, &v4_msb);
	ret = ret | ret1;
 8002aa2:	7dfa      	ldrb	r2, [r7, #23]
 8002aa4:	7dbb      	ldrb	r3, [r7, #22]
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	75fb      	strb	r3, [r7, #23]

	ret1 = i2c_sensor_read_reg_nomutex(LTC2991_I2C_ADDRESS_U3,
 8002aaa:	f107 0308 	add.w	r3, r7, #8
 8002aae:	461a      	mov	r2, r3
 8002ab0:	2111      	movs	r1, #17
 8002ab2:	2098      	movs	r0, #152	; 0x98
 8002ab4:	f7ff fcae 	bl	8002414 <i2c_sensor_read_reg_nomutex>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	75bb      	strb	r3, [r7, #22]
	LTC2991_V4_LSB_REG, &v4_lsb);
	ret = ret | ret1;
 8002abc:	7dfa      	ldrb	r2, [r7, #23]
 8002abe:	7dbb      	ldrb	r3, [r7, #22]
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	75fb      	strb	r3, [r7, #23]

	if (ret)
 8002ac4:	7dfb      	ldrb	r3, [r7, #23]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d164      	bne.n	8002b94 <i2c_sensor_u3_read_nomutex+0x1c6>
		goto SENSOR_U3_ERROR;

	if (status_l & LTC2991_V1_READY)
 8002aca:	7d7b      	ldrb	r3, [r7, #21]
 8002acc:	f003 0301 	and.w	r3, r3, #1
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d00a      	beq.n	8002aea <i2c_sensor_u3_read_nomutex+0x11c>
	{
		code_to_voltage(v1_msb, v1_lsb, &meas);
 8002ad4:	7bfb      	ldrb	r3, [r7, #15]
 8002ad6:	7bb9      	ldrb	r1, [r7, #14]
 8002ad8:	f107 0210 	add.w	r2, r7, #16
 8002adc:	4618      	mov	r0, r3
 8002ade:	f7ff fde5 	bl	80026ac <code_to_voltage>
		op->voltage_1v0 = meas;
 8002ae2:	693a      	ldr	r2, [r7, #16]
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	601a      	str	r2, [r3, #0]
 8002ae8:	e008      	b.n	8002afc <i2c_sensor_u3_read_nomutex+0x12e>
	}
	else
		op->voltage_1v0 = 0;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2200      	movs	r2, #0
 8002aee:	701a      	strb	r2, [r3, #0]
 8002af0:	2200      	movs	r2, #0
 8002af2:	705a      	strb	r2, [r3, #1]
 8002af4:	2200      	movs	r2, #0
 8002af6:	709a      	strb	r2, [r3, #2]
 8002af8:	2200      	movs	r2, #0
 8002afa:	70da      	strb	r2, [r3, #3]

	if (status_l & LTC2991_V2_READY)
 8002afc:	7d7b      	ldrb	r3, [r7, #21]
 8002afe:	f003 0302 	and.w	r3, r3, #2
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d00a      	beq.n	8002b1c <i2c_sensor_u3_read_nomutex+0x14e>
	{
		code_to_voltage(v2_msb, v2_lsb, &meas);
 8002b06:	7b7b      	ldrb	r3, [r7, #13]
 8002b08:	7b39      	ldrb	r1, [r7, #12]
 8002b0a:	f107 0210 	add.w	r2, r7, #16
 8002b0e:	4618      	mov	r0, r3
 8002b10:	f7ff fdcc 	bl	80026ac <code_to_voltage>
		op->voltage_2v0 = meas;
 8002b14:	693a      	ldr	r2, [r7, #16]
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	605a      	str	r2, [r3, #4]
 8002b1a:	e008      	b.n	8002b2e <i2c_sensor_u3_read_nomutex+0x160>
	}
	else
		op->voltage_2v0 = 0;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2200      	movs	r2, #0
 8002b20:	711a      	strb	r2, [r3, #4]
 8002b22:	2200      	movs	r2, #0
 8002b24:	715a      	strb	r2, [r3, #5]
 8002b26:	2200      	movs	r2, #0
 8002b28:	719a      	strb	r2, [r3, #6]
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	71da      	strb	r2, [r3, #7]

	if (status_l & LTC2991_V3_READY)
 8002b2e:	7d7b      	ldrb	r3, [r7, #21]
 8002b30:	f003 0304 	and.w	r3, r3, #4
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d00a      	beq.n	8002b4e <i2c_sensor_u3_read_nomutex+0x180>
	{
		code_to_voltage(v3_msb, v3_lsb, &meas);
 8002b38:	7afb      	ldrb	r3, [r7, #11]
 8002b3a:	7ab9      	ldrb	r1, [r7, #10]
 8002b3c:	f107 0210 	add.w	r2, r7, #16
 8002b40:	4618      	mov	r0, r3
 8002b42:	f7ff fdb3 	bl	80026ac <code_to_voltage>
		op->voltage_3v0 = meas;
 8002b46:	693a      	ldr	r2, [r7, #16]
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	609a      	str	r2, [r3, #8]
 8002b4c:	e008      	b.n	8002b60 <i2c_sensor_u3_read_nomutex+0x192>
	}
	else
		op->voltage_3v0 = 0;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2200      	movs	r2, #0
 8002b52:	721a      	strb	r2, [r3, #8]
 8002b54:	2200      	movs	r2, #0
 8002b56:	725a      	strb	r2, [r3, #9]
 8002b58:	2200      	movs	r2, #0
 8002b5a:	729a      	strb	r2, [r3, #10]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	72da      	strb	r2, [r3, #11]

	if (status_l & LTC2991_V4_READY)
 8002b60:	7d7b      	ldrb	r3, [r7, #21]
 8002b62:	f003 0308 	and.w	r3, r3, #8
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d00a      	beq.n	8002b80 <i2c_sensor_u3_read_nomutex+0x1b2>
	{
		code_to_voltage(v4_msb, v4_lsb, &meas);
 8002b6a:	7a7b      	ldrb	r3, [r7, #9]
 8002b6c:	7a39      	ldrb	r1, [r7, #8]
 8002b6e:	f107 0210 	add.w	r2, r7, #16
 8002b72:	4618      	mov	r0, r3
 8002b74:	f7ff fd9a 	bl	80026ac <code_to_voltage>
		op->voltage_4v0 = meas;
 8002b78:	693a      	ldr	r2, [r7, #16]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	60da      	str	r2, [r3, #12]
 8002b7e:	e00a      	b.n	8002b96 <i2c_sensor_u3_read_nomutex+0x1c8>
	}
	else
		op->voltage_4v0 = 0;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2200      	movs	r2, #0
 8002b84:	731a      	strb	r2, [r3, #12]
 8002b86:	2200      	movs	r2, #0
 8002b88:	735a      	strb	r2, [r3, #13]
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	739a      	strb	r2, [r3, #14]
 8002b8e:	2200      	movs	r2, #0
 8002b90:	73da      	strb	r2, [r3, #15]
 8002b92:	e000      	b.n	8002b96 <i2c_sensor_u3_read_nomutex+0x1c8>
		goto SENSOR_U3_ERROR;
 8002b94:	bf00      	nop

	SENSOR_U3_ERROR: return ret;
 8002b96:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b98:	4618      	mov	r0, r3
 8002b9a:	3718      	adds	r7, #24
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bd80      	pop	{r7, pc}

08002ba0 <i2c_sensor_u4_read_nomutex>:

static uint8_t i2c_sensor_u4_read_nomutex(sensor_data_t *op)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b086      	sub	sp, #24
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
	uint8_t status_l, status_h, msb, lsb, i5_msb, i5_lsb;
	uint8_t ret1, ret = 0;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	75fb      	strb	r3, [r7, #23]
	int32_t meas;

	ret1 = i2c_sensor_read_reg_nomutex(LTC2991_I2C_ADDRESS_U4,
 8002bac:	f107 0315 	add.w	r3, r7, #21
 8002bb0:	461a      	mov	r2, r3
 8002bb2:	2100      	movs	r1, #0
 8002bb4:	209e      	movs	r0, #158	; 0x9e
 8002bb6:	f7ff fc2d 	bl	8002414 <i2c_sensor_read_reg_nomutex>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	75bb      	strb	r3, [r7, #22]
	LTC2991_STATUS_LOW_REG, &status_l);
	ret = ret | ret1;
 8002bbe:	7dfa      	ldrb	r2, [r7, #23]
 8002bc0:	7dbb      	ldrb	r3, [r7, #22]
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	75fb      	strb	r3, [r7, #23]

	ret1 = i2c_sensor_read_reg_nomutex(LTC2991_I2C_ADDRESS_U4,
 8002bc6:	f107 0314 	add.w	r3, r7, #20
 8002bca:	461a      	mov	r2, r3
 8002bcc:	2101      	movs	r1, #1
 8002bce:	209e      	movs	r0, #158	; 0x9e
 8002bd0:	f7ff fc20 	bl	8002414 <i2c_sensor_read_reg_nomutex>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	75bb      	strb	r3, [r7, #22]
	LTC2991_STATUS_HIGH_REG, &status_h);
	ret = ret | ret1;
 8002bd8:	7dfa      	ldrb	r2, [r7, #23]
 8002bda:	7dbb      	ldrb	r3, [r7, #22]
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	75fb      	strb	r3, [r7, #23]

	ret1 = i2c_sensor_read_reg_nomutex(LTC2991_I2C_ADDRESS_U4,
 8002be0:	f107 0312 	add.w	r3, r7, #18
 8002be4:	461a      	mov	r2, r3
 8002be6:	210f      	movs	r1, #15
 8002be8:	209e      	movs	r0, #158	; 0x9e
 8002bea:	f7ff fc13 	bl	8002414 <i2c_sensor_read_reg_nomutex>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	75bb      	strb	r3, [r7, #22]
	LTC2991_V3_LSB_REG, &lsb);
	ret = ret | ret1;
 8002bf2:	7dfa      	ldrb	r2, [r7, #23]
 8002bf4:	7dbb      	ldrb	r3, [r7, #22]
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	75fb      	strb	r3, [r7, #23]

	ret1 = i2c_sensor_read_reg_nomutex(LTC2991_I2C_ADDRESS_U4,
 8002bfa:	f107 0313 	add.w	r3, r7, #19
 8002bfe:	461a      	mov	r2, r3
 8002c00:	210e      	movs	r1, #14
 8002c02:	209e      	movs	r0, #158	; 0x9e
 8002c04:	f7ff fc06 	bl	8002414 <i2c_sensor_read_reg_nomutex>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	75bb      	strb	r3, [r7, #22]
	LTC2991_V3_MSB_REG, &msb);
	ret = ret | ret1;
 8002c0c:	7dfa      	ldrb	r2, [r7, #23]
 8002c0e:	7dbb      	ldrb	r3, [r7, #22]
 8002c10:	4313      	orrs	r3, r2
 8002c12:	75fb      	strb	r3, [r7, #23]

	ret1 = i2c_sensor_read_reg_nomutex(LTC2991_I2C_ADDRESS_U4,
 8002c14:	f107 0310 	add.w	r3, r7, #16
 8002c18:	461a      	mov	r2, r3
 8002c1a:	210d      	movs	r1, #13
 8002c1c:	209e      	movs	r0, #158	; 0x9e
 8002c1e:	f7ff fbf9 	bl	8002414 <i2c_sensor_read_reg_nomutex>
 8002c22:	4603      	mov	r3, r0
 8002c24:	75bb      	strb	r3, [r7, #22]
	LTC2991_V2_LSB_REG, &i5_lsb);
	ret = ret | ret1;
 8002c26:	7dfa      	ldrb	r2, [r7, #23]
 8002c28:	7dbb      	ldrb	r3, [r7, #22]
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	75fb      	strb	r3, [r7, #23]

	ret1 = i2c_sensor_read_reg_nomutex(LTC2991_I2C_ADDRESS_U4,
 8002c2e:	f107 0311 	add.w	r3, r7, #17
 8002c32:	461a      	mov	r2, r3
 8002c34:	210c      	movs	r1, #12
 8002c36:	209e      	movs	r0, #158	; 0x9e
 8002c38:	f7ff fbec 	bl	8002414 <i2c_sensor_read_reg_nomutex>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	75bb      	strb	r3, [r7, #22]
	LTC2991_V2_MSB_REG, &i5_msb);
	ret = ret | ret1;
 8002c40:	7dfa      	ldrb	r2, [r7, #23]
 8002c42:	7dbb      	ldrb	r3, [r7, #22]
 8002c44:	4313      	orrs	r3, r2
 8002c46:	75fb      	strb	r3, [r7, #23]

	if (ret)
 8002c48:	7dfb      	ldrb	r3, [r7, #23]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d139      	bne.n	8002cc2 <i2c_sensor_u4_read_nomutex+0x122>
		goto SENSOR_U4_ERROR;

	if (status_l & LTC2991_V3_READY)
 8002c4e:	7d7b      	ldrb	r3, [r7, #21]
 8002c50:	f003 0304 	and.w	r3, r3, #4
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d00c      	beq.n	8002c72 <i2c_sensor_u4_read_nomutex+0xd2>
	{
		code_to_voltage(msb, lsb, &meas);
 8002c58:	7cfb      	ldrb	r3, [r7, #19]
 8002c5a:	7cb9      	ldrb	r1, [r7, #18]
 8002c5c:	f107 020c 	add.w	r2, r7, #12
 8002c60:	4618      	mov	r0, r3
 8002c62:	f7ff fd23 	bl	80026ac <code_to_voltage>
		op->voltage_5v0 = meas * 2; // double it
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	005b      	lsls	r3, r3, #1
 8002c6a:	461a      	mov	r2, r3
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	611a      	str	r2, [r3, #16]
 8002c70:	e008      	b.n	8002c84 <i2c_sensor_u4_read_nomutex+0xe4>
	}
	else
		op->voltage_5v0 = 0;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2200      	movs	r2, #0
 8002c76:	741a      	strb	r2, [r3, #16]
 8002c78:	2200      	movs	r2, #0
 8002c7a:	745a      	strb	r2, [r3, #17]
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	749a      	strb	r2, [r3, #18]
 8002c80:	2200      	movs	r2, #0
 8002c82:	74da      	strb	r2, [r3, #19]

//	if (status_h & LTC2991_V12_READY)
	if (status_l & LTC2991_V12_READY)
 8002c84:	7d7b      	ldrb	r3, [r7, #21]
 8002c86:	f003 0301 	and.w	r3, r3, #1
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d00b      	beq.n	8002ca6 <i2c_sensor_u4_read_nomutex+0x106>
	{
		code_to_current(i5_msb, i5_lsb, &meas);
 8002c8e:	7c7b      	ldrb	r3, [r7, #17]
 8002c90:	7c39      	ldrb	r1, [r7, #16]
 8002c92:	f107 020c 	add.w	r2, r7, #12
 8002c96:	4618      	mov	r0, r3
 8002c98:	f7ff fd42 	bl	8002720 <code_to_current>
		op->current_5v0 = meas;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	461a      	mov	r2, r3
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	625a      	str	r2, [r3, #36]	; 0x24
 8002ca4:	e00e      	b.n	8002cc4 <i2c_sensor_u4_read_nomutex+0x124>
	}
	else
		op->current_5v0 = 0;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2200      	movs	r2, #0
 8002caa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002cae:	2200      	movs	r2, #0
 8002cb0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 8002cba:	2200      	movs	r2, #0
 8002cbc:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
 8002cc0:	e000      	b.n	8002cc4 <i2c_sensor_u4_read_nomutex+0x124>
		goto SENSOR_U4_ERROR;
 8002cc2:	bf00      	nop

	//trace_printf("5vis:%d\n", op->voltage_5v0);

	SENSOR_U4_ERROR: return ret;
 8002cc4:	7dfb      	ldrb	r3, [r7, #23]
}
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	3718      	adds	r7, #24
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}
	...

08002cd0 <i2c_sensor_read>:

static uint8_t i2c_sensor_read(void)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b082      	sub	sp, #8
 8002cd4:	af00      	add	r7, sp, #0
	uint8_t ret1, ret = 0;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	71fb      	strb	r3, [r7, #7]

	if (xSemaphoreTake(g_mutex_i2c_op, portMAX_DELAY) == pdTRUE)
 8002cda:	4b18      	ldr	r3, [pc, #96]	; (8002d3c <i2c_sensor_read+0x6c>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f04f 31ff 	mov.w	r1, #4294967295
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	f005 fee8 	bl	8008ab8 <xQueueSemaphoreTake>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	2b01      	cmp	r3, #1
 8002cec:	d121      	bne.n	8002d32 <i2c_sensor_read+0x62>
	{
		ret1 = i2c_sensor_u2_read_nomutex(&g_sensor_data);
 8002cee:	4814      	ldr	r0, [pc, #80]	; (8002d40 <i2c_sensor_read+0x70>)
 8002cf0:	f7ff fd7c 	bl	80027ec <i2c_sensor_u2_read_nomutex>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	71bb      	strb	r3, [r7, #6]
		ret = ret | ret1;
 8002cf8:	79fa      	ldrb	r2, [r7, #7]
 8002cfa:	79bb      	ldrb	r3, [r7, #6]
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	71fb      	strb	r3, [r7, #7]

		ret1 = i2c_sensor_u3_read_nomutex(&g_sensor_data);
 8002d00:	480f      	ldr	r0, [pc, #60]	; (8002d40 <i2c_sensor_read+0x70>)
 8002d02:	f7ff fe64 	bl	80029ce <i2c_sensor_u3_read_nomutex>
 8002d06:	4603      	mov	r3, r0
 8002d08:	71bb      	strb	r3, [r7, #6]
		ret = ret | ret1;
 8002d0a:	79fa      	ldrb	r2, [r7, #7]
 8002d0c:	79bb      	ldrb	r3, [r7, #6]
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	71fb      	strb	r3, [r7, #7]

		ret1 = i2c_sensor_u4_read_nomutex(&g_sensor_data);
 8002d12:	480b      	ldr	r0, [pc, #44]	; (8002d40 <i2c_sensor_read+0x70>)
 8002d14:	f7ff ff44 	bl	8002ba0 <i2c_sensor_u4_read_nomutex>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	71bb      	strb	r3, [r7, #6]
		ret = ret | ret1;
 8002d1c:	79fa      	ldrb	r2, [r7, #7]
 8002d1e:	79bb      	ldrb	r3, [r7, #6]
 8002d20:	4313      	orrs	r3, r2
 8002d22:	71fb      	strb	r3, [r7, #7]

		xSemaphoreGive(g_mutex_i2c_op);
 8002d24:	4b05      	ldr	r3, [pc, #20]	; (8002d3c <i2c_sensor_read+0x6c>)
 8002d26:	6818      	ldr	r0, [r3, #0]
 8002d28:	2300      	movs	r3, #0
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	2100      	movs	r1, #0
 8002d2e:	f005 fbbf 	bl	80084b0 <xQueueGenericSend>

	}

	return ret;
 8002d32:	79fb      	ldrb	r3, [r7, #7]
}
 8002d34:	4618      	mov	r0, r3
 8002d36:	3708      	adds	r7, #8
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bd80      	pop	{r7, pc}
 8002d3c:	2000a17c 	.word	0x2000a17c
 8002d40:	2000a220 	.word	0x2000a220

08002d44 <vSensorHandlerTask>:

void vSensorHandlerTask(void *pvParameters)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b084      	sub	sp, #16
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
	static uint8_t sensor_not_configed = 1;
	uint8_t ret = 0;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	73fb      	strb	r3, [r7, #15]
	while (1)
	{
//		1 = 0, ret2 = 0, ret3 = 0;
		if (sensor_not_configed)
 8002d50:	4b1c      	ldr	r3, [pc, #112]	; (8002dc4 <vSensorHandlerTask+0x80>)
 8002d52:	781b      	ldrb	r3, [r3, #0]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d00e      	beq.n	8002d76 <vSensorHandlerTask+0x32>
		{
			sensor_not_configed = i2c_sensor_config();
 8002d58:	f7ff fc86 	bl	8002668 <i2c_sensor_config>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	461a      	mov	r2, r3
 8002d60:	4b18      	ldr	r3, [pc, #96]	; (8002dc4 <vSensorHandlerTask+0x80>)
 8002d62:	701a      	strb	r2, [r3, #0]
			if (sensor_not_configed)
 8002d64:	4b17      	ldr	r3, [pc, #92]	; (8002dc4 <vSensorHandlerTask+0x80>)
 8002d66:	781b      	ldrb	r3, [r3, #0]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d004      	beq.n	8002d76 <vSensorHandlerTask+0x32>
			{
				vTaskDelay(1000 / portTICK_PERIOD_MS);
 8002d6c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002d70:	f006 fbf2 	bl	8009558 <vTaskDelay>
				continue;
 8002d74:	e025      	b.n	8002dc2 <vSensorHandlerTask+0x7e>
			}
		}

		ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8002d76:	f04f 31ff 	mov.w	r1, #4294967295
 8002d7a:	2001      	movs	r0, #1
 8002d7c:	f007 fa12 	bl	800a1a4 <ulTaskNotifyTake>
		//		{
		//			i2c_sensor_config();
		//		}
		//		else
		//		{
		ret = i2c_sensor_read();
 8002d80:	f7ff ffa6 	bl	8002cd0 <i2c_sensor_read>
 8002d84:	4603      	mov	r3, r0
 8002d86:	73fb      	strb	r3, [r7, #15]
		if (ret)
 8002d88:	7bfb      	ldrb	r3, [r7, #15]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d007      	beq.n	8002d9e <vSensorHandlerTask+0x5a>
		{
			sensor_not_configed = 1;
 8002d8e:	4b0d      	ldr	r3, [pc, #52]	; (8002dc4 <vSensorHandlerTask+0x80>)
 8002d90:	2201      	movs	r2, #1
 8002d92:	701a      	strb	r2, [r3, #0]
			vTaskDelay(1000 / portTICK_PERIOD_MS);
 8002d94:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002d98:	f006 fbde 	bl	8009558 <vTaskDelay>
			continue;
 8002d9c:	e011      	b.n	8002dc2 <vSensorHandlerTask+0x7e>
		}
		unsigned long ptr_to_sensor_data = &g_sensor_data;
 8002d9e:	4b0a      	ldr	r3, [pc, #40]	; (8002dc8 <vSensorHandlerTask+0x84>)
 8002da0:	60bb      	str	r3, [r7, #8]
		xQueueOverwrite(g_sensor_queue_handle, (void* )&ptr_to_sensor_data);
 8002da2:	4b0a      	ldr	r3, [pc, #40]	; (8002dcc <vSensorHandlerTask+0x88>)
 8002da4:	6818      	ldr	r0, [r3, #0]
 8002da6:	f107 0108 	add.w	r1, r7, #8
 8002daa:	2302      	movs	r3, #2
 8002dac:	2200      	movs	r2, #0
 8002dae:	f005 fb7f 	bl	80084b0 <xQueueGenericSend>
		if (is_all_zero())
 8002db2:	f7ff fb0f 	bl	80023d4 <is_all_zero>
 8002db6:	4603      	mov	r3, r0
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d0c9      	beq.n	8002d50 <vSensorHandlerTask+0xc>
		{
			sensor_not_configed = 1;
 8002dbc:	4b01      	ldr	r3, [pc, #4]	; (8002dc4 <vSensorHandlerTask+0x80>)
 8002dbe:	2201      	movs	r2, #1
 8002dc0:	701a      	strb	r2, [r3, #0]
	{
 8002dc2:	e7c5      	b.n	8002d50 <vSensorHandlerTask+0xc>
 8002dc4:	20000000 	.word	0x20000000
 8002dc8:	2000a220 	.word	0x2000a220
 8002dcc:	2000a248 	.word	0x2000a248

08002dd0 <vStartSensorTask>:
	}
	return;
}

void vStartSensorTask(UBaseType_t uxPriority)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b086      	sub	sp, #24
 8002dd4:	af02      	add	r7, sp, #8
 8002dd6:	6078      	str	r0, [r7, #4]
	BaseType_t xReturned;

	/* Spawn the task. */
	xReturned = xTaskCreate(vSensorHandlerTask, "SENSOR", SENSOR_STACK_SIZE,
 8002dd8:	4b16      	ldr	r3, [pc, #88]	; (8002e34 <vStartSensorTask+0x64>)
 8002dda:	9301      	str	r3, [sp, #4]
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	9300      	str	r3, [sp, #0]
 8002de0:	2300      	movs	r3, #0
 8002de2:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8002de6:	4914      	ldr	r1, [pc, #80]	; (8002e38 <vStartSensorTask+0x68>)
 8002de8:	4814      	ldr	r0, [pc, #80]	; (8002e3c <vStartSensorTask+0x6c>)
 8002dea:	f006 fa00 	bl	80091ee <xTaskCreate>
 8002dee:	60f8      	str	r0, [r7, #12]
	NULL, uxPriority, (TaskHandle_t*) &g_handle_sensor_task);
	if (xReturned != pdPASS)
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	2b01      	cmp	r3, #1
 8002df4:	d004      	beq.n	8002e00 <vStartSensorTask+0x30>
	{
		trace_printf("failed to create sensor handling task\n");
 8002df6:	4812      	ldr	r0, [pc, #72]	; (8002e40 <vStartSensorTask+0x70>)
 8002df8:	f018 f98c 	bl	801b114 <trace_printf>
		Error_Handler();
 8002dfc:	f7fe f8d6 	bl	8000fac <Error_Handler>
	}
	g_sensor_queue_handle = xQueueCreateStatic(1, sizeof(sensor_data_t*),
 8002e00:	2300      	movs	r3, #0
 8002e02:	9300      	str	r3, [sp, #0]
 8002e04:	4b0f      	ldr	r3, [pc, #60]	; (8002e44 <vStartSensorTask+0x74>)
 8002e06:	4a10      	ldr	r2, [pc, #64]	; (8002e48 <vStartSensorTask+0x78>)
 8002e08:	2104      	movs	r1, #4
 8002e0a:	2001      	movs	r0, #1
 8002e0c:	f005 fa2c 	bl	8008268 <xQueueGenericCreateStatic>
 8002e10:	4603      	mov	r3, r0
 8002e12:	4a0e      	ldr	r2, [pc, #56]	; (8002e4c <vStartSensorTask+0x7c>)
 8002e14:	6013      	str	r3, [r2, #0]
			sensor_queue_storage_area, &sensor_queue_ds);
	if ( NULL == g_sensor_queue_handle)
 8002e16:	4b0d      	ldr	r3, [pc, #52]	; (8002e4c <vStartSensorTask+0x7c>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d105      	bne.n	8002e2a <vStartSensorTask+0x5a>
	{
		trace_printf("failed to create the sensor queue\n");
 8002e1e:	480c      	ldr	r0, [pc, #48]	; (8002e50 <vStartSensorTask+0x80>)
 8002e20:	f018 f978 	bl	801b114 <trace_printf>
		Error_Handler();
 8002e24:	f7fe f8c2 	bl	8000fac <Error_Handler>
	}
	return;
 8002e28:	bf00      	nop
 8002e2a:	bf00      	nop
}
 8002e2c:	3710      	adds	r7, #16
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bd80      	pop	{r7, pc}
 8002e32:	bf00      	nop
 8002e34:	2000a24c 	.word	0x2000a24c
 8002e38:	0801cad4 	.word	0x0801cad4
 8002e3c:	08002d45 	.word	0x08002d45
 8002e40:	0801cadc 	.word	0x0801cadc
 8002e44:	20002474 	.word	0x20002474
 8002e48:	200024bc 	.word	0x200024bc
 8002e4c:	2000a248 	.word	0x2000a248
 8002e50:	0801cb04 	.word	0x0801cb04

08002e54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
 * Initializes the Global MSP.
 */
void HAL_MspInit(void)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b082      	sub	sp, #8
 8002e58:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MspInit 0 */

	/* USER CODE END MspInit 0 */

	__HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	607b      	str	r3, [r7, #4]
 8002e5e:	4b12      	ldr	r3, [pc, #72]	; (8002ea8 <HAL_MspInit+0x54>)
 8002e60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e62:	4a11      	ldr	r2, [pc, #68]	; (8002ea8 <HAL_MspInit+0x54>)
 8002e64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e68:	6453      	str	r3, [r2, #68]	; 0x44
 8002e6a:	4b0f      	ldr	r3, [pc, #60]	; (8002ea8 <HAL_MspInit+0x54>)
 8002e6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e72:	607b      	str	r3, [r7, #4]
 8002e74:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_PWR_CLK_ENABLE();
 8002e76:	2300      	movs	r3, #0
 8002e78:	603b      	str	r3, [r7, #0]
 8002e7a:	4b0b      	ldr	r3, [pc, #44]	; (8002ea8 <HAL_MspInit+0x54>)
 8002e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e7e:	4a0a      	ldr	r2, [pc, #40]	; (8002ea8 <HAL_MspInit+0x54>)
 8002e80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e84:	6413      	str	r3, [r2, #64]	; 0x40
 8002e86:	4b08      	ldr	r3, [pc, #32]	; (8002ea8 <HAL_MspInit+0x54>)
 8002e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e8e:	603b      	str	r3, [r7, #0]
 8002e90:	683b      	ldr	r3, [r7, #0]

	/* System interrupt init*/
	/* PendSV_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002e92:	2200      	movs	r2, #0
 8002e94:	210f      	movs	r1, #15
 8002e96:	f06f 0001 	mvn.w	r0, #1
 8002e9a:	f000 fbc1 	bl	8003620 <HAL_NVIC_SetPriority>

	/* USER CODE BEGIN MspInit 1 */

	/* USER CODE END MspInit 1 */
}
 8002e9e:	bf00      	nop
 8002ea0:	3708      	adds	r7, #8
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}
 8002ea6:	bf00      	nop
 8002ea8:	40023800 	.word	0x40023800

08002eac <HAL_I2C_MspInit>:
 * This function configures the hardware resources used in this example
 * @param hi2c: I2C handle pointer
 * @retval None
 */
void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b08a      	sub	sp, #40	; 0x28
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct =
 8002eb4:	f107 0314 	add.w	r3, r7, #20
 8002eb8:	2200      	movs	r2, #0
 8002eba:	601a      	str	r2, [r3, #0]
 8002ebc:	605a      	str	r2, [r3, #4]
 8002ebe:	609a      	str	r2, [r3, #8]
 8002ec0:	60da      	str	r2, [r3, #12]
 8002ec2:	611a      	str	r2, [r3, #16]
	{ 0 };
	if (hi2c->Instance == I2C1)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a19      	ldr	r2, [pc, #100]	; (8002f30 <HAL_I2C_MspInit+0x84>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d12c      	bne.n	8002f28 <HAL_I2C_MspInit+0x7c>
	{
		/* USER CODE BEGIN I2C1_MspInit 0 */

		/* USER CODE END I2C1_MspInit 0 */

		__HAL_RCC_GPIOB_CLK_ENABLE();
 8002ece:	2300      	movs	r3, #0
 8002ed0:	613b      	str	r3, [r7, #16]
 8002ed2:	4b18      	ldr	r3, [pc, #96]	; (8002f34 <HAL_I2C_MspInit+0x88>)
 8002ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ed6:	4a17      	ldr	r2, [pc, #92]	; (8002f34 <HAL_I2C_MspInit+0x88>)
 8002ed8:	f043 0302 	orr.w	r3, r3, #2
 8002edc:	6313      	str	r3, [r2, #48]	; 0x30
 8002ede:	4b15      	ldr	r3, [pc, #84]	; (8002f34 <HAL_I2C_MspInit+0x88>)
 8002ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ee2:	f003 0302 	and.w	r3, r3, #2
 8002ee6:	613b      	str	r3, [r7, #16]
 8002ee8:	693b      	ldr	r3, [r7, #16]
		/**I2C1 GPIO Configuration
		 PB6     ------> I2C1_SCL
		 PB9     ------> I2C1_SDA
		 */
		GPIO_InitStruct.Pin = GPIO_PIN_6 | GPIO_PIN_9;
 8002eea:	f44f 7310 	mov.w	r3, #576	; 0x240
 8002eee:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002ef0:	2312      	movs	r3, #18
 8002ef2:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ef8:	2303      	movs	r3, #3
 8002efa:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002efc:	2304      	movs	r3, #4
 8002efe:	627b      	str	r3, [r7, #36]	; 0x24
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f00:	f107 0314 	add.w	r3, r7, #20
 8002f04:	4619      	mov	r1, r3
 8002f06:	480c      	ldr	r0, [pc, #48]	; (8002f38 <HAL_I2C_MspInit+0x8c>)
 8002f08:	f001 fd5a 	bl	80049c0 <HAL_GPIO_Init>

		/* Peripheral clock enable */
		__HAL_RCC_I2C1_CLK_ENABLE();
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	60fb      	str	r3, [r7, #12]
 8002f10:	4b08      	ldr	r3, [pc, #32]	; (8002f34 <HAL_I2C_MspInit+0x88>)
 8002f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f14:	4a07      	ldr	r2, [pc, #28]	; (8002f34 <HAL_I2C_MspInit+0x88>)
 8002f16:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002f1a:	6413      	str	r3, [r2, #64]	; 0x40
 8002f1c:	4b05      	ldr	r3, [pc, #20]	; (8002f34 <HAL_I2C_MspInit+0x88>)
 8002f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f24:	60fb      	str	r3, [r7, #12]
 8002f26:	68fb      	ldr	r3, [r7, #12]
		/* USER CODE BEGIN I2C1_MspInit 1 */

		/* USER CODE END I2C1_MspInit 1 */
	}

}
 8002f28:	bf00      	nop
 8002f2a:	3728      	adds	r7, #40	; 0x28
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bd80      	pop	{r7, pc}
 8002f30:	40005400 	.word	0x40005400
 8002f34:	40023800 	.word	0x40023800
 8002f38:	40020400 	.word	0x40020400

08002f3c <HAL_SPI_MspInit>:
 * This function configures the hardware resources used in this example
 * @param hspi: SPI handle pointer
 * @retval None
 */
void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b08a      	sub	sp, #40	; 0x28
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct =
 8002f44:	f107 0314 	add.w	r3, r7, #20
 8002f48:	2200      	movs	r2, #0
 8002f4a:	601a      	str	r2, [r3, #0]
 8002f4c:	605a      	str	r2, [r3, #4]
 8002f4e:	609a      	str	r2, [r3, #8]
 8002f50:	60da      	str	r2, [r3, #12]
 8002f52:	611a      	str	r2, [r3, #16]
	{ 0 };
	if (hspi->Instance == SPI1)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a28      	ldr	r2, [pc, #160]	; (8002ffc <HAL_SPI_MspInit+0xc0>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d149      	bne.n	8002ff2 <HAL_SPI_MspInit+0xb6>
	{
		/* USER CODE BEGIN SPI1_MspInit 0 */

		/* USER CODE END SPI1_MspInit 0 */
		/* Peripheral clock enable */
		__HAL_RCC_SPI1_CLK_ENABLE();
 8002f5e:	2300      	movs	r3, #0
 8002f60:	613b      	str	r3, [r7, #16]
 8002f62:	4b27      	ldr	r3, [pc, #156]	; (8003000 <HAL_SPI_MspInit+0xc4>)
 8002f64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f66:	4a26      	ldr	r2, [pc, #152]	; (8003000 <HAL_SPI_MspInit+0xc4>)
 8002f68:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002f6c:	6453      	str	r3, [r2, #68]	; 0x44
 8002f6e:	4b24      	ldr	r3, [pc, #144]	; (8003000 <HAL_SPI_MspInit+0xc4>)
 8002f70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f72:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f76:	613b      	str	r3, [r7, #16]
 8002f78:	693b      	ldr	r3, [r7, #16]

		__HAL_RCC_GPIOA_CLK_ENABLE();
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	60fb      	str	r3, [r7, #12]
 8002f7e:	4b20      	ldr	r3, [pc, #128]	; (8003000 <HAL_SPI_MspInit+0xc4>)
 8002f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f82:	4a1f      	ldr	r2, [pc, #124]	; (8003000 <HAL_SPI_MspInit+0xc4>)
 8002f84:	f043 0301 	orr.w	r3, r3, #1
 8002f88:	6313      	str	r3, [r2, #48]	; 0x30
 8002f8a:	4b1d      	ldr	r3, [pc, #116]	; (8003000 <HAL_SPI_MspInit+0xc4>)
 8002f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f8e:	f003 0301 	and.w	r3, r3, #1
 8002f92:	60fb      	str	r3, [r7, #12]
 8002f94:	68fb      	ldr	r3, [r7, #12]
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8002f96:	2300      	movs	r3, #0
 8002f98:	60bb      	str	r3, [r7, #8]
 8002f9a:	4b19      	ldr	r3, [pc, #100]	; (8003000 <HAL_SPI_MspInit+0xc4>)
 8002f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f9e:	4a18      	ldr	r2, [pc, #96]	; (8003000 <HAL_SPI_MspInit+0xc4>)
 8002fa0:	f043 0302 	orr.w	r3, r3, #2
 8002fa4:	6313      	str	r3, [r2, #48]	; 0x30
 8002fa6:	4b16      	ldr	r3, [pc, #88]	; (8003000 <HAL_SPI_MspInit+0xc4>)
 8002fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002faa:	f003 0302 	and.w	r3, r3, #2
 8002fae:	60bb      	str	r3, [r7, #8]
 8002fb0:	68bb      	ldr	r3, [r7, #8]
		/**SPI1 GPIO Configuration
		 PA5     ------> SPI1_SCK
		 PA6     ------> SPI1_MISO
		 PB5     ------> SPI1_MOSI
		 */
		GPIO_InitStruct.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 8002fb2:	2360      	movs	r3, #96	; 0x60
 8002fb4:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fb6:	2302      	movs	r3, #2
 8002fb8:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fba:	2300      	movs	r3, #0
 8002fbc:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fbe:	2303      	movs	r3, #3
 8002fc0:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002fc2:	2305      	movs	r3, #5
 8002fc4:	627b      	str	r3, [r7, #36]	; 0x24
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fc6:	f107 0314 	add.w	r3, r7, #20
 8002fca:	4619      	mov	r1, r3
 8002fcc:	480d      	ldr	r0, [pc, #52]	; (8003004 <HAL_SPI_MspInit+0xc8>)
 8002fce:	f001 fcf7 	bl	80049c0 <HAL_GPIO_Init>

		GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002fd2:	2320      	movs	r3, #32
 8002fd4:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fd6:	2302      	movs	r3, #2
 8002fd8:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fde:	2303      	movs	r3, #3
 8002fe0:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002fe2:	2305      	movs	r3, #5
 8002fe4:	627b      	str	r3, [r7, #36]	; 0x24
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fe6:	f107 0314 	add.w	r3, r7, #20
 8002fea:	4619      	mov	r1, r3
 8002fec:	4806      	ldr	r0, [pc, #24]	; (8003008 <HAL_SPI_MspInit+0xcc>)
 8002fee:	f001 fce7 	bl	80049c0 <HAL_GPIO_Init>
		/* USER CODE BEGIN SPI1_MspInit 1 */

		/* USER CODE END SPI1_MspInit 1 */
	}

}
 8002ff2:	bf00      	nop
 8002ff4:	3728      	adds	r7, #40	; 0x28
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd80      	pop	{r7, pc}
 8002ffa:	bf00      	nop
 8002ffc:	40013000 	.word	0x40013000
 8003000:	40023800 	.word	0x40023800
 8003004:	40020000 	.word	0x40020000
 8003008:	40020400 	.word	0x40020400

0800300c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b08c      	sub	sp, #48	; 0x30
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8003014:	2300      	movs	r3, #0
 8003016:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8003018:	2300      	movs	r3, #0
 800301a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 800301c:	2200      	movs	r2, #0
 800301e:	6879      	ldr	r1, [r7, #4]
 8003020:	2019      	movs	r0, #25
 8003022:	f000 fafd 	bl	8003620 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8003026:	2019      	movs	r0, #25
 8003028:	f000 fb16 	bl	8003658 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800302c:	2300      	movs	r3, #0
 800302e:	60fb      	str	r3, [r7, #12]
 8003030:	4b1f      	ldr	r3, [pc, #124]	; (80030b0 <HAL_InitTick+0xa4>)
 8003032:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003034:	4a1e      	ldr	r2, [pc, #120]	; (80030b0 <HAL_InitTick+0xa4>)
 8003036:	f043 0301 	orr.w	r3, r3, #1
 800303a:	6453      	str	r3, [r2, #68]	; 0x44
 800303c:	4b1c      	ldr	r3, [pc, #112]	; (80030b0 <HAL_InitTick+0xa4>)
 800303e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003040:	f003 0301 	and.w	r3, r3, #1
 8003044:	60fb      	str	r3, [r7, #12]
 8003046:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003048:	f107 0210 	add.w	r2, r7, #16
 800304c:	f107 0314 	add.w	r3, r7, #20
 8003050:	4611      	mov	r1, r2
 8003052:	4618      	mov	r0, r3
 8003054:	f003 fb10 	bl	8006678 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8003058:	f003 fafa 	bl	8006650 <HAL_RCC_GetPCLK2Freq>
 800305c:	4603      	mov	r3, r0
 800305e:	005b      	lsls	r3, r3, #1
 8003060:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003062:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003064:	4a13      	ldr	r2, [pc, #76]	; (80030b4 <HAL_InitTick+0xa8>)
 8003066:	fba2 2303 	umull	r2, r3, r2, r3
 800306a:	0c9b      	lsrs	r3, r3, #18
 800306c:	3b01      	subs	r3, #1
 800306e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8003070:	4b11      	ldr	r3, [pc, #68]	; (80030b8 <HAL_InitTick+0xac>)
 8003072:	4a12      	ldr	r2, [pc, #72]	; (80030bc <HAL_InitTick+0xb0>)
 8003074:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8003076:	4b10      	ldr	r3, [pc, #64]	; (80030b8 <HAL_InitTick+0xac>)
 8003078:	f240 32e7 	movw	r2, #999	; 0x3e7
 800307c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800307e:	4a0e      	ldr	r2, [pc, #56]	; (80030b8 <HAL_InitTick+0xac>)
 8003080:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003082:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8003084:	4b0c      	ldr	r3, [pc, #48]	; (80030b8 <HAL_InitTick+0xac>)
 8003086:	2200      	movs	r2, #0
 8003088:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800308a:	4b0b      	ldr	r3, [pc, #44]	; (80030b8 <HAL_InitTick+0xac>)
 800308c:	2200      	movs	r2, #0
 800308e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8003090:	4809      	ldr	r0, [pc, #36]	; (80030b8 <HAL_InitTick+0xac>)
 8003092:	f003 fb87 	bl	80067a4 <HAL_TIM_Base_Init>
 8003096:	4603      	mov	r3, r0
 8003098:	2b00      	cmp	r3, #0
 800309a:	d104      	bne.n	80030a6 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 800309c:	4806      	ldr	r0, [pc, #24]	; (80030b8 <HAL_InitTick+0xac>)
 800309e:	f003 fbb6 	bl	800680e <HAL_TIM_Base_Start_IT>
 80030a2:	4603      	mov	r3, r0
 80030a4:	e000      	b.n	80030a8 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 80030a6:	2301      	movs	r3, #1
}
 80030a8:	4618      	mov	r0, r3
 80030aa:	3730      	adds	r7, #48	; 0x30
 80030ac:	46bd      	mov	sp, r7
 80030ae:	bd80      	pop	{r7, pc}
 80030b0:	40023800 	.word	0x40023800
 80030b4:	431bde83 	.word	0x431bde83
 80030b8:	2000a250 	.word	0x2000a250
 80030bc:	40010000 	.word	0x40010000

080030c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80030c0:	b480      	push	{r7}
 80030c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80030c4:	e7fe      	b.n	80030c4 <NMI_Handler+0x4>
	...

080030c8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	af00      	add	r7, sp, #0
	static char msg[80];
	   trace_printf("In Hard Fault Handler\n");
 80030cc:	4810      	ldr	r0, [pc, #64]	; (8003110 <HardFault_Handler+0x48>)
 80030ce:	f018 f821 	bl	801b114 <trace_printf>
	   sprintf(msg, "SCB->HFSR = 0x%08lx\n", SCB->HFSR);
 80030d2:	4b10      	ldr	r3, [pc, #64]	; (8003114 <HardFault_Handler+0x4c>)
 80030d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030d6:	461a      	mov	r2, r3
 80030d8:	490f      	ldr	r1, [pc, #60]	; (8003118 <HardFault_Handler+0x50>)
 80030da:	4810      	ldr	r0, [pc, #64]	; (800311c <HardFault_Handler+0x54>)
 80030dc:	f018 f8de 	bl	801b29c <siprintf>
	   trace_printf(msg);
 80030e0:	480e      	ldr	r0, [pc, #56]	; (800311c <HardFault_Handler+0x54>)
 80030e2:	f018 f817 	bl	801b114 <trace_printf>

	   if ((SCB->HFSR & (1 << 30)) != 0) {
 80030e6:	4b0b      	ldr	r3, [pc, #44]	; (8003114 <HardFault_Handler+0x4c>)
 80030e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030ea:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d00c      	beq.n	800310c <HardFault_Handler+0x44>
		   trace_printf("Forced Hard Fault\n");
 80030f2:	480b      	ldr	r0, [pc, #44]	; (8003120 <HardFault_Handler+0x58>)
 80030f4:	f018 f80e 	bl	801b114 <trace_printf>
	          sprintf(msg, "SCB->CFSR = 0x%08lx\n", SCB->CFSR );
 80030f8:	4b06      	ldr	r3, [pc, #24]	; (8003114 <HardFault_Handler+0x4c>)
 80030fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030fc:	461a      	mov	r2, r3
 80030fe:	4909      	ldr	r1, [pc, #36]	; (8003124 <HardFault_Handler+0x5c>)
 8003100:	4806      	ldr	r0, [pc, #24]	; (800311c <HardFault_Handler+0x54>)
 8003102:	f018 f8cb 	bl	801b29c <siprintf>
	          trace_printf(msg);
 8003106:	4805      	ldr	r0, [pc, #20]	; (800311c <HardFault_Handler+0x54>)
 8003108:	f018 f804 	bl	801b114 <trace_printf>
	      }

	   __ASM volatile("BKPT #01");
 800310c:	be01      	bkpt	0x0001
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800310e:	e7fe      	b.n	800310e <HardFault_Handler+0x46>
 8003110:	0801cb28 	.word	0x0801cb28
 8003114:	e000ed00 	.word	0xe000ed00
 8003118:	0801cb40 	.word	0x0801cb40
 800311c:	200024c0 	.word	0x200024c0
 8003120:	0801cb58 	.word	0x0801cb58
 8003124:	0801cb6c 	.word	0x0801cb6c

08003128 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003128:	b480      	push	{r7}
 800312a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800312c:	e7fe      	b.n	800312c <MemManage_Handler+0x4>

0800312e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800312e:	b480      	push	{r7}
 8003130:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003132:	e7fe      	b.n	8003132 <BusFault_Handler+0x4>

08003134 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003134:	b480      	push	{r7}
 8003136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003138:	e7fe      	b.n	8003138 <UsageFault_Handler+0x4>

0800313a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800313a:	b480      	push	{r7}
 800313c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800313e:	bf00      	nop
 8003140:	46bd      	mov	sp, r7
 8003142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003146:	4770      	bx	lr

08003148 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800314c:	4802      	ldr	r0, [pc, #8]	; (8003158 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800314e:	f003 fb82 	bl	8006856 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8003152:	bf00      	nop
 8003154:	bd80      	pop	{r7, pc}
 8003156:	bf00      	nop
 8003158:	2000a250 	.word	0x2000a250

0800315c <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8003160:	4802      	ldr	r0, [pc, #8]	; (800316c <ETH_IRQHandler+0x10>)
 8003162:	f000 fe6b 	bl	8003e3c <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8003166:	bf00      	nop
 8003168:	bd80      	pop	{r7, pc}
 800316a:	bf00      	nop
 800316c:	2000bbb0 	.word	0x2000bbb0

08003170 <vSynthHandlerTask>:
#include "main.h"

static TaskHandle_t	g_handle_synth_task;

void vSynthHandlerTask(void * pvParameters)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b084      	sub	sp, #16
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
	pc_queue_data_t pc_queue_local_copy;

	while(1)
	{
		vTaskDelay(1000);
 8003178:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800317c:	f006 f9ec 	bl	8009558 <vTaskDelay>
 8003180:	e7fa      	b.n	8003178 <vSynthHandlerTask+0x8>
	...

08003184 <vStartSynthTask>:
	}
	return;
}

void vStartSynthTask(UBaseType_t uxPriority )
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b086      	sub	sp, #24
 8003188:	af02      	add	r7, sp, #8
 800318a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturned;

	/* Spawn the task. */
	xReturned = xTaskCreate( vSynthHandlerTask, "SYNTH", SYNTH_STACK_SIZE, NULL, uxPriority, ( TaskHandle_t * ) &g_handle_synth_task );
 800318c:	4b0c      	ldr	r3, [pc, #48]	; (80031c0 <vStartSynthTask+0x3c>)
 800318e:	9301      	str	r3, [sp, #4]
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	9300      	str	r3, [sp, #0]
 8003194:	2300      	movs	r3, #0
 8003196:	f44f 72c0 	mov.w	r2, #384	; 0x180
 800319a:	490a      	ldr	r1, [pc, #40]	; (80031c4 <vStartSynthTask+0x40>)
 800319c:	480a      	ldr	r0, [pc, #40]	; (80031c8 <vStartSynthTask+0x44>)
 800319e:	f006 f826 	bl	80091ee <xTaskCreate>
 80031a2:	60f8      	str	r0, [r7, #12]
	if( xReturned != pdPASS )
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	2b01      	cmp	r3, #1
 80031a8:	d005      	beq.n	80031b6 <vStartSynthTask+0x32>
	{
		trace_printf("failed to create the synth handling task\n");
 80031aa:	4808      	ldr	r0, [pc, #32]	; (80031cc <vStartSynthTask+0x48>)
 80031ac:	f017 ffb2 	bl	801b114 <trace_printf>
		Error_Handler();
 80031b0:	f7fd fefc 	bl	8000fac <Error_Handler>
	}

	return;
 80031b4:	bf00      	nop
 80031b6:	bf00      	nop
}
 80031b8:	3710      	adds	r7, #16
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd80      	pop	{r7, pc}
 80031be:	bf00      	nop
 80031c0:	20002510 	.word	0x20002510
 80031c4:	0801cb84 	.word	0x0801cb84
 80031c8:	08003171 	.word	0x08003171
 80031cc:	0801cb8c 	.word	0x0801cb8c

080031d0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80031d0:	b480      	push	{r7}
 80031d2:	af00      	add	r7, sp, #0
	return 1;
 80031d4:	2301      	movs	r3, #1
}
 80031d6:	4618      	mov	r0, r3
 80031d8:	46bd      	mov	sp, r7
 80031da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031de:	4770      	bx	lr

080031e0 <_kill>:

int _kill(int pid, int sig)
{
 80031e0:	b480      	push	{r7}
 80031e2:	b083      	sub	sp, #12
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
 80031e8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80031ea:	4b05      	ldr	r3, [pc, #20]	; (8003200 <_kill+0x20>)
 80031ec:	2216      	movs	r2, #22
 80031ee:	601a      	str	r2, [r3, #0]
	return -1;
 80031f0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80031f4:	4618      	mov	r0, r3
 80031f6:	370c      	adds	r7, #12
 80031f8:	46bd      	mov	sp, r7
 80031fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fe:	4770      	bx	lr
 8003200:	20010cc4 	.word	0x20010cc4

08003204 <_exit>:

void _exit (int status)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b082      	sub	sp, #8
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800320c:	f04f 31ff 	mov.w	r1, #4294967295
 8003210:	6878      	ldr	r0, [r7, #4]
 8003212:	f7ff ffe5 	bl	80031e0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003216:	e7fe      	b.n	8003216 <_exit+0x12>

08003218 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b086      	sub	sp, #24
 800321c:	af00      	add	r7, sp, #0
 800321e:	60f8      	str	r0, [r7, #12]
 8003220:	60b9      	str	r1, [r7, #8]
 8003222:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003224:	2300      	movs	r3, #0
 8003226:	617b      	str	r3, [r7, #20]
 8003228:	e00a      	b.n	8003240 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800322a:	f3af 8000 	nop.w
 800322e:	4601      	mov	r1, r0
 8003230:	68bb      	ldr	r3, [r7, #8]
 8003232:	1c5a      	adds	r2, r3, #1
 8003234:	60ba      	str	r2, [r7, #8]
 8003236:	b2ca      	uxtb	r2, r1
 8003238:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800323a:	697b      	ldr	r3, [r7, #20]
 800323c:	3301      	adds	r3, #1
 800323e:	617b      	str	r3, [r7, #20]
 8003240:	697a      	ldr	r2, [r7, #20]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	429a      	cmp	r2, r3
 8003246:	dbf0      	blt.n	800322a <_read+0x12>
	}

return len;
 8003248:	687b      	ldr	r3, [r7, #4]
}
 800324a:	4618      	mov	r0, r3
 800324c:	3718      	adds	r7, #24
 800324e:	46bd      	mov	sp, r7
 8003250:	bd80      	pop	{r7, pc}

08003252 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003252:	b580      	push	{r7, lr}
 8003254:	b086      	sub	sp, #24
 8003256:	af00      	add	r7, sp, #0
 8003258:	60f8      	str	r0, [r7, #12]
 800325a:	60b9      	str	r1, [r7, #8]
 800325c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800325e:	2300      	movs	r3, #0
 8003260:	617b      	str	r3, [r7, #20]
 8003262:	e009      	b.n	8003278 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003264:	68bb      	ldr	r3, [r7, #8]
 8003266:	1c5a      	adds	r2, r3, #1
 8003268:	60ba      	str	r2, [r7, #8]
 800326a:	781b      	ldrb	r3, [r3, #0]
 800326c:	4618      	mov	r0, r3
 800326e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003272:	697b      	ldr	r3, [r7, #20]
 8003274:	3301      	adds	r3, #1
 8003276:	617b      	str	r3, [r7, #20]
 8003278:	697a      	ldr	r2, [r7, #20]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	429a      	cmp	r2, r3
 800327e:	dbf1      	blt.n	8003264 <_write+0x12>
	}
	return len;
 8003280:	687b      	ldr	r3, [r7, #4]
}
 8003282:	4618      	mov	r0, r3
 8003284:	3718      	adds	r7, #24
 8003286:	46bd      	mov	sp, r7
 8003288:	bd80      	pop	{r7, pc}

0800328a <_close>:

int _close(int file)
{
 800328a:	b480      	push	{r7}
 800328c:	b083      	sub	sp, #12
 800328e:	af00      	add	r7, sp, #0
 8003290:	6078      	str	r0, [r7, #4]
	return -1;
 8003292:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003296:	4618      	mov	r0, r3
 8003298:	370c      	adds	r7, #12
 800329a:	46bd      	mov	sp, r7
 800329c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a0:	4770      	bx	lr

080032a2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80032a2:	b480      	push	{r7}
 80032a4:	b083      	sub	sp, #12
 80032a6:	af00      	add	r7, sp, #0
 80032a8:	6078      	str	r0, [r7, #4]
 80032aa:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80032b2:	605a      	str	r2, [r3, #4]
	return 0;
 80032b4:	2300      	movs	r3, #0
}
 80032b6:	4618      	mov	r0, r3
 80032b8:	370c      	adds	r7, #12
 80032ba:	46bd      	mov	sp, r7
 80032bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c0:	4770      	bx	lr

080032c2 <_isatty>:

int _isatty(int file)
{
 80032c2:	b480      	push	{r7}
 80032c4:	b083      	sub	sp, #12
 80032c6:	af00      	add	r7, sp, #0
 80032c8:	6078      	str	r0, [r7, #4]
	return 1;
 80032ca:	2301      	movs	r3, #1
}
 80032cc:	4618      	mov	r0, r3
 80032ce:	370c      	adds	r7, #12
 80032d0:	46bd      	mov	sp, r7
 80032d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d6:	4770      	bx	lr

080032d8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80032d8:	b480      	push	{r7}
 80032da:	b085      	sub	sp, #20
 80032dc:	af00      	add	r7, sp, #0
 80032de:	60f8      	str	r0, [r7, #12]
 80032e0:	60b9      	str	r1, [r7, #8]
 80032e2:	607a      	str	r2, [r7, #4]
	return 0;
 80032e4:	2300      	movs	r3, #0
}
 80032e6:	4618      	mov	r0, r3
 80032e8:	3714      	adds	r7, #20
 80032ea:	46bd      	mov	sp, r7
 80032ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f0:	4770      	bx	lr
	...

080032f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80032f4:	b480      	push	{r7}
 80032f6:	b087      	sub	sp, #28
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80032fc:	4a14      	ldr	r2, [pc, #80]	; (8003350 <_sbrk+0x5c>)
 80032fe:	4b15      	ldr	r3, [pc, #84]	; (8003354 <_sbrk+0x60>)
 8003300:	1ad3      	subs	r3, r2, r3
 8003302:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003304:	697b      	ldr	r3, [r7, #20]
 8003306:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003308:	4b13      	ldr	r3, [pc, #76]	; (8003358 <_sbrk+0x64>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d102      	bne.n	8003316 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003310:	4b11      	ldr	r3, [pc, #68]	; (8003358 <_sbrk+0x64>)
 8003312:	4a12      	ldr	r2, [pc, #72]	; (800335c <_sbrk+0x68>)
 8003314:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003316:	4b10      	ldr	r3, [pc, #64]	; (8003358 <_sbrk+0x64>)
 8003318:	681a      	ldr	r2, [r3, #0]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	4413      	add	r3, r2
 800331e:	693a      	ldr	r2, [r7, #16]
 8003320:	429a      	cmp	r2, r3
 8003322:	d205      	bcs.n	8003330 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8003324:	4b0e      	ldr	r3, [pc, #56]	; (8003360 <_sbrk+0x6c>)
 8003326:	220c      	movs	r2, #12
 8003328:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800332a:	f04f 33ff 	mov.w	r3, #4294967295
 800332e:	e009      	b.n	8003344 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8003330:	4b09      	ldr	r3, [pc, #36]	; (8003358 <_sbrk+0x64>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003336:	4b08      	ldr	r3, [pc, #32]	; (8003358 <_sbrk+0x64>)
 8003338:	681a      	ldr	r2, [r3, #0]
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	4413      	add	r3, r2
 800333e:	4a06      	ldr	r2, [pc, #24]	; (8003358 <_sbrk+0x64>)
 8003340:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003342:	68fb      	ldr	r3, [r7, #12]
}
 8003344:	4618      	mov	r0, r3
 8003346:	371c      	adds	r7, #28
 8003348:	46bd      	mov	sp, r7
 800334a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334e:	4770      	bx	lr
 8003350:	20030000 	.word	0x20030000
 8003354:	00000400 	.word	0x00000400
 8003358:	20002514 	.word	0x20002514
 800335c:	20010cd8 	.word	0x20010cd8
 8003360:	20010cc4 	.word	0x20010cc4

08003364 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003364:	b480      	push	{r7}
 8003366:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003368:	4b08      	ldr	r3, [pc, #32]	; (800338c <SystemInit+0x28>)
 800336a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800336e:	4a07      	ldr	r2, [pc, #28]	; (800338c <SystemInit+0x28>)
 8003370:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003374:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003378:	4b04      	ldr	r3, [pc, #16]	; (800338c <SystemInit+0x28>)
 800337a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800337e:	609a      	str	r2, [r3, #8]
#endif
}
 8003380:	bf00      	nop
 8003382:	46bd      	mov	sp, r7
 8003384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003388:	4770      	bx	lr
 800338a:	bf00      	nop
 800338c:	e000ed00 	.word	0xe000ed00

08003390 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8003390:	f8df d034 	ldr.w	sp, [pc, #52]	; 80033c8 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003394:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003396:	e003      	b.n	80033a0 <LoopCopyDataInit>

08003398 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003398:	4b0c      	ldr	r3, [pc, #48]	; (80033cc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800339a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800339c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800339e:	3104      	adds	r1, #4

080033a0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80033a0:	480b      	ldr	r0, [pc, #44]	; (80033d0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80033a2:	4b0c      	ldr	r3, [pc, #48]	; (80033d4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80033a4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80033a6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80033a8:	d3f6      	bcc.n	8003398 <CopyDataInit>
  ldr  r2, =_sbss
 80033aa:	4a0b      	ldr	r2, [pc, #44]	; (80033d8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80033ac:	e002      	b.n	80033b4 <LoopFillZerobss>

080033ae <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80033ae:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80033b0:	f842 3b04 	str.w	r3, [r2], #4

080033b4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80033b4:	4b09      	ldr	r3, [pc, #36]	; (80033dc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80033b6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80033b8:	d3f9      	bcc.n	80033ae <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80033ba:	f7ff ffd3 	bl	8003364 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80033be:	f017 fecb 	bl	801b158 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80033c2:	f7fd fd55 	bl	8000e70 <main>
  bx  lr    
 80033c6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80033c8:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 80033cc:	08020894 	.word	0x08020894
  ldr  r0, =_sdata
 80033d0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80033d4:	20000088 	.word	0x20000088
  ldr  r2, =_sbss
 80033d8:	20000088 	.word	0x20000088
  ldr  r3, = _ebss
 80033dc:	20010cd8 	.word	0x20010cd8

080033e0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80033e0:	e7fe      	b.n	80033e0 <ADC_IRQHandler>
	...

080033e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80033e8:	4b0e      	ldr	r3, [pc, #56]	; (8003424 <HAL_Init+0x40>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a0d      	ldr	r2, [pc, #52]	; (8003424 <HAL_Init+0x40>)
 80033ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80033f2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80033f4:	4b0b      	ldr	r3, [pc, #44]	; (8003424 <HAL_Init+0x40>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4a0a      	ldr	r2, [pc, #40]	; (8003424 <HAL_Init+0x40>)
 80033fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80033fe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003400:	4b08      	ldr	r3, [pc, #32]	; (8003424 <HAL_Init+0x40>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4a07      	ldr	r2, [pc, #28]	; (8003424 <HAL_Init+0x40>)
 8003406:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800340a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800340c:	2003      	movs	r0, #3
 800340e:	f000 f8fc 	bl	800360a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003412:	2000      	movs	r0, #0
 8003414:	f7ff fdfa 	bl	800300c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003418:	f7ff fd1c 	bl	8002e54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800341c:	2300      	movs	r3, #0
}
 800341e:	4618      	mov	r0, r3
 8003420:	bd80      	pop	{r7, pc}
 8003422:	bf00      	nop
 8003424:	40023c00 	.word	0x40023c00

08003428 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003428:	b480      	push	{r7}
 800342a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800342c:	4b06      	ldr	r3, [pc, #24]	; (8003448 <HAL_IncTick+0x20>)
 800342e:	781b      	ldrb	r3, [r3, #0]
 8003430:	461a      	mov	r2, r3
 8003432:	4b06      	ldr	r3, [pc, #24]	; (800344c <HAL_IncTick+0x24>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4413      	add	r3, r2
 8003438:	4a04      	ldr	r2, [pc, #16]	; (800344c <HAL_IncTick+0x24>)
 800343a:	6013      	str	r3, [r2, #0]
}
 800343c:	bf00      	nop
 800343e:	46bd      	mov	sp, r7
 8003440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003444:	4770      	bx	lr
 8003446:	bf00      	nop
 8003448:	2000000c 	.word	0x2000000c
 800344c:	2000a290 	.word	0x2000a290

08003450 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003450:	b480      	push	{r7}
 8003452:	af00      	add	r7, sp, #0
  return uwTick;
 8003454:	4b03      	ldr	r3, [pc, #12]	; (8003464 <HAL_GetTick+0x14>)
 8003456:	681b      	ldr	r3, [r3, #0]
}
 8003458:	4618      	mov	r0, r3
 800345a:	46bd      	mov	sp, r7
 800345c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003460:	4770      	bx	lr
 8003462:	bf00      	nop
 8003464:	2000a290 	.word	0x2000a290

08003468 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b084      	sub	sp, #16
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003470:	f7ff ffee 	bl	8003450 <HAL_GetTick>
 8003474:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003480:	d005      	beq.n	800348e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003482:	4b0a      	ldr	r3, [pc, #40]	; (80034ac <HAL_Delay+0x44>)
 8003484:	781b      	ldrb	r3, [r3, #0]
 8003486:	461a      	mov	r2, r3
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	4413      	add	r3, r2
 800348c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800348e:	bf00      	nop
 8003490:	f7ff ffde 	bl	8003450 <HAL_GetTick>
 8003494:	4602      	mov	r2, r0
 8003496:	68bb      	ldr	r3, [r7, #8]
 8003498:	1ad3      	subs	r3, r2, r3
 800349a:	68fa      	ldr	r2, [r7, #12]
 800349c:	429a      	cmp	r2, r3
 800349e:	d8f7      	bhi.n	8003490 <HAL_Delay+0x28>
  {
  }
}
 80034a0:	bf00      	nop
 80034a2:	bf00      	nop
 80034a4:	3710      	adds	r7, #16
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bd80      	pop	{r7, pc}
 80034aa:	bf00      	nop
 80034ac:	2000000c 	.word	0x2000000c

080034b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034b0:	b480      	push	{r7}
 80034b2:	b085      	sub	sp, #20
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	f003 0307 	and.w	r3, r3, #7
 80034be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80034c0:	4b0c      	ldr	r3, [pc, #48]	; (80034f4 <__NVIC_SetPriorityGrouping+0x44>)
 80034c2:	68db      	ldr	r3, [r3, #12]
 80034c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80034c6:	68ba      	ldr	r2, [r7, #8]
 80034c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80034cc:	4013      	ands	r3, r2
 80034ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80034d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80034dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80034e2:	4a04      	ldr	r2, [pc, #16]	; (80034f4 <__NVIC_SetPriorityGrouping+0x44>)
 80034e4:	68bb      	ldr	r3, [r7, #8]
 80034e6:	60d3      	str	r3, [r2, #12]
}
 80034e8:	bf00      	nop
 80034ea:	3714      	adds	r7, #20
 80034ec:	46bd      	mov	sp, r7
 80034ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f2:	4770      	bx	lr
 80034f4:	e000ed00 	.word	0xe000ed00

080034f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80034f8:	b480      	push	{r7}
 80034fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80034fc:	4b04      	ldr	r3, [pc, #16]	; (8003510 <__NVIC_GetPriorityGrouping+0x18>)
 80034fe:	68db      	ldr	r3, [r3, #12]
 8003500:	0a1b      	lsrs	r3, r3, #8
 8003502:	f003 0307 	and.w	r3, r3, #7
}
 8003506:	4618      	mov	r0, r3
 8003508:	46bd      	mov	sp, r7
 800350a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350e:	4770      	bx	lr
 8003510:	e000ed00 	.word	0xe000ed00

08003514 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003514:	b480      	push	{r7}
 8003516:	b083      	sub	sp, #12
 8003518:	af00      	add	r7, sp, #0
 800351a:	4603      	mov	r3, r0
 800351c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800351e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003522:	2b00      	cmp	r3, #0
 8003524:	db0b      	blt.n	800353e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003526:	79fb      	ldrb	r3, [r7, #7]
 8003528:	f003 021f 	and.w	r2, r3, #31
 800352c:	4907      	ldr	r1, [pc, #28]	; (800354c <__NVIC_EnableIRQ+0x38>)
 800352e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003532:	095b      	lsrs	r3, r3, #5
 8003534:	2001      	movs	r0, #1
 8003536:	fa00 f202 	lsl.w	r2, r0, r2
 800353a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800353e:	bf00      	nop
 8003540:	370c      	adds	r7, #12
 8003542:	46bd      	mov	sp, r7
 8003544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003548:	4770      	bx	lr
 800354a:	bf00      	nop
 800354c:	e000e100 	.word	0xe000e100

08003550 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003550:	b480      	push	{r7}
 8003552:	b083      	sub	sp, #12
 8003554:	af00      	add	r7, sp, #0
 8003556:	4603      	mov	r3, r0
 8003558:	6039      	str	r1, [r7, #0]
 800355a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800355c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003560:	2b00      	cmp	r3, #0
 8003562:	db0a      	blt.n	800357a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	b2da      	uxtb	r2, r3
 8003568:	490c      	ldr	r1, [pc, #48]	; (800359c <__NVIC_SetPriority+0x4c>)
 800356a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800356e:	0112      	lsls	r2, r2, #4
 8003570:	b2d2      	uxtb	r2, r2
 8003572:	440b      	add	r3, r1
 8003574:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003578:	e00a      	b.n	8003590 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	b2da      	uxtb	r2, r3
 800357e:	4908      	ldr	r1, [pc, #32]	; (80035a0 <__NVIC_SetPriority+0x50>)
 8003580:	79fb      	ldrb	r3, [r7, #7]
 8003582:	f003 030f 	and.w	r3, r3, #15
 8003586:	3b04      	subs	r3, #4
 8003588:	0112      	lsls	r2, r2, #4
 800358a:	b2d2      	uxtb	r2, r2
 800358c:	440b      	add	r3, r1
 800358e:	761a      	strb	r2, [r3, #24]
}
 8003590:	bf00      	nop
 8003592:	370c      	adds	r7, #12
 8003594:	46bd      	mov	sp, r7
 8003596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359a:	4770      	bx	lr
 800359c:	e000e100 	.word	0xe000e100
 80035a0:	e000ed00 	.word	0xe000ed00

080035a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80035a4:	b480      	push	{r7}
 80035a6:	b089      	sub	sp, #36	; 0x24
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	60f8      	str	r0, [r7, #12]
 80035ac:	60b9      	str	r1, [r7, #8]
 80035ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	f003 0307 	and.w	r3, r3, #7
 80035b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80035b8:	69fb      	ldr	r3, [r7, #28]
 80035ba:	f1c3 0307 	rsb	r3, r3, #7
 80035be:	2b04      	cmp	r3, #4
 80035c0:	bf28      	it	cs
 80035c2:	2304      	movcs	r3, #4
 80035c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80035c6:	69fb      	ldr	r3, [r7, #28]
 80035c8:	3304      	adds	r3, #4
 80035ca:	2b06      	cmp	r3, #6
 80035cc:	d902      	bls.n	80035d4 <NVIC_EncodePriority+0x30>
 80035ce:	69fb      	ldr	r3, [r7, #28]
 80035d0:	3b03      	subs	r3, #3
 80035d2:	e000      	b.n	80035d6 <NVIC_EncodePriority+0x32>
 80035d4:	2300      	movs	r3, #0
 80035d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035d8:	f04f 32ff 	mov.w	r2, #4294967295
 80035dc:	69bb      	ldr	r3, [r7, #24]
 80035de:	fa02 f303 	lsl.w	r3, r2, r3
 80035e2:	43da      	mvns	r2, r3
 80035e4:	68bb      	ldr	r3, [r7, #8]
 80035e6:	401a      	ands	r2, r3
 80035e8:	697b      	ldr	r3, [r7, #20]
 80035ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80035ec:	f04f 31ff 	mov.w	r1, #4294967295
 80035f0:	697b      	ldr	r3, [r7, #20]
 80035f2:	fa01 f303 	lsl.w	r3, r1, r3
 80035f6:	43d9      	mvns	r1, r3
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035fc:	4313      	orrs	r3, r2
         );
}
 80035fe:	4618      	mov	r0, r3
 8003600:	3724      	adds	r7, #36	; 0x24
 8003602:	46bd      	mov	sp, r7
 8003604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003608:	4770      	bx	lr

0800360a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800360a:	b580      	push	{r7, lr}
 800360c:	b082      	sub	sp, #8
 800360e:	af00      	add	r7, sp, #0
 8003610:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003612:	6878      	ldr	r0, [r7, #4]
 8003614:	f7ff ff4c 	bl	80034b0 <__NVIC_SetPriorityGrouping>
}
 8003618:	bf00      	nop
 800361a:	3708      	adds	r7, #8
 800361c:	46bd      	mov	sp, r7
 800361e:	bd80      	pop	{r7, pc}

08003620 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003620:	b580      	push	{r7, lr}
 8003622:	b086      	sub	sp, #24
 8003624:	af00      	add	r7, sp, #0
 8003626:	4603      	mov	r3, r0
 8003628:	60b9      	str	r1, [r7, #8]
 800362a:	607a      	str	r2, [r7, #4]
 800362c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800362e:	2300      	movs	r3, #0
 8003630:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003632:	f7ff ff61 	bl	80034f8 <__NVIC_GetPriorityGrouping>
 8003636:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003638:	687a      	ldr	r2, [r7, #4]
 800363a:	68b9      	ldr	r1, [r7, #8]
 800363c:	6978      	ldr	r0, [r7, #20]
 800363e:	f7ff ffb1 	bl	80035a4 <NVIC_EncodePriority>
 8003642:	4602      	mov	r2, r0
 8003644:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003648:	4611      	mov	r1, r2
 800364a:	4618      	mov	r0, r3
 800364c:	f7ff ff80 	bl	8003550 <__NVIC_SetPriority>
}
 8003650:	bf00      	nop
 8003652:	3718      	adds	r7, #24
 8003654:	46bd      	mov	sp, r7
 8003656:	bd80      	pop	{r7, pc}

08003658 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b082      	sub	sp, #8
 800365c:	af00      	add	r7, sp, #0
 800365e:	4603      	mov	r3, r0
 8003660:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003662:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003666:	4618      	mov	r0, r3
 8003668:	f7ff ff54 	bl	8003514 <__NVIC_EnableIRQ>
}
 800366c:	bf00      	nop
 800366e:	3708      	adds	r7, #8
 8003670:	46bd      	mov	sp, r7
 8003672:	bd80      	pop	{r7, pc}

08003674 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b088      	sub	sp, #32
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 800367c:	2300      	movs	r3, #0
 800367e:	61fb      	str	r3, [r7, #28]
 8003680:	2300      	movs	r3, #0
 8003682:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 8003684:	4baa      	ldr	r3, [pc, #680]	; (8003930 <HAL_ETH_Init+0x2bc>)
 8003686:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 8003688:	2300      	movs	r3, #0
 800368a:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 800368c:	2300      	movs	r3, #0
 800368e:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d101      	bne.n	800369a <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8003696:	2301      	movs	r3, #1
 8003698:	e183      	b.n	80039a2 <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80036a0:	b2db      	uxtb	r3, r3
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d106      	bne.n	80036b4 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2200      	movs	r2, #0
 80036aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80036ae:	6878      	ldr	r0, [r7, #4]
 80036b0:	f003 fb26 	bl	8006d00 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80036b4:	2300      	movs	r3, #0
 80036b6:	60bb      	str	r3, [r7, #8]
 80036b8:	4b9e      	ldr	r3, [pc, #632]	; (8003934 <HAL_ETH_Init+0x2c0>)
 80036ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036bc:	4a9d      	ldr	r2, [pc, #628]	; (8003934 <HAL_ETH_Init+0x2c0>)
 80036be:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80036c2:	6453      	str	r3, [r2, #68]	; 0x44
 80036c4:	4b9b      	ldr	r3, [pc, #620]	; (8003934 <HAL_ETH_Init+0x2c0>)
 80036c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036cc:	60bb      	str	r3, [r7, #8]
 80036ce:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80036d0:	4b99      	ldr	r3, [pc, #612]	; (8003938 <HAL_ETH_Init+0x2c4>)
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	4a98      	ldr	r2, [pc, #608]	; (8003938 <HAL_ETH_Init+0x2c4>)
 80036d6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80036da:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80036dc:	4b96      	ldr	r3, [pc, #600]	; (8003938 <HAL_ETH_Init+0x2c4>)
 80036de:	685a      	ldr	r2, [r3, #4]
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6a1b      	ldr	r3, [r3, #32]
 80036e4:	4994      	ldr	r1, [pc, #592]	; (8003938 <HAL_ETH_Init+0x2c4>)
 80036e6:	4313      	orrs	r3, r2
 80036e8:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80036f2:	681a      	ldr	r2, [r3, #0]
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f042 0201 	orr.w	r2, r2, #1
 80036fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003700:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8003702:	f7ff fea5 	bl	8003450 <HAL_GetTick>
 8003706:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8003708:	e011      	b.n	800372e <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 800370a:	f7ff fea1 	bl	8003450 <HAL_GetTick>
 800370e:	4602      	mov	r2, r0
 8003710:	697b      	ldr	r3, [r7, #20]
 8003712:	1ad3      	subs	r3, r2, r3
 8003714:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003718:	d909      	bls.n	800372e <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2203      	movs	r2, #3
 800371e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2200      	movs	r2, #0
 8003726:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 800372a:	2303      	movs	r3, #3
 800372c:	e139      	b.n	80039a2 <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f003 0301 	and.w	r3, r3, #1
 800373c:	2b00      	cmp	r3, #0
 800373e:	d1e4      	bne.n	800370a <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	691b      	ldr	r3, [r3, #16]
 8003746:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 8003748:	69fb      	ldr	r3, [r7, #28]
 800374a:	f023 031c 	bic.w	r3, r3, #28
 800374e:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8003750:	f002 ff5e 	bl	8006610 <HAL_RCC_GetHCLKFreq>
 8003754:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8003756:	69bb      	ldr	r3, [r7, #24]
 8003758:	4a78      	ldr	r2, [pc, #480]	; (800393c <HAL_ETH_Init+0x2c8>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d908      	bls.n	8003770 <HAL_ETH_Init+0xfc>
 800375e:	69bb      	ldr	r3, [r7, #24]
 8003760:	4a77      	ldr	r2, [pc, #476]	; (8003940 <HAL_ETH_Init+0x2cc>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d804      	bhi.n	8003770 <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8003766:	69fb      	ldr	r3, [r7, #28]
 8003768:	f043 0308 	orr.w	r3, r3, #8
 800376c:	61fb      	str	r3, [r7, #28]
 800376e:	e027      	b.n	80037c0 <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8003770:	69bb      	ldr	r3, [r7, #24]
 8003772:	4a73      	ldr	r2, [pc, #460]	; (8003940 <HAL_ETH_Init+0x2cc>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d908      	bls.n	800378a <HAL_ETH_Init+0x116>
 8003778:	69bb      	ldr	r3, [r7, #24]
 800377a:	4a6d      	ldr	r2, [pc, #436]	; (8003930 <HAL_ETH_Init+0x2bc>)
 800377c:	4293      	cmp	r3, r2
 800377e:	d204      	bcs.n	800378a <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8003780:	69fb      	ldr	r3, [r7, #28]
 8003782:	f043 030c 	orr.w	r3, r3, #12
 8003786:	61fb      	str	r3, [r7, #28]
 8003788:	e01a      	b.n	80037c0 <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 800378a:	69bb      	ldr	r3, [r7, #24]
 800378c:	4a68      	ldr	r2, [pc, #416]	; (8003930 <HAL_ETH_Init+0x2bc>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d303      	bcc.n	800379a <HAL_ETH_Init+0x126>
 8003792:	69bb      	ldr	r3, [r7, #24]
 8003794:	4a6b      	ldr	r2, [pc, #428]	; (8003944 <HAL_ETH_Init+0x2d0>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d911      	bls.n	80037be <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 800379a:	69bb      	ldr	r3, [r7, #24]
 800379c:	4a69      	ldr	r2, [pc, #420]	; (8003944 <HAL_ETH_Init+0x2d0>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d908      	bls.n	80037b4 <HAL_ETH_Init+0x140>
 80037a2:	69bb      	ldr	r3, [r7, #24]
 80037a4:	4a68      	ldr	r2, [pc, #416]	; (8003948 <HAL_ETH_Init+0x2d4>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d804      	bhi.n	80037b4 <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80037aa:	69fb      	ldr	r3, [r7, #28]
 80037ac:	f043 0304 	orr.w	r3, r3, #4
 80037b0:	61fb      	str	r3, [r7, #28]
 80037b2:	e005      	b.n	80037c0 <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 80037b4:	69fb      	ldr	r3, [r7, #28]
 80037b6:	f043 0310 	orr.w	r3, r3, #16
 80037ba:	61fb      	str	r3, [r7, #28]
 80037bc:	e000      	b.n	80037c0 <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 80037be:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	69fa      	ldr	r2, [r7, #28]
 80037c6:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 80037c8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80037cc:	2100      	movs	r1, #0
 80037ce:	6878      	ldr	r0, [r7, #4]
 80037d0:	f000 fc17 	bl	8004002 <HAL_ETH_WritePHYRegister>
 80037d4:	4603      	mov	r3, r0
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d00b      	beq.n	80037f2 <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 80037da:	2301      	movs	r3, #1
 80037dc:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 80037de:	6939      	ldr	r1, [r7, #16]
 80037e0:	6878      	ldr	r0, [r7, #4]
 80037e2:	f000 fdcd 	bl	8004380 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2201      	movs	r2, #1
 80037ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 80037ee:	2301      	movs	r3, #1
 80037f0:	e0d7      	b.n	80039a2 <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 80037f2:	20ff      	movs	r0, #255	; 0xff
 80037f4:	f7ff fe38 	bl	8003468 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	f000 80a5 	beq.w	800394c <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8003802:	f7ff fe25 	bl	8003450 <HAL_GetTick>
 8003806:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8003808:	f107 030c 	add.w	r3, r7, #12
 800380c:	461a      	mov	r2, r3
 800380e:	2101      	movs	r1, #1
 8003810:	6878      	ldr	r0, [r7, #4]
 8003812:	f000 fb8e 	bl	8003f32 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8003816:	f7ff fe1b 	bl	8003450 <HAL_GetTick>
 800381a:	4602      	mov	r2, r0
 800381c:	697b      	ldr	r3, [r7, #20]
 800381e:	1ad3      	subs	r3, r2, r3
 8003820:	f241 3288 	movw	r2, #5000	; 0x1388
 8003824:	4293      	cmp	r3, r2
 8003826:	d90f      	bls.n	8003848 <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8003828:	2301      	movs	r3, #1
 800382a:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 800382c:	6939      	ldr	r1, [r7, #16]
 800382e:	6878      	ldr	r0, [r7, #4]
 8003830:	f000 fda6 	bl	8004380 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2201      	movs	r2, #1
 8003838:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2200      	movs	r2, #0
 8003840:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8003844:	2303      	movs	r3, #3
 8003846:	e0ac      	b.n	80039a2 <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	f003 0304 	and.w	r3, r3, #4
 800384e:	2b00      	cmp	r3, #0
 8003850:	d0da      	beq.n	8003808 <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8003852:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003856:	2100      	movs	r1, #0
 8003858:	6878      	ldr	r0, [r7, #4]
 800385a:	f000 fbd2 	bl	8004002 <HAL_ETH_WritePHYRegister>
 800385e:	4603      	mov	r3, r0
 8003860:	2b00      	cmp	r3, #0
 8003862:	d00b      	beq.n	800387c <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8003864:	2301      	movs	r3, #1
 8003866:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8003868:	6939      	ldr	r1, [r7, #16]
 800386a:	6878      	ldr	r0, [r7, #4]
 800386c:	f000 fd88 	bl	8004380 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2201      	movs	r2, #1
 8003874:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8003878:	2301      	movs	r3, #1
 800387a:	e092      	b.n	80039a2 <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 800387c:	f7ff fde8 	bl	8003450 <HAL_GetTick>
 8003880:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8003882:	f107 030c 	add.w	r3, r7, #12
 8003886:	461a      	mov	r2, r3
 8003888:	2101      	movs	r1, #1
 800388a:	6878      	ldr	r0, [r7, #4]
 800388c:	f000 fb51 	bl	8003f32 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8003890:	f7ff fdde 	bl	8003450 <HAL_GetTick>
 8003894:	4602      	mov	r2, r0
 8003896:	697b      	ldr	r3, [r7, #20]
 8003898:	1ad3      	subs	r3, r2, r3
 800389a:	f241 3288 	movw	r2, #5000	; 0x1388
 800389e:	4293      	cmp	r3, r2
 80038a0:	d90f      	bls.n	80038c2 <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80038a2:	2301      	movs	r3, #1
 80038a4:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80038a6:	6939      	ldr	r1, [r7, #16]
 80038a8:	6878      	ldr	r0, [r7, #4]
 80038aa:	f000 fd69 	bl	8004380 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2201      	movs	r2, #1
 80038b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2200      	movs	r2, #0
 80038ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80038be:	2303      	movs	r3, #3
 80038c0:	e06f      	b.n	80039a2 <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	f003 0320 	and.w	r3, r3, #32
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d0da      	beq.n	8003882 <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 80038cc:	f107 030c 	add.w	r3, r7, #12
 80038d0:	461a      	mov	r2, r3
 80038d2:	211f      	movs	r1, #31
 80038d4:	6878      	ldr	r0, [r7, #4]
 80038d6:	f000 fb2c 	bl	8003f32 <HAL_ETH_ReadPHYRegister>
 80038da:	4603      	mov	r3, r0
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d00b      	beq.n	80038f8 <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80038e0:	2301      	movs	r3, #1
 80038e2:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80038e4:	6939      	ldr	r1, [r7, #16]
 80038e6:	6878      	ldr	r0, [r7, #4]
 80038e8:	f000 fd4a 	bl	8004380 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2201      	movs	r2, #1
 80038f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80038f4:	2301      	movs	r3, #1
 80038f6:	e054      	b.n	80039a2 <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	f003 0310 	and.w	r3, r3, #16
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d004      	beq.n	800390c <HAL_ETH_Init+0x298>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003908:	60da      	str	r2, [r3, #12]
 800390a:	e002      	b.n	8003912 <HAL_ETH_Init+0x29e>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2200      	movs	r2, #0
 8003910:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	f003 0304 	and.w	r3, r3, #4
 8003918:	2b00      	cmp	r3, #0
 800391a:	d003      	beq.n	8003924 <HAL_ETH_Init+0x2b0>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2200      	movs	r2, #0
 8003920:	609a      	str	r2, [r3, #8]
 8003922:	e035      	b.n	8003990 <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800392a:	609a      	str	r2, [r3, #8]
 800392c:	e030      	b.n	8003990 <HAL_ETH_Init+0x31c>
 800392e:	bf00      	nop
 8003930:	03938700 	.word	0x03938700
 8003934:	40023800 	.word	0x40023800
 8003938:	40013800 	.word	0x40013800
 800393c:	01312cff 	.word	0x01312cff
 8003940:	02160ebf 	.word	0x02160ebf
 8003944:	05f5e0ff 	.word	0x05f5e0ff
 8003948:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	68db      	ldr	r3, [r3, #12]
 8003950:	08db      	lsrs	r3, r3, #3
 8003952:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	689b      	ldr	r3, [r3, #8]
 8003958:	085b      	lsrs	r3, r3, #1
 800395a:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 800395c:	4313      	orrs	r3, r2
 800395e:	b29b      	uxth	r3, r3
 8003960:	461a      	mov	r2, r3
 8003962:	2100      	movs	r1, #0
 8003964:	6878      	ldr	r0, [r7, #4]
 8003966:	f000 fb4c 	bl	8004002 <HAL_ETH_WritePHYRegister>
 800396a:	4603      	mov	r3, r0
 800396c:	2b00      	cmp	r3, #0
 800396e:	d00b      	beq.n	8003988 <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8003970:	2301      	movs	r3, #1
 8003972:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8003974:	6939      	ldr	r1, [r7, #16]
 8003976:	6878      	ldr	r0, [r7, #4]
 8003978:	f000 fd02 	bl	8004380 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2201      	movs	r2, #1
 8003980:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8003984:	2301      	movs	r3, #1
 8003986:	e00c      	b.n	80039a2 <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8003988:	f640 70ff 	movw	r0, #4095	; 0xfff
 800398c:	f7ff fd6c 	bl	8003468 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8003990:	6939      	ldr	r1, [r7, #16]
 8003992:	6878      	ldr	r0, [r7, #4]
 8003994:	f000 fcf4 	bl	8004380 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2201      	movs	r2, #1
 800399c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80039a0:	2300      	movs	r3, #0
}
 80039a2:	4618      	mov	r0, r3
 80039a4:	3720      	adds	r7, #32
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bd80      	pop	{r7, pc}
 80039aa:	bf00      	nop

080039ac <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 80039ac:	b480      	push	{r7}
 80039ae:	b087      	sub	sp, #28
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	60f8      	str	r0, [r7, #12]
 80039b4:	60b9      	str	r1, [r7, #8]
 80039b6:	607a      	str	r2, [r7, #4]
 80039b8:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 80039ba:	2300      	movs	r3, #0
 80039bc:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80039c4:	2b01      	cmp	r3, #1
 80039c6:	d101      	bne.n	80039cc <HAL_ETH_DMATxDescListInit+0x20>
 80039c8:	2302      	movs	r3, #2
 80039ca:	e052      	b.n	8003a72 <HAL_ETH_DMATxDescListInit+0xc6>
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	2201      	movs	r2, #1
 80039d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	2202      	movs	r2, #2
 80039d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	68ba      	ldr	r2, [r7, #8]
 80039e0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0U; i < TxBuffCount; i++)
 80039e2:	2300      	movs	r3, #0
 80039e4:	617b      	str	r3, [r7, #20]
 80039e6:	e030      	b.n	8003a4a <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 80039e8:	697b      	ldr	r3, [r7, #20]
 80039ea:	015b      	lsls	r3, r3, #5
 80039ec:	68ba      	ldr	r2, [r7, #8]
 80039ee:	4413      	add	r3, r2
 80039f0:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 80039f2:	693b      	ldr	r3, [r7, #16]
 80039f4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80039f8:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 80039fa:	697b      	ldr	r3, [r7, #20]
 80039fc:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8003a00:	fb02 f303 	mul.w	r3, r2, r3
 8003a04:	687a      	ldr	r2, [r7, #4]
 8003a06:	4413      	add	r3, r2
 8003a08:	461a      	mov	r2, r3
 8003a0a:	693b      	ldr	r3, [r7, #16]
 8003a0c:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	69db      	ldr	r3, [r3, #28]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d105      	bne.n	8003a22 <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 8003a16:	693b      	ldr	r3, [r7, #16]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8003a1e:	693b      	ldr	r3, [r7, #16]
 8003a20:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1U))
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	3b01      	subs	r3, #1
 8003a26:	697a      	ldr	r2, [r7, #20]
 8003a28:	429a      	cmp	r2, r3
 8003a2a:	d208      	bcs.n	8003a3e <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 8003a2c:	697b      	ldr	r3, [r7, #20]
 8003a2e:	3301      	adds	r3, #1
 8003a30:	015b      	lsls	r3, r3, #5
 8003a32:	68ba      	ldr	r2, [r7, #8]
 8003a34:	4413      	add	r3, r2
 8003a36:	461a      	mov	r2, r3
 8003a38:	693b      	ldr	r3, [r7, #16]
 8003a3a:	60da      	str	r2, [r3, #12]
 8003a3c:	e002      	b.n	8003a44 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 8003a3e:	68ba      	ldr	r2, [r7, #8]
 8003a40:	693b      	ldr	r3, [r7, #16]
 8003a42:	60da      	str	r2, [r3, #12]
  for(i=0U; i < TxBuffCount; i++)
 8003a44:	697b      	ldr	r3, [r7, #20]
 8003a46:	3301      	adds	r3, #1
 8003a48:	617b      	str	r3, [r7, #20]
 8003a4a:	697a      	ldr	r2, [r7, #20]
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	429a      	cmp	r2, r3
 8003a50:	d3ca      	bcc.n	80039e8 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	68ba      	ldr	r2, [r7, #8]
 8003a58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a5c:	3310      	adds	r3, #16
 8003a5e:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	2201      	movs	r2, #1
 8003a64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8003a70:	2300      	movs	r3, #0
}
 8003a72:	4618      	mov	r0, r3
 8003a74:	371c      	adds	r7, #28
 8003a76:	46bd      	mov	sp, r7
 8003a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7c:	4770      	bx	lr

08003a7e <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 8003a7e:	b480      	push	{r7}
 8003a80:	b087      	sub	sp, #28
 8003a82:	af00      	add	r7, sp, #0
 8003a84:	60f8      	str	r0, [r7, #12]
 8003a86:	60b9      	str	r1, [r7, #8]
 8003a88:	607a      	str	r2, [r7, #4]
 8003a8a:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003a96:	2b01      	cmp	r3, #1
 8003a98:	d101      	bne.n	8003a9e <HAL_ETH_DMARxDescListInit+0x20>
 8003a9a:	2302      	movs	r3, #2
 8003a9c:	e056      	b.n	8003b4c <HAL_ETH_DMARxDescListInit+0xce>
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	2201      	movs	r2, #1
 8003aa2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	2202      	movs	r2, #2
 8003aaa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	68ba      	ldr	r2, [r7, #8]
 8003ab2:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0U; i < RxBuffCount; i++)
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	617b      	str	r3, [r7, #20]
 8003ab8:	e034      	b.n	8003b24 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 8003aba:	697b      	ldr	r3, [r7, #20]
 8003abc:	015b      	lsls	r3, r3, #5
 8003abe:	68ba      	ldr	r2, [r7, #8]
 8003ac0:	4413      	add	r3, r2
 8003ac2:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8003ac4:	693b      	ldr	r3, [r7, #16]
 8003ac6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003aca:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8003acc:	693b      	ldr	r3, [r7, #16]
 8003ace:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8003ad2:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8003ad4:	697b      	ldr	r3, [r7, #20]
 8003ad6:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8003ada:	fb02 f303 	mul.w	r3, r2, r3
 8003ade:	687a      	ldr	r2, [r7, #4]
 8003ae0:	4413      	add	r3, r2
 8003ae2:	461a      	mov	r2, r3
 8003ae4:	693b      	ldr	r3, [r7, #16]
 8003ae6:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	699b      	ldr	r3, [r3, #24]
 8003aec:	2b01      	cmp	r3, #1
 8003aee:	d105      	bne.n	8003afc <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 8003af0:	693b      	ldr	r3, [r7, #16]
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003af8:	693b      	ldr	r3, [r7, #16]
 8003afa:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1U))
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	3b01      	subs	r3, #1
 8003b00:	697a      	ldr	r2, [r7, #20]
 8003b02:	429a      	cmp	r2, r3
 8003b04:	d208      	bcs.n	8003b18 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 8003b06:	697b      	ldr	r3, [r7, #20]
 8003b08:	3301      	adds	r3, #1
 8003b0a:	015b      	lsls	r3, r3, #5
 8003b0c:	68ba      	ldr	r2, [r7, #8]
 8003b0e:	4413      	add	r3, r2
 8003b10:	461a      	mov	r2, r3
 8003b12:	693b      	ldr	r3, [r7, #16]
 8003b14:	60da      	str	r2, [r3, #12]
 8003b16:	e002      	b.n	8003b1e <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 8003b18:	68ba      	ldr	r2, [r7, #8]
 8003b1a:	693b      	ldr	r3, [r7, #16]
 8003b1c:	60da      	str	r2, [r3, #12]
  for(i=0U; i < RxBuffCount; i++)
 8003b1e:	697b      	ldr	r3, [r7, #20]
 8003b20:	3301      	adds	r3, #1
 8003b22:	617b      	str	r3, [r7, #20]
 8003b24:	697a      	ldr	r2, [r7, #20]
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	429a      	cmp	r2, r3
 8003b2a:	d3c6      	bcc.n	8003aba <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	68ba      	ldr	r2, [r7, #8]
 8003b32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b36:	330c      	adds	r3, #12
 8003b38:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	2201      	movs	r2, #1
 8003b3e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	2200      	movs	r2, #0
 8003b46:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8003b4a:	2300      	movs	r3, #0
}
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	371c      	adds	r7, #28
 8003b50:	46bd      	mov	sp, r7
 8003b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b56:	4770      	bx	lr

08003b58 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	b087      	sub	sp, #28
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
 8003b60:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 8003b62:	2300      	movs	r3, #0
 8003b64:	617b      	str	r3, [r7, #20]
 8003b66:	2300      	movs	r3, #0
 8003b68:	60fb      	str	r3, [r7, #12]
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003b74:	2b01      	cmp	r3, #1
 8003b76:	d101      	bne.n	8003b7c <HAL_ETH_TransmitFrame+0x24>
 8003b78:	2302      	movs	r3, #2
 8003b7a:	e0cd      	b.n	8003d18 <HAL_ETH_TransmitFrame+0x1c0>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2201      	movs	r2, #1
 8003b80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2202      	movs	r2, #2
 8003b88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0U) 
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d109      	bne.n	8003ba6 <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2201      	movs	r2, #1
 8003b96:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	e0b8      	b.n	8003d18 <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	da09      	bge.n	8003bc4 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2212      	movs	r2, #18
 8003bb4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2200      	movs	r2, #0
 8003bbc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	e0a9      	b.n	8003d18 <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d915      	bls.n	8003bfa <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	4a54      	ldr	r2, [pc, #336]	; (8003d24 <HAL_ETH_TransmitFrame+0x1cc>)
 8003bd2:	fba2 2303 	umull	r2, r3, r2, r3
 8003bd6:	0a9b      	lsrs	r3, r3, #10
 8003bd8:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8003bda:	683a      	ldr	r2, [r7, #0]
 8003bdc:	4b51      	ldr	r3, [pc, #324]	; (8003d24 <HAL_ETH_TransmitFrame+0x1cc>)
 8003bde:	fba3 1302 	umull	r1, r3, r3, r2
 8003be2:	0a9b      	lsrs	r3, r3, #10
 8003be4:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8003be8:	fb01 f303 	mul.w	r3, r1, r3
 8003bec:	1ad3      	subs	r3, r2, r3
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d005      	beq.n	8003bfe <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 8003bf2:	697b      	ldr	r3, [r7, #20]
 8003bf4:	3301      	adds	r3, #1
 8003bf6:	617b      	str	r3, [r7, #20]
 8003bf8:	e001      	b.n	8003bfe <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1U;
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 8003bfe:	697b      	ldr	r3, [r7, #20]
 8003c00:	2b01      	cmp	r3, #1
 8003c02:	d11c      	bne.n	8003c3e <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c08:	681a      	ldr	r2, [r3, #0]
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c0e:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 8003c12:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c18:	683a      	ldr	r2, [r7, #0]
 8003c1a:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8003c1e:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c24:	681a      	ldr	r2, [r3, #0]
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c2a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003c2e:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c34:	68db      	ldr	r3, [r3, #12]
 8003c36:	461a      	mov	r2, r3
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	62da      	str	r2, [r3, #44]	; 0x2c
 8003c3c:	e04b      	b.n	8003cd6 <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0U; i< bufcount; i++)
 8003c3e:	2300      	movs	r3, #0
 8003c40:	613b      	str	r3, [r7, #16]
 8003c42:	e044      	b.n	8003cce <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c48:	681a      	ldr	r2, [r3, #0]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c4e:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003c52:	601a      	str	r2, [r3, #0]
      
      if (i == 0U) 
 8003c54:	693b      	ldr	r3, [r7, #16]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d107      	bne.n	8003c6a <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c5e:	681a      	ldr	r2, [r3, #0]
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c64:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003c68:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c6e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8003c72:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1U))
 8003c74:	697b      	ldr	r3, [r7, #20]
 8003c76:	3b01      	subs	r3, #1
 8003c78:	693a      	ldr	r2, [r7, #16]
 8003c7a:	429a      	cmp	r2, r3
 8003c7c:	d116      	bne.n	8003cac <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c82:	681a      	ldr	r2, [r3, #0]
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c88:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8003c8c:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 8003c8e:	697b      	ldr	r3, [r7, #20]
 8003c90:	4a25      	ldr	r2, [pc, #148]	; (8003d28 <HAL_ETH_TransmitFrame+0x1d0>)
 8003c92:	fb02 f203 	mul.w	r2, r2, r3
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	4413      	add	r3, r2
 8003c9a:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8003c9e:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ca4:	68fa      	ldr	r2, [r7, #12]
 8003ca6:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8003caa:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cb0:	681a      	ldr	r2, [r3, #0]
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cb6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003cba:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cc0:	68db      	ldr	r3, [r3, #12]
 8003cc2:	461a      	mov	r2, r3
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 8003cc8:	693b      	ldr	r3, [r7, #16]
 8003cca:	3301      	adds	r3, #1
 8003ccc:	613b      	str	r3, [r7, #16]
 8003cce:	693a      	ldr	r2, [r7, #16]
 8003cd0:	697b      	ldr	r3, [r7, #20]
 8003cd2:	429a      	cmp	r2, r3
 8003cd4:	d3b6      	bcc.n	8003c44 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003cde:	3314      	adds	r3, #20
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f003 0304 	and.w	r3, r3, #4
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d00d      	beq.n	8003d06 <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003cf2:	3314      	adds	r3, #20
 8003cf4:	2204      	movs	r2, #4
 8003cf6:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d00:	3304      	adds	r3, #4
 8003d02:	2200      	movs	r2, #0
 8003d04:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2201      	movs	r2, #1
 8003d0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2200      	movs	r2, #0
 8003d12:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8003d16:	2300      	movs	r3, #0
}
 8003d18:	4618      	mov	r0, r3
 8003d1a:	371c      	adds	r7, #28
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d22:	4770      	bx	lr
 8003d24:	ac02b00b 	.word	0xac02b00b
 8003d28:	fffffa0c 	.word	0xfffffa0c

08003d2c <HAL_ETH_GetReceivedFrame_IT>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame_IT(ETH_HandleTypeDef *heth)
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	b085      	sub	sp, #20
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
  uint32_t descriptorscancounter = 0U;
 8003d34:	2300      	movs	r3, #0
 8003d36:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003d3e:	2b01      	cmp	r3, #1
 8003d40:	d101      	bne.n	8003d46 <HAL_ETH_GetReceivedFrame_IT+0x1a>
 8003d42:	2302      	movs	r3, #2
 8003d44:	e074      	b.n	8003e30 <HAL_ETH_GetReceivedFrame_IT+0x104>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2201      	movs	r2, #1
 8003d4a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set ETH HAL State to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2202      	movs	r2, #2
 8003d52:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Scan descriptors owned by CPU */
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8003d56:	e05a      	b.n	8003e0e <HAL_ETH_GetReceivedFrame_IT+0xe2>
  {
    /* Just for security */
    descriptorscancounter++;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	3301      	adds	r3, #1
 8003d5c:	60fb      	str	r3, [r7, #12]
    
    /* Check if first segment in frame */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)) */  
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d6c:	d10d      	bne.n	8003d8a <HAL_ETH_GetReceivedFrame_IT+0x5e>
    { 
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	631a      	str	r2, [r3, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1U;   
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2201      	movs	r2, #1
 8003d7a:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d80:	68db      	ldr	r3, [r3, #12]
 8003d82:	461a      	mov	r2, r3
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	629a      	str	r2, [r3, #40]	; 0x28
 8003d88:	e041      	b.n	8003e0e <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Check if intermediate segment */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)&& ((heth->RxDesc->Status & ETH_DMARXDESC_FS) == (uint32_t)RESET)) */
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d10b      	bne.n	8003db0 <HAL_ETH_GetReceivedFrame_IT+0x84>
    {
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d9c:	1c5a      	adds	r2, r3, #1
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003da6:	68db      	ldr	r3, [r3, #12]
 8003da8:	461a      	mov	r2, r3
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	629a      	str	r2, [r3, #40]	; 0x28
 8003dae:	e02e      	b.n	8003e0e <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Should be last segment */
    else
    { 
      /* Last segment */
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dbc:	1c5a      	adds	r2, r3, #1
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos.SegCount) == 1U)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dc6:	2b01      	cmp	r3, #1
 8003dc8:	d103      	bne.n	8003dd2 <HAL_ETH_GetReceivedFrame_IT+0xa6>
      {
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	0c1b      	lsrs	r3, r3, #16
 8003dda:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8003dde:	1f1a      	subs	r2, r3, #4
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */ 
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003de8:	689a      	ldr	r2, [r3, #8]
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Point to next descriptor */      
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003df2:	68db      	ldr	r3, [r3, #12]
 8003df4:	461a      	mov	r2, r3
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2201      	movs	r2, #1
 8003dfe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2200      	movs	r2, #0
 8003e06:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
      /* Return function status */
      return HAL_OK;
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	e010      	b.n	8003e30 <HAL_ETH_GetReceivedFrame_IT+0x104>
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	db02      	blt.n	8003e1e <HAL_ETH_GetReceivedFrame_IT+0xf2>
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	2b03      	cmp	r3, #3
 8003e1c:	d99c      	bls.n	8003d58 <HAL_ETH_GetReceivedFrame_IT+0x2c>
    }
  }

  /* Set HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2201      	movs	r2, #1
 8003e22:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 8003e2e:	2301      	movs	r3, #1
}
 8003e30:	4618      	mov	r0, r3
 8003e32:	3714      	adds	r7, #20
 8003e34:	46bd      	mov	sp, r7
 8003e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3a:	4770      	bx	lr

08003e3c <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b082      	sub	sp, #8
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e4c:	3314      	adds	r3, #20
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e54:	2b40      	cmp	r3, #64	; 0x40
 8003e56:	d112      	bne.n	8003e7e <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8003e58:	6878      	ldr	r0, [r7, #4]
 8003e5a:	f003 f81f 	bl	8006e9c <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e66:	3314      	adds	r3, #20
 8003e68:	2240      	movs	r2, #64	; 0x40
 8003e6a:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2201      	movs	r2, #1
 8003e70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2200      	movs	r2, #0
 8003e78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003e7c:	e01b      	b.n	8003eb6 <HAL_ETH_IRQHandler+0x7a>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e86:	3314      	adds	r3, #20
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f003 0301 	and.w	r3, r3, #1
 8003e8e:	2b01      	cmp	r3, #1
 8003e90:	d111      	bne.n	8003eb6 <HAL_ETH_IRQHandler+0x7a>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8003e92:	6878      	ldr	r0, [r7, #4]
 8003e94:	f000 f839 	bl	8003f0a <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ea0:	3314      	adds	r3, #20
 8003ea2:	2201      	movs	r2, #1
 8003ea4:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2201      	movs	r2, #1
 8003eaa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ebe:	3314      	adds	r3, #20
 8003ec0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003ec4:	601a      	str	r2, [r3, #0]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ece:	3314      	adds	r3, #20
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003ed6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003eda:	d112      	bne.n	8003f02 <HAL_ETH_IRQHandler+0xc6>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8003edc:	6878      	ldr	r0, [r7, #4]
 8003ede:	f000 f81e 	bl	8003f1e <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003eea:	3314      	adds	r3, #20
 8003eec:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003ef0:	601a      	str	r2, [r3, #0]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2201      	movs	r2, #1
 8003ef6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2200      	movs	r2, #0
 8003efe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 8003f02:	bf00      	nop
 8003f04:	3708      	adds	r7, #8
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bd80      	pop	{r7, pc}

08003f0a <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8003f0a:	b480      	push	{r7}
 8003f0c:	b083      	sub	sp, #12
 8003f0e:	af00      	add	r7, sp, #0
 8003f10:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8003f12:	bf00      	nop
 8003f14:	370c      	adds	r7, #12
 8003f16:	46bd      	mov	sp, r7
 8003f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1c:	4770      	bx	lr

08003f1e <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8003f1e:	b480      	push	{r7}
 8003f20:	b083      	sub	sp, #12
 8003f22:	af00      	add	r7, sp, #0
 8003f24:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8003f26:	bf00      	nop
 8003f28:	370c      	adds	r7, #12
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f30:	4770      	bx	lr

08003f32 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8003f32:	b580      	push	{r7, lr}
 8003f34:	b086      	sub	sp, #24
 8003f36:	af00      	add	r7, sp, #0
 8003f38:	60f8      	str	r0, [r7, #12]
 8003f3a:	460b      	mov	r3, r1
 8003f3c:	607a      	str	r2, [r7, #4]
 8003f3e:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 8003f40:	2300      	movs	r3, #0
 8003f42:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8003f44:	2300      	movs	r3, #0
 8003f46:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003f4e:	b2db      	uxtb	r3, r3
 8003f50:	2b82      	cmp	r3, #130	; 0x82
 8003f52:	d101      	bne.n	8003f58 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8003f54:	2302      	movs	r3, #2
 8003f56:	e050      	b.n	8003ffa <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	2282      	movs	r2, #130	; 0x82
 8003f5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	691b      	ldr	r3, [r3, #16]
 8003f66:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8003f68:	697b      	ldr	r3, [r7, #20]
 8003f6a:	f003 031c 	and.w	r3, r3, #28
 8003f6e:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	8a1b      	ldrh	r3, [r3, #16]
 8003f74:	02db      	lsls	r3, r3, #11
 8003f76:	b29b      	uxth	r3, r3
 8003f78:	697a      	ldr	r2, [r7, #20]
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8003f7e:	897b      	ldrh	r3, [r7, #10]
 8003f80:	019b      	lsls	r3, r3, #6
 8003f82:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8003f86:	697a      	ldr	r2, [r7, #20]
 8003f88:	4313      	orrs	r3, r2
 8003f8a:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8003f8c:	697b      	ldr	r3, [r7, #20]
 8003f8e:	f023 0302 	bic.w	r3, r3, #2
 8003f92:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8003f94:	697b      	ldr	r3, [r7, #20]
 8003f96:	f043 0301 	orr.w	r3, r3, #1
 8003f9a:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	697a      	ldr	r2, [r7, #20]
 8003fa2:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8003fa4:	f7ff fa54 	bl	8003450 <HAL_GetTick>
 8003fa8:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003faa:	e015      	b.n	8003fd8 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8003fac:	f7ff fa50 	bl	8003450 <HAL_GetTick>
 8003fb0:	4602      	mov	r2, r0
 8003fb2:	693b      	ldr	r3, [r7, #16]
 8003fb4:	1ad3      	subs	r3, r2, r3
 8003fb6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fba:	d309      	bcc.n	8003fd0 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	2201      	movs	r2, #1
 8003fc0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8003fcc:	2303      	movs	r3, #3
 8003fce:	e014      	b.n	8003ffa <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	691b      	ldr	r3, [r3, #16]
 8003fd6:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003fd8:	697b      	ldr	r3, [r7, #20]
 8003fda:	f003 0301 	and.w	r3, r3, #1
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d1e4      	bne.n	8003fac <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	695b      	ldr	r3, [r3, #20]
 8003fe8:	b29b      	uxth	r3, r3
 8003fea:	461a      	mov	r2, r3
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	2201      	movs	r2, #1
 8003ff4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8003ff8:	2300      	movs	r3, #0
}
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	3718      	adds	r7, #24
 8003ffe:	46bd      	mov	sp, r7
 8004000:	bd80      	pop	{r7, pc}

08004002 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8004002:	b580      	push	{r7, lr}
 8004004:	b086      	sub	sp, #24
 8004006:	af00      	add	r7, sp, #0
 8004008:	60f8      	str	r0, [r7, #12]
 800400a:	460b      	mov	r3, r1
 800400c:	607a      	str	r2, [r7, #4]
 800400e:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 8004010:	2300      	movs	r3, #0
 8004012:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8004014:	2300      	movs	r3, #0
 8004016:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800401e:	b2db      	uxtb	r3, r3
 8004020:	2b42      	cmp	r3, #66	; 0x42
 8004022:	d101      	bne.n	8004028 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8004024:	2302      	movs	r3, #2
 8004026:	e04e      	b.n	80040c6 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	2242      	movs	r2, #66	; 0x42
 800402c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	691b      	ldr	r3, [r3, #16]
 8004036:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8004038:	697b      	ldr	r3, [r7, #20]
 800403a:	f003 031c 	and.w	r3, r3, #28
 800403e:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	8a1b      	ldrh	r3, [r3, #16]
 8004044:	02db      	lsls	r3, r3, #11
 8004046:	b29b      	uxth	r3, r3
 8004048:	697a      	ldr	r2, [r7, #20]
 800404a:	4313      	orrs	r3, r2
 800404c:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 800404e:	897b      	ldrh	r3, [r7, #10]
 8004050:	019b      	lsls	r3, r3, #6
 8004052:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8004056:	697a      	ldr	r2, [r7, #20]
 8004058:	4313      	orrs	r3, r2
 800405a:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 800405c:	697b      	ldr	r3, [r7, #20]
 800405e:	f043 0302 	orr.w	r3, r3, #2
 8004062:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8004064:	697b      	ldr	r3, [r7, #20]
 8004066:	f043 0301 	orr.w	r3, r3, #1
 800406a:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	b29a      	uxth	r2, r3
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	697a      	ldr	r2, [r7, #20]
 800407c:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800407e:	f7ff f9e7 	bl	8003450 <HAL_GetTick>
 8004082:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004084:	e015      	b.n	80040b2 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8004086:	f7ff f9e3 	bl	8003450 <HAL_GetTick>
 800408a:	4602      	mov	r2, r0
 800408c:	693b      	ldr	r3, [r7, #16]
 800408e:	1ad3      	subs	r3, r2, r3
 8004090:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004094:	d309      	bcc.n	80040aa <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	2201      	movs	r2, #1
 800409a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	2200      	movs	r2, #0
 80040a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 80040a6:	2303      	movs	r3, #3
 80040a8:	e00d      	b.n	80040c6 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	691b      	ldr	r3, [r3, #16]
 80040b0:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80040b2:	697b      	ldr	r3, [r7, #20]
 80040b4:	f003 0301 	and.w	r3, r3, #1
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d1e4      	bne.n	8004086 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	2201      	movs	r2, #1
 80040c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 80040c4:	2300      	movs	r3, #0
}
 80040c6:	4618      	mov	r0, r3
 80040c8:	3718      	adds	r7, #24
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bd80      	pop	{r7, pc}

080040ce <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 80040ce:	b580      	push	{r7, lr}
 80040d0:	b082      	sub	sp, #8
 80040d2:	af00      	add	r7, sp, #0
 80040d4:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80040dc:	2b01      	cmp	r3, #1
 80040de:	d101      	bne.n	80040e4 <HAL_ETH_Start+0x16>
 80040e0:	2302      	movs	r3, #2
 80040e2:	e01f      	b.n	8004124 <HAL_ETH_Start+0x56>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2201      	movs	r2, #1
 80040e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2202      	movs	r2, #2
 80040f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 80040f4:	6878      	ldr	r0, [r7, #4]
 80040f6:	f000 fb45 	bl	8004784 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 80040fa:	6878      	ldr	r0, [r7, #4]
 80040fc:	f000 fb7c 	bl	80047f8 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8004100:	6878      	ldr	r0, [r7, #4]
 8004102:	f000 fc13 	bl	800492c <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8004106:	6878      	ldr	r0, [r7, #4]
 8004108:	f000 fbb0 	bl	800486c <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 800410c:	6878      	ldr	r0, [r7, #4]
 800410e:	f000 fbdd 	bl	80048cc <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2201      	movs	r2, #1
 8004116:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2200      	movs	r2, #0
 800411e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8004122:	2300      	movs	r3, #0
}
 8004124:	4618      	mov	r0, r3
 8004126:	3708      	adds	r7, #8
 8004128:	46bd      	mov	sp, r7
 800412a:	bd80      	pop	{r7, pc}

0800412c <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 800412c:	b580      	push	{r7, lr}
 800412e:	b082      	sub	sp, #8
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800413a:	2b01      	cmp	r3, #1
 800413c:	d101      	bne.n	8004142 <HAL_ETH_Stop+0x16>
 800413e:	2302      	movs	r3, #2
 8004140:	e01f      	b.n	8004182 <HAL_ETH_Stop+0x56>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2201      	movs	r2, #1
 8004146:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2202      	movs	r2, #2
 800414e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 8004152:	6878      	ldr	r0, [r7, #4]
 8004154:	f000 fba2 	bl	800489c <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 8004158:	6878      	ldr	r0, [r7, #4]
 800415a:	f000 fbcf 	bl	80048fc <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 800415e:	6878      	ldr	r0, [r7, #4]
 8004160:	f000 fb67 	bl	8004832 <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8004164:	6878      	ldr	r0, [r7, #4]
 8004166:	f000 fbe1 	bl	800492c <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 800416a:	6878      	ldr	r0, [r7, #4]
 800416c:	f000 fb27 	bl	80047be <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2201      	movs	r2, #1
 8004174:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2200      	movs	r2, #0
 800417c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8004180:	2300      	movs	r3, #0
}
 8004182:	4618      	mov	r0, r3
 8004184:	3708      	adds	r7, #8
 8004186:	46bd      	mov	sp, r7
 8004188:	bd80      	pop	{r7, pc}
	...

0800418c <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b084      	sub	sp, #16
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
 8004194:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0U;
 8004196:	2300      	movs	r3, #0
 8004198:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80041a0:	2b01      	cmp	r3, #1
 80041a2:	d101      	bne.n	80041a8 <HAL_ETH_ConfigMAC+0x1c>
 80041a4:	2302      	movs	r3, #2
 80041a6:	e0e4      	b.n	8004372 <HAL_ETH_ConfigMAC+0x1e6>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2201      	movs	r2, #1
 80041ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2202      	movs	r2, #2
 80041b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	f000 80b1 	beq.w	8004322 <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80041c8:	68fa      	ldr	r2, [r7, #12]
 80041ca:	4b6c      	ldr	r3, [pc, #432]	; (800437c <HAL_ETH_ConfigMAC+0x1f0>)
 80041cc:	4013      	ands	r3, r2
 80041ce:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	685b      	ldr	r3, [r3, #4]
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 80041d8:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 80041de:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 80041e4:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 80041ea:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 80041f0:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 80041f6:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 80041fc:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 8004202:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 8004208:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 800420e:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 8004214:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 800421a:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 800421c:	68fa      	ldr	r2, [r7, #12]
 800421e:	4313      	orrs	r3, r2
 8004220:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	68fa      	ldr	r2, [r7, #12]
 8004228:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8004232:	2001      	movs	r0, #1
 8004234:	f7ff f918 	bl	8003468 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1; 
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	68fa      	ldr	r2, [r7, #12]
 800423e:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8004248:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 800424e:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 8004254:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 800425a:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 8004260:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 8004266:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 8004272:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8004274:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFFR;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 800427e:	2001      	movs	r0, #1
 8004280:	f7ff f8f2 	bl	8003468 <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg1;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	68fa      	ldr	r2, [r7, #12]
 800428a:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	683a      	ldr	r2, [r7, #0]
 8004292:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8004294:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	683a      	ldr	r2, [r7, #0]
 800429c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800429e:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg1 = (heth->Instance)->MACFCR;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	699b      	ldr	r3, [r3, #24]
 80042a6:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80042a8:	68fa      	ldr	r2, [r7, #12]
 80042aa:	f64f 7341 	movw	r3, #65345	; 0xff41
 80042ae:	4013      	ands	r3, r2
 80042b0:	60fb      	str	r3, [r7, #12]
     
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042b6:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 80042bc:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 80042c2:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 80042c8:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 80042ce:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 80042d4:	4313      	orrs	r3, r2
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 80042d6:	68fa      	ldr	r2, [r7, #12]
 80042d8:	4313      	orrs	r3, r2
 80042da:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	68fa      	ldr	r2, [r7, #12]
 80042e2:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFCR;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	699b      	ldr	r3, [r3, #24]
 80042ea:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80042ec:	2001      	movs	r0, #1
 80042ee:	f7ff f8bb 	bl	8003468 <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg1;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	68fa      	ldr	r2, [r7, #12]
 80042f8:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	430a      	orrs	r2, r1
 8004308:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg1 = (heth->Instance)->MACVLANTR;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	69db      	ldr	r3, [r3, #28]
 8004310:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 8004312:	2001      	movs	r0, #1
 8004314:	f7ff f8a8 	bl	8003468 <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg1;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	68fa      	ldr	r2, [r7, #12]
 800431e:	61da      	str	r2, [r3, #28]
 8004320:	e01e      	b.n	8004360 <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg1 &= ~(0x00004800U);
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8004330:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	689a      	ldr	r2, [r3, #8]
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	68db      	ldr	r3, [r3, #12]
 800433a:	4313      	orrs	r3, r2
 800433c:	68fa      	ldr	r2, [r7, #12]
 800433e:	4313      	orrs	r3, r2
 8004340:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	68fa      	ldr	r2, [r7, #12]
 8004348:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8004352:	2001      	movs	r0, #1
 8004354:	f7ff f888 	bl	8003468 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	68fa      	ldr	r2, [r7, #12]
 800435e:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2201      	movs	r2, #1
 8004364:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2200      	movs	r2, #0
 800436c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 8004370:	2300      	movs	r3, #0
}
 8004372:	4618      	mov	r0, r3
 8004374:	3710      	adds	r7, #16
 8004376:	46bd      	mov	sp, r7
 8004378:	bd80      	pop	{r7, pc}
 800437a:	bf00      	nop
 800437c:	ff20810f 	.word	0xff20810f

08004380 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b0b0      	sub	sp, #192	; 0xc0
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
 8004388:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 800438a:	2300      	movs	r3, #0
 800438c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d007      	beq.n	80043a6 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800439c:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80043a4:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 80043a6:	2300      	movs	r3, #0
 80043a8:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 80043aa:	2300      	movs	r3, #0
 80043ac:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 80043ae:	2300      	movs	r3, #0
 80043b0:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 80043b2:	2300      	movs	r3, #0
 80043b4:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 80043b6:	2300      	movs	r3, #0
 80043b8:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 80043ba:	2300      	movs	r3, #0
 80043bc:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	69db      	ldr	r3, [r3, #28]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d103      	bne.n	80043ce <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 80043c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80043ca:	663b      	str	r3, [r7, #96]	; 0x60
 80043cc:	e001      	b.n	80043d2 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 80043ce:	2300      	movs	r3, #0
 80043d0:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 80043d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80043d6:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 80043d8:	2300      	movs	r3, #0
 80043da:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80043dc:	2300      	movs	r3, #0
 80043de:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 80043e0:	2300      	movs	r3, #0
 80043e2:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 80043e4:	2300      	movs	r3, #0
 80043e6:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_NORMAL_ENABLE;//ETH_SOURCEADDRFILTER_DISABLE;
 80043e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80043ec:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 80043ee:	2340      	movs	r3, #64	; 0x40
 80043f0:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 80043f2:	2300      	movs	r3, #0
 80043f4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 80043f8:	2300      	movs	r3, #0
 80043fa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 80043fe:	2300      	movs	r3, #0
 8004400:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8004404:	2300      	movs	r3, #0
 8004406:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 800440a:	2300      	movs	r3, #0
 800440c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 8004410:	2300      	movs	r3, #0
 8004412:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 8004416:	2300      	movs	r3, #0
 8004418:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 800441c:	2300      	movs	r3, #0
 800441e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8004422:	2380      	movs	r3, #128	; 0x80
 8004424:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8004428:	2300      	movs	r3, #0
 800442a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 800442e:	2300      	movs	r3, #0
 8004430:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8004434:	2300      	movs	r3, #0
 8004436:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_ENABLE;//ETH_TRANSMITFLOWCONTROL_DISABLE;
 800443a:	2302      	movs	r3, #2
 800443c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8004440:	2300      	movs	r3, #0
 8004442:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 8004446:	2300      	movs	r3, #0
 8004448:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8004456:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800445a:	4bac      	ldr	r3, [pc, #688]	; (800470c <ETH_MACDMAConfig+0x38c>)
 800445c:	4013      	ands	r3, r2
 800445e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8004462:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8004464:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8004466:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8004468:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 800446a:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 800446c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 800446e:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8004474:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8004476:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8004478:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 800447a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 800447c:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8004482:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8004484:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8004486:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8004488:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 800448a:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 800448c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 800448e:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8004490:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8004492:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8004494:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8004496:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8004498:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800449c:	4313      	orrs	r3, r2
 800449e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80044aa:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80044b6:	2001      	movs	r0, #1
 80044b8:	f7fe ffd6 	bl	8003468 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80044c4:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80044c6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 80044c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80044ca:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 80044cc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 80044ce:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 80044d0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 80044d4:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 80044d6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 80044da:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 80044dc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 80044e0:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 80044e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 80044e6:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 80044ea:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 80044f2:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80044f4:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	685b      	ldr	r3, [r3, #4]
 80044fc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8004500:	2001      	movs	r0, #1
 8004502:	f7fe ffb1 	bl	8003468 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800450e:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004518:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8004522:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	699b      	ldr	r3, [r3, #24]
 800452a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 800452e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004532:	f64f 7341 	movw	r3, #65345	; 0xff41
 8004536:	4013      	ands	r3, r2
 8004538:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 800453c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004540:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8004542:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8004546:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8004548:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 800454c:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 800454e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8004552:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8004554:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8004558:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 800455a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 800455e:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8004560:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004564:	4313      	orrs	r3, r2
 8004566:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004572:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	699b      	ldr	r3, [r3, #24]
 800457a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 800457e:	2001      	movs	r0, #1
 8004580:	f7fe ff72 	bl	8003468 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800458c:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 800458e:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8004592:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	430a      	orrs	r2, r1
 800459c:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	69db      	ldr	r3, [r3, #28]
 80045a4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80045a8:	2001      	movs	r0, #1
 80045aa:	f7fe ff5d 	bl	8003468 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80045b6:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 80045b8:	2300      	movs	r3, #0
 80045ba:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 80045bc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80045c0:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 80045c2:	2300      	movs	r3, #0
 80045c4:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 80045c6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80045ca:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80045cc:	2300      	movs	r3, #0
 80045ce:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 80045d0:	2300      	movs	r3, #0
 80045d2:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 80045d4:	2300      	movs	r3, #0
 80045d6:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80045d8:	2300      	movs	r3, #0
 80045da:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 80045dc:	2304      	movs	r3, #4
 80045de:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 80045e0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80045e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 80045e6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80045ea:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80045ec:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80045f0:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80045f2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80045f6:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 80045f8:	2380      	movs	r3, #128	; 0x80
 80045fa:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 80045fc:	2300      	movs	r3, #0
 80045fe:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8004600:	2300      	movs	r3, #0
 8004602:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800460c:	3318      	adds	r3, #24
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8004614:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004618:	4b3d      	ldr	r3, [pc, #244]	; (8004710 <ETH_MACDMAConfig+0x390>)
 800461a:	4013      	ands	r3, r2
 800461c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8004620:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8004622:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8004624:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8004626:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8004628:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 800462a:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 800462c:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 800462e:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8004630:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8004632:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8004634:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8004636:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8004638:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 800463a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 800463c:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 800463e:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8004640:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8004642:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004646:	4313      	orrs	r3, r2
 8004648:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004654:	3318      	adds	r3, #24
 8004656:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800465a:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004664:	3318      	adds	r3, #24
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800466c:	2001      	movs	r0, #1
 800466e:	f7fe fefb 	bl	8003468 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800467a:	3318      	adds	r3, #24
 800467c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004680:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8004682:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8004684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8004686:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8004688:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 800468a:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 800468c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 800468e:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8004690:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8004692:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 8004694:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004696:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8004698:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 800469a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 800469c:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80046a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046aa:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80046ba:	2001      	movs	r0, #1
 80046bc:	f7fe fed4 	bl	8003468 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046c8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80046cc:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	699b      	ldr	r3, [r3, #24]
 80046d2:	2b01      	cmp	r3, #1
 80046d4:	d10f      	bne.n	80046f6 <ETH_MACDMAConfig+0x376>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046de:	331c      	adds	r3, #28
 80046e0:	681a      	ldr	r2, [r3, #0]
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80046ea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80046ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046f2:	331c      	adds	r3, #28
 80046f4:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	695b      	ldr	r3, [r3, #20]
 80046fa:	461a      	mov	r2, r3
 80046fc:	2100      	movs	r1, #0
 80046fe:	6878      	ldr	r0, [r7, #4]
 8004700:	f000 f808 	bl	8004714 <ETH_MACAddressConfig>
}
 8004704:	bf00      	nop
 8004706:	37c0      	adds	r7, #192	; 0xc0
 8004708:	46bd      	mov	sp, r7
 800470a:	bd80      	pop	{r7, pc}
 800470c:	ff20810f 	.word	0xff20810f
 8004710:	f8de3f23 	.word	0xf8de3f23

08004714 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8004714:	b480      	push	{r7}
 8004716:	b087      	sub	sp, #28
 8004718:	af00      	add	r7, sp, #0
 800471a:	60f8      	str	r0, [r7, #12]
 800471c:	60b9      	str	r1, [r7, #8]
 800471e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	3305      	adds	r3, #5
 8004724:	781b      	ldrb	r3, [r3, #0]
 8004726:	021b      	lsls	r3, r3, #8
 8004728:	687a      	ldr	r2, [r7, #4]
 800472a:	3204      	adds	r2, #4
 800472c:	7812      	ldrb	r2, [r2, #0]
 800472e:	4313      	orrs	r3, r2
 8004730:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8004732:	68ba      	ldr	r2, [r7, #8]
 8004734:	4b11      	ldr	r3, [pc, #68]	; (800477c <ETH_MACAddressConfig+0x68>)
 8004736:	4413      	add	r3, r2
 8004738:	461a      	mov	r2, r3
 800473a:	697b      	ldr	r3, [r7, #20]
 800473c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	3303      	adds	r3, #3
 8004742:	781b      	ldrb	r3, [r3, #0]
 8004744:	061a      	lsls	r2, r3, #24
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	3302      	adds	r3, #2
 800474a:	781b      	ldrb	r3, [r3, #0]
 800474c:	041b      	lsls	r3, r3, #16
 800474e:	431a      	orrs	r2, r3
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	3301      	adds	r3, #1
 8004754:	781b      	ldrb	r3, [r3, #0]
 8004756:	021b      	lsls	r3, r3, #8
 8004758:	4313      	orrs	r3, r2
 800475a:	687a      	ldr	r2, [r7, #4]
 800475c:	7812      	ldrb	r2, [r2, #0]
 800475e:	4313      	orrs	r3, r2
 8004760:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8004762:	68ba      	ldr	r2, [r7, #8]
 8004764:	4b06      	ldr	r3, [pc, #24]	; (8004780 <ETH_MACAddressConfig+0x6c>)
 8004766:	4413      	add	r3, r2
 8004768:	461a      	mov	r2, r3
 800476a:	697b      	ldr	r3, [r7, #20]
 800476c:	6013      	str	r3, [r2, #0]
}
 800476e:	bf00      	nop
 8004770:	371c      	adds	r7, #28
 8004772:	46bd      	mov	sp, r7
 8004774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004778:	4770      	bx	lr
 800477a:	bf00      	nop
 800477c:	40028040 	.word	0x40028040
 8004780:	40028044 	.word	0x40028044

08004784 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 8004784:	b580      	push	{r7, lr}
 8004786:	b084      	sub	sp, #16
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 800478c:	2300      	movs	r3, #0
 800478e:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	681a      	ldr	r2, [r3, #0]
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f042 0208 	orr.w	r2, r2, #8
 800479e:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80047a8:	2001      	movs	r0, #1
 80047aa:	f000 f8e9 	bl	8004980 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	68fa      	ldr	r2, [r7, #12]
 80047b4:	601a      	str	r2, [r3, #0]
}
 80047b6:	bf00      	nop
 80047b8:	3710      	adds	r7, #16
 80047ba:	46bd      	mov	sp, r7
 80047bc:	bd80      	pop	{r7, pc}

080047be <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 80047be:	b580      	push	{r7, lr}
 80047c0:	b084      	sub	sp, #16
 80047c2:	af00      	add	r7, sp, #0
 80047c4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80047c6:	2300      	movs	r3, #0
 80047c8:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	681a      	ldr	r2, [r3, #0]
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f022 0208 	bic.w	r2, r2, #8
 80047d8:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80047e2:	2001      	movs	r0, #1
 80047e4:	f000 f8cc 	bl	8004980 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	68fa      	ldr	r2, [r7, #12]
 80047ee:	601a      	str	r2, [r3, #0]
}
 80047f0:	bf00      	nop
 80047f2:	3710      	adds	r7, #16
 80047f4:	46bd      	mov	sp, r7
 80047f6:	bd80      	pop	{r7, pc}

080047f8 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b084      	sub	sp, #16
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8004800:	2300      	movs	r3, #0
 8004802:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	681a      	ldr	r2, [r3, #0]
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f042 0204 	orr.w	r2, r2, #4
 8004812:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800481c:	2001      	movs	r0, #1
 800481e:	f000 f8af 	bl	8004980 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	68fa      	ldr	r2, [r7, #12]
 8004828:	601a      	str	r2, [r3, #0]
}
 800482a:	bf00      	nop
 800482c:	3710      	adds	r7, #16
 800482e:	46bd      	mov	sp, r7
 8004830:	bd80      	pop	{r7, pc}

08004832 <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8004832:	b580      	push	{r7, lr}
 8004834:	b084      	sub	sp, #16
 8004836:	af00      	add	r7, sp, #0
 8004838:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 800483a:	2300      	movs	r3, #0
 800483c:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	681a      	ldr	r2, [r3, #0]
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f022 0204 	bic.w	r2, r2, #4
 800484c:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8004856:	2001      	movs	r0, #1
 8004858:	f000 f892 	bl	8004980 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	68fa      	ldr	r2, [r7, #12]
 8004862:	601a      	str	r2, [r3, #0]
}
 8004864:	bf00      	nop
 8004866:	3710      	adds	r7, #16
 8004868:	46bd      	mov	sp, r7
 800486a:	bd80      	pop	{r7, pc}

0800486c <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 800486c:	b480      	push	{r7}
 800486e:	b083      	sub	sp, #12
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800487c:	3318      	adds	r3, #24
 800487e:	681a      	ldr	r2, [r3, #0]
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004888:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800488c:	3318      	adds	r3, #24
 800488e:	601a      	str	r2, [r3, #0]
}
 8004890:	bf00      	nop
 8004892:	370c      	adds	r7, #12
 8004894:	46bd      	mov	sp, r7
 8004896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489a:	4770      	bx	lr

0800489c <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 800489c:	b480      	push	{r7}
 800489e:	b083      	sub	sp, #12
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048ac:	3318      	adds	r3, #24
 80048ae:	681a      	ldr	r2, [r3, #0]
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80048b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048bc:	3318      	adds	r3, #24
 80048be:	601a      	str	r2, [r3, #0]
}
 80048c0:	bf00      	nop
 80048c2:	370c      	adds	r7, #12
 80048c4:	46bd      	mov	sp, r7
 80048c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ca:	4770      	bx	lr

080048cc <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 80048cc:	b480      	push	{r7}
 80048ce:	b083      	sub	sp, #12
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048dc:	3318      	adds	r3, #24
 80048de:	681a      	ldr	r2, [r3, #0]
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f042 0202 	orr.w	r2, r2, #2
 80048e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048ec:	3318      	adds	r3, #24
 80048ee:	601a      	str	r2, [r3, #0]
}
 80048f0:	bf00      	nop
 80048f2:	370c      	adds	r7, #12
 80048f4:	46bd      	mov	sp, r7
 80048f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fa:	4770      	bx	lr

080048fc <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 80048fc:	b480      	push	{r7}
 80048fe:	b083      	sub	sp, #12
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800490c:	3318      	adds	r3, #24
 800490e:	681a      	ldr	r2, [r3, #0]
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f022 0202 	bic.w	r2, r2, #2
 8004918:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800491c:	3318      	adds	r3, #24
 800491e:	601a      	str	r2, [r3, #0]
}
 8004920:	bf00      	nop
 8004922:	370c      	adds	r7, #12
 8004924:	46bd      	mov	sp, r7
 8004926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492a:	4770      	bx	lr

0800492c <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b084      	sub	sp, #16
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8004934:	2300      	movs	r3, #0
 8004936:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004940:	3318      	adds	r3, #24
 8004942:	681a      	ldr	r2, [r3, #0]
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800494c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004950:	3318      	adds	r3, #24
 8004952:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800495c:	3318      	adds	r3, #24
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8004962:	2001      	movs	r0, #1
 8004964:	f000 f80c 	bl	8004980 <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	68fa      	ldr	r2, [r7, #12]
 800496e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004972:	3318      	adds	r3, #24
 8004974:	601a      	str	r2, [r3, #0]
}
 8004976:	bf00      	nop
 8004978:	3710      	adds	r7, #16
 800497a:	46bd      	mov	sp, r7
 800497c:	bd80      	pop	{r7, pc}
	...

08004980 <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 8004980:	b480      	push	{r7}
 8004982:	b085      	sub	sp, #20
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004988:	4b0b      	ldr	r3, [pc, #44]	; (80049b8 <ETH_Delay+0x38>)
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4a0b      	ldr	r2, [pc, #44]	; (80049bc <ETH_Delay+0x3c>)
 800498e:	fba2 2303 	umull	r2, r3, r2, r3
 8004992:	0a5b      	lsrs	r3, r3, #9
 8004994:	687a      	ldr	r2, [r7, #4]
 8004996:	fb02 f303 	mul.w	r3, r2, r3
 800499a:	60fb      	str	r3, [r7, #12]
  do 
  {
    __NOP();
 800499c:	bf00      	nop
  } 
  while (Delay --);
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	1e5a      	subs	r2, r3, #1
 80049a2:	60fa      	str	r2, [r7, #12]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d1f9      	bne.n	800499c <ETH_Delay+0x1c>
}
 80049a8:	bf00      	nop
 80049aa:	bf00      	nop
 80049ac:	3714      	adds	r7, #20
 80049ae:	46bd      	mov	sp, r7
 80049b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b4:	4770      	bx	lr
 80049b6:	bf00      	nop
 80049b8:	20000004 	.word	0x20000004
 80049bc:	10624dd3 	.word	0x10624dd3

080049c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80049c0:	b480      	push	{r7}
 80049c2:	b089      	sub	sp, #36	; 0x24
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
 80049c8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80049ca:	2300      	movs	r3, #0
 80049cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80049ce:	2300      	movs	r3, #0
 80049d0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80049d2:	2300      	movs	r3, #0
 80049d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80049d6:	2300      	movs	r3, #0
 80049d8:	61fb      	str	r3, [r7, #28]
 80049da:	e177      	b.n	8004ccc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80049dc:	2201      	movs	r2, #1
 80049de:	69fb      	ldr	r3, [r7, #28]
 80049e0:	fa02 f303 	lsl.w	r3, r2, r3
 80049e4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	697a      	ldr	r2, [r7, #20]
 80049ec:	4013      	ands	r3, r2
 80049ee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80049f0:	693a      	ldr	r2, [r7, #16]
 80049f2:	697b      	ldr	r3, [r7, #20]
 80049f4:	429a      	cmp	r2, r3
 80049f6:	f040 8166 	bne.w	8004cc6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	685b      	ldr	r3, [r3, #4]
 80049fe:	2b01      	cmp	r3, #1
 8004a00:	d00b      	beq.n	8004a1a <HAL_GPIO_Init+0x5a>
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	685b      	ldr	r3, [r3, #4]
 8004a06:	2b02      	cmp	r3, #2
 8004a08:	d007      	beq.n	8004a1a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004a0e:	2b11      	cmp	r3, #17
 8004a10:	d003      	beq.n	8004a1a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	685b      	ldr	r3, [r3, #4]
 8004a16:	2b12      	cmp	r3, #18
 8004a18:	d130      	bne.n	8004a7c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	689b      	ldr	r3, [r3, #8]
 8004a1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004a20:	69fb      	ldr	r3, [r7, #28]
 8004a22:	005b      	lsls	r3, r3, #1
 8004a24:	2203      	movs	r2, #3
 8004a26:	fa02 f303 	lsl.w	r3, r2, r3
 8004a2a:	43db      	mvns	r3, r3
 8004a2c:	69ba      	ldr	r2, [r7, #24]
 8004a2e:	4013      	ands	r3, r2
 8004a30:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	68da      	ldr	r2, [r3, #12]
 8004a36:	69fb      	ldr	r3, [r7, #28]
 8004a38:	005b      	lsls	r3, r3, #1
 8004a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8004a3e:	69ba      	ldr	r2, [r7, #24]
 8004a40:	4313      	orrs	r3, r2
 8004a42:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	69ba      	ldr	r2, [r7, #24]
 8004a48:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	685b      	ldr	r3, [r3, #4]
 8004a4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004a50:	2201      	movs	r2, #1
 8004a52:	69fb      	ldr	r3, [r7, #28]
 8004a54:	fa02 f303 	lsl.w	r3, r2, r3
 8004a58:	43db      	mvns	r3, r3
 8004a5a:	69ba      	ldr	r2, [r7, #24]
 8004a5c:	4013      	ands	r3, r2
 8004a5e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	685b      	ldr	r3, [r3, #4]
 8004a64:	091b      	lsrs	r3, r3, #4
 8004a66:	f003 0201 	and.w	r2, r3, #1
 8004a6a:	69fb      	ldr	r3, [r7, #28]
 8004a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a70:	69ba      	ldr	r2, [r7, #24]
 8004a72:	4313      	orrs	r3, r2
 8004a74:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	69ba      	ldr	r2, [r7, #24]
 8004a7a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	68db      	ldr	r3, [r3, #12]
 8004a80:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004a82:	69fb      	ldr	r3, [r7, #28]
 8004a84:	005b      	lsls	r3, r3, #1
 8004a86:	2203      	movs	r2, #3
 8004a88:	fa02 f303 	lsl.w	r3, r2, r3
 8004a8c:	43db      	mvns	r3, r3
 8004a8e:	69ba      	ldr	r2, [r7, #24]
 8004a90:	4013      	ands	r3, r2
 8004a92:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	689a      	ldr	r2, [r3, #8]
 8004a98:	69fb      	ldr	r3, [r7, #28]
 8004a9a:	005b      	lsls	r3, r3, #1
 8004a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8004aa0:	69ba      	ldr	r2, [r7, #24]
 8004aa2:	4313      	orrs	r3, r2
 8004aa4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	69ba      	ldr	r2, [r7, #24]
 8004aaa:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	685b      	ldr	r3, [r3, #4]
 8004ab0:	2b02      	cmp	r3, #2
 8004ab2:	d003      	beq.n	8004abc <HAL_GPIO_Init+0xfc>
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	2b12      	cmp	r3, #18
 8004aba:	d123      	bne.n	8004b04 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004abc:	69fb      	ldr	r3, [r7, #28]
 8004abe:	08da      	lsrs	r2, r3, #3
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	3208      	adds	r2, #8
 8004ac4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ac8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004aca:	69fb      	ldr	r3, [r7, #28]
 8004acc:	f003 0307 	and.w	r3, r3, #7
 8004ad0:	009b      	lsls	r3, r3, #2
 8004ad2:	220f      	movs	r2, #15
 8004ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ad8:	43db      	mvns	r3, r3
 8004ada:	69ba      	ldr	r2, [r7, #24]
 8004adc:	4013      	ands	r3, r2
 8004ade:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	691a      	ldr	r2, [r3, #16]
 8004ae4:	69fb      	ldr	r3, [r7, #28]
 8004ae6:	f003 0307 	and.w	r3, r3, #7
 8004aea:	009b      	lsls	r3, r3, #2
 8004aec:	fa02 f303 	lsl.w	r3, r2, r3
 8004af0:	69ba      	ldr	r2, [r7, #24]
 8004af2:	4313      	orrs	r3, r2
 8004af4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004af6:	69fb      	ldr	r3, [r7, #28]
 8004af8:	08da      	lsrs	r2, r3, #3
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	3208      	adds	r2, #8
 8004afe:	69b9      	ldr	r1, [r7, #24]
 8004b00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004b0a:	69fb      	ldr	r3, [r7, #28]
 8004b0c:	005b      	lsls	r3, r3, #1
 8004b0e:	2203      	movs	r2, #3
 8004b10:	fa02 f303 	lsl.w	r3, r2, r3
 8004b14:	43db      	mvns	r3, r3
 8004b16:	69ba      	ldr	r2, [r7, #24]
 8004b18:	4013      	ands	r3, r2
 8004b1a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	685b      	ldr	r3, [r3, #4]
 8004b20:	f003 0203 	and.w	r2, r3, #3
 8004b24:	69fb      	ldr	r3, [r7, #28]
 8004b26:	005b      	lsls	r3, r3, #1
 8004b28:	fa02 f303 	lsl.w	r3, r2, r3
 8004b2c:	69ba      	ldr	r2, [r7, #24]
 8004b2e:	4313      	orrs	r3, r2
 8004b30:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	69ba      	ldr	r2, [r7, #24]
 8004b36:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	685b      	ldr	r3, [r3, #4]
 8004b3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	f000 80c0 	beq.w	8004cc6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004b46:	2300      	movs	r3, #0
 8004b48:	60fb      	str	r3, [r7, #12]
 8004b4a:	4b66      	ldr	r3, [pc, #408]	; (8004ce4 <HAL_GPIO_Init+0x324>)
 8004b4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b4e:	4a65      	ldr	r2, [pc, #404]	; (8004ce4 <HAL_GPIO_Init+0x324>)
 8004b50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004b54:	6453      	str	r3, [r2, #68]	; 0x44
 8004b56:	4b63      	ldr	r3, [pc, #396]	; (8004ce4 <HAL_GPIO_Init+0x324>)
 8004b58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b5e:	60fb      	str	r3, [r7, #12]
 8004b60:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004b62:	4a61      	ldr	r2, [pc, #388]	; (8004ce8 <HAL_GPIO_Init+0x328>)
 8004b64:	69fb      	ldr	r3, [r7, #28]
 8004b66:	089b      	lsrs	r3, r3, #2
 8004b68:	3302      	adds	r3, #2
 8004b6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004b70:	69fb      	ldr	r3, [r7, #28]
 8004b72:	f003 0303 	and.w	r3, r3, #3
 8004b76:	009b      	lsls	r3, r3, #2
 8004b78:	220f      	movs	r2, #15
 8004b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b7e:	43db      	mvns	r3, r3
 8004b80:	69ba      	ldr	r2, [r7, #24]
 8004b82:	4013      	ands	r3, r2
 8004b84:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	4a58      	ldr	r2, [pc, #352]	; (8004cec <HAL_GPIO_Init+0x32c>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d037      	beq.n	8004bfe <HAL_GPIO_Init+0x23e>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	4a57      	ldr	r2, [pc, #348]	; (8004cf0 <HAL_GPIO_Init+0x330>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d031      	beq.n	8004bfa <HAL_GPIO_Init+0x23a>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	4a56      	ldr	r2, [pc, #344]	; (8004cf4 <HAL_GPIO_Init+0x334>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d02b      	beq.n	8004bf6 <HAL_GPIO_Init+0x236>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	4a55      	ldr	r2, [pc, #340]	; (8004cf8 <HAL_GPIO_Init+0x338>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d025      	beq.n	8004bf2 <HAL_GPIO_Init+0x232>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	4a54      	ldr	r2, [pc, #336]	; (8004cfc <HAL_GPIO_Init+0x33c>)
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d01f      	beq.n	8004bee <HAL_GPIO_Init+0x22e>
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	4a53      	ldr	r2, [pc, #332]	; (8004d00 <HAL_GPIO_Init+0x340>)
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d019      	beq.n	8004bea <HAL_GPIO_Init+0x22a>
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	4a52      	ldr	r2, [pc, #328]	; (8004d04 <HAL_GPIO_Init+0x344>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d013      	beq.n	8004be6 <HAL_GPIO_Init+0x226>
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	4a51      	ldr	r2, [pc, #324]	; (8004d08 <HAL_GPIO_Init+0x348>)
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d00d      	beq.n	8004be2 <HAL_GPIO_Init+0x222>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	4a50      	ldr	r2, [pc, #320]	; (8004d0c <HAL_GPIO_Init+0x34c>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d007      	beq.n	8004bde <HAL_GPIO_Init+0x21e>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	4a4f      	ldr	r2, [pc, #316]	; (8004d10 <HAL_GPIO_Init+0x350>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d101      	bne.n	8004bda <HAL_GPIO_Init+0x21a>
 8004bd6:	2309      	movs	r3, #9
 8004bd8:	e012      	b.n	8004c00 <HAL_GPIO_Init+0x240>
 8004bda:	230a      	movs	r3, #10
 8004bdc:	e010      	b.n	8004c00 <HAL_GPIO_Init+0x240>
 8004bde:	2308      	movs	r3, #8
 8004be0:	e00e      	b.n	8004c00 <HAL_GPIO_Init+0x240>
 8004be2:	2307      	movs	r3, #7
 8004be4:	e00c      	b.n	8004c00 <HAL_GPIO_Init+0x240>
 8004be6:	2306      	movs	r3, #6
 8004be8:	e00a      	b.n	8004c00 <HAL_GPIO_Init+0x240>
 8004bea:	2305      	movs	r3, #5
 8004bec:	e008      	b.n	8004c00 <HAL_GPIO_Init+0x240>
 8004bee:	2304      	movs	r3, #4
 8004bf0:	e006      	b.n	8004c00 <HAL_GPIO_Init+0x240>
 8004bf2:	2303      	movs	r3, #3
 8004bf4:	e004      	b.n	8004c00 <HAL_GPIO_Init+0x240>
 8004bf6:	2302      	movs	r3, #2
 8004bf8:	e002      	b.n	8004c00 <HAL_GPIO_Init+0x240>
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	e000      	b.n	8004c00 <HAL_GPIO_Init+0x240>
 8004bfe:	2300      	movs	r3, #0
 8004c00:	69fa      	ldr	r2, [r7, #28]
 8004c02:	f002 0203 	and.w	r2, r2, #3
 8004c06:	0092      	lsls	r2, r2, #2
 8004c08:	4093      	lsls	r3, r2
 8004c0a:	69ba      	ldr	r2, [r7, #24]
 8004c0c:	4313      	orrs	r3, r2
 8004c0e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004c10:	4935      	ldr	r1, [pc, #212]	; (8004ce8 <HAL_GPIO_Init+0x328>)
 8004c12:	69fb      	ldr	r3, [r7, #28]
 8004c14:	089b      	lsrs	r3, r3, #2
 8004c16:	3302      	adds	r3, #2
 8004c18:	69ba      	ldr	r2, [r7, #24]
 8004c1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004c1e:	4b3d      	ldr	r3, [pc, #244]	; (8004d14 <HAL_GPIO_Init+0x354>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c24:	693b      	ldr	r3, [r7, #16]
 8004c26:	43db      	mvns	r3, r3
 8004c28:	69ba      	ldr	r2, [r7, #24]
 8004c2a:	4013      	ands	r3, r2
 8004c2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	685b      	ldr	r3, [r3, #4]
 8004c32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d003      	beq.n	8004c42 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004c3a:	69ba      	ldr	r2, [r7, #24]
 8004c3c:	693b      	ldr	r3, [r7, #16]
 8004c3e:	4313      	orrs	r3, r2
 8004c40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004c42:	4a34      	ldr	r2, [pc, #208]	; (8004d14 <HAL_GPIO_Init+0x354>)
 8004c44:	69bb      	ldr	r3, [r7, #24]
 8004c46:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004c48:	4b32      	ldr	r3, [pc, #200]	; (8004d14 <HAL_GPIO_Init+0x354>)
 8004c4a:	685b      	ldr	r3, [r3, #4]
 8004c4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c4e:	693b      	ldr	r3, [r7, #16]
 8004c50:	43db      	mvns	r3, r3
 8004c52:	69ba      	ldr	r2, [r7, #24]
 8004c54:	4013      	ands	r3, r2
 8004c56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	685b      	ldr	r3, [r3, #4]
 8004c5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d003      	beq.n	8004c6c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004c64:	69ba      	ldr	r2, [r7, #24]
 8004c66:	693b      	ldr	r3, [r7, #16]
 8004c68:	4313      	orrs	r3, r2
 8004c6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004c6c:	4a29      	ldr	r2, [pc, #164]	; (8004d14 <HAL_GPIO_Init+0x354>)
 8004c6e:	69bb      	ldr	r3, [r7, #24]
 8004c70:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004c72:	4b28      	ldr	r3, [pc, #160]	; (8004d14 <HAL_GPIO_Init+0x354>)
 8004c74:	689b      	ldr	r3, [r3, #8]
 8004c76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c78:	693b      	ldr	r3, [r7, #16]
 8004c7a:	43db      	mvns	r3, r3
 8004c7c:	69ba      	ldr	r2, [r7, #24]
 8004c7e:	4013      	ands	r3, r2
 8004c80:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	685b      	ldr	r3, [r3, #4]
 8004c86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d003      	beq.n	8004c96 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004c8e:	69ba      	ldr	r2, [r7, #24]
 8004c90:	693b      	ldr	r3, [r7, #16]
 8004c92:	4313      	orrs	r3, r2
 8004c94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004c96:	4a1f      	ldr	r2, [pc, #124]	; (8004d14 <HAL_GPIO_Init+0x354>)
 8004c98:	69bb      	ldr	r3, [r7, #24]
 8004c9a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004c9c:	4b1d      	ldr	r3, [pc, #116]	; (8004d14 <HAL_GPIO_Init+0x354>)
 8004c9e:	68db      	ldr	r3, [r3, #12]
 8004ca0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ca2:	693b      	ldr	r3, [r7, #16]
 8004ca4:	43db      	mvns	r3, r3
 8004ca6:	69ba      	ldr	r2, [r7, #24]
 8004ca8:	4013      	ands	r3, r2
 8004caa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	685b      	ldr	r3, [r3, #4]
 8004cb0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d003      	beq.n	8004cc0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004cb8:	69ba      	ldr	r2, [r7, #24]
 8004cba:	693b      	ldr	r3, [r7, #16]
 8004cbc:	4313      	orrs	r3, r2
 8004cbe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004cc0:	4a14      	ldr	r2, [pc, #80]	; (8004d14 <HAL_GPIO_Init+0x354>)
 8004cc2:	69bb      	ldr	r3, [r7, #24]
 8004cc4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004cc6:	69fb      	ldr	r3, [r7, #28]
 8004cc8:	3301      	adds	r3, #1
 8004cca:	61fb      	str	r3, [r7, #28]
 8004ccc:	69fb      	ldr	r3, [r7, #28]
 8004cce:	2b0f      	cmp	r3, #15
 8004cd0:	f67f ae84 	bls.w	80049dc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004cd4:	bf00      	nop
 8004cd6:	bf00      	nop
 8004cd8:	3724      	adds	r7, #36	; 0x24
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce0:	4770      	bx	lr
 8004ce2:	bf00      	nop
 8004ce4:	40023800 	.word	0x40023800
 8004ce8:	40013800 	.word	0x40013800
 8004cec:	40020000 	.word	0x40020000
 8004cf0:	40020400 	.word	0x40020400
 8004cf4:	40020800 	.word	0x40020800
 8004cf8:	40020c00 	.word	0x40020c00
 8004cfc:	40021000 	.word	0x40021000
 8004d00:	40021400 	.word	0x40021400
 8004d04:	40021800 	.word	0x40021800
 8004d08:	40021c00 	.word	0x40021c00
 8004d0c:	40022000 	.word	0x40022000
 8004d10:	40022400 	.word	0x40022400
 8004d14:	40013c00 	.word	0x40013c00

08004d18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004d18:	b480      	push	{r7}
 8004d1a:	b083      	sub	sp, #12
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
 8004d20:	460b      	mov	r3, r1
 8004d22:	807b      	strh	r3, [r7, #2]
 8004d24:	4613      	mov	r3, r2
 8004d26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004d28:	787b      	ldrb	r3, [r7, #1]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d003      	beq.n	8004d36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004d2e:	887a      	ldrh	r2, [r7, #2]
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004d34:	e003      	b.n	8004d3e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004d36:	887b      	ldrh	r3, [r7, #2]
 8004d38:	041a      	lsls	r2, r3, #16
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	619a      	str	r2, [r3, #24]
}
 8004d3e:	bf00      	nop
 8004d40:	370c      	adds	r7, #12
 8004d42:	46bd      	mov	sp, r7
 8004d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d48:	4770      	bx	lr

08004d4a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004d4a:	b480      	push	{r7}
 8004d4c:	b083      	sub	sp, #12
 8004d4e:	af00      	add	r7, sp, #0
 8004d50:	6078      	str	r0, [r7, #4]
 8004d52:	460b      	mov	r3, r1
 8004d54:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	695a      	ldr	r2, [r3, #20]
 8004d5a:	887b      	ldrh	r3, [r7, #2]
 8004d5c:	401a      	ands	r2, r3
 8004d5e:	887b      	ldrh	r3, [r7, #2]
 8004d60:	429a      	cmp	r2, r3
 8004d62:	d104      	bne.n	8004d6e <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004d64:	887b      	ldrh	r3, [r7, #2]
 8004d66:	041a      	lsls	r2, r3, #16
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8004d6c:	e002      	b.n	8004d74 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8004d6e:	887a      	ldrh	r2, [r7, #2]
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	619a      	str	r2, [r3, #24]
}
 8004d74:	bf00      	nop
 8004d76:	370c      	adds	r7, #12
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7e:	4770      	bx	lr

08004d80 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b084      	sub	sp, #16
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d101      	bne.n	8004d92 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004d8e:	2301      	movs	r3, #1
 8004d90:	e12b      	b.n	8004fea <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d98:	b2db      	uxtb	r3, r3
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d106      	bne.n	8004dac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2200      	movs	r2, #0
 8004da2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004da6:	6878      	ldr	r0, [r7, #4]
 8004da8:	f7fe f880 	bl	8002eac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2224      	movs	r2, #36	; 0x24
 8004db0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	681a      	ldr	r2, [r3, #0]
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f022 0201 	bic.w	r2, r2, #1
 8004dc2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	681a      	ldr	r2, [r3, #0]
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004dd2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	681a      	ldr	r2, [r3, #0]
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004de2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004de4:	f001 fc20 	bl	8006628 <HAL_RCC_GetPCLK1Freq>
 8004de8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	685b      	ldr	r3, [r3, #4]
 8004dee:	4a81      	ldr	r2, [pc, #516]	; (8004ff4 <HAL_I2C_Init+0x274>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d807      	bhi.n	8004e04 <HAL_I2C_Init+0x84>
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	4a80      	ldr	r2, [pc, #512]	; (8004ff8 <HAL_I2C_Init+0x278>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	bf94      	ite	ls
 8004dfc:	2301      	movls	r3, #1
 8004dfe:	2300      	movhi	r3, #0
 8004e00:	b2db      	uxtb	r3, r3
 8004e02:	e006      	b.n	8004e12 <HAL_I2C_Init+0x92>
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	4a7d      	ldr	r2, [pc, #500]	; (8004ffc <HAL_I2C_Init+0x27c>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	bf94      	ite	ls
 8004e0c:	2301      	movls	r3, #1
 8004e0e:	2300      	movhi	r3, #0
 8004e10:	b2db      	uxtb	r3, r3
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d001      	beq.n	8004e1a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004e16:	2301      	movs	r3, #1
 8004e18:	e0e7      	b.n	8004fea <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	4a78      	ldr	r2, [pc, #480]	; (8005000 <HAL_I2C_Init+0x280>)
 8004e1e:	fba2 2303 	umull	r2, r3, r2, r3
 8004e22:	0c9b      	lsrs	r3, r3, #18
 8004e24:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	685b      	ldr	r3, [r3, #4]
 8004e2c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	68ba      	ldr	r2, [r7, #8]
 8004e36:	430a      	orrs	r2, r1
 8004e38:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	6a1b      	ldr	r3, [r3, #32]
 8004e40:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	685b      	ldr	r3, [r3, #4]
 8004e48:	4a6a      	ldr	r2, [pc, #424]	; (8004ff4 <HAL_I2C_Init+0x274>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d802      	bhi.n	8004e54 <HAL_I2C_Init+0xd4>
 8004e4e:	68bb      	ldr	r3, [r7, #8]
 8004e50:	3301      	adds	r3, #1
 8004e52:	e009      	b.n	8004e68 <HAL_I2C_Init+0xe8>
 8004e54:	68bb      	ldr	r3, [r7, #8]
 8004e56:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004e5a:	fb02 f303 	mul.w	r3, r2, r3
 8004e5e:	4a69      	ldr	r2, [pc, #420]	; (8005004 <HAL_I2C_Init+0x284>)
 8004e60:	fba2 2303 	umull	r2, r3, r2, r3
 8004e64:	099b      	lsrs	r3, r3, #6
 8004e66:	3301      	adds	r3, #1
 8004e68:	687a      	ldr	r2, [r7, #4]
 8004e6a:	6812      	ldr	r2, [r2, #0]
 8004e6c:	430b      	orrs	r3, r1
 8004e6e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	69db      	ldr	r3, [r3, #28]
 8004e76:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004e7a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	685b      	ldr	r3, [r3, #4]
 8004e82:	495c      	ldr	r1, [pc, #368]	; (8004ff4 <HAL_I2C_Init+0x274>)
 8004e84:	428b      	cmp	r3, r1
 8004e86:	d819      	bhi.n	8004ebc <HAL_I2C_Init+0x13c>
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	1e59      	subs	r1, r3, #1
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	685b      	ldr	r3, [r3, #4]
 8004e90:	005b      	lsls	r3, r3, #1
 8004e92:	fbb1 f3f3 	udiv	r3, r1, r3
 8004e96:	1c59      	adds	r1, r3, #1
 8004e98:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004e9c:	400b      	ands	r3, r1
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d00a      	beq.n	8004eb8 <HAL_I2C_Init+0x138>
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	1e59      	subs	r1, r3, #1
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	685b      	ldr	r3, [r3, #4]
 8004eaa:	005b      	lsls	r3, r3, #1
 8004eac:	fbb1 f3f3 	udiv	r3, r1, r3
 8004eb0:	3301      	adds	r3, #1
 8004eb2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004eb6:	e051      	b.n	8004f5c <HAL_I2C_Init+0x1dc>
 8004eb8:	2304      	movs	r3, #4
 8004eba:	e04f      	b.n	8004f5c <HAL_I2C_Init+0x1dc>
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	689b      	ldr	r3, [r3, #8]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d111      	bne.n	8004ee8 <HAL_I2C_Init+0x168>
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	1e58      	subs	r0, r3, #1
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6859      	ldr	r1, [r3, #4]
 8004ecc:	460b      	mov	r3, r1
 8004ece:	005b      	lsls	r3, r3, #1
 8004ed0:	440b      	add	r3, r1
 8004ed2:	fbb0 f3f3 	udiv	r3, r0, r3
 8004ed6:	3301      	adds	r3, #1
 8004ed8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	bf0c      	ite	eq
 8004ee0:	2301      	moveq	r3, #1
 8004ee2:	2300      	movne	r3, #0
 8004ee4:	b2db      	uxtb	r3, r3
 8004ee6:	e012      	b.n	8004f0e <HAL_I2C_Init+0x18e>
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	1e58      	subs	r0, r3, #1
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6859      	ldr	r1, [r3, #4]
 8004ef0:	460b      	mov	r3, r1
 8004ef2:	009b      	lsls	r3, r3, #2
 8004ef4:	440b      	add	r3, r1
 8004ef6:	0099      	lsls	r1, r3, #2
 8004ef8:	440b      	add	r3, r1
 8004efa:	fbb0 f3f3 	udiv	r3, r0, r3
 8004efe:	3301      	adds	r3, #1
 8004f00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	bf0c      	ite	eq
 8004f08:	2301      	moveq	r3, #1
 8004f0a:	2300      	movne	r3, #0
 8004f0c:	b2db      	uxtb	r3, r3
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d001      	beq.n	8004f16 <HAL_I2C_Init+0x196>
 8004f12:	2301      	movs	r3, #1
 8004f14:	e022      	b.n	8004f5c <HAL_I2C_Init+0x1dc>
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	689b      	ldr	r3, [r3, #8]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d10e      	bne.n	8004f3c <HAL_I2C_Init+0x1bc>
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	1e58      	subs	r0, r3, #1
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6859      	ldr	r1, [r3, #4]
 8004f26:	460b      	mov	r3, r1
 8004f28:	005b      	lsls	r3, r3, #1
 8004f2a:	440b      	add	r3, r1
 8004f2c:	fbb0 f3f3 	udiv	r3, r0, r3
 8004f30:	3301      	adds	r3, #1
 8004f32:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f3a:	e00f      	b.n	8004f5c <HAL_I2C_Init+0x1dc>
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	1e58      	subs	r0, r3, #1
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6859      	ldr	r1, [r3, #4]
 8004f44:	460b      	mov	r3, r1
 8004f46:	009b      	lsls	r3, r3, #2
 8004f48:	440b      	add	r3, r1
 8004f4a:	0099      	lsls	r1, r3, #2
 8004f4c:	440b      	add	r3, r1
 8004f4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004f52:	3301      	adds	r3, #1
 8004f54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f58:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004f5c:	6879      	ldr	r1, [r7, #4]
 8004f5e:	6809      	ldr	r1, [r1, #0]
 8004f60:	4313      	orrs	r3, r2
 8004f62:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	69da      	ldr	r2, [r3, #28]
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6a1b      	ldr	r3, [r3, #32]
 8004f76:	431a      	orrs	r2, r3
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	430a      	orrs	r2, r1
 8004f7e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	689b      	ldr	r3, [r3, #8]
 8004f86:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004f8a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004f8e:	687a      	ldr	r2, [r7, #4]
 8004f90:	6911      	ldr	r1, [r2, #16]
 8004f92:	687a      	ldr	r2, [r7, #4]
 8004f94:	68d2      	ldr	r2, [r2, #12]
 8004f96:	4311      	orrs	r1, r2
 8004f98:	687a      	ldr	r2, [r7, #4]
 8004f9a:	6812      	ldr	r2, [r2, #0]
 8004f9c:	430b      	orrs	r3, r1
 8004f9e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	68db      	ldr	r3, [r3, #12]
 8004fa6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	695a      	ldr	r2, [r3, #20]
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	699b      	ldr	r3, [r3, #24]
 8004fb2:	431a      	orrs	r2, r3
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	430a      	orrs	r2, r1
 8004fba:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	681a      	ldr	r2, [r3, #0]
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f042 0201 	orr.w	r2, r2, #1
 8004fca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2200      	movs	r2, #0
 8004fd0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2220      	movs	r2, #32
 8004fd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2200      	movs	r2, #0
 8004fde:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004fe8:	2300      	movs	r3, #0
}
 8004fea:	4618      	mov	r0, r3
 8004fec:	3710      	adds	r7, #16
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	bd80      	pop	{r7, pc}
 8004ff2:	bf00      	nop
 8004ff4:	000186a0 	.word	0x000186a0
 8004ff8:	001e847f 	.word	0x001e847f
 8004ffc:	003d08ff 	.word	0x003d08ff
 8005000:	431bde83 	.word	0x431bde83
 8005004:	10624dd3 	.word	0x10624dd3

08005008 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b088      	sub	sp, #32
 800500c:	af02      	add	r7, sp, #8
 800500e:	60f8      	str	r0, [r7, #12]
 8005010:	607a      	str	r2, [r7, #4]
 8005012:	461a      	mov	r2, r3
 8005014:	460b      	mov	r3, r1
 8005016:	817b      	strh	r3, [r7, #10]
 8005018:	4613      	mov	r3, r2
 800501a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800501c:	f7fe fa18 	bl	8003450 <HAL_GetTick>
 8005020:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005028:	b2db      	uxtb	r3, r3
 800502a:	2b20      	cmp	r3, #32
 800502c:	f040 80e0 	bne.w	80051f0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005030:	697b      	ldr	r3, [r7, #20]
 8005032:	9300      	str	r3, [sp, #0]
 8005034:	2319      	movs	r3, #25
 8005036:	2201      	movs	r2, #1
 8005038:	4970      	ldr	r1, [pc, #448]	; (80051fc <HAL_I2C_Master_Transmit+0x1f4>)
 800503a:	68f8      	ldr	r0, [r7, #12]
 800503c:	f000 fc58 	bl	80058f0 <I2C_WaitOnFlagUntilTimeout>
 8005040:	4603      	mov	r3, r0
 8005042:	2b00      	cmp	r3, #0
 8005044:	d001      	beq.n	800504a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8005046:	2302      	movs	r3, #2
 8005048:	e0d3      	b.n	80051f2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005050:	2b01      	cmp	r3, #1
 8005052:	d101      	bne.n	8005058 <HAL_I2C_Master_Transmit+0x50>
 8005054:	2302      	movs	r3, #2
 8005056:	e0cc      	b.n	80051f2 <HAL_I2C_Master_Transmit+0x1ea>
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	2201      	movs	r2, #1
 800505c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f003 0301 	and.w	r3, r3, #1
 800506a:	2b01      	cmp	r3, #1
 800506c:	d007      	beq.n	800507e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	681a      	ldr	r2, [r3, #0]
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f042 0201 	orr.w	r2, r2, #1
 800507c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	681a      	ldr	r2, [r3, #0]
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800508c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	2221      	movs	r2, #33	; 0x21
 8005092:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	2210      	movs	r2, #16
 800509a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	2200      	movs	r2, #0
 80050a2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	687a      	ldr	r2, [r7, #4]
 80050a8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	893a      	ldrh	r2, [r7, #8]
 80050ae:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050b4:	b29a      	uxth	r2, r3
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	4a50      	ldr	r2, [pc, #320]	; (8005200 <HAL_I2C_Master_Transmit+0x1f8>)
 80050be:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80050c0:	8979      	ldrh	r1, [r7, #10]
 80050c2:	697b      	ldr	r3, [r7, #20]
 80050c4:	6a3a      	ldr	r2, [r7, #32]
 80050c6:	68f8      	ldr	r0, [r7, #12]
 80050c8:	f000 fac2 	bl	8005650 <I2C_MasterRequestWrite>
 80050cc:	4603      	mov	r3, r0
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d001      	beq.n	80050d6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80050d2:	2301      	movs	r3, #1
 80050d4:	e08d      	b.n	80051f2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80050d6:	2300      	movs	r3, #0
 80050d8:	613b      	str	r3, [r7, #16]
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	695b      	ldr	r3, [r3, #20]
 80050e0:	613b      	str	r3, [r7, #16]
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	699b      	ldr	r3, [r3, #24]
 80050e8:	613b      	str	r3, [r7, #16]
 80050ea:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80050ec:	e066      	b.n	80051bc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80050ee:	697a      	ldr	r2, [r7, #20]
 80050f0:	6a39      	ldr	r1, [r7, #32]
 80050f2:	68f8      	ldr	r0, [r7, #12]
 80050f4:	f000 fcd2 	bl	8005a9c <I2C_WaitOnTXEFlagUntilTimeout>
 80050f8:	4603      	mov	r3, r0
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d00d      	beq.n	800511a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005102:	2b04      	cmp	r3, #4
 8005104:	d107      	bne.n	8005116 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	681a      	ldr	r2, [r3, #0]
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005114:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005116:	2301      	movs	r3, #1
 8005118:	e06b      	b.n	80051f2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800511e:	781a      	ldrb	r2, [r3, #0]
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800512a:	1c5a      	adds	r2, r3, #1
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005134:	b29b      	uxth	r3, r3
 8005136:	3b01      	subs	r3, #1
 8005138:	b29a      	uxth	r2, r3
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005142:	3b01      	subs	r3, #1
 8005144:	b29a      	uxth	r2, r3
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	695b      	ldr	r3, [r3, #20]
 8005150:	f003 0304 	and.w	r3, r3, #4
 8005154:	2b04      	cmp	r3, #4
 8005156:	d11b      	bne.n	8005190 <HAL_I2C_Master_Transmit+0x188>
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800515c:	2b00      	cmp	r3, #0
 800515e:	d017      	beq.n	8005190 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005164:	781a      	ldrb	r2, [r3, #0]
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005170:	1c5a      	adds	r2, r3, #1
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800517a:	b29b      	uxth	r3, r3
 800517c:	3b01      	subs	r3, #1
 800517e:	b29a      	uxth	r2, r3
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005188:	3b01      	subs	r3, #1
 800518a:	b29a      	uxth	r2, r3
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005190:	697a      	ldr	r2, [r7, #20]
 8005192:	6a39      	ldr	r1, [r7, #32]
 8005194:	68f8      	ldr	r0, [r7, #12]
 8005196:	f000 fcc2 	bl	8005b1e <I2C_WaitOnBTFFlagUntilTimeout>
 800519a:	4603      	mov	r3, r0
 800519c:	2b00      	cmp	r3, #0
 800519e:	d00d      	beq.n	80051bc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051a4:	2b04      	cmp	r3, #4
 80051a6:	d107      	bne.n	80051b8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	681a      	ldr	r2, [r3, #0]
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051b6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80051b8:	2301      	movs	r3, #1
 80051ba:	e01a      	b.n	80051f2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d194      	bne.n	80050ee <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	681a      	ldr	r2, [r3, #0]
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	2220      	movs	r2, #32
 80051d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	2200      	movs	r2, #0
 80051e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	2200      	movs	r2, #0
 80051e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80051ec:	2300      	movs	r3, #0
 80051ee:	e000      	b.n	80051f2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80051f0:	2302      	movs	r3, #2
  }
}
 80051f2:	4618      	mov	r0, r3
 80051f4:	3718      	adds	r7, #24
 80051f6:	46bd      	mov	sp, r7
 80051f8:	bd80      	pop	{r7, pc}
 80051fa:	bf00      	nop
 80051fc:	00100002 	.word	0x00100002
 8005200:	ffff0000 	.word	0xffff0000

08005204 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005204:	b580      	push	{r7, lr}
 8005206:	b08c      	sub	sp, #48	; 0x30
 8005208:	af02      	add	r7, sp, #8
 800520a:	60f8      	str	r0, [r7, #12]
 800520c:	607a      	str	r2, [r7, #4]
 800520e:	461a      	mov	r2, r3
 8005210:	460b      	mov	r3, r1
 8005212:	817b      	strh	r3, [r7, #10]
 8005214:	4613      	mov	r3, r2
 8005216:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005218:	f7fe f91a 	bl	8003450 <HAL_GetTick>
 800521c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005224:	b2db      	uxtb	r3, r3
 8005226:	2b20      	cmp	r3, #32
 8005228:	f040 820b 	bne.w	8005642 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800522c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800522e:	9300      	str	r3, [sp, #0]
 8005230:	2319      	movs	r3, #25
 8005232:	2201      	movs	r2, #1
 8005234:	497c      	ldr	r1, [pc, #496]	; (8005428 <HAL_I2C_Master_Receive+0x224>)
 8005236:	68f8      	ldr	r0, [r7, #12]
 8005238:	f000 fb5a 	bl	80058f0 <I2C_WaitOnFlagUntilTimeout>
 800523c:	4603      	mov	r3, r0
 800523e:	2b00      	cmp	r3, #0
 8005240:	d001      	beq.n	8005246 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8005242:	2302      	movs	r3, #2
 8005244:	e1fe      	b.n	8005644 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800524c:	2b01      	cmp	r3, #1
 800524e:	d101      	bne.n	8005254 <HAL_I2C_Master_Receive+0x50>
 8005250:	2302      	movs	r3, #2
 8005252:	e1f7      	b.n	8005644 <HAL_I2C_Master_Receive+0x440>
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	2201      	movs	r2, #1
 8005258:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f003 0301 	and.w	r3, r3, #1
 8005266:	2b01      	cmp	r3, #1
 8005268:	d007      	beq.n	800527a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	681a      	ldr	r2, [r3, #0]
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f042 0201 	orr.w	r2, r2, #1
 8005278:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	681a      	ldr	r2, [r3, #0]
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005288:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	2222      	movs	r2, #34	; 0x22
 800528e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	2210      	movs	r2, #16
 8005296:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	2200      	movs	r2, #0
 800529e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	687a      	ldr	r2, [r7, #4]
 80052a4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	893a      	ldrh	r2, [r7, #8]
 80052aa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052b0:	b29a      	uxth	r2, r3
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	4a5c      	ldr	r2, [pc, #368]	; (800542c <HAL_I2C_Master_Receive+0x228>)
 80052ba:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80052bc:	8979      	ldrh	r1, [r7, #10]
 80052be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80052c2:	68f8      	ldr	r0, [r7, #12]
 80052c4:	f000 fa46 	bl	8005754 <I2C_MasterRequestRead>
 80052c8:	4603      	mov	r3, r0
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d001      	beq.n	80052d2 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80052ce:	2301      	movs	r3, #1
 80052d0:	e1b8      	b.n	8005644 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d113      	bne.n	8005302 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80052da:	2300      	movs	r3, #0
 80052dc:	623b      	str	r3, [r7, #32]
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	695b      	ldr	r3, [r3, #20]
 80052e4:	623b      	str	r3, [r7, #32]
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	699b      	ldr	r3, [r3, #24]
 80052ec:	623b      	str	r3, [r7, #32]
 80052ee:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	681a      	ldr	r2, [r3, #0]
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052fe:	601a      	str	r2, [r3, #0]
 8005300:	e18c      	b.n	800561c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005306:	2b01      	cmp	r3, #1
 8005308:	d11b      	bne.n	8005342 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	681a      	ldr	r2, [r3, #0]
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005318:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800531a:	2300      	movs	r3, #0
 800531c:	61fb      	str	r3, [r7, #28]
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	695b      	ldr	r3, [r3, #20]
 8005324:	61fb      	str	r3, [r7, #28]
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	699b      	ldr	r3, [r3, #24]
 800532c:	61fb      	str	r3, [r7, #28]
 800532e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	681a      	ldr	r2, [r3, #0]
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800533e:	601a      	str	r2, [r3, #0]
 8005340:	e16c      	b.n	800561c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005346:	2b02      	cmp	r3, #2
 8005348:	d11b      	bne.n	8005382 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	681a      	ldr	r2, [r3, #0]
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005358:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	681a      	ldr	r2, [r3, #0]
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005368:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800536a:	2300      	movs	r3, #0
 800536c:	61bb      	str	r3, [r7, #24]
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	695b      	ldr	r3, [r3, #20]
 8005374:	61bb      	str	r3, [r7, #24]
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	699b      	ldr	r3, [r3, #24]
 800537c:	61bb      	str	r3, [r7, #24]
 800537e:	69bb      	ldr	r3, [r7, #24]
 8005380:	e14c      	b.n	800561c <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	681a      	ldr	r2, [r3, #0]
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005390:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005392:	2300      	movs	r3, #0
 8005394:	617b      	str	r3, [r7, #20]
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	695b      	ldr	r3, [r3, #20]
 800539c:	617b      	str	r3, [r7, #20]
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	699b      	ldr	r3, [r3, #24]
 80053a4:	617b      	str	r3, [r7, #20]
 80053a6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80053a8:	e138      	b.n	800561c <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053ae:	2b03      	cmp	r3, #3
 80053b0:	f200 80f1 	bhi.w	8005596 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053b8:	2b01      	cmp	r3, #1
 80053ba:	d123      	bne.n	8005404 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80053bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053be:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80053c0:	68f8      	ldr	r0, [r7, #12]
 80053c2:	f000 fbed 	bl	8005ba0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80053c6:	4603      	mov	r3, r0
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d001      	beq.n	80053d0 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80053cc:	2301      	movs	r3, #1
 80053ce:	e139      	b.n	8005644 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	691a      	ldr	r2, [r3, #16]
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053da:	b2d2      	uxtb	r2, r2
 80053dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053e2:	1c5a      	adds	r2, r3, #1
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053ec:	3b01      	subs	r3, #1
 80053ee:	b29a      	uxth	r2, r3
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053f8:	b29b      	uxth	r3, r3
 80053fa:	3b01      	subs	r3, #1
 80053fc:	b29a      	uxth	r2, r3
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005402:	e10b      	b.n	800561c <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005408:	2b02      	cmp	r3, #2
 800540a:	d14e      	bne.n	80054aa <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800540c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800540e:	9300      	str	r3, [sp, #0]
 8005410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005412:	2200      	movs	r2, #0
 8005414:	4906      	ldr	r1, [pc, #24]	; (8005430 <HAL_I2C_Master_Receive+0x22c>)
 8005416:	68f8      	ldr	r0, [r7, #12]
 8005418:	f000 fa6a 	bl	80058f0 <I2C_WaitOnFlagUntilTimeout>
 800541c:	4603      	mov	r3, r0
 800541e:	2b00      	cmp	r3, #0
 8005420:	d008      	beq.n	8005434 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8005422:	2301      	movs	r3, #1
 8005424:	e10e      	b.n	8005644 <HAL_I2C_Master_Receive+0x440>
 8005426:	bf00      	nop
 8005428:	00100002 	.word	0x00100002
 800542c:	ffff0000 	.word	0xffff0000
 8005430:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	681a      	ldr	r2, [r3, #0]
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005442:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	691a      	ldr	r2, [r3, #16]
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800544e:	b2d2      	uxtb	r2, r2
 8005450:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005456:	1c5a      	adds	r2, r3, #1
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005460:	3b01      	subs	r3, #1
 8005462:	b29a      	uxth	r2, r3
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800546c:	b29b      	uxth	r3, r3
 800546e:	3b01      	subs	r3, #1
 8005470:	b29a      	uxth	r2, r3
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	691a      	ldr	r2, [r3, #16]
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005480:	b2d2      	uxtb	r2, r2
 8005482:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005488:	1c5a      	adds	r2, r3, #1
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005492:	3b01      	subs	r3, #1
 8005494:	b29a      	uxth	r2, r3
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800549e:	b29b      	uxth	r3, r3
 80054a0:	3b01      	subs	r3, #1
 80054a2:	b29a      	uxth	r2, r3
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80054a8:	e0b8      	b.n	800561c <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80054aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ac:	9300      	str	r3, [sp, #0]
 80054ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054b0:	2200      	movs	r2, #0
 80054b2:	4966      	ldr	r1, [pc, #408]	; (800564c <HAL_I2C_Master_Receive+0x448>)
 80054b4:	68f8      	ldr	r0, [r7, #12]
 80054b6:	f000 fa1b 	bl	80058f0 <I2C_WaitOnFlagUntilTimeout>
 80054ba:	4603      	mov	r3, r0
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d001      	beq.n	80054c4 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80054c0:	2301      	movs	r3, #1
 80054c2:	e0bf      	b.n	8005644 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	681a      	ldr	r2, [r3, #0]
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80054d2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	691a      	ldr	r2, [r3, #16]
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054de:	b2d2      	uxtb	r2, r2
 80054e0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054e6:	1c5a      	adds	r2, r3, #1
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054f0:	3b01      	subs	r3, #1
 80054f2:	b29a      	uxth	r2, r3
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054fc:	b29b      	uxth	r3, r3
 80054fe:	3b01      	subs	r3, #1
 8005500:	b29a      	uxth	r2, r3
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005508:	9300      	str	r3, [sp, #0]
 800550a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800550c:	2200      	movs	r2, #0
 800550e:	494f      	ldr	r1, [pc, #316]	; (800564c <HAL_I2C_Master_Receive+0x448>)
 8005510:	68f8      	ldr	r0, [r7, #12]
 8005512:	f000 f9ed 	bl	80058f0 <I2C_WaitOnFlagUntilTimeout>
 8005516:	4603      	mov	r3, r0
 8005518:	2b00      	cmp	r3, #0
 800551a:	d001      	beq.n	8005520 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800551c:	2301      	movs	r3, #1
 800551e:	e091      	b.n	8005644 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	681a      	ldr	r2, [r3, #0]
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800552e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	691a      	ldr	r2, [r3, #16]
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800553a:	b2d2      	uxtb	r2, r2
 800553c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005542:	1c5a      	adds	r2, r3, #1
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800554c:	3b01      	subs	r3, #1
 800554e:	b29a      	uxth	r2, r3
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005558:	b29b      	uxth	r3, r3
 800555a:	3b01      	subs	r3, #1
 800555c:	b29a      	uxth	r2, r3
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	691a      	ldr	r2, [r3, #16]
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800556c:	b2d2      	uxtb	r2, r2
 800556e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005574:	1c5a      	adds	r2, r3, #1
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800557e:	3b01      	subs	r3, #1
 8005580:	b29a      	uxth	r2, r3
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800558a:	b29b      	uxth	r3, r3
 800558c:	3b01      	subs	r3, #1
 800558e:	b29a      	uxth	r2, r3
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005594:	e042      	b.n	800561c <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005596:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005598:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800559a:	68f8      	ldr	r0, [r7, #12]
 800559c:	f000 fb00 	bl	8005ba0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80055a0:	4603      	mov	r3, r0
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d001      	beq.n	80055aa <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80055a6:	2301      	movs	r3, #1
 80055a8:	e04c      	b.n	8005644 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	691a      	ldr	r2, [r3, #16]
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055b4:	b2d2      	uxtb	r2, r2
 80055b6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055bc:	1c5a      	adds	r2, r3, #1
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055c6:	3b01      	subs	r3, #1
 80055c8:	b29a      	uxth	r2, r3
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055d2:	b29b      	uxth	r3, r3
 80055d4:	3b01      	subs	r3, #1
 80055d6:	b29a      	uxth	r2, r3
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	695b      	ldr	r3, [r3, #20]
 80055e2:	f003 0304 	and.w	r3, r3, #4
 80055e6:	2b04      	cmp	r3, #4
 80055e8:	d118      	bne.n	800561c <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	691a      	ldr	r2, [r3, #16]
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055f4:	b2d2      	uxtb	r2, r2
 80055f6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055fc:	1c5a      	adds	r2, r3, #1
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005606:	3b01      	subs	r3, #1
 8005608:	b29a      	uxth	r2, r3
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005612:	b29b      	uxth	r3, r3
 8005614:	3b01      	subs	r3, #1
 8005616:	b29a      	uxth	r2, r3
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005620:	2b00      	cmp	r3, #0
 8005622:	f47f aec2 	bne.w	80053aa <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	2220      	movs	r2, #32
 800562a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	2200      	movs	r2, #0
 8005632:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	2200      	movs	r2, #0
 800563a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800563e:	2300      	movs	r3, #0
 8005640:	e000      	b.n	8005644 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8005642:	2302      	movs	r3, #2
  }
}
 8005644:	4618      	mov	r0, r3
 8005646:	3728      	adds	r7, #40	; 0x28
 8005648:	46bd      	mov	sp, r7
 800564a:	bd80      	pop	{r7, pc}
 800564c:	00010004 	.word	0x00010004

08005650 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005650:	b580      	push	{r7, lr}
 8005652:	b088      	sub	sp, #32
 8005654:	af02      	add	r7, sp, #8
 8005656:	60f8      	str	r0, [r7, #12]
 8005658:	607a      	str	r2, [r7, #4]
 800565a:	603b      	str	r3, [r7, #0]
 800565c:	460b      	mov	r3, r1
 800565e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005664:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005666:	697b      	ldr	r3, [r7, #20]
 8005668:	2b08      	cmp	r3, #8
 800566a:	d006      	beq.n	800567a <I2C_MasterRequestWrite+0x2a>
 800566c:	697b      	ldr	r3, [r7, #20]
 800566e:	2b01      	cmp	r3, #1
 8005670:	d003      	beq.n	800567a <I2C_MasterRequestWrite+0x2a>
 8005672:	697b      	ldr	r3, [r7, #20]
 8005674:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005678:	d108      	bne.n	800568c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	681a      	ldr	r2, [r3, #0]
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005688:	601a      	str	r2, [r3, #0]
 800568a:	e00b      	b.n	80056a4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005690:	2b12      	cmp	r3, #18
 8005692:	d107      	bne.n	80056a4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	681a      	ldr	r2, [r3, #0]
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80056a2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	9300      	str	r3, [sp, #0]
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2200      	movs	r2, #0
 80056ac:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80056b0:	68f8      	ldr	r0, [r7, #12]
 80056b2:	f000 f91d 	bl	80058f0 <I2C_WaitOnFlagUntilTimeout>
 80056b6:	4603      	mov	r3, r0
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d00d      	beq.n	80056d8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80056ca:	d103      	bne.n	80056d4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80056d2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80056d4:	2303      	movs	r3, #3
 80056d6:	e035      	b.n	8005744 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	691b      	ldr	r3, [r3, #16]
 80056dc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80056e0:	d108      	bne.n	80056f4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80056e2:	897b      	ldrh	r3, [r7, #10]
 80056e4:	b2db      	uxtb	r3, r3
 80056e6:	461a      	mov	r2, r3
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80056f0:	611a      	str	r2, [r3, #16]
 80056f2:	e01b      	b.n	800572c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80056f4:	897b      	ldrh	r3, [r7, #10]
 80056f6:	11db      	asrs	r3, r3, #7
 80056f8:	b2db      	uxtb	r3, r3
 80056fa:	f003 0306 	and.w	r3, r3, #6
 80056fe:	b2db      	uxtb	r3, r3
 8005700:	f063 030f 	orn	r3, r3, #15
 8005704:	b2da      	uxtb	r2, r3
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	687a      	ldr	r2, [r7, #4]
 8005710:	490e      	ldr	r1, [pc, #56]	; (800574c <I2C_MasterRequestWrite+0xfc>)
 8005712:	68f8      	ldr	r0, [r7, #12]
 8005714:	f000 f943 	bl	800599e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005718:	4603      	mov	r3, r0
 800571a:	2b00      	cmp	r3, #0
 800571c:	d001      	beq.n	8005722 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800571e:	2301      	movs	r3, #1
 8005720:	e010      	b.n	8005744 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005722:	897b      	ldrh	r3, [r7, #10]
 8005724:	b2da      	uxtb	r2, r3
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	687a      	ldr	r2, [r7, #4]
 8005730:	4907      	ldr	r1, [pc, #28]	; (8005750 <I2C_MasterRequestWrite+0x100>)
 8005732:	68f8      	ldr	r0, [r7, #12]
 8005734:	f000 f933 	bl	800599e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005738:	4603      	mov	r3, r0
 800573a:	2b00      	cmp	r3, #0
 800573c:	d001      	beq.n	8005742 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800573e:	2301      	movs	r3, #1
 8005740:	e000      	b.n	8005744 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005742:	2300      	movs	r3, #0
}
 8005744:	4618      	mov	r0, r3
 8005746:	3718      	adds	r7, #24
 8005748:	46bd      	mov	sp, r7
 800574a:	bd80      	pop	{r7, pc}
 800574c:	00010008 	.word	0x00010008
 8005750:	00010002 	.word	0x00010002

08005754 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005754:	b580      	push	{r7, lr}
 8005756:	b088      	sub	sp, #32
 8005758:	af02      	add	r7, sp, #8
 800575a:	60f8      	str	r0, [r7, #12]
 800575c:	607a      	str	r2, [r7, #4]
 800575e:	603b      	str	r3, [r7, #0]
 8005760:	460b      	mov	r3, r1
 8005762:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005768:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	681a      	ldr	r2, [r3, #0]
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005778:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800577a:	697b      	ldr	r3, [r7, #20]
 800577c:	2b08      	cmp	r3, #8
 800577e:	d006      	beq.n	800578e <I2C_MasterRequestRead+0x3a>
 8005780:	697b      	ldr	r3, [r7, #20]
 8005782:	2b01      	cmp	r3, #1
 8005784:	d003      	beq.n	800578e <I2C_MasterRequestRead+0x3a>
 8005786:	697b      	ldr	r3, [r7, #20]
 8005788:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800578c:	d108      	bne.n	80057a0 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	681a      	ldr	r2, [r3, #0]
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800579c:	601a      	str	r2, [r3, #0]
 800579e:	e00b      	b.n	80057b8 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057a4:	2b11      	cmp	r3, #17
 80057a6:	d107      	bne.n	80057b8 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	681a      	ldr	r2, [r3, #0]
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80057b6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	9300      	str	r3, [sp, #0]
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2200      	movs	r2, #0
 80057c0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80057c4:	68f8      	ldr	r0, [r7, #12]
 80057c6:	f000 f893 	bl	80058f0 <I2C_WaitOnFlagUntilTimeout>
 80057ca:	4603      	mov	r3, r0
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d00d      	beq.n	80057ec <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80057de:	d103      	bne.n	80057e8 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80057e6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80057e8:	2303      	movs	r3, #3
 80057ea:	e079      	b.n	80058e0 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	691b      	ldr	r3, [r3, #16]
 80057f0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80057f4:	d108      	bne.n	8005808 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80057f6:	897b      	ldrh	r3, [r7, #10]
 80057f8:	b2db      	uxtb	r3, r3
 80057fa:	f043 0301 	orr.w	r3, r3, #1
 80057fe:	b2da      	uxtb	r2, r3
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	611a      	str	r2, [r3, #16]
 8005806:	e05f      	b.n	80058c8 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005808:	897b      	ldrh	r3, [r7, #10]
 800580a:	11db      	asrs	r3, r3, #7
 800580c:	b2db      	uxtb	r3, r3
 800580e:	f003 0306 	and.w	r3, r3, #6
 8005812:	b2db      	uxtb	r3, r3
 8005814:	f063 030f 	orn	r3, r3, #15
 8005818:	b2da      	uxtb	r2, r3
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	687a      	ldr	r2, [r7, #4]
 8005824:	4930      	ldr	r1, [pc, #192]	; (80058e8 <I2C_MasterRequestRead+0x194>)
 8005826:	68f8      	ldr	r0, [r7, #12]
 8005828:	f000 f8b9 	bl	800599e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800582c:	4603      	mov	r3, r0
 800582e:	2b00      	cmp	r3, #0
 8005830:	d001      	beq.n	8005836 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8005832:	2301      	movs	r3, #1
 8005834:	e054      	b.n	80058e0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005836:	897b      	ldrh	r3, [r7, #10]
 8005838:	b2da      	uxtb	r2, r3
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	687a      	ldr	r2, [r7, #4]
 8005844:	4929      	ldr	r1, [pc, #164]	; (80058ec <I2C_MasterRequestRead+0x198>)
 8005846:	68f8      	ldr	r0, [r7, #12]
 8005848:	f000 f8a9 	bl	800599e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800584c:	4603      	mov	r3, r0
 800584e:	2b00      	cmp	r3, #0
 8005850:	d001      	beq.n	8005856 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8005852:	2301      	movs	r3, #1
 8005854:	e044      	b.n	80058e0 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005856:	2300      	movs	r3, #0
 8005858:	613b      	str	r3, [r7, #16]
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	695b      	ldr	r3, [r3, #20]
 8005860:	613b      	str	r3, [r7, #16]
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	699b      	ldr	r3, [r3, #24]
 8005868:	613b      	str	r3, [r7, #16]
 800586a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	681a      	ldr	r2, [r3, #0]
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800587a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	9300      	str	r3, [sp, #0]
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2200      	movs	r2, #0
 8005884:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005888:	68f8      	ldr	r0, [r7, #12]
 800588a:	f000 f831 	bl	80058f0 <I2C_WaitOnFlagUntilTimeout>
 800588e:	4603      	mov	r3, r0
 8005890:	2b00      	cmp	r3, #0
 8005892:	d00d      	beq.n	80058b0 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800589e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80058a2:	d103      	bne.n	80058ac <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80058aa:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80058ac:	2303      	movs	r3, #3
 80058ae:	e017      	b.n	80058e0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80058b0:	897b      	ldrh	r3, [r7, #10]
 80058b2:	11db      	asrs	r3, r3, #7
 80058b4:	b2db      	uxtb	r3, r3
 80058b6:	f003 0306 	and.w	r3, r3, #6
 80058ba:	b2db      	uxtb	r3, r3
 80058bc:	f063 030e 	orn	r3, r3, #14
 80058c0:	b2da      	uxtb	r2, r3
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	687a      	ldr	r2, [r7, #4]
 80058cc:	4907      	ldr	r1, [pc, #28]	; (80058ec <I2C_MasterRequestRead+0x198>)
 80058ce:	68f8      	ldr	r0, [r7, #12]
 80058d0:	f000 f865 	bl	800599e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80058d4:	4603      	mov	r3, r0
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d001      	beq.n	80058de <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80058da:	2301      	movs	r3, #1
 80058dc:	e000      	b.n	80058e0 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80058de:	2300      	movs	r3, #0
}
 80058e0:	4618      	mov	r0, r3
 80058e2:	3718      	adds	r7, #24
 80058e4:	46bd      	mov	sp, r7
 80058e6:	bd80      	pop	{r7, pc}
 80058e8:	00010008 	.word	0x00010008
 80058ec:	00010002 	.word	0x00010002

080058f0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b084      	sub	sp, #16
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	60f8      	str	r0, [r7, #12]
 80058f8:	60b9      	str	r1, [r7, #8]
 80058fa:	603b      	str	r3, [r7, #0]
 80058fc:	4613      	mov	r3, r2
 80058fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005900:	e025      	b.n	800594e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005908:	d021      	beq.n	800594e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800590a:	f7fd fda1 	bl	8003450 <HAL_GetTick>
 800590e:	4602      	mov	r2, r0
 8005910:	69bb      	ldr	r3, [r7, #24]
 8005912:	1ad3      	subs	r3, r2, r3
 8005914:	683a      	ldr	r2, [r7, #0]
 8005916:	429a      	cmp	r2, r3
 8005918:	d302      	bcc.n	8005920 <I2C_WaitOnFlagUntilTimeout+0x30>
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d116      	bne.n	800594e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	2200      	movs	r2, #0
 8005924:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	2220      	movs	r2, #32
 800592a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	2200      	movs	r2, #0
 8005932:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800593a:	f043 0220 	orr.w	r2, r3, #32
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	2200      	movs	r2, #0
 8005946:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800594a:	2301      	movs	r3, #1
 800594c:	e023      	b.n	8005996 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800594e:	68bb      	ldr	r3, [r7, #8]
 8005950:	0c1b      	lsrs	r3, r3, #16
 8005952:	b2db      	uxtb	r3, r3
 8005954:	2b01      	cmp	r3, #1
 8005956:	d10d      	bne.n	8005974 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	695b      	ldr	r3, [r3, #20]
 800595e:	43da      	mvns	r2, r3
 8005960:	68bb      	ldr	r3, [r7, #8]
 8005962:	4013      	ands	r3, r2
 8005964:	b29b      	uxth	r3, r3
 8005966:	2b00      	cmp	r3, #0
 8005968:	bf0c      	ite	eq
 800596a:	2301      	moveq	r3, #1
 800596c:	2300      	movne	r3, #0
 800596e:	b2db      	uxtb	r3, r3
 8005970:	461a      	mov	r2, r3
 8005972:	e00c      	b.n	800598e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	699b      	ldr	r3, [r3, #24]
 800597a:	43da      	mvns	r2, r3
 800597c:	68bb      	ldr	r3, [r7, #8]
 800597e:	4013      	ands	r3, r2
 8005980:	b29b      	uxth	r3, r3
 8005982:	2b00      	cmp	r3, #0
 8005984:	bf0c      	ite	eq
 8005986:	2301      	moveq	r3, #1
 8005988:	2300      	movne	r3, #0
 800598a:	b2db      	uxtb	r3, r3
 800598c:	461a      	mov	r2, r3
 800598e:	79fb      	ldrb	r3, [r7, #7]
 8005990:	429a      	cmp	r2, r3
 8005992:	d0b6      	beq.n	8005902 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005994:	2300      	movs	r3, #0
}
 8005996:	4618      	mov	r0, r3
 8005998:	3710      	adds	r7, #16
 800599a:	46bd      	mov	sp, r7
 800599c:	bd80      	pop	{r7, pc}

0800599e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800599e:	b580      	push	{r7, lr}
 80059a0:	b084      	sub	sp, #16
 80059a2:	af00      	add	r7, sp, #0
 80059a4:	60f8      	str	r0, [r7, #12]
 80059a6:	60b9      	str	r1, [r7, #8]
 80059a8:	607a      	str	r2, [r7, #4]
 80059aa:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80059ac:	e051      	b.n	8005a52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	695b      	ldr	r3, [r3, #20]
 80059b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80059b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80059bc:	d123      	bne.n	8005a06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	681a      	ldr	r2, [r3, #0]
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80059cc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80059d6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	2200      	movs	r2, #0
 80059dc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	2220      	movs	r2, #32
 80059e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	2200      	movs	r2, #0
 80059ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059f2:	f043 0204 	orr.w	r2, r3, #4
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	2200      	movs	r2, #0
 80059fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005a02:	2301      	movs	r3, #1
 8005a04:	e046      	b.n	8005a94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a0c:	d021      	beq.n	8005a52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a0e:	f7fd fd1f 	bl	8003450 <HAL_GetTick>
 8005a12:	4602      	mov	r2, r0
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	1ad3      	subs	r3, r2, r3
 8005a18:	687a      	ldr	r2, [r7, #4]
 8005a1a:	429a      	cmp	r2, r3
 8005a1c:	d302      	bcc.n	8005a24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d116      	bne.n	8005a52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	2200      	movs	r2, #0
 8005a28:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	2220      	movs	r2, #32
 8005a2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	2200      	movs	r2, #0
 8005a36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a3e:	f043 0220 	orr.w	r2, r3, #32
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	2200      	movs	r2, #0
 8005a4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005a4e:	2301      	movs	r3, #1
 8005a50:	e020      	b.n	8005a94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005a52:	68bb      	ldr	r3, [r7, #8]
 8005a54:	0c1b      	lsrs	r3, r3, #16
 8005a56:	b2db      	uxtb	r3, r3
 8005a58:	2b01      	cmp	r3, #1
 8005a5a:	d10c      	bne.n	8005a76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	695b      	ldr	r3, [r3, #20]
 8005a62:	43da      	mvns	r2, r3
 8005a64:	68bb      	ldr	r3, [r7, #8]
 8005a66:	4013      	ands	r3, r2
 8005a68:	b29b      	uxth	r3, r3
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	bf14      	ite	ne
 8005a6e:	2301      	movne	r3, #1
 8005a70:	2300      	moveq	r3, #0
 8005a72:	b2db      	uxtb	r3, r3
 8005a74:	e00b      	b.n	8005a8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	699b      	ldr	r3, [r3, #24]
 8005a7c:	43da      	mvns	r2, r3
 8005a7e:	68bb      	ldr	r3, [r7, #8]
 8005a80:	4013      	ands	r3, r2
 8005a82:	b29b      	uxth	r3, r3
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	bf14      	ite	ne
 8005a88:	2301      	movne	r3, #1
 8005a8a:	2300      	moveq	r3, #0
 8005a8c:	b2db      	uxtb	r3, r3
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d18d      	bne.n	80059ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005a92:	2300      	movs	r3, #0
}
 8005a94:	4618      	mov	r0, r3
 8005a96:	3710      	adds	r7, #16
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	bd80      	pop	{r7, pc}

08005a9c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b084      	sub	sp, #16
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	60f8      	str	r0, [r7, #12]
 8005aa4:	60b9      	str	r1, [r7, #8]
 8005aa6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005aa8:	e02d      	b.n	8005b06 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005aaa:	68f8      	ldr	r0, [r7, #12]
 8005aac:	f000 f8ce 	bl	8005c4c <I2C_IsAcknowledgeFailed>
 8005ab0:	4603      	mov	r3, r0
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d001      	beq.n	8005aba <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005ab6:	2301      	movs	r3, #1
 8005ab8:	e02d      	b.n	8005b16 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005aba:	68bb      	ldr	r3, [r7, #8]
 8005abc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ac0:	d021      	beq.n	8005b06 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ac2:	f7fd fcc5 	bl	8003450 <HAL_GetTick>
 8005ac6:	4602      	mov	r2, r0
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	1ad3      	subs	r3, r2, r3
 8005acc:	68ba      	ldr	r2, [r7, #8]
 8005ace:	429a      	cmp	r2, r3
 8005ad0:	d302      	bcc.n	8005ad8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005ad2:	68bb      	ldr	r3, [r7, #8]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d116      	bne.n	8005b06 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	2200      	movs	r2, #0
 8005adc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	2220      	movs	r2, #32
 8005ae2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	2200      	movs	r2, #0
 8005aea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005af2:	f043 0220 	orr.w	r2, r3, #32
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	2200      	movs	r2, #0
 8005afe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005b02:	2301      	movs	r3, #1
 8005b04:	e007      	b.n	8005b16 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	695b      	ldr	r3, [r3, #20]
 8005b0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b10:	2b80      	cmp	r3, #128	; 0x80
 8005b12:	d1ca      	bne.n	8005aaa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005b14:	2300      	movs	r3, #0
}
 8005b16:	4618      	mov	r0, r3
 8005b18:	3710      	adds	r7, #16
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	bd80      	pop	{r7, pc}

08005b1e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005b1e:	b580      	push	{r7, lr}
 8005b20:	b084      	sub	sp, #16
 8005b22:	af00      	add	r7, sp, #0
 8005b24:	60f8      	str	r0, [r7, #12]
 8005b26:	60b9      	str	r1, [r7, #8]
 8005b28:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005b2a:	e02d      	b.n	8005b88 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005b2c:	68f8      	ldr	r0, [r7, #12]
 8005b2e:	f000 f88d 	bl	8005c4c <I2C_IsAcknowledgeFailed>
 8005b32:	4603      	mov	r3, r0
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d001      	beq.n	8005b3c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005b38:	2301      	movs	r3, #1
 8005b3a:	e02d      	b.n	8005b98 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b3c:	68bb      	ldr	r3, [r7, #8]
 8005b3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b42:	d021      	beq.n	8005b88 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b44:	f7fd fc84 	bl	8003450 <HAL_GetTick>
 8005b48:	4602      	mov	r2, r0
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	1ad3      	subs	r3, r2, r3
 8005b4e:	68ba      	ldr	r2, [r7, #8]
 8005b50:	429a      	cmp	r2, r3
 8005b52:	d302      	bcc.n	8005b5a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005b54:	68bb      	ldr	r3, [r7, #8]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d116      	bne.n	8005b88 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	2220      	movs	r2, #32
 8005b64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b74:	f043 0220 	orr.w	r2, r3, #32
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	2200      	movs	r2, #0
 8005b80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005b84:	2301      	movs	r3, #1
 8005b86:	e007      	b.n	8005b98 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	695b      	ldr	r3, [r3, #20]
 8005b8e:	f003 0304 	and.w	r3, r3, #4
 8005b92:	2b04      	cmp	r3, #4
 8005b94:	d1ca      	bne.n	8005b2c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005b96:	2300      	movs	r3, #0
}
 8005b98:	4618      	mov	r0, r3
 8005b9a:	3710      	adds	r7, #16
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	bd80      	pop	{r7, pc}

08005ba0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b084      	sub	sp, #16
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	60f8      	str	r0, [r7, #12]
 8005ba8:	60b9      	str	r1, [r7, #8]
 8005baa:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005bac:	e042      	b.n	8005c34 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	695b      	ldr	r3, [r3, #20]
 8005bb4:	f003 0310 	and.w	r3, r3, #16
 8005bb8:	2b10      	cmp	r3, #16
 8005bba:	d119      	bne.n	8005bf0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f06f 0210 	mvn.w	r2, #16
 8005bc4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	2200      	movs	r2, #0
 8005bca:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	2220      	movs	r2, #32
 8005bd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	2200      	movs	r2, #0
 8005be8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005bec:	2301      	movs	r3, #1
 8005bee:	e029      	b.n	8005c44 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005bf0:	f7fd fc2e 	bl	8003450 <HAL_GetTick>
 8005bf4:	4602      	mov	r2, r0
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	1ad3      	subs	r3, r2, r3
 8005bfa:	68ba      	ldr	r2, [r7, #8]
 8005bfc:	429a      	cmp	r2, r3
 8005bfe:	d302      	bcc.n	8005c06 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005c00:	68bb      	ldr	r3, [r7, #8]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d116      	bne.n	8005c34 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	2200      	movs	r2, #0
 8005c0a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	2220      	movs	r2, #32
 8005c10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	2200      	movs	r2, #0
 8005c18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c20:	f043 0220 	orr.w	r2, r3, #32
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005c30:	2301      	movs	r3, #1
 8005c32:	e007      	b.n	8005c44 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	695b      	ldr	r3, [r3, #20]
 8005c3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c3e:	2b40      	cmp	r3, #64	; 0x40
 8005c40:	d1b5      	bne.n	8005bae <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005c42:	2300      	movs	r3, #0
}
 8005c44:	4618      	mov	r0, r3
 8005c46:	3710      	adds	r7, #16
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	bd80      	pop	{r7, pc}

08005c4c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005c4c:	b480      	push	{r7}
 8005c4e:	b083      	sub	sp, #12
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	695b      	ldr	r3, [r3, #20]
 8005c5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c62:	d11b      	bne.n	8005c9c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005c6c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	2200      	movs	r2, #0
 8005c72:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2220      	movs	r2, #32
 8005c78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2200      	movs	r2, #0
 8005c80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c88:	f043 0204 	orr.w	r2, r3, #4
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2200      	movs	r2, #0
 8005c94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005c98:	2301      	movs	r3, #1
 8005c9a:	e000      	b.n	8005c9e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005c9c:	2300      	movs	r3, #0
}
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	370c      	adds	r7, #12
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca8:	4770      	bx	lr

08005caa <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005caa:	b480      	push	{r7}
 8005cac:	b083      	sub	sp, #12
 8005cae:	af00      	add	r7, sp, #0
 8005cb0:	6078      	str	r0, [r7, #4]
 8005cb2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005cba:	b2db      	uxtb	r3, r3
 8005cbc:	2b20      	cmp	r3, #32
 8005cbe:	d129      	bne.n	8005d14 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2224      	movs	r2, #36	; 0x24
 8005cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	681a      	ldr	r2, [r3, #0]
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f022 0201 	bic.w	r2, r2, #1
 8005cd6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f022 0210 	bic.w	r2, r2, #16
 8005ce6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	683a      	ldr	r2, [r7, #0]
 8005cf4:	430a      	orrs	r2, r1
 8005cf6:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	681a      	ldr	r2, [r3, #0]
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f042 0201 	orr.w	r2, r2, #1
 8005d06:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2220      	movs	r2, #32
 8005d0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005d10:	2300      	movs	r3, #0
 8005d12:	e000      	b.n	8005d16 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8005d14:	2302      	movs	r3, #2
  }
}
 8005d16:	4618      	mov	r0, r3
 8005d18:	370c      	adds	r7, #12
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d20:	4770      	bx	lr

08005d22 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005d22:	b480      	push	{r7}
 8005d24:	b085      	sub	sp, #20
 8005d26:	af00      	add	r7, sp, #0
 8005d28:	6078      	str	r0, [r7, #4]
 8005d2a:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d36:	b2db      	uxtb	r3, r3
 8005d38:	2b20      	cmp	r3, #32
 8005d3a:	d12a      	bne.n	8005d92 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2224      	movs	r2, #36	; 0x24
 8005d40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	681a      	ldr	r2, [r3, #0]
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f022 0201 	bic.w	r2, r2, #1
 8005d52:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d5a:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8005d5c:	89fb      	ldrh	r3, [r7, #14]
 8005d5e:	f023 030f 	bic.w	r3, r3, #15
 8005d62:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	b29a      	uxth	r2, r3
 8005d68:	89fb      	ldrh	r3, [r7, #14]
 8005d6a:	4313      	orrs	r3, r2
 8005d6c:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	89fa      	ldrh	r2, [r7, #14]
 8005d74:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	681a      	ldr	r2, [r3, #0]
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f042 0201 	orr.w	r2, r2, #1
 8005d84:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	2220      	movs	r2, #32
 8005d8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005d8e:	2300      	movs	r3, #0
 8005d90:	e000      	b.n	8005d94 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8005d92:	2302      	movs	r3, #2
  }
}
 8005d94:	4618      	mov	r0, r3
 8005d96:	3714      	adds	r7, #20
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9e:	4770      	bx	lr

08005da0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b086      	sub	sp, #24
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d101      	bne.n	8005db2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005dae:	2301      	movs	r3, #1
 8005db0:	e25b      	b.n	800626a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f003 0301 	and.w	r3, r3, #1
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d075      	beq.n	8005eaa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005dbe:	4ba3      	ldr	r3, [pc, #652]	; (800604c <HAL_RCC_OscConfig+0x2ac>)
 8005dc0:	689b      	ldr	r3, [r3, #8]
 8005dc2:	f003 030c 	and.w	r3, r3, #12
 8005dc6:	2b04      	cmp	r3, #4
 8005dc8:	d00c      	beq.n	8005de4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005dca:	4ba0      	ldr	r3, [pc, #640]	; (800604c <HAL_RCC_OscConfig+0x2ac>)
 8005dcc:	689b      	ldr	r3, [r3, #8]
 8005dce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005dd2:	2b08      	cmp	r3, #8
 8005dd4:	d112      	bne.n	8005dfc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005dd6:	4b9d      	ldr	r3, [pc, #628]	; (800604c <HAL_RCC_OscConfig+0x2ac>)
 8005dd8:	685b      	ldr	r3, [r3, #4]
 8005dda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005dde:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005de2:	d10b      	bne.n	8005dfc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005de4:	4b99      	ldr	r3, [pc, #612]	; (800604c <HAL_RCC_OscConfig+0x2ac>)
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d05b      	beq.n	8005ea8 <HAL_RCC_OscConfig+0x108>
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	685b      	ldr	r3, [r3, #4]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d157      	bne.n	8005ea8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005df8:	2301      	movs	r3, #1
 8005dfa:	e236      	b.n	800626a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	685b      	ldr	r3, [r3, #4]
 8005e00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e04:	d106      	bne.n	8005e14 <HAL_RCC_OscConfig+0x74>
 8005e06:	4b91      	ldr	r3, [pc, #580]	; (800604c <HAL_RCC_OscConfig+0x2ac>)
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	4a90      	ldr	r2, [pc, #576]	; (800604c <HAL_RCC_OscConfig+0x2ac>)
 8005e0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e10:	6013      	str	r3, [r2, #0]
 8005e12:	e01d      	b.n	8005e50 <HAL_RCC_OscConfig+0xb0>
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	685b      	ldr	r3, [r3, #4]
 8005e18:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005e1c:	d10c      	bne.n	8005e38 <HAL_RCC_OscConfig+0x98>
 8005e1e:	4b8b      	ldr	r3, [pc, #556]	; (800604c <HAL_RCC_OscConfig+0x2ac>)
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	4a8a      	ldr	r2, [pc, #552]	; (800604c <HAL_RCC_OscConfig+0x2ac>)
 8005e24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005e28:	6013      	str	r3, [r2, #0]
 8005e2a:	4b88      	ldr	r3, [pc, #544]	; (800604c <HAL_RCC_OscConfig+0x2ac>)
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	4a87      	ldr	r2, [pc, #540]	; (800604c <HAL_RCC_OscConfig+0x2ac>)
 8005e30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e34:	6013      	str	r3, [r2, #0]
 8005e36:	e00b      	b.n	8005e50 <HAL_RCC_OscConfig+0xb0>
 8005e38:	4b84      	ldr	r3, [pc, #528]	; (800604c <HAL_RCC_OscConfig+0x2ac>)
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	4a83      	ldr	r2, [pc, #524]	; (800604c <HAL_RCC_OscConfig+0x2ac>)
 8005e3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e42:	6013      	str	r3, [r2, #0]
 8005e44:	4b81      	ldr	r3, [pc, #516]	; (800604c <HAL_RCC_OscConfig+0x2ac>)
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	4a80      	ldr	r2, [pc, #512]	; (800604c <HAL_RCC_OscConfig+0x2ac>)
 8005e4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005e4e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	685b      	ldr	r3, [r3, #4]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d013      	beq.n	8005e80 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e58:	f7fd fafa 	bl	8003450 <HAL_GetTick>
 8005e5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e5e:	e008      	b.n	8005e72 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005e60:	f7fd faf6 	bl	8003450 <HAL_GetTick>
 8005e64:	4602      	mov	r2, r0
 8005e66:	693b      	ldr	r3, [r7, #16]
 8005e68:	1ad3      	subs	r3, r2, r3
 8005e6a:	2b64      	cmp	r3, #100	; 0x64
 8005e6c:	d901      	bls.n	8005e72 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005e6e:	2303      	movs	r3, #3
 8005e70:	e1fb      	b.n	800626a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e72:	4b76      	ldr	r3, [pc, #472]	; (800604c <HAL_RCC_OscConfig+0x2ac>)
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d0f0      	beq.n	8005e60 <HAL_RCC_OscConfig+0xc0>
 8005e7e:	e014      	b.n	8005eaa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e80:	f7fd fae6 	bl	8003450 <HAL_GetTick>
 8005e84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005e86:	e008      	b.n	8005e9a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005e88:	f7fd fae2 	bl	8003450 <HAL_GetTick>
 8005e8c:	4602      	mov	r2, r0
 8005e8e:	693b      	ldr	r3, [r7, #16]
 8005e90:	1ad3      	subs	r3, r2, r3
 8005e92:	2b64      	cmp	r3, #100	; 0x64
 8005e94:	d901      	bls.n	8005e9a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005e96:	2303      	movs	r3, #3
 8005e98:	e1e7      	b.n	800626a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005e9a:	4b6c      	ldr	r3, [pc, #432]	; (800604c <HAL_RCC_OscConfig+0x2ac>)
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d1f0      	bne.n	8005e88 <HAL_RCC_OscConfig+0xe8>
 8005ea6:	e000      	b.n	8005eaa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ea8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f003 0302 	and.w	r3, r3, #2
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d063      	beq.n	8005f7e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005eb6:	4b65      	ldr	r3, [pc, #404]	; (800604c <HAL_RCC_OscConfig+0x2ac>)
 8005eb8:	689b      	ldr	r3, [r3, #8]
 8005eba:	f003 030c 	and.w	r3, r3, #12
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d00b      	beq.n	8005eda <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005ec2:	4b62      	ldr	r3, [pc, #392]	; (800604c <HAL_RCC_OscConfig+0x2ac>)
 8005ec4:	689b      	ldr	r3, [r3, #8]
 8005ec6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005eca:	2b08      	cmp	r3, #8
 8005ecc:	d11c      	bne.n	8005f08 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005ece:	4b5f      	ldr	r3, [pc, #380]	; (800604c <HAL_RCC_OscConfig+0x2ac>)
 8005ed0:	685b      	ldr	r3, [r3, #4]
 8005ed2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d116      	bne.n	8005f08 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005eda:	4b5c      	ldr	r3, [pc, #368]	; (800604c <HAL_RCC_OscConfig+0x2ac>)
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f003 0302 	and.w	r3, r3, #2
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d005      	beq.n	8005ef2 <HAL_RCC_OscConfig+0x152>
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	68db      	ldr	r3, [r3, #12]
 8005eea:	2b01      	cmp	r3, #1
 8005eec:	d001      	beq.n	8005ef2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005eee:	2301      	movs	r3, #1
 8005ef0:	e1bb      	b.n	800626a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ef2:	4b56      	ldr	r3, [pc, #344]	; (800604c <HAL_RCC_OscConfig+0x2ac>)
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	691b      	ldr	r3, [r3, #16]
 8005efe:	00db      	lsls	r3, r3, #3
 8005f00:	4952      	ldr	r1, [pc, #328]	; (800604c <HAL_RCC_OscConfig+0x2ac>)
 8005f02:	4313      	orrs	r3, r2
 8005f04:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005f06:	e03a      	b.n	8005f7e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	68db      	ldr	r3, [r3, #12]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d020      	beq.n	8005f52 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005f10:	4b4f      	ldr	r3, [pc, #316]	; (8006050 <HAL_RCC_OscConfig+0x2b0>)
 8005f12:	2201      	movs	r2, #1
 8005f14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f16:	f7fd fa9b 	bl	8003450 <HAL_GetTick>
 8005f1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f1c:	e008      	b.n	8005f30 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005f1e:	f7fd fa97 	bl	8003450 <HAL_GetTick>
 8005f22:	4602      	mov	r2, r0
 8005f24:	693b      	ldr	r3, [r7, #16]
 8005f26:	1ad3      	subs	r3, r2, r3
 8005f28:	2b02      	cmp	r3, #2
 8005f2a:	d901      	bls.n	8005f30 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005f2c:	2303      	movs	r3, #3
 8005f2e:	e19c      	b.n	800626a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f30:	4b46      	ldr	r3, [pc, #280]	; (800604c <HAL_RCC_OscConfig+0x2ac>)
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f003 0302 	and.w	r3, r3, #2
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d0f0      	beq.n	8005f1e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f3c:	4b43      	ldr	r3, [pc, #268]	; (800604c <HAL_RCC_OscConfig+0x2ac>)
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	691b      	ldr	r3, [r3, #16]
 8005f48:	00db      	lsls	r3, r3, #3
 8005f4a:	4940      	ldr	r1, [pc, #256]	; (800604c <HAL_RCC_OscConfig+0x2ac>)
 8005f4c:	4313      	orrs	r3, r2
 8005f4e:	600b      	str	r3, [r1, #0]
 8005f50:	e015      	b.n	8005f7e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005f52:	4b3f      	ldr	r3, [pc, #252]	; (8006050 <HAL_RCC_OscConfig+0x2b0>)
 8005f54:	2200      	movs	r2, #0
 8005f56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f58:	f7fd fa7a 	bl	8003450 <HAL_GetTick>
 8005f5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005f5e:	e008      	b.n	8005f72 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005f60:	f7fd fa76 	bl	8003450 <HAL_GetTick>
 8005f64:	4602      	mov	r2, r0
 8005f66:	693b      	ldr	r3, [r7, #16]
 8005f68:	1ad3      	subs	r3, r2, r3
 8005f6a:	2b02      	cmp	r3, #2
 8005f6c:	d901      	bls.n	8005f72 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005f6e:	2303      	movs	r3, #3
 8005f70:	e17b      	b.n	800626a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005f72:	4b36      	ldr	r3, [pc, #216]	; (800604c <HAL_RCC_OscConfig+0x2ac>)
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f003 0302 	and.w	r3, r3, #2
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d1f0      	bne.n	8005f60 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f003 0308 	and.w	r3, r3, #8
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d030      	beq.n	8005fec <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	695b      	ldr	r3, [r3, #20]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d016      	beq.n	8005fc0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005f92:	4b30      	ldr	r3, [pc, #192]	; (8006054 <HAL_RCC_OscConfig+0x2b4>)
 8005f94:	2201      	movs	r2, #1
 8005f96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f98:	f7fd fa5a 	bl	8003450 <HAL_GetTick>
 8005f9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005f9e:	e008      	b.n	8005fb2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005fa0:	f7fd fa56 	bl	8003450 <HAL_GetTick>
 8005fa4:	4602      	mov	r2, r0
 8005fa6:	693b      	ldr	r3, [r7, #16]
 8005fa8:	1ad3      	subs	r3, r2, r3
 8005faa:	2b02      	cmp	r3, #2
 8005fac:	d901      	bls.n	8005fb2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005fae:	2303      	movs	r3, #3
 8005fb0:	e15b      	b.n	800626a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005fb2:	4b26      	ldr	r3, [pc, #152]	; (800604c <HAL_RCC_OscConfig+0x2ac>)
 8005fb4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005fb6:	f003 0302 	and.w	r3, r3, #2
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d0f0      	beq.n	8005fa0 <HAL_RCC_OscConfig+0x200>
 8005fbe:	e015      	b.n	8005fec <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005fc0:	4b24      	ldr	r3, [pc, #144]	; (8006054 <HAL_RCC_OscConfig+0x2b4>)
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005fc6:	f7fd fa43 	bl	8003450 <HAL_GetTick>
 8005fca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005fcc:	e008      	b.n	8005fe0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005fce:	f7fd fa3f 	bl	8003450 <HAL_GetTick>
 8005fd2:	4602      	mov	r2, r0
 8005fd4:	693b      	ldr	r3, [r7, #16]
 8005fd6:	1ad3      	subs	r3, r2, r3
 8005fd8:	2b02      	cmp	r3, #2
 8005fda:	d901      	bls.n	8005fe0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005fdc:	2303      	movs	r3, #3
 8005fde:	e144      	b.n	800626a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005fe0:	4b1a      	ldr	r3, [pc, #104]	; (800604c <HAL_RCC_OscConfig+0x2ac>)
 8005fe2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005fe4:	f003 0302 	and.w	r3, r3, #2
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d1f0      	bne.n	8005fce <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f003 0304 	and.w	r3, r3, #4
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	f000 80a0 	beq.w	800613a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005ffe:	4b13      	ldr	r3, [pc, #76]	; (800604c <HAL_RCC_OscConfig+0x2ac>)
 8006000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006002:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006006:	2b00      	cmp	r3, #0
 8006008:	d10f      	bne.n	800602a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800600a:	2300      	movs	r3, #0
 800600c:	60bb      	str	r3, [r7, #8]
 800600e:	4b0f      	ldr	r3, [pc, #60]	; (800604c <HAL_RCC_OscConfig+0x2ac>)
 8006010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006012:	4a0e      	ldr	r2, [pc, #56]	; (800604c <HAL_RCC_OscConfig+0x2ac>)
 8006014:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006018:	6413      	str	r3, [r2, #64]	; 0x40
 800601a:	4b0c      	ldr	r3, [pc, #48]	; (800604c <HAL_RCC_OscConfig+0x2ac>)
 800601c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800601e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006022:	60bb      	str	r3, [r7, #8]
 8006024:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006026:	2301      	movs	r3, #1
 8006028:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800602a:	4b0b      	ldr	r3, [pc, #44]	; (8006058 <HAL_RCC_OscConfig+0x2b8>)
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006032:	2b00      	cmp	r3, #0
 8006034:	d121      	bne.n	800607a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006036:	4b08      	ldr	r3, [pc, #32]	; (8006058 <HAL_RCC_OscConfig+0x2b8>)
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	4a07      	ldr	r2, [pc, #28]	; (8006058 <HAL_RCC_OscConfig+0x2b8>)
 800603c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006040:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006042:	f7fd fa05 	bl	8003450 <HAL_GetTick>
 8006046:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006048:	e011      	b.n	800606e <HAL_RCC_OscConfig+0x2ce>
 800604a:	bf00      	nop
 800604c:	40023800 	.word	0x40023800
 8006050:	42470000 	.word	0x42470000
 8006054:	42470e80 	.word	0x42470e80
 8006058:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800605c:	f7fd f9f8 	bl	8003450 <HAL_GetTick>
 8006060:	4602      	mov	r2, r0
 8006062:	693b      	ldr	r3, [r7, #16]
 8006064:	1ad3      	subs	r3, r2, r3
 8006066:	2b02      	cmp	r3, #2
 8006068:	d901      	bls.n	800606e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800606a:	2303      	movs	r3, #3
 800606c:	e0fd      	b.n	800626a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800606e:	4b81      	ldr	r3, [pc, #516]	; (8006274 <HAL_RCC_OscConfig+0x4d4>)
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006076:	2b00      	cmp	r3, #0
 8006078:	d0f0      	beq.n	800605c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	689b      	ldr	r3, [r3, #8]
 800607e:	2b01      	cmp	r3, #1
 8006080:	d106      	bne.n	8006090 <HAL_RCC_OscConfig+0x2f0>
 8006082:	4b7d      	ldr	r3, [pc, #500]	; (8006278 <HAL_RCC_OscConfig+0x4d8>)
 8006084:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006086:	4a7c      	ldr	r2, [pc, #496]	; (8006278 <HAL_RCC_OscConfig+0x4d8>)
 8006088:	f043 0301 	orr.w	r3, r3, #1
 800608c:	6713      	str	r3, [r2, #112]	; 0x70
 800608e:	e01c      	b.n	80060ca <HAL_RCC_OscConfig+0x32a>
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	689b      	ldr	r3, [r3, #8]
 8006094:	2b05      	cmp	r3, #5
 8006096:	d10c      	bne.n	80060b2 <HAL_RCC_OscConfig+0x312>
 8006098:	4b77      	ldr	r3, [pc, #476]	; (8006278 <HAL_RCC_OscConfig+0x4d8>)
 800609a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800609c:	4a76      	ldr	r2, [pc, #472]	; (8006278 <HAL_RCC_OscConfig+0x4d8>)
 800609e:	f043 0304 	orr.w	r3, r3, #4
 80060a2:	6713      	str	r3, [r2, #112]	; 0x70
 80060a4:	4b74      	ldr	r3, [pc, #464]	; (8006278 <HAL_RCC_OscConfig+0x4d8>)
 80060a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060a8:	4a73      	ldr	r2, [pc, #460]	; (8006278 <HAL_RCC_OscConfig+0x4d8>)
 80060aa:	f043 0301 	orr.w	r3, r3, #1
 80060ae:	6713      	str	r3, [r2, #112]	; 0x70
 80060b0:	e00b      	b.n	80060ca <HAL_RCC_OscConfig+0x32a>
 80060b2:	4b71      	ldr	r3, [pc, #452]	; (8006278 <HAL_RCC_OscConfig+0x4d8>)
 80060b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060b6:	4a70      	ldr	r2, [pc, #448]	; (8006278 <HAL_RCC_OscConfig+0x4d8>)
 80060b8:	f023 0301 	bic.w	r3, r3, #1
 80060bc:	6713      	str	r3, [r2, #112]	; 0x70
 80060be:	4b6e      	ldr	r3, [pc, #440]	; (8006278 <HAL_RCC_OscConfig+0x4d8>)
 80060c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060c2:	4a6d      	ldr	r2, [pc, #436]	; (8006278 <HAL_RCC_OscConfig+0x4d8>)
 80060c4:	f023 0304 	bic.w	r3, r3, #4
 80060c8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	689b      	ldr	r3, [r3, #8]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d015      	beq.n	80060fe <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060d2:	f7fd f9bd 	bl	8003450 <HAL_GetTick>
 80060d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80060d8:	e00a      	b.n	80060f0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80060da:	f7fd f9b9 	bl	8003450 <HAL_GetTick>
 80060de:	4602      	mov	r2, r0
 80060e0:	693b      	ldr	r3, [r7, #16]
 80060e2:	1ad3      	subs	r3, r2, r3
 80060e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80060e8:	4293      	cmp	r3, r2
 80060ea:	d901      	bls.n	80060f0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80060ec:	2303      	movs	r3, #3
 80060ee:	e0bc      	b.n	800626a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80060f0:	4b61      	ldr	r3, [pc, #388]	; (8006278 <HAL_RCC_OscConfig+0x4d8>)
 80060f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060f4:	f003 0302 	and.w	r3, r3, #2
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d0ee      	beq.n	80060da <HAL_RCC_OscConfig+0x33a>
 80060fc:	e014      	b.n	8006128 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80060fe:	f7fd f9a7 	bl	8003450 <HAL_GetTick>
 8006102:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006104:	e00a      	b.n	800611c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006106:	f7fd f9a3 	bl	8003450 <HAL_GetTick>
 800610a:	4602      	mov	r2, r0
 800610c:	693b      	ldr	r3, [r7, #16]
 800610e:	1ad3      	subs	r3, r2, r3
 8006110:	f241 3288 	movw	r2, #5000	; 0x1388
 8006114:	4293      	cmp	r3, r2
 8006116:	d901      	bls.n	800611c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8006118:	2303      	movs	r3, #3
 800611a:	e0a6      	b.n	800626a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800611c:	4b56      	ldr	r3, [pc, #344]	; (8006278 <HAL_RCC_OscConfig+0x4d8>)
 800611e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006120:	f003 0302 	and.w	r3, r3, #2
 8006124:	2b00      	cmp	r3, #0
 8006126:	d1ee      	bne.n	8006106 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006128:	7dfb      	ldrb	r3, [r7, #23]
 800612a:	2b01      	cmp	r3, #1
 800612c:	d105      	bne.n	800613a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800612e:	4b52      	ldr	r3, [pc, #328]	; (8006278 <HAL_RCC_OscConfig+0x4d8>)
 8006130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006132:	4a51      	ldr	r2, [pc, #324]	; (8006278 <HAL_RCC_OscConfig+0x4d8>)
 8006134:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006138:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	699b      	ldr	r3, [r3, #24]
 800613e:	2b00      	cmp	r3, #0
 8006140:	f000 8092 	beq.w	8006268 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006144:	4b4c      	ldr	r3, [pc, #304]	; (8006278 <HAL_RCC_OscConfig+0x4d8>)
 8006146:	689b      	ldr	r3, [r3, #8]
 8006148:	f003 030c 	and.w	r3, r3, #12
 800614c:	2b08      	cmp	r3, #8
 800614e:	d05c      	beq.n	800620a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	699b      	ldr	r3, [r3, #24]
 8006154:	2b02      	cmp	r3, #2
 8006156:	d141      	bne.n	80061dc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006158:	4b48      	ldr	r3, [pc, #288]	; (800627c <HAL_RCC_OscConfig+0x4dc>)
 800615a:	2200      	movs	r2, #0
 800615c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800615e:	f7fd f977 	bl	8003450 <HAL_GetTick>
 8006162:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006164:	e008      	b.n	8006178 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006166:	f7fd f973 	bl	8003450 <HAL_GetTick>
 800616a:	4602      	mov	r2, r0
 800616c:	693b      	ldr	r3, [r7, #16]
 800616e:	1ad3      	subs	r3, r2, r3
 8006170:	2b02      	cmp	r3, #2
 8006172:	d901      	bls.n	8006178 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8006174:	2303      	movs	r3, #3
 8006176:	e078      	b.n	800626a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006178:	4b3f      	ldr	r3, [pc, #252]	; (8006278 <HAL_RCC_OscConfig+0x4d8>)
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006180:	2b00      	cmp	r3, #0
 8006182:	d1f0      	bne.n	8006166 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	69da      	ldr	r2, [r3, #28]
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	6a1b      	ldr	r3, [r3, #32]
 800618c:	431a      	orrs	r2, r3
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006192:	019b      	lsls	r3, r3, #6
 8006194:	431a      	orrs	r2, r3
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800619a:	085b      	lsrs	r3, r3, #1
 800619c:	3b01      	subs	r3, #1
 800619e:	041b      	lsls	r3, r3, #16
 80061a0:	431a      	orrs	r2, r3
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061a6:	061b      	lsls	r3, r3, #24
 80061a8:	4933      	ldr	r1, [pc, #204]	; (8006278 <HAL_RCC_OscConfig+0x4d8>)
 80061aa:	4313      	orrs	r3, r2
 80061ac:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80061ae:	4b33      	ldr	r3, [pc, #204]	; (800627c <HAL_RCC_OscConfig+0x4dc>)
 80061b0:	2201      	movs	r2, #1
 80061b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061b4:	f7fd f94c 	bl	8003450 <HAL_GetTick>
 80061b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80061ba:	e008      	b.n	80061ce <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80061bc:	f7fd f948 	bl	8003450 <HAL_GetTick>
 80061c0:	4602      	mov	r2, r0
 80061c2:	693b      	ldr	r3, [r7, #16]
 80061c4:	1ad3      	subs	r3, r2, r3
 80061c6:	2b02      	cmp	r3, #2
 80061c8:	d901      	bls.n	80061ce <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80061ca:	2303      	movs	r3, #3
 80061cc:	e04d      	b.n	800626a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80061ce:	4b2a      	ldr	r3, [pc, #168]	; (8006278 <HAL_RCC_OscConfig+0x4d8>)
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d0f0      	beq.n	80061bc <HAL_RCC_OscConfig+0x41c>
 80061da:	e045      	b.n	8006268 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80061dc:	4b27      	ldr	r3, [pc, #156]	; (800627c <HAL_RCC_OscConfig+0x4dc>)
 80061de:	2200      	movs	r2, #0
 80061e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061e2:	f7fd f935 	bl	8003450 <HAL_GetTick>
 80061e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80061e8:	e008      	b.n	80061fc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80061ea:	f7fd f931 	bl	8003450 <HAL_GetTick>
 80061ee:	4602      	mov	r2, r0
 80061f0:	693b      	ldr	r3, [r7, #16]
 80061f2:	1ad3      	subs	r3, r2, r3
 80061f4:	2b02      	cmp	r3, #2
 80061f6:	d901      	bls.n	80061fc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80061f8:	2303      	movs	r3, #3
 80061fa:	e036      	b.n	800626a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80061fc:	4b1e      	ldr	r3, [pc, #120]	; (8006278 <HAL_RCC_OscConfig+0x4d8>)
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006204:	2b00      	cmp	r3, #0
 8006206:	d1f0      	bne.n	80061ea <HAL_RCC_OscConfig+0x44a>
 8006208:	e02e      	b.n	8006268 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	699b      	ldr	r3, [r3, #24]
 800620e:	2b01      	cmp	r3, #1
 8006210:	d101      	bne.n	8006216 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8006212:	2301      	movs	r3, #1
 8006214:	e029      	b.n	800626a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006216:	4b18      	ldr	r3, [pc, #96]	; (8006278 <HAL_RCC_OscConfig+0x4d8>)
 8006218:	685b      	ldr	r3, [r3, #4]
 800621a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	69db      	ldr	r3, [r3, #28]
 8006226:	429a      	cmp	r2, r3
 8006228:	d11c      	bne.n	8006264 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006234:	429a      	cmp	r2, r3
 8006236:	d115      	bne.n	8006264 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8006238:	68fa      	ldr	r2, [r7, #12]
 800623a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800623e:	4013      	ands	r3, r2
 8006240:	687a      	ldr	r2, [r7, #4]
 8006242:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006244:	4293      	cmp	r3, r2
 8006246:	d10d      	bne.n	8006264 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8006252:	429a      	cmp	r2, r3
 8006254:	d106      	bne.n	8006264 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006260:	429a      	cmp	r2, r3
 8006262:	d001      	beq.n	8006268 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8006264:	2301      	movs	r3, #1
 8006266:	e000      	b.n	800626a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8006268:	2300      	movs	r3, #0
}
 800626a:	4618      	mov	r0, r3
 800626c:	3718      	adds	r7, #24
 800626e:	46bd      	mov	sp, r7
 8006270:	bd80      	pop	{r7, pc}
 8006272:	bf00      	nop
 8006274:	40007000 	.word	0x40007000
 8006278:	40023800 	.word	0x40023800
 800627c:	42470060 	.word	0x42470060

08006280 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006280:	b580      	push	{r7, lr}
 8006282:	b084      	sub	sp, #16
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
 8006288:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	2b00      	cmp	r3, #0
 800628e:	d101      	bne.n	8006294 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006290:	2301      	movs	r3, #1
 8006292:	e0cc      	b.n	800642e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006294:	4b68      	ldr	r3, [pc, #416]	; (8006438 <HAL_RCC_ClockConfig+0x1b8>)
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f003 030f 	and.w	r3, r3, #15
 800629c:	683a      	ldr	r2, [r7, #0]
 800629e:	429a      	cmp	r2, r3
 80062a0:	d90c      	bls.n	80062bc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80062a2:	4b65      	ldr	r3, [pc, #404]	; (8006438 <HAL_RCC_ClockConfig+0x1b8>)
 80062a4:	683a      	ldr	r2, [r7, #0]
 80062a6:	b2d2      	uxtb	r2, r2
 80062a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80062aa:	4b63      	ldr	r3, [pc, #396]	; (8006438 <HAL_RCC_ClockConfig+0x1b8>)
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f003 030f 	and.w	r3, r3, #15
 80062b2:	683a      	ldr	r2, [r7, #0]
 80062b4:	429a      	cmp	r2, r3
 80062b6:	d001      	beq.n	80062bc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80062b8:	2301      	movs	r3, #1
 80062ba:	e0b8      	b.n	800642e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f003 0302 	and.w	r3, r3, #2
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d020      	beq.n	800630a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f003 0304 	and.w	r3, r3, #4
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d005      	beq.n	80062e0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80062d4:	4b59      	ldr	r3, [pc, #356]	; (800643c <HAL_RCC_ClockConfig+0x1bc>)
 80062d6:	689b      	ldr	r3, [r3, #8]
 80062d8:	4a58      	ldr	r2, [pc, #352]	; (800643c <HAL_RCC_ClockConfig+0x1bc>)
 80062da:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80062de:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f003 0308 	and.w	r3, r3, #8
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d005      	beq.n	80062f8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80062ec:	4b53      	ldr	r3, [pc, #332]	; (800643c <HAL_RCC_ClockConfig+0x1bc>)
 80062ee:	689b      	ldr	r3, [r3, #8]
 80062f0:	4a52      	ldr	r2, [pc, #328]	; (800643c <HAL_RCC_ClockConfig+0x1bc>)
 80062f2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80062f6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80062f8:	4b50      	ldr	r3, [pc, #320]	; (800643c <HAL_RCC_ClockConfig+0x1bc>)
 80062fa:	689b      	ldr	r3, [r3, #8]
 80062fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	689b      	ldr	r3, [r3, #8]
 8006304:	494d      	ldr	r1, [pc, #308]	; (800643c <HAL_RCC_ClockConfig+0x1bc>)
 8006306:	4313      	orrs	r3, r2
 8006308:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	f003 0301 	and.w	r3, r3, #1
 8006312:	2b00      	cmp	r3, #0
 8006314:	d044      	beq.n	80063a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	685b      	ldr	r3, [r3, #4]
 800631a:	2b01      	cmp	r3, #1
 800631c:	d107      	bne.n	800632e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800631e:	4b47      	ldr	r3, [pc, #284]	; (800643c <HAL_RCC_ClockConfig+0x1bc>)
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006326:	2b00      	cmp	r3, #0
 8006328:	d119      	bne.n	800635e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800632a:	2301      	movs	r3, #1
 800632c:	e07f      	b.n	800642e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	685b      	ldr	r3, [r3, #4]
 8006332:	2b02      	cmp	r3, #2
 8006334:	d003      	beq.n	800633e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800633a:	2b03      	cmp	r3, #3
 800633c:	d107      	bne.n	800634e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800633e:	4b3f      	ldr	r3, [pc, #252]	; (800643c <HAL_RCC_ClockConfig+0x1bc>)
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006346:	2b00      	cmp	r3, #0
 8006348:	d109      	bne.n	800635e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800634a:	2301      	movs	r3, #1
 800634c:	e06f      	b.n	800642e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800634e:	4b3b      	ldr	r3, [pc, #236]	; (800643c <HAL_RCC_ClockConfig+0x1bc>)
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	f003 0302 	and.w	r3, r3, #2
 8006356:	2b00      	cmp	r3, #0
 8006358:	d101      	bne.n	800635e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800635a:	2301      	movs	r3, #1
 800635c:	e067      	b.n	800642e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800635e:	4b37      	ldr	r3, [pc, #220]	; (800643c <HAL_RCC_ClockConfig+0x1bc>)
 8006360:	689b      	ldr	r3, [r3, #8]
 8006362:	f023 0203 	bic.w	r2, r3, #3
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	685b      	ldr	r3, [r3, #4]
 800636a:	4934      	ldr	r1, [pc, #208]	; (800643c <HAL_RCC_ClockConfig+0x1bc>)
 800636c:	4313      	orrs	r3, r2
 800636e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006370:	f7fd f86e 	bl	8003450 <HAL_GetTick>
 8006374:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006376:	e00a      	b.n	800638e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006378:	f7fd f86a 	bl	8003450 <HAL_GetTick>
 800637c:	4602      	mov	r2, r0
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	1ad3      	subs	r3, r2, r3
 8006382:	f241 3288 	movw	r2, #5000	; 0x1388
 8006386:	4293      	cmp	r3, r2
 8006388:	d901      	bls.n	800638e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800638a:	2303      	movs	r3, #3
 800638c:	e04f      	b.n	800642e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800638e:	4b2b      	ldr	r3, [pc, #172]	; (800643c <HAL_RCC_ClockConfig+0x1bc>)
 8006390:	689b      	ldr	r3, [r3, #8]
 8006392:	f003 020c 	and.w	r2, r3, #12
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	685b      	ldr	r3, [r3, #4]
 800639a:	009b      	lsls	r3, r3, #2
 800639c:	429a      	cmp	r2, r3
 800639e:	d1eb      	bne.n	8006378 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80063a0:	4b25      	ldr	r3, [pc, #148]	; (8006438 <HAL_RCC_ClockConfig+0x1b8>)
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f003 030f 	and.w	r3, r3, #15
 80063a8:	683a      	ldr	r2, [r7, #0]
 80063aa:	429a      	cmp	r2, r3
 80063ac:	d20c      	bcs.n	80063c8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80063ae:	4b22      	ldr	r3, [pc, #136]	; (8006438 <HAL_RCC_ClockConfig+0x1b8>)
 80063b0:	683a      	ldr	r2, [r7, #0]
 80063b2:	b2d2      	uxtb	r2, r2
 80063b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80063b6:	4b20      	ldr	r3, [pc, #128]	; (8006438 <HAL_RCC_ClockConfig+0x1b8>)
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f003 030f 	and.w	r3, r3, #15
 80063be:	683a      	ldr	r2, [r7, #0]
 80063c0:	429a      	cmp	r2, r3
 80063c2:	d001      	beq.n	80063c8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80063c4:	2301      	movs	r3, #1
 80063c6:	e032      	b.n	800642e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f003 0304 	and.w	r3, r3, #4
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d008      	beq.n	80063e6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80063d4:	4b19      	ldr	r3, [pc, #100]	; (800643c <HAL_RCC_ClockConfig+0x1bc>)
 80063d6:	689b      	ldr	r3, [r3, #8]
 80063d8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	68db      	ldr	r3, [r3, #12]
 80063e0:	4916      	ldr	r1, [pc, #88]	; (800643c <HAL_RCC_ClockConfig+0x1bc>)
 80063e2:	4313      	orrs	r3, r2
 80063e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f003 0308 	and.w	r3, r3, #8
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d009      	beq.n	8006406 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80063f2:	4b12      	ldr	r3, [pc, #72]	; (800643c <HAL_RCC_ClockConfig+0x1bc>)
 80063f4:	689b      	ldr	r3, [r3, #8]
 80063f6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	691b      	ldr	r3, [r3, #16]
 80063fe:	00db      	lsls	r3, r3, #3
 8006400:	490e      	ldr	r1, [pc, #56]	; (800643c <HAL_RCC_ClockConfig+0x1bc>)
 8006402:	4313      	orrs	r3, r2
 8006404:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006406:	f000 f821 	bl	800644c <HAL_RCC_GetSysClockFreq>
 800640a:	4602      	mov	r2, r0
 800640c:	4b0b      	ldr	r3, [pc, #44]	; (800643c <HAL_RCC_ClockConfig+0x1bc>)
 800640e:	689b      	ldr	r3, [r3, #8]
 8006410:	091b      	lsrs	r3, r3, #4
 8006412:	f003 030f 	and.w	r3, r3, #15
 8006416:	490a      	ldr	r1, [pc, #40]	; (8006440 <HAL_RCC_ClockConfig+0x1c0>)
 8006418:	5ccb      	ldrb	r3, [r1, r3]
 800641a:	fa22 f303 	lsr.w	r3, r2, r3
 800641e:	4a09      	ldr	r2, [pc, #36]	; (8006444 <HAL_RCC_ClockConfig+0x1c4>)
 8006420:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006422:	4b09      	ldr	r3, [pc, #36]	; (8006448 <HAL_RCC_ClockConfig+0x1c8>)
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	4618      	mov	r0, r3
 8006428:	f7fc fdf0 	bl	800300c <HAL_InitTick>

  return HAL_OK;
 800642c:	2300      	movs	r3, #0
}
 800642e:	4618      	mov	r0, r3
 8006430:	3710      	adds	r7, #16
 8006432:	46bd      	mov	sp, r7
 8006434:	bd80      	pop	{r7, pc}
 8006436:	bf00      	nop
 8006438:	40023c00 	.word	0x40023c00
 800643c:	40023800 	.word	0x40023800
 8006440:	08020574 	.word	0x08020574
 8006444:	20000004 	.word	0x20000004
 8006448:	20000008 	.word	0x20000008

0800644c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800644c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8006450:	b084      	sub	sp, #16
 8006452:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006454:	2300      	movs	r3, #0
 8006456:	607b      	str	r3, [r7, #4]
 8006458:	2300      	movs	r3, #0
 800645a:	60fb      	str	r3, [r7, #12]
 800645c:	2300      	movs	r3, #0
 800645e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8006460:	2300      	movs	r3, #0
 8006462:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006464:	4b67      	ldr	r3, [pc, #412]	; (8006604 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006466:	689b      	ldr	r3, [r3, #8]
 8006468:	f003 030c 	and.w	r3, r3, #12
 800646c:	2b08      	cmp	r3, #8
 800646e:	d00d      	beq.n	800648c <HAL_RCC_GetSysClockFreq+0x40>
 8006470:	2b08      	cmp	r3, #8
 8006472:	f200 80bd 	bhi.w	80065f0 <HAL_RCC_GetSysClockFreq+0x1a4>
 8006476:	2b00      	cmp	r3, #0
 8006478:	d002      	beq.n	8006480 <HAL_RCC_GetSysClockFreq+0x34>
 800647a:	2b04      	cmp	r3, #4
 800647c:	d003      	beq.n	8006486 <HAL_RCC_GetSysClockFreq+0x3a>
 800647e:	e0b7      	b.n	80065f0 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006480:	4b61      	ldr	r3, [pc, #388]	; (8006608 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8006482:	60bb      	str	r3, [r7, #8]
       break;
 8006484:	e0b7      	b.n	80065f6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006486:	4b61      	ldr	r3, [pc, #388]	; (800660c <HAL_RCC_GetSysClockFreq+0x1c0>)
 8006488:	60bb      	str	r3, [r7, #8]
      break;
 800648a:	e0b4      	b.n	80065f6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800648c:	4b5d      	ldr	r3, [pc, #372]	; (8006604 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800648e:	685b      	ldr	r3, [r3, #4]
 8006490:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006494:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006496:	4b5b      	ldr	r3, [pc, #364]	; (8006604 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006498:	685b      	ldr	r3, [r3, #4]
 800649a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d04d      	beq.n	800653e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80064a2:	4b58      	ldr	r3, [pc, #352]	; (8006604 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80064a4:	685b      	ldr	r3, [r3, #4]
 80064a6:	099b      	lsrs	r3, r3, #6
 80064a8:	461a      	mov	r2, r3
 80064aa:	f04f 0300 	mov.w	r3, #0
 80064ae:	f240 10ff 	movw	r0, #511	; 0x1ff
 80064b2:	f04f 0100 	mov.w	r1, #0
 80064b6:	ea02 0800 	and.w	r8, r2, r0
 80064ba:	ea03 0901 	and.w	r9, r3, r1
 80064be:	4640      	mov	r0, r8
 80064c0:	4649      	mov	r1, r9
 80064c2:	f04f 0200 	mov.w	r2, #0
 80064c6:	f04f 0300 	mov.w	r3, #0
 80064ca:	014b      	lsls	r3, r1, #5
 80064cc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80064d0:	0142      	lsls	r2, r0, #5
 80064d2:	4610      	mov	r0, r2
 80064d4:	4619      	mov	r1, r3
 80064d6:	ebb0 0008 	subs.w	r0, r0, r8
 80064da:	eb61 0109 	sbc.w	r1, r1, r9
 80064de:	f04f 0200 	mov.w	r2, #0
 80064e2:	f04f 0300 	mov.w	r3, #0
 80064e6:	018b      	lsls	r3, r1, #6
 80064e8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80064ec:	0182      	lsls	r2, r0, #6
 80064ee:	1a12      	subs	r2, r2, r0
 80064f0:	eb63 0301 	sbc.w	r3, r3, r1
 80064f4:	f04f 0000 	mov.w	r0, #0
 80064f8:	f04f 0100 	mov.w	r1, #0
 80064fc:	00d9      	lsls	r1, r3, #3
 80064fe:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006502:	00d0      	lsls	r0, r2, #3
 8006504:	4602      	mov	r2, r0
 8006506:	460b      	mov	r3, r1
 8006508:	eb12 0208 	adds.w	r2, r2, r8
 800650c:	eb43 0309 	adc.w	r3, r3, r9
 8006510:	f04f 0000 	mov.w	r0, #0
 8006514:	f04f 0100 	mov.w	r1, #0
 8006518:	0259      	lsls	r1, r3, #9
 800651a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800651e:	0250      	lsls	r0, r2, #9
 8006520:	4602      	mov	r2, r0
 8006522:	460b      	mov	r3, r1
 8006524:	4610      	mov	r0, r2
 8006526:	4619      	mov	r1, r3
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	461a      	mov	r2, r3
 800652c:	f04f 0300 	mov.w	r3, #0
 8006530:	f7f9 feae 	bl	8000290 <__aeabi_uldivmod>
 8006534:	4602      	mov	r2, r0
 8006536:	460b      	mov	r3, r1
 8006538:	4613      	mov	r3, r2
 800653a:	60fb      	str	r3, [r7, #12]
 800653c:	e04a      	b.n	80065d4 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800653e:	4b31      	ldr	r3, [pc, #196]	; (8006604 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006540:	685b      	ldr	r3, [r3, #4]
 8006542:	099b      	lsrs	r3, r3, #6
 8006544:	461a      	mov	r2, r3
 8006546:	f04f 0300 	mov.w	r3, #0
 800654a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800654e:	f04f 0100 	mov.w	r1, #0
 8006552:	ea02 0400 	and.w	r4, r2, r0
 8006556:	ea03 0501 	and.w	r5, r3, r1
 800655a:	4620      	mov	r0, r4
 800655c:	4629      	mov	r1, r5
 800655e:	f04f 0200 	mov.w	r2, #0
 8006562:	f04f 0300 	mov.w	r3, #0
 8006566:	014b      	lsls	r3, r1, #5
 8006568:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800656c:	0142      	lsls	r2, r0, #5
 800656e:	4610      	mov	r0, r2
 8006570:	4619      	mov	r1, r3
 8006572:	1b00      	subs	r0, r0, r4
 8006574:	eb61 0105 	sbc.w	r1, r1, r5
 8006578:	f04f 0200 	mov.w	r2, #0
 800657c:	f04f 0300 	mov.w	r3, #0
 8006580:	018b      	lsls	r3, r1, #6
 8006582:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006586:	0182      	lsls	r2, r0, #6
 8006588:	1a12      	subs	r2, r2, r0
 800658a:	eb63 0301 	sbc.w	r3, r3, r1
 800658e:	f04f 0000 	mov.w	r0, #0
 8006592:	f04f 0100 	mov.w	r1, #0
 8006596:	00d9      	lsls	r1, r3, #3
 8006598:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800659c:	00d0      	lsls	r0, r2, #3
 800659e:	4602      	mov	r2, r0
 80065a0:	460b      	mov	r3, r1
 80065a2:	1912      	adds	r2, r2, r4
 80065a4:	eb45 0303 	adc.w	r3, r5, r3
 80065a8:	f04f 0000 	mov.w	r0, #0
 80065ac:	f04f 0100 	mov.w	r1, #0
 80065b0:	0299      	lsls	r1, r3, #10
 80065b2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80065b6:	0290      	lsls	r0, r2, #10
 80065b8:	4602      	mov	r2, r0
 80065ba:	460b      	mov	r3, r1
 80065bc:	4610      	mov	r0, r2
 80065be:	4619      	mov	r1, r3
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	461a      	mov	r2, r3
 80065c4:	f04f 0300 	mov.w	r3, #0
 80065c8:	f7f9 fe62 	bl	8000290 <__aeabi_uldivmod>
 80065cc:	4602      	mov	r2, r0
 80065ce:	460b      	mov	r3, r1
 80065d0:	4613      	mov	r3, r2
 80065d2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80065d4:	4b0b      	ldr	r3, [pc, #44]	; (8006604 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80065d6:	685b      	ldr	r3, [r3, #4]
 80065d8:	0c1b      	lsrs	r3, r3, #16
 80065da:	f003 0303 	and.w	r3, r3, #3
 80065de:	3301      	adds	r3, #1
 80065e0:	005b      	lsls	r3, r3, #1
 80065e2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80065e4:	68fa      	ldr	r2, [r7, #12]
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80065ec:	60bb      	str	r3, [r7, #8]
      break;
 80065ee:	e002      	b.n	80065f6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80065f0:	4b05      	ldr	r3, [pc, #20]	; (8006608 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80065f2:	60bb      	str	r3, [r7, #8]
      break;
 80065f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80065f6:	68bb      	ldr	r3, [r7, #8]
}
 80065f8:	4618      	mov	r0, r3
 80065fa:	3710      	adds	r7, #16
 80065fc:	46bd      	mov	sp, r7
 80065fe:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8006602:	bf00      	nop
 8006604:	40023800 	.word	0x40023800
 8006608:	00f42400 	.word	0x00f42400
 800660c:	007a1200 	.word	0x007a1200

08006610 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006610:	b480      	push	{r7}
 8006612:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006614:	4b03      	ldr	r3, [pc, #12]	; (8006624 <HAL_RCC_GetHCLKFreq+0x14>)
 8006616:	681b      	ldr	r3, [r3, #0]
}
 8006618:	4618      	mov	r0, r3
 800661a:	46bd      	mov	sp, r7
 800661c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006620:	4770      	bx	lr
 8006622:	bf00      	nop
 8006624:	20000004 	.word	0x20000004

08006628 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006628:	b580      	push	{r7, lr}
 800662a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800662c:	f7ff fff0 	bl	8006610 <HAL_RCC_GetHCLKFreq>
 8006630:	4602      	mov	r2, r0
 8006632:	4b05      	ldr	r3, [pc, #20]	; (8006648 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006634:	689b      	ldr	r3, [r3, #8]
 8006636:	0a9b      	lsrs	r3, r3, #10
 8006638:	f003 0307 	and.w	r3, r3, #7
 800663c:	4903      	ldr	r1, [pc, #12]	; (800664c <HAL_RCC_GetPCLK1Freq+0x24>)
 800663e:	5ccb      	ldrb	r3, [r1, r3]
 8006640:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006644:	4618      	mov	r0, r3
 8006646:	bd80      	pop	{r7, pc}
 8006648:	40023800 	.word	0x40023800
 800664c:	08020584 	.word	0x08020584

08006650 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006650:	b580      	push	{r7, lr}
 8006652:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006654:	f7ff ffdc 	bl	8006610 <HAL_RCC_GetHCLKFreq>
 8006658:	4602      	mov	r2, r0
 800665a:	4b05      	ldr	r3, [pc, #20]	; (8006670 <HAL_RCC_GetPCLK2Freq+0x20>)
 800665c:	689b      	ldr	r3, [r3, #8]
 800665e:	0b5b      	lsrs	r3, r3, #13
 8006660:	f003 0307 	and.w	r3, r3, #7
 8006664:	4903      	ldr	r1, [pc, #12]	; (8006674 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006666:	5ccb      	ldrb	r3, [r1, r3]
 8006668:	fa22 f303 	lsr.w	r3, r2, r3
}
 800666c:	4618      	mov	r0, r3
 800666e:	bd80      	pop	{r7, pc}
 8006670:	40023800 	.word	0x40023800
 8006674:	08020584 	.word	0x08020584

08006678 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006678:	b480      	push	{r7}
 800667a:	b083      	sub	sp, #12
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
 8006680:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	220f      	movs	r2, #15
 8006686:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006688:	4b12      	ldr	r3, [pc, #72]	; (80066d4 <HAL_RCC_GetClockConfig+0x5c>)
 800668a:	689b      	ldr	r3, [r3, #8]
 800668c:	f003 0203 	and.w	r2, r3, #3
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006694:	4b0f      	ldr	r3, [pc, #60]	; (80066d4 <HAL_RCC_GetClockConfig+0x5c>)
 8006696:	689b      	ldr	r3, [r3, #8]
 8006698:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80066a0:	4b0c      	ldr	r3, [pc, #48]	; (80066d4 <HAL_RCC_GetClockConfig+0x5c>)
 80066a2:	689b      	ldr	r3, [r3, #8]
 80066a4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80066ac:	4b09      	ldr	r3, [pc, #36]	; (80066d4 <HAL_RCC_GetClockConfig+0x5c>)
 80066ae:	689b      	ldr	r3, [r3, #8]
 80066b0:	08db      	lsrs	r3, r3, #3
 80066b2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80066ba:	4b07      	ldr	r3, [pc, #28]	; (80066d8 <HAL_RCC_GetClockConfig+0x60>)
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f003 020f 	and.w	r2, r3, #15
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	601a      	str	r2, [r3, #0]
}
 80066c6:	bf00      	nop
 80066c8:	370c      	adds	r7, #12
 80066ca:	46bd      	mov	sp, r7
 80066cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d0:	4770      	bx	lr
 80066d2:	bf00      	nop
 80066d4:	40023800 	.word	0x40023800
 80066d8:	40023c00 	.word	0x40023c00

080066dc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80066dc:	b580      	push	{r7, lr}
 80066de:	b082      	sub	sp, #8
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d101      	bne.n	80066ee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80066ea:	2301      	movs	r3, #1
 80066ec:	e056      	b.n	800679c <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	2200      	movs	r2, #0
 80066f2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80066fa:	b2db      	uxtb	r3, r3
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d106      	bne.n	800670e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2200      	movs	r2, #0
 8006704:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006708:	6878      	ldr	r0, [r7, #4]
 800670a:	f7fc fc17 	bl	8002f3c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	2202      	movs	r2, #2
 8006712:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	681a      	ldr	r2, [r3, #0]
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006724:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	685a      	ldr	r2, [r3, #4]
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	689b      	ldr	r3, [r3, #8]
 800672e:	431a      	orrs	r2, r3
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	68db      	ldr	r3, [r3, #12]
 8006734:	431a      	orrs	r2, r3
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	691b      	ldr	r3, [r3, #16]
 800673a:	431a      	orrs	r2, r3
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	695b      	ldr	r3, [r3, #20]
 8006740:	431a      	orrs	r2, r3
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	699b      	ldr	r3, [r3, #24]
 8006746:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800674a:	431a      	orrs	r2, r3
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	69db      	ldr	r3, [r3, #28]
 8006750:	431a      	orrs	r2, r3
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	6a1b      	ldr	r3, [r3, #32]
 8006756:	ea42 0103 	orr.w	r1, r2, r3
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	430a      	orrs	r2, r1
 8006764:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	699b      	ldr	r3, [r3, #24]
 800676a:	0c1b      	lsrs	r3, r3, #16
 800676c:	f003 0104 	and.w	r1, r3, #4
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	430a      	orrs	r2, r1
 800677a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	69da      	ldr	r2, [r3, #28]
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800678a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2200      	movs	r2, #0
 8006790:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	2201      	movs	r2, #1
 8006796:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800679a:	2300      	movs	r3, #0
}
 800679c:	4618      	mov	r0, r3
 800679e:	3708      	adds	r7, #8
 80067a0:	46bd      	mov	sp, r7
 80067a2:	bd80      	pop	{r7, pc}

080067a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80067a4:	b580      	push	{r7, lr}
 80067a6:	b082      	sub	sp, #8
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d101      	bne.n	80067b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80067b2:	2301      	movs	r3, #1
 80067b4:	e01d      	b.n	80067f2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067bc:	b2db      	uxtb	r3, r3
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d106      	bne.n	80067d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	2200      	movs	r2, #0
 80067c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80067ca:	6878      	ldr	r0, [r7, #4]
 80067cc:	f000 f815 	bl	80067fa <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2202      	movs	r2, #2
 80067d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681a      	ldr	r2, [r3, #0]
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	3304      	adds	r3, #4
 80067e0:	4619      	mov	r1, r3
 80067e2:	4610      	mov	r0, r2
 80067e4:	f000 f968 	bl	8006ab8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2201      	movs	r2, #1
 80067ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80067f0:	2300      	movs	r3, #0
}
 80067f2:	4618      	mov	r0, r3
 80067f4:	3708      	adds	r7, #8
 80067f6:	46bd      	mov	sp, r7
 80067f8:	bd80      	pop	{r7, pc}

080067fa <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80067fa:	b480      	push	{r7}
 80067fc:	b083      	sub	sp, #12
 80067fe:	af00      	add	r7, sp, #0
 8006800:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8006802:	bf00      	nop
 8006804:	370c      	adds	r7, #12
 8006806:	46bd      	mov	sp, r7
 8006808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680c:	4770      	bx	lr

0800680e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800680e:	b480      	push	{r7}
 8006810:	b085      	sub	sp, #20
 8006812:	af00      	add	r7, sp, #0
 8006814:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	68da      	ldr	r2, [r3, #12]
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f042 0201 	orr.w	r2, r2, #1
 8006824:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	689b      	ldr	r3, [r3, #8]
 800682c:	f003 0307 	and.w	r3, r3, #7
 8006830:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	2b06      	cmp	r3, #6
 8006836:	d007      	beq.n	8006848 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	681a      	ldr	r2, [r3, #0]
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f042 0201 	orr.w	r2, r2, #1
 8006846:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006848:	2300      	movs	r3, #0
}
 800684a:	4618      	mov	r0, r3
 800684c:	3714      	adds	r7, #20
 800684e:	46bd      	mov	sp, r7
 8006850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006854:	4770      	bx	lr

08006856 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006856:	b580      	push	{r7, lr}
 8006858:	b082      	sub	sp, #8
 800685a:	af00      	add	r7, sp, #0
 800685c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	691b      	ldr	r3, [r3, #16]
 8006864:	f003 0302 	and.w	r3, r3, #2
 8006868:	2b02      	cmp	r3, #2
 800686a:	d122      	bne.n	80068b2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	68db      	ldr	r3, [r3, #12]
 8006872:	f003 0302 	and.w	r3, r3, #2
 8006876:	2b02      	cmp	r3, #2
 8006878:	d11b      	bne.n	80068b2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	f06f 0202 	mvn.w	r2, #2
 8006882:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2201      	movs	r2, #1
 8006888:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	699b      	ldr	r3, [r3, #24]
 8006890:	f003 0303 	and.w	r3, r3, #3
 8006894:	2b00      	cmp	r3, #0
 8006896:	d003      	beq.n	80068a0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006898:	6878      	ldr	r0, [r7, #4]
 800689a:	f000 f8ee 	bl	8006a7a <HAL_TIM_IC_CaptureCallback>
 800689e:	e005      	b.n	80068ac <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80068a0:	6878      	ldr	r0, [r7, #4]
 80068a2:	f000 f8e0 	bl	8006a66 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80068a6:	6878      	ldr	r0, [r7, #4]
 80068a8:	f000 f8f1 	bl	8006a8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2200      	movs	r2, #0
 80068b0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	691b      	ldr	r3, [r3, #16]
 80068b8:	f003 0304 	and.w	r3, r3, #4
 80068bc:	2b04      	cmp	r3, #4
 80068be:	d122      	bne.n	8006906 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	68db      	ldr	r3, [r3, #12]
 80068c6:	f003 0304 	and.w	r3, r3, #4
 80068ca:	2b04      	cmp	r3, #4
 80068cc:	d11b      	bne.n	8006906 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	f06f 0204 	mvn.w	r2, #4
 80068d6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2202      	movs	r2, #2
 80068dc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	699b      	ldr	r3, [r3, #24]
 80068e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d003      	beq.n	80068f4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80068ec:	6878      	ldr	r0, [r7, #4]
 80068ee:	f000 f8c4 	bl	8006a7a <HAL_TIM_IC_CaptureCallback>
 80068f2:	e005      	b.n	8006900 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80068f4:	6878      	ldr	r0, [r7, #4]
 80068f6:	f000 f8b6 	bl	8006a66 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80068fa:	6878      	ldr	r0, [r7, #4]
 80068fc:	f000 f8c7 	bl	8006a8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2200      	movs	r2, #0
 8006904:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	691b      	ldr	r3, [r3, #16]
 800690c:	f003 0308 	and.w	r3, r3, #8
 8006910:	2b08      	cmp	r3, #8
 8006912:	d122      	bne.n	800695a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	68db      	ldr	r3, [r3, #12]
 800691a:	f003 0308 	and.w	r3, r3, #8
 800691e:	2b08      	cmp	r3, #8
 8006920:	d11b      	bne.n	800695a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	f06f 0208 	mvn.w	r2, #8
 800692a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2204      	movs	r2, #4
 8006930:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	69db      	ldr	r3, [r3, #28]
 8006938:	f003 0303 	and.w	r3, r3, #3
 800693c:	2b00      	cmp	r3, #0
 800693e:	d003      	beq.n	8006948 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006940:	6878      	ldr	r0, [r7, #4]
 8006942:	f000 f89a 	bl	8006a7a <HAL_TIM_IC_CaptureCallback>
 8006946:	e005      	b.n	8006954 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006948:	6878      	ldr	r0, [r7, #4]
 800694a:	f000 f88c 	bl	8006a66 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800694e:	6878      	ldr	r0, [r7, #4]
 8006950:	f000 f89d 	bl	8006a8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2200      	movs	r2, #0
 8006958:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	691b      	ldr	r3, [r3, #16]
 8006960:	f003 0310 	and.w	r3, r3, #16
 8006964:	2b10      	cmp	r3, #16
 8006966:	d122      	bne.n	80069ae <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	68db      	ldr	r3, [r3, #12]
 800696e:	f003 0310 	and.w	r3, r3, #16
 8006972:	2b10      	cmp	r3, #16
 8006974:	d11b      	bne.n	80069ae <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	f06f 0210 	mvn.w	r2, #16
 800697e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2208      	movs	r2, #8
 8006984:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	69db      	ldr	r3, [r3, #28]
 800698c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006990:	2b00      	cmp	r3, #0
 8006992:	d003      	beq.n	800699c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006994:	6878      	ldr	r0, [r7, #4]
 8006996:	f000 f870 	bl	8006a7a <HAL_TIM_IC_CaptureCallback>
 800699a:	e005      	b.n	80069a8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800699c:	6878      	ldr	r0, [r7, #4]
 800699e:	f000 f862 	bl	8006a66 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80069a2:	6878      	ldr	r0, [r7, #4]
 80069a4:	f000 f873 	bl	8006a8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	2200      	movs	r2, #0
 80069ac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	691b      	ldr	r3, [r3, #16]
 80069b4:	f003 0301 	and.w	r3, r3, #1
 80069b8:	2b01      	cmp	r3, #1
 80069ba:	d10e      	bne.n	80069da <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	68db      	ldr	r3, [r3, #12]
 80069c2:	f003 0301 	and.w	r3, r3, #1
 80069c6:	2b01      	cmp	r3, #1
 80069c8:	d107      	bne.n	80069da <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	f06f 0201 	mvn.w	r2, #1
 80069d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80069d4:	6878      	ldr	r0, [r7, #4]
 80069d6:	f7fa fad7 	bl	8000f88 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	691b      	ldr	r3, [r3, #16]
 80069e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069e4:	2b80      	cmp	r3, #128	; 0x80
 80069e6:	d10e      	bne.n	8006a06 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	68db      	ldr	r3, [r3, #12]
 80069ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069f2:	2b80      	cmp	r3, #128	; 0x80
 80069f4:	d107      	bne.n	8006a06 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80069fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006a00:	6878      	ldr	r0, [r7, #4]
 8006a02:	f000 f903 	bl	8006c0c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	691b      	ldr	r3, [r3, #16]
 8006a0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a10:	2b40      	cmp	r3, #64	; 0x40
 8006a12:	d10e      	bne.n	8006a32 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	68db      	ldr	r3, [r3, #12]
 8006a1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a1e:	2b40      	cmp	r3, #64	; 0x40
 8006a20:	d107      	bne.n	8006a32 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006a2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006a2c:	6878      	ldr	r0, [r7, #4]
 8006a2e:	f000 f838 	bl	8006aa2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	691b      	ldr	r3, [r3, #16]
 8006a38:	f003 0320 	and.w	r3, r3, #32
 8006a3c:	2b20      	cmp	r3, #32
 8006a3e:	d10e      	bne.n	8006a5e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	68db      	ldr	r3, [r3, #12]
 8006a46:	f003 0320 	and.w	r3, r3, #32
 8006a4a:	2b20      	cmp	r3, #32
 8006a4c:	d107      	bne.n	8006a5e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	f06f 0220 	mvn.w	r2, #32
 8006a56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006a58:	6878      	ldr	r0, [r7, #4]
 8006a5a:	f000 f8cd 	bl	8006bf8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006a5e:	bf00      	nop
 8006a60:	3708      	adds	r7, #8
 8006a62:	46bd      	mov	sp, r7
 8006a64:	bd80      	pop	{r7, pc}

08006a66 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006a66:	b480      	push	{r7}
 8006a68:	b083      	sub	sp, #12
 8006a6a:	af00      	add	r7, sp, #0
 8006a6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006a6e:	bf00      	nop
 8006a70:	370c      	adds	r7, #12
 8006a72:	46bd      	mov	sp, r7
 8006a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a78:	4770      	bx	lr

08006a7a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006a7a:	b480      	push	{r7}
 8006a7c:	b083      	sub	sp, #12
 8006a7e:	af00      	add	r7, sp, #0
 8006a80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006a82:	bf00      	nop
 8006a84:	370c      	adds	r7, #12
 8006a86:	46bd      	mov	sp, r7
 8006a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8c:	4770      	bx	lr

08006a8e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006a8e:	b480      	push	{r7}
 8006a90:	b083      	sub	sp, #12
 8006a92:	af00      	add	r7, sp, #0
 8006a94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006a96:	bf00      	nop
 8006a98:	370c      	adds	r7, #12
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa0:	4770      	bx	lr

08006aa2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006aa2:	b480      	push	{r7}
 8006aa4:	b083      	sub	sp, #12
 8006aa6:	af00      	add	r7, sp, #0
 8006aa8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006aaa:	bf00      	nop
 8006aac:	370c      	adds	r7, #12
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab4:	4770      	bx	lr
	...

08006ab8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006ab8:	b480      	push	{r7}
 8006aba:	b085      	sub	sp, #20
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]
 8006ac0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	4a40      	ldr	r2, [pc, #256]	; (8006bcc <TIM_Base_SetConfig+0x114>)
 8006acc:	4293      	cmp	r3, r2
 8006ace:	d013      	beq.n	8006af8 <TIM_Base_SetConfig+0x40>
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ad6:	d00f      	beq.n	8006af8 <TIM_Base_SetConfig+0x40>
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	4a3d      	ldr	r2, [pc, #244]	; (8006bd0 <TIM_Base_SetConfig+0x118>)
 8006adc:	4293      	cmp	r3, r2
 8006ade:	d00b      	beq.n	8006af8 <TIM_Base_SetConfig+0x40>
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	4a3c      	ldr	r2, [pc, #240]	; (8006bd4 <TIM_Base_SetConfig+0x11c>)
 8006ae4:	4293      	cmp	r3, r2
 8006ae6:	d007      	beq.n	8006af8 <TIM_Base_SetConfig+0x40>
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	4a3b      	ldr	r2, [pc, #236]	; (8006bd8 <TIM_Base_SetConfig+0x120>)
 8006aec:	4293      	cmp	r3, r2
 8006aee:	d003      	beq.n	8006af8 <TIM_Base_SetConfig+0x40>
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	4a3a      	ldr	r2, [pc, #232]	; (8006bdc <TIM_Base_SetConfig+0x124>)
 8006af4:	4293      	cmp	r3, r2
 8006af6:	d108      	bne.n	8006b0a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006afe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006b00:	683b      	ldr	r3, [r7, #0]
 8006b02:	685b      	ldr	r3, [r3, #4]
 8006b04:	68fa      	ldr	r2, [r7, #12]
 8006b06:	4313      	orrs	r3, r2
 8006b08:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	4a2f      	ldr	r2, [pc, #188]	; (8006bcc <TIM_Base_SetConfig+0x114>)
 8006b0e:	4293      	cmp	r3, r2
 8006b10:	d02b      	beq.n	8006b6a <TIM_Base_SetConfig+0xb2>
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b18:	d027      	beq.n	8006b6a <TIM_Base_SetConfig+0xb2>
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	4a2c      	ldr	r2, [pc, #176]	; (8006bd0 <TIM_Base_SetConfig+0x118>)
 8006b1e:	4293      	cmp	r3, r2
 8006b20:	d023      	beq.n	8006b6a <TIM_Base_SetConfig+0xb2>
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	4a2b      	ldr	r2, [pc, #172]	; (8006bd4 <TIM_Base_SetConfig+0x11c>)
 8006b26:	4293      	cmp	r3, r2
 8006b28:	d01f      	beq.n	8006b6a <TIM_Base_SetConfig+0xb2>
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	4a2a      	ldr	r2, [pc, #168]	; (8006bd8 <TIM_Base_SetConfig+0x120>)
 8006b2e:	4293      	cmp	r3, r2
 8006b30:	d01b      	beq.n	8006b6a <TIM_Base_SetConfig+0xb2>
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	4a29      	ldr	r2, [pc, #164]	; (8006bdc <TIM_Base_SetConfig+0x124>)
 8006b36:	4293      	cmp	r3, r2
 8006b38:	d017      	beq.n	8006b6a <TIM_Base_SetConfig+0xb2>
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	4a28      	ldr	r2, [pc, #160]	; (8006be0 <TIM_Base_SetConfig+0x128>)
 8006b3e:	4293      	cmp	r3, r2
 8006b40:	d013      	beq.n	8006b6a <TIM_Base_SetConfig+0xb2>
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	4a27      	ldr	r2, [pc, #156]	; (8006be4 <TIM_Base_SetConfig+0x12c>)
 8006b46:	4293      	cmp	r3, r2
 8006b48:	d00f      	beq.n	8006b6a <TIM_Base_SetConfig+0xb2>
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	4a26      	ldr	r2, [pc, #152]	; (8006be8 <TIM_Base_SetConfig+0x130>)
 8006b4e:	4293      	cmp	r3, r2
 8006b50:	d00b      	beq.n	8006b6a <TIM_Base_SetConfig+0xb2>
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	4a25      	ldr	r2, [pc, #148]	; (8006bec <TIM_Base_SetConfig+0x134>)
 8006b56:	4293      	cmp	r3, r2
 8006b58:	d007      	beq.n	8006b6a <TIM_Base_SetConfig+0xb2>
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	4a24      	ldr	r2, [pc, #144]	; (8006bf0 <TIM_Base_SetConfig+0x138>)
 8006b5e:	4293      	cmp	r3, r2
 8006b60:	d003      	beq.n	8006b6a <TIM_Base_SetConfig+0xb2>
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	4a23      	ldr	r2, [pc, #140]	; (8006bf4 <TIM_Base_SetConfig+0x13c>)
 8006b66:	4293      	cmp	r3, r2
 8006b68:	d108      	bne.n	8006b7c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006b72:	683b      	ldr	r3, [r7, #0]
 8006b74:	68db      	ldr	r3, [r3, #12]
 8006b76:	68fa      	ldr	r2, [r7, #12]
 8006b78:	4313      	orrs	r3, r2
 8006b7a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006b82:	683b      	ldr	r3, [r7, #0]
 8006b84:	695b      	ldr	r3, [r3, #20]
 8006b86:	4313      	orrs	r3, r2
 8006b88:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	68fa      	ldr	r2, [r7, #12]
 8006b8e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006b90:	683b      	ldr	r3, [r7, #0]
 8006b92:	689a      	ldr	r2, [r3, #8]
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006b98:	683b      	ldr	r3, [r7, #0]
 8006b9a:	681a      	ldr	r2, [r3, #0]
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	4a0a      	ldr	r2, [pc, #40]	; (8006bcc <TIM_Base_SetConfig+0x114>)
 8006ba4:	4293      	cmp	r3, r2
 8006ba6:	d003      	beq.n	8006bb0 <TIM_Base_SetConfig+0xf8>
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	4a0c      	ldr	r2, [pc, #48]	; (8006bdc <TIM_Base_SetConfig+0x124>)
 8006bac:	4293      	cmp	r3, r2
 8006bae:	d103      	bne.n	8006bb8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006bb0:	683b      	ldr	r3, [r7, #0]
 8006bb2:	691a      	ldr	r2, [r3, #16]
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2201      	movs	r2, #1
 8006bbc:	615a      	str	r2, [r3, #20]
}
 8006bbe:	bf00      	nop
 8006bc0:	3714      	adds	r7, #20
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc8:	4770      	bx	lr
 8006bca:	bf00      	nop
 8006bcc:	40010000 	.word	0x40010000
 8006bd0:	40000400 	.word	0x40000400
 8006bd4:	40000800 	.word	0x40000800
 8006bd8:	40000c00 	.word	0x40000c00
 8006bdc:	40010400 	.word	0x40010400
 8006be0:	40014000 	.word	0x40014000
 8006be4:	40014400 	.word	0x40014400
 8006be8:	40014800 	.word	0x40014800
 8006bec:	40001800 	.word	0x40001800
 8006bf0:	40001c00 	.word	0x40001c00
 8006bf4:	40002000 	.word	0x40002000

08006bf8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006bf8:	b480      	push	{r7}
 8006bfa:	b083      	sub	sp, #12
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006c00:	bf00      	nop
 8006c02:	370c      	adds	r7, #12
 8006c04:	46bd      	mov	sp, r7
 8006c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0a:	4770      	bx	lr

08006c0c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006c0c:	b480      	push	{r7}
 8006c0e:	b083      	sub	sp, #12
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006c14:	bf00      	nop
 8006c16:	370c      	adds	r7, #12
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1e:	4770      	bx	lr

08006c20 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8006c20:	b5b0      	push	{r4, r5, r7, lr}
 8006c22:	b08e      	sub	sp, #56	; 0x38
 8006c24:	af04      	add	r7, sp, #16
  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 8006c26:	2100      	movs	r1, #0
 8006c28:	2000      	movs	r0, #0
 8006c2a:	f006 f837 	bl	800cc9c <tcpip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 8006c2e:	4b2a      	ldr	r3, [pc, #168]	; (8006cd8 <MX_LWIP_Init+0xb8>)
 8006c30:	2200      	movs	r2, #0
 8006c32:	601a      	str	r2, [r3, #0]
  netmask.addr = 0;
 8006c34:	4b29      	ldr	r3, [pc, #164]	; (8006cdc <MX_LWIP_Init+0xbc>)
 8006c36:	2200      	movs	r2, #0
 8006c38:	601a      	str	r2, [r3, #0]
  gw.addr = 0;
 8006c3a:	4b29      	ldr	r3, [pc, #164]	; (8006ce0 <MX_LWIP_Init+0xc0>)
 8006c3c:	2200      	movs	r2, #0
 8006c3e:	601a      	str	r2, [r3, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8006c40:	4b28      	ldr	r3, [pc, #160]	; (8006ce4 <MX_LWIP_Init+0xc4>)
 8006c42:	9302      	str	r3, [sp, #8]
 8006c44:	4b28      	ldr	r3, [pc, #160]	; (8006ce8 <MX_LWIP_Init+0xc8>)
 8006c46:	9301      	str	r3, [sp, #4]
 8006c48:	2300      	movs	r3, #0
 8006c4a:	9300      	str	r3, [sp, #0]
 8006c4c:	4b24      	ldr	r3, [pc, #144]	; (8006ce0 <MX_LWIP_Init+0xc0>)
 8006c4e:	4a23      	ldr	r2, [pc, #140]	; (8006cdc <MX_LWIP_Init+0xbc>)
 8006c50:	4921      	ldr	r1, [pc, #132]	; (8006cd8 <MX_LWIP_Init+0xb8>)
 8006c52:	4826      	ldr	r0, [pc, #152]	; (8006cec <MX_LWIP_Init+0xcc>)
 8006c54:	f006 fea8 	bl	800d9a8 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8006c58:	4824      	ldr	r0, [pc, #144]	; (8006cec <MX_LWIP_Init+0xcc>)
 8006c5a:	f007 f877 	bl	800dd4c <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8006c5e:	4b23      	ldr	r3, [pc, #140]	; (8006cec <MX_LWIP_Init+0xcc>)
 8006c60:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006c64:	089b      	lsrs	r3, r3, #2
 8006c66:	f003 0301 	and.w	r3, r3, #1
 8006c6a:	b2db      	uxtb	r3, r3
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d003      	beq.n	8006c78 <MX_LWIP_Init+0x58>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8006c70:	481e      	ldr	r0, [pc, #120]	; (8006cec <MX_LWIP_Init+0xcc>)
 8006c72:	f007 f87b 	bl	800dd6c <netif_set_up>
 8006c76:	e002      	b.n	8006c7e <MX_LWIP_Init+0x5e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8006c78:	481c      	ldr	r0, [pc, #112]	; (8006cec <MX_LWIP_Init+0xcc>)
 8006c7a:	f007 f8ef 	bl	800de5c <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 8006c7e:	491c      	ldr	r1, [pc, #112]	; (8006cf0 <MX_LWIP_Init+0xd0>)
 8006c80:	481a      	ldr	r0, [pc, #104]	; (8006cec <MX_LWIP_Init+0xcc>)
 8006c82:	f007 f995 	bl	800dfb0 <netif_set_link_callback>

  /* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(Netif_SEM);
 8006c86:	2300      	movs	r3, #0
 8006c88:	623b      	str	r3, [r7, #32]
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	627b      	str	r3, [r7, #36]	; 0x24
  Netif_LinkSemaphore = osSemaphoreCreate(osSemaphore(Netif_SEM) , 1 );
 8006c8e:	f107 0320 	add.w	r3, r7, #32
 8006c92:	2101      	movs	r1, #1
 8006c94:	4618      	mov	r0, r3
 8006c96:	f000 fffb 	bl	8007c90 <osSemaphoreCreate>
 8006c9a:	4603      	mov	r3, r0
 8006c9c:	4a15      	ldr	r2, [pc, #84]	; (8006cf4 <MX_LWIP_Init+0xd4>)
 8006c9e:	6013      	str	r3, [r2, #0]

  link_arg.netif = &gnetif;
 8006ca0:	4b15      	ldr	r3, [pc, #84]	; (8006cf8 <MX_LWIP_Init+0xd8>)
 8006ca2:	4a12      	ldr	r2, [pc, #72]	; (8006cec <MX_LWIP_Init+0xcc>)
 8006ca4:	601a      	str	r2, [r3, #0]
  link_arg.semaphore = Netif_LinkSemaphore;
 8006ca6:	4b13      	ldr	r3, [pc, #76]	; (8006cf4 <MX_LWIP_Init+0xd4>)
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	4a13      	ldr	r2, [pc, #76]	; (8006cf8 <MX_LWIP_Init+0xd8>)
 8006cac:	6053      	str	r3, [r2, #4]
  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(LinkThr, ethernetif_set_link, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE * 2);
 8006cae:	4b13      	ldr	r3, [pc, #76]	; (8006cfc <MX_LWIP_Init+0xdc>)
 8006cb0:	1d3c      	adds	r4, r7, #4
 8006cb2:	461d      	mov	r5, r3
 8006cb4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006cb6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006cb8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8006cbc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(LinkThr), &link_arg);
 8006cc0:	1d3b      	adds	r3, r7, #4
 8006cc2:	490d      	ldr	r1, [pc, #52]	; (8006cf8 <MX_LWIP_Init+0xd8>)
 8006cc4:	4618      	mov	r0, r3
 8006cc6:	f000 fee6 	bl	8007a96 <osThreadCreate>
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 8006cca:	4808      	ldr	r0, [pc, #32]	; (8006cec <MX_LWIP_Init+0xcc>)
 8006ccc:	f00f fed2 	bl	8016a74 <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8006cd0:	bf00      	nop
 8006cd2:	3728      	adds	r7, #40	; 0x28
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	bdb0      	pop	{r4, r5, r7, pc}
 8006cd8:	2000a2d4 	.word	0x2000a2d4
 8006cdc:	2000a2d8 	.word	0x2000a2d8
 8006ce0:	2000a2dc 	.word	0x2000a2dc
 8006ce4:	0800cba1 	.word	0x0800cba1
 8006ce8:	08007819 	.word	0x08007819
 8006cec:	2000a29c 	.word	0x2000a29c
 8006cf0:	08007909 	.word	0x08007909
 8006cf4:	20002518 	.word	0x20002518
 8006cf8:	2000a294 	.word	0x2000a294
 8006cfc:	0801cbc0 	.word	0x0801cbc0

08006d00 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8006d00:	b580      	push	{r7, lr}
 8006d02:	b08e      	sub	sp, #56	; 0x38
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006d08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	601a      	str	r2, [r3, #0]
 8006d10:	605a      	str	r2, [r3, #4]
 8006d12:	609a      	str	r2, [r3, #8]
 8006d14:	60da      	str	r2, [r3, #12]
 8006d16:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	4a59      	ldr	r2, [pc, #356]	; (8006e84 <HAL_ETH_MspInit+0x184>)
 8006d1e:	4293      	cmp	r3, r2
 8006d20:	f040 80ac 	bne.w	8006e7c <HAL_ETH_MspInit+0x17c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8006d24:	2300      	movs	r3, #0
 8006d26:	623b      	str	r3, [r7, #32]
 8006d28:	4b57      	ldr	r3, [pc, #348]	; (8006e88 <HAL_ETH_MspInit+0x188>)
 8006d2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d2c:	4a56      	ldr	r2, [pc, #344]	; (8006e88 <HAL_ETH_MspInit+0x188>)
 8006d2e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006d32:	6313      	str	r3, [r2, #48]	; 0x30
 8006d34:	4b54      	ldr	r3, [pc, #336]	; (8006e88 <HAL_ETH_MspInit+0x188>)
 8006d36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d3c:	623b      	str	r3, [r7, #32]
 8006d3e:	6a3b      	ldr	r3, [r7, #32]
 8006d40:	2300      	movs	r3, #0
 8006d42:	61fb      	str	r3, [r7, #28]
 8006d44:	4b50      	ldr	r3, [pc, #320]	; (8006e88 <HAL_ETH_MspInit+0x188>)
 8006d46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d48:	4a4f      	ldr	r2, [pc, #316]	; (8006e88 <HAL_ETH_MspInit+0x188>)
 8006d4a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006d4e:	6313      	str	r3, [r2, #48]	; 0x30
 8006d50:	4b4d      	ldr	r3, [pc, #308]	; (8006e88 <HAL_ETH_MspInit+0x188>)
 8006d52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d54:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006d58:	61fb      	str	r3, [r7, #28]
 8006d5a:	69fb      	ldr	r3, [r7, #28]
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	61bb      	str	r3, [r7, #24]
 8006d60:	4b49      	ldr	r3, [pc, #292]	; (8006e88 <HAL_ETH_MspInit+0x188>)
 8006d62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d64:	4a48      	ldr	r2, [pc, #288]	; (8006e88 <HAL_ETH_MspInit+0x188>)
 8006d66:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006d6a:	6313      	str	r3, [r2, #48]	; 0x30
 8006d6c:	4b46      	ldr	r3, [pc, #280]	; (8006e88 <HAL_ETH_MspInit+0x188>)
 8006d6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d70:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006d74:	61bb      	str	r3, [r7, #24]
 8006d76:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006d78:	2300      	movs	r3, #0
 8006d7a:	617b      	str	r3, [r7, #20]
 8006d7c:	4b42      	ldr	r3, [pc, #264]	; (8006e88 <HAL_ETH_MspInit+0x188>)
 8006d7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d80:	4a41      	ldr	r2, [pc, #260]	; (8006e88 <HAL_ETH_MspInit+0x188>)
 8006d82:	f043 0304 	orr.w	r3, r3, #4
 8006d86:	6313      	str	r3, [r2, #48]	; 0x30
 8006d88:	4b3f      	ldr	r3, [pc, #252]	; (8006e88 <HAL_ETH_MspInit+0x188>)
 8006d8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d8c:	f003 0304 	and.w	r3, r3, #4
 8006d90:	617b      	str	r3, [r7, #20]
 8006d92:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006d94:	2300      	movs	r3, #0
 8006d96:	613b      	str	r3, [r7, #16]
 8006d98:	4b3b      	ldr	r3, [pc, #236]	; (8006e88 <HAL_ETH_MspInit+0x188>)
 8006d9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d9c:	4a3a      	ldr	r2, [pc, #232]	; (8006e88 <HAL_ETH_MspInit+0x188>)
 8006d9e:	f043 0301 	orr.w	r3, r3, #1
 8006da2:	6313      	str	r3, [r2, #48]	; 0x30
 8006da4:	4b38      	ldr	r3, [pc, #224]	; (8006e88 <HAL_ETH_MspInit+0x188>)
 8006da6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006da8:	f003 0301 	and.w	r3, r3, #1
 8006dac:	613b      	str	r3, [r7, #16]
 8006dae:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006db0:	2300      	movs	r3, #0
 8006db2:	60fb      	str	r3, [r7, #12]
 8006db4:	4b34      	ldr	r3, [pc, #208]	; (8006e88 <HAL_ETH_MspInit+0x188>)
 8006db6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006db8:	4a33      	ldr	r2, [pc, #204]	; (8006e88 <HAL_ETH_MspInit+0x188>)
 8006dba:	f043 0302 	orr.w	r3, r3, #2
 8006dbe:	6313      	str	r3, [r2, #48]	; 0x30
 8006dc0:	4b31      	ldr	r3, [pc, #196]	; (8006e88 <HAL_ETH_MspInit+0x188>)
 8006dc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dc4:	f003 0302 	and.w	r3, r3, #2
 8006dc8:	60fb      	str	r3, [r7, #12]
 8006dca:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8006dcc:	2300      	movs	r3, #0
 8006dce:	60bb      	str	r3, [r7, #8]
 8006dd0:	4b2d      	ldr	r3, [pc, #180]	; (8006e88 <HAL_ETH_MspInit+0x188>)
 8006dd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dd4:	4a2c      	ldr	r2, [pc, #176]	; (8006e88 <HAL_ETH_MspInit+0x188>)
 8006dd6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006dda:	6313      	str	r3, [r2, #48]	; 0x30
 8006ddc:	4b2a      	ldr	r3, [pc, #168]	; (8006e88 <HAL_ETH_MspInit+0x188>)
 8006dde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006de0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006de4:	60bb      	str	r3, [r7, #8]
 8006de6:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8006de8:	2332      	movs	r3, #50	; 0x32
 8006dea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006dec:	2302      	movs	r3, #2
 8006dee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006df0:	2300      	movs	r3, #0
 8006df2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006df4:	2303      	movs	r3, #3
 8006df6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006df8:	230b      	movs	r3, #11
 8006dfa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006dfc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006e00:	4619      	mov	r1, r3
 8006e02:	4822      	ldr	r0, [pc, #136]	; (8006e8c <HAL_ETH_MspInit+0x18c>)
 8006e04:	f7fd fddc 	bl	80049c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8006e08:	2386      	movs	r3, #134	; 0x86
 8006e0a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006e0c:	2302      	movs	r3, #2
 8006e0e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e10:	2300      	movs	r3, #0
 8006e12:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006e14:	2303      	movs	r3, #3
 8006e16:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006e18:	230b      	movs	r3, #11
 8006e1a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006e1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006e20:	4619      	mov	r1, r3
 8006e22:	481b      	ldr	r0, [pc, #108]	; (8006e90 <HAL_ETH_MspInit+0x190>)
 8006e24:	f7fd fdcc 	bl	80049c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8006e28:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006e2c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006e2e:	2302      	movs	r3, #2
 8006e30:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e32:	2300      	movs	r3, #0
 8006e34:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006e36:	2303      	movs	r3, #3
 8006e38:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006e3a:	230b      	movs	r3, #11
 8006e3c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8006e3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006e42:	4619      	mov	r1, r3
 8006e44:	4813      	ldr	r0, [pc, #76]	; (8006e94 <HAL_ETH_MspInit+0x194>)
 8006e46:	f7fd fdbb 	bl	80049c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8006e4a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8006e4e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006e50:	2302      	movs	r3, #2
 8006e52:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e54:	2300      	movs	r3, #0
 8006e56:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006e58:	2303      	movs	r3, #3
 8006e5a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006e5c:	230b      	movs	r3, #11
 8006e5e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8006e60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006e64:	4619      	mov	r1, r3
 8006e66:	480c      	ldr	r0, [pc, #48]	; (8006e98 <HAL_ETH_MspInit+0x198>)
 8006e68:	f7fd fdaa 	bl	80049c0 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8006e6c:	2200      	movs	r2, #0
 8006e6e:	2105      	movs	r1, #5
 8006e70:	203d      	movs	r0, #61	; 0x3d
 8006e72:	f7fc fbd5 	bl	8003620 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8006e76:	203d      	movs	r0, #61	; 0x3d
 8006e78:	f7fc fbee 	bl	8003658 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8006e7c:	bf00      	nop
 8006e7e:	3738      	adds	r7, #56	; 0x38
 8006e80:	46bd      	mov	sp, r7
 8006e82:	bd80      	pop	{r7, pc}
 8006e84:	40028000 	.word	0x40028000
 8006e88:	40023800 	.word	0x40023800
 8006e8c:	40020800 	.word	0x40020800
 8006e90:	40020000 	.word	0x40020000
 8006e94:	40020400 	.word	0x40020400
 8006e98:	40021800 	.word	0x40021800

08006e9c <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8006e9c:	b580      	push	{r7, lr}
 8006e9e:	b082      	sub	sp, #8
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(s_xSemaphore);
 8006ea4:	4b04      	ldr	r3, [pc, #16]	; (8006eb8 <HAL_ETH_RxCpltCallback+0x1c>)
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	f000 ff71 	bl	8007d90 <osSemaphoreRelease>
}
 8006eae:	bf00      	nop
 8006eb0:	3708      	adds	r7, #8
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	bd80      	pop	{r7, pc}
 8006eb6:	bf00      	nop
 8006eb8:	2000251c 	.word	0x2000251c
 8006ebc:	00000000 	.word	0x00000000

08006ec0 <fastHash64>:




uint64_t fastHash64(const void * buf, size_t len, uint64_t seed)
{
 8006ec0:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006ec4:	b0aa      	sub	sp, #168	; 0xa8
 8006ec6:	af00      	add	r7, sp, #0
 8006ec8:	67f8      	str	r0, [r7, #124]	; 0x7c
 8006eca:	67b9      	str	r1, [r7, #120]	; 0x78
 8006ecc:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
    const uint64_t m = 0x880355f21e6d1965ULL;
 8006ed0:	f20f 4324 	addw	r3, pc, #1060	; 0x424
 8006ed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ed8:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
    const uint64_t * pos = (const uint64_t*)buf;
 8006edc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006ede:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    const uint64_t * end = pos + (len / 8);
 8006ee2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006ee4:	f023 0207 	bic.w	r2, r3, #7
 8006ee8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006eec:	4413      	add	r3, r2
 8006eee:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    const unsigned char * pos2;
    uint64_t h = seed ^ (len * m);
 8006ef2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006ef4:	461a      	mov	r2, r3
 8006ef6:	f04f 0300 	mov.w	r3, #0
 8006efa:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8006efe:	fb03 f001 	mul.w	r0, r3, r1
 8006f02:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8006f06:	fb02 f101 	mul.w	r1, r2, r1
 8006f0a:	1844      	adds	r4, r0, r1
 8006f0c:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8006f10:	fba1 0102 	umull	r0, r1, r1, r2
 8006f14:	1863      	adds	r3, r4, r1
 8006f16:	4619      	mov	r1, r3
 8006f18:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8006f1c:	ea82 0800 	eor.w	r8, r2, r0
 8006f20:	ea83 0901 	eor.w	r9, r3, r1
 8006f24:	e9c7 8926 	strd	r8, r9, [r7, #152]	; 0x98
    uint64_t v;

    while(pos != end)
 8006f28:	e06a      	b.n	8007000 <fastHash64+0x140>
    {
        v  = *pos++;
 8006f2a:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8006f2e:	f102 0308 	add.w	r3, r2, #8
 8006f32:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006f36:	e9d2 2300 	ldrd	r2, r3, [r2]
 8006f3a:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90
        h ^= FASTHASH_MIX(v);
 8006f3e:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8006f42:	f04f 0000 	mov.w	r0, #0
 8006f46:	f04f 0100 	mov.w	r1, #0
 8006f4a:	0dd0      	lsrs	r0, r2, #23
 8006f4c:	ea40 2043 	orr.w	r0, r0, r3, lsl #9
 8006f50:	0dd9      	lsrs	r1, r3, #23
 8006f52:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8006f56:	ea82 0400 	eor.w	r4, r2, r0
 8006f5a:	66bc      	str	r4, [r7, #104]	; 0x68
 8006f5c:	404b      	eors	r3, r1
 8006f5e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006f60:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 8006f64:	e9c7 3424 	strd	r3, r4, [r7, #144]	; 0x90
 8006f68:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006f6c:	4be0      	ldr	r3, [pc, #896]	; (80072f0 <fastHash64+0x430>)
 8006f6e:	fb03 f102 	mul.w	r1, r3, r2
 8006f72:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8006f76:	4bdf      	ldr	r3, [pc, #892]	; (80072f4 <fastHash64+0x434>)
 8006f78:	fb03 f302 	mul.w	r3, r3, r2
 8006f7c:	4419      	add	r1, r3
 8006f7e:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8006f82:	4bdb      	ldr	r3, [pc, #876]	; (80072f0 <fastHash64+0x430>)
 8006f84:	fba2 2303 	umull	r2, r3, r2, r3
 8006f88:	4419      	add	r1, r3
 8006f8a:	460b      	mov	r3, r1
 8006f8c:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90
 8006f90:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90
 8006f94:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8006f98:	f04f 0000 	mov.w	r0, #0
 8006f9c:	f04f 0100 	mov.w	r1, #0
 8006fa0:	0bd8      	lsrs	r0, r3, #15
 8006fa2:	2100      	movs	r1, #0
 8006fa4:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8006fa8:	ea82 0400 	eor.w	r4, r2, r0
 8006fac:	663c      	str	r4, [r7, #96]	; 0x60
 8006fae:	404b      	eors	r3, r1
 8006fb0:	667b      	str	r3, [r7, #100]	; 0x64
 8006fb2:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 8006fb6:	e9c7 3424 	strd	r3, r4, [r7, #144]	; 0x90
 8006fba:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8006fbe:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8006fc2:	ea82 0500 	eor.w	r5, r2, r0
 8006fc6:	ea83 0601 	eor.w	r6, r3, r1
 8006fca:	e9c7 5626 	strd	r5, r6, [r7, #152]	; 0x98
        h *= m;
 8006fce:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8006fd2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006fd6:	fb03 f102 	mul.w	r1, r3, r2
 8006fda:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8006fde:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006fe2:	fb03 f302 	mul.w	r3, r3, r2
 8006fe6:	4419      	add	r1, r3
 8006fe8:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8006fec:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006ff0:	fba2 2303 	umull	r2, r3, r2, r3
 8006ff4:	4419      	add	r1, r3
 8006ff6:	460b      	mov	r3, r1
 8006ff8:	e9c7 2326 	strd	r2, r3, [r7, #152]	; 0x98
 8006ffc:	e9c7 2326 	strd	r2, r3, [r7, #152]	; 0x98
    while(pos != end)
 8007000:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8007004:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007008:	429a      	cmp	r2, r3
 800700a:	d18e      	bne.n	8006f2a <fastHash64+0x6a>
    }

    pos2 = (const unsigned char*)pos;
 800700c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007010:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    v = 0;
 8007014:	f04f 0200 	mov.w	r2, #0
 8007018:	f04f 0300 	mov.w	r3, #0
 800701c:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90

    switch(len & 7)
 8007020:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007022:	f003 0307 	and.w	r3, r3, #7
 8007026:	3b01      	subs	r3, #1
 8007028:	2b06      	cmp	r3, #6
 800702a:	f200 8119 	bhi.w	8007260 <fastHash64+0x3a0>
 800702e:	a201      	add	r2, pc, #4	; (adr r2, 8007034 <fastHash64+0x174>)
 8007030:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007034:	08007177 	.word	0x08007177
 8007038:	08007143 	.word	0x08007143
 800703c:	0800710f 	.word	0x0800710f
 8007040:	080070e1 	.word	0x080070e1
 8007044:	080070b1 	.word	0x080070b1
 8007048:	08007081 	.word	0x08007081
 800704c:	08007051 	.word	0x08007051
    {
        case 7: v ^= (uint64_t)pos2[6] << 48;
 8007050:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007054:	3306      	adds	r3, #6
 8007056:	781b      	ldrb	r3, [r3, #0]
 8007058:	b2da      	uxtb	r2, r3
 800705a:	f04f 0300 	mov.w	r3, #0
 800705e:	f04f 0000 	mov.w	r0, #0
 8007062:	f04f 0100 	mov.w	r1, #0
 8007066:	0411      	lsls	r1, r2, #16
 8007068:	2000      	movs	r0, #0
 800706a:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 800706e:	ea82 0400 	eor.w	r4, r2, r0
 8007072:	65bc      	str	r4, [r7, #88]	; 0x58
 8007074:	404b      	eors	r3, r1
 8007076:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007078:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 800707c:	e9c7 3424 	strd	r3, r4, [r7, #144]	; 0x90
        case 6: v ^= (uint64_t)pos2[5] << 40;
 8007080:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007084:	3305      	adds	r3, #5
 8007086:	781b      	ldrb	r3, [r3, #0]
 8007088:	b2da      	uxtb	r2, r3
 800708a:	f04f 0300 	mov.w	r3, #0
 800708e:	f04f 0000 	mov.w	r0, #0
 8007092:	f04f 0100 	mov.w	r1, #0
 8007096:	0211      	lsls	r1, r2, #8
 8007098:	2000      	movs	r0, #0
 800709a:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 800709e:	ea82 0400 	eor.w	r4, r2, r0
 80070a2:	653c      	str	r4, [r7, #80]	; 0x50
 80070a4:	404b      	eors	r3, r1
 80070a6:	657b      	str	r3, [r7, #84]	; 0x54
 80070a8:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 80070ac:	e9c7 3424 	strd	r3, r4, [r7, #144]	; 0x90
        case 5: v ^= (uint64_t)pos2[4] << 32;
 80070b0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80070b4:	3304      	adds	r3, #4
 80070b6:	781b      	ldrb	r3, [r3, #0]
 80070b8:	b2da      	uxtb	r2, r3
 80070ba:	f04f 0300 	mov.w	r3, #0
 80070be:	f04f 0000 	mov.w	r0, #0
 80070c2:	f04f 0100 	mov.w	r1, #0
 80070c6:	0011      	movs	r1, r2
 80070c8:	2000      	movs	r0, #0
 80070ca:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 80070ce:	ea82 0400 	eor.w	r4, r2, r0
 80070d2:	64bc      	str	r4, [r7, #72]	; 0x48
 80070d4:	404b      	eors	r3, r1
 80070d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80070d8:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 80070dc:	e9c7 3424 	strd	r3, r4, [r7, #144]	; 0x90
        case 4: v ^= (uint64_t)pos2[3] << 24;
 80070e0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80070e4:	3303      	adds	r3, #3
 80070e6:	781b      	ldrb	r3, [r3, #0]
 80070e8:	b2da      	uxtb	r2, r3
 80070ea:	f04f 0300 	mov.w	r3, #0
 80070ee:	ea4f 2b12 	mov.w	fp, r2, lsr #8
 80070f2:	ea4f 6a02 	mov.w	sl, r2, lsl #24
 80070f6:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 80070fa:	ea82 010a 	eor.w	r1, r2, sl
 80070fe:	6439      	str	r1, [r7, #64]	; 0x40
 8007100:	ea83 030b 	eor.w	r3, r3, fp
 8007104:	647b      	str	r3, [r7, #68]	; 0x44
 8007106:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 800710a:	e9c7 3424 	strd	r3, r4, [r7, #144]	; 0x90
        case 3: v ^= (uint64_t)pos2[2] << 16;
 800710e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007112:	3302      	adds	r3, #2
 8007114:	781b      	ldrb	r3, [r3, #0]
 8007116:	b2da      	uxtb	r2, r3
 8007118:	f04f 0300 	mov.w	r3, #0
 800711c:	f04f 0000 	mov.w	r0, #0
 8007120:	f04f 0100 	mov.w	r1, #0
 8007124:	0419      	lsls	r1, r3, #16
 8007126:	ea41 4112 	orr.w	r1, r1, r2, lsr #16
 800712a:	0410      	lsls	r0, r2, #16
 800712c:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8007130:	ea82 0400 	eor.w	r4, r2, r0
 8007134:	63bc      	str	r4, [r7, #56]	; 0x38
 8007136:	404b      	eors	r3, r1
 8007138:	63fb      	str	r3, [r7, #60]	; 0x3c
 800713a:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 800713e:	e9c7 3424 	strd	r3, r4, [r7, #144]	; 0x90
        case 2: v ^= (uint64_t)pos2[1] << 8;
 8007142:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007146:	3301      	adds	r3, #1
 8007148:	781b      	ldrb	r3, [r3, #0]
 800714a:	b2da      	uxtb	r2, r3
 800714c:	f04f 0300 	mov.w	r3, #0
 8007150:	f04f 0000 	mov.w	r0, #0
 8007154:	f04f 0100 	mov.w	r1, #0
 8007158:	0219      	lsls	r1, r3, #8
 800715a:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800715e:	0210      	lsls	r0, r2, #8
 8007160:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8007164:	ea82 0400 	eor.w	r4, r2, r0
 8007168:	633c      	str	r4, [r7, #48]	; 0x30
 800716a:	404b      	eors	r3, r1
 800716c:	637b      	str	r3, [r7, #52]	; 0x34
 800716e:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8007172:	e9c7 3424 	strd	r3, r4, [r7, #144]	; 0x90
        case 1: v ^= (uint64_t)pos2[0];
 8007176:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800717a:	781b      	ldrb	r3, [r3, #0]
 800717c:	b2d8      	uxtb	r0, r3
 800717e:	f04f 0100 	mov.w	r1, #0
 8007182:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8007186:	ea82 0400 	eor.w	r4, r2, r0
 800718a:	62bc      	str	r4, [r7, #40]	; 0x28
 800718c:	404b      	eors	r3, r1
 800718e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007190:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8007194:	e9c7 3424 	strd	r3, r4, [r7, #144]	; 0x90
                h ^= FASTHASH_MIX(v);
 8007198:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 800719c:	f04f 0000 	mov.w	r0, #0
 80071a0:	f04f 0100 	mov.w	r1, #0
 80071a4:	0dd0      	lsrs	r0, r2, #23
 80071a6:	ea40 2043 	orr.w	r0, r0, r3, lsl #9
 80071aa:	0dd9      	lsrs	r1, r3, #23
 80071ac:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 80071b0:	ea82 0400 	eor.w	r4, r2, r0
 80071b4:	623c      	str	r4, [r7, #32]
 80071b6:	404b      	eors	r3, r1
 80071b8:	627b      	str	r3, [r7, #36]	; 0x24
 80071ba:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80071be:	e9c7 3424 	strd	r3, r4, [r7, #144]	; 0x90
 80071c2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80071c6:	4a4a      	ldr	r2, [pc, #296]	; (80072f0 <fastHash64+0x430>)
 80071c8:	fb02 f203 	mul.w	r2, r2, r3
 80071cc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80071d0:	4948      	ldr	r1, [pc, #288]	; (80072f4 <fastHash64+0x434>)
 80071d2:	fb01 f303 	mul.w	r3, r1, r3
 80071d6:	18d1      	adds	r1, r2, r3
 80071d8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80071dc:	4a44      	ldr	r2, [pc, #272]	; (80072f0 <fastHash64+0x430>)
 80071de:	fba3 2302 	umull	r2, r3, r3, r2
 80071e2:	4419      	add	r1, r3
 80071e4:	460b      	mov	r3, r1
 80071e6:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90
 80071ea:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90
 80071ee:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 80071f2:	f04f 0200 	mov.w	r2, #0
 80071f6:	f04f 0300 	mov.w	r3, #0
 80071fa:	0bca      	lsrs	r2, r1, #15
 80071fc:	2300      	movs	r3, #0
 80071fe:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8007202:	ea80 0402 	eor.w	r4, r0, r2
 8007206:	61bc      	str	r4, [r7, #24]
 8007208:	404b      	eors	r3, r1
 800720a:	61fb      	str	r3, [r7, #28]
 800720c:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8007210:	e9c7 3424 	strd	r3, r4, [r7, #144]	; 0x90
 8007214:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8007218:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800721c:	ea80 0402 	eor.w	r4, r0, r2
 8007220:	613c      	str	r4, [r7, #16]
 8007222:	404b      	eors	r3, r1
 8007224:	617b      	str	r3, [r7, #20]
 8007226:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800722a:	e9c7 3426 	strd	r3, r4, [r7, #152]	; 0x98
                h *= m;
 800722e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007232:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8007236:	fb02 f203 	mul.w	r2, r2, r3
 800723a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800723e:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8007242:	fb01 f303 	mul.w	r3, r1, r3
 8007246:	18d1      	adds	r1, r2, r3
 8007248:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800724c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007250:	fba2 2303 	umull	r2, r3, r2, r3
 8007254:	4419      	add	r1, r3
 8007256:	460b      	mov	r3, r1
 8007258:	e9c7 2326 	strd	r2, r3, [r7, #152]	; 0x98
 800725c:	e9c7 2326 	strd	r2, r3, [r7, #152]	; 0x98
    }

    return FASTHASH_MIX(h);
 8007260:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007264:	f04f 0200 	mov.w	r2, #0
 8007268:	f04f 0300 	mov.w	r3, #0
 800726c:	0dc2      	lsrs	r2, r0, #23
 800726e:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
 8007272:	0dcb      	lsrs	r3, r1, #23
 8007274:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007278:	ea80 0402 	eor.w	r4, r0, r2
 800727c:	60bc      	str	r4, [r7, #8]
 800727e:	404b      	eors	r3, r1
 8007280:	60fb      	str	r3, [r7, #12]
 8007282:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8007286:	e9c7 3426 	strd	r3, r4, [r7, #152]	; 0x98
 800728a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800728e:	4a18      	ldr	r2, [pc, #96]	; (80072f0 <fastHash64+0x430>)
 8007290:	fb02 f203 	mul.w	r2, r2, r3
 8007294:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007298:	4916      	ldr	r1, [pc, #88]	; (80072f4 <fastHash64+0x434>)
 800729a:	fb01 f303 	mul.w	r3, r1, r3
 800729e:	18d1      	adds	r1, r2, r3
 80072a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80072a4:	4a12      	ldr	r2, [pc, #72]	; (80072f0 <fastHash64+0x430>)
 80072a6:	fba3 2302 	umull	r2, r3, r3, r2
 80072aa:	4419      	add	r1, r3
 80072ac:	460b      	mov	r3, r1
 80072ae:	e9c7 2326 	strd	r2, r3, [r7, #152]	; 0x98
 80072b2:	e9c7 2326 	strd	r2, r3, [r7, #152]	; 0x98
 80072b6:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80072ba:	f04f 0200 	mov.w	r2, #0
 80072be:	f04f 0300 	mov.w	r3, #0
 80072c2:	0bca      	lsrs	r2, r1, #15
 80072c4:	2300      	movs	r3, #0
 80072c6:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80072ca:	ea80 0402 	eor.w	r4, r0, r2
 80072ce:	603c      	str	r4, [r7, #0]
 80072d0:	404b      	eors	r3, r1
 80072d2:	607b      	str	r3, [r7, #4]
 80072d4:	e9d7 3400 	ldrd	r3, r4, [r7]
 80072d8:	e9c7 3426 	strd	r3, r4, [r7, #152]	; 0x98
 80072dc:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
}
 80072e0:	4610      	mov	r0, r2
 80072e2:	4619      	mov	r1, r3
 80072e4:	37a8      	adds	r7, #168	; 0xa8
 80072e6:	46bd      	mov	sp, r7
 80072e8:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80072ec:	4770      	bx	lr
 80072ee:	bf00      	nop
 80072f0:	f4325c37 	.word	0xf4325c37
 80072f4:	2127599b 	.word	0x2127599b
 80072f8:	1e6d1965 	.word	0x1e6d1965
 80072fc:	880355f2 	.word	0x880355f2

08007300 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8007300:	b5b0      	push	{r4, r5, r7, lr}
 8007302:	b092      	sub	sp, #72	; 0x48
 8007304:	af00      	add	r7, sp, #0
 8007306:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8007308:	2300      	movs	r3, #0
 800730a:	63bb      	str	r3, [r7, #56]	; 0x38
  uint64_t hashval;
/* Init ETH */

   uint8_t MACAddr[6] ;

  hashval = fastHash64((const void *)UID_BASE, 12, 0x0B00B135);// UID_BASE->0x1FFF7A10UL, len-->96bits, seed-->boobies
 800730c:	a37f      	add	r3, pc, #508	; (adr r3, 800750c <low_level_init+0x20c>)
 800730e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007312:	210c      	movs	r1, #12
 8007314:	4874      	ldr	r0, [pc, #464]	; (80074e8 <low_level_init+0x1e8>)
 8007316:	f7ff fdd3 	bl	8006ec0 <fastHash64>
 800731a:	e9c7 0110 	strd	r0, r1, [r7, #64]	; 0x40
  hashval = hashval - (hashval >> 32); // convert it to 32 bit
 800731e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8007322:	f04f 0200 	mov.w	r2, #0
 8007326:	f04f 0300 	mov.w	r3, #0
 800732a:	000a      	movs	r2, r1
 800732c:	2300      	movs	r3, #0
 800732e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8007332:	1a84      	subs	r4, r0, r2
 8007334:	eb61 0503 	sbc.w	r5, r1, r3
 8007338:	e9c7 4510 	strd	r4, r5, [r7, #64]	; 0x40

//trace_printf("hash is 0x%p\n",hashval);
  heth.Instance = ETH;
 800733c:	4b6b      	ldr	r3, [pc, #428]	; (80074ec <low_level_init+0x1ec>)
 800733e:	4a6c      	ldr	r2, [pc, #432]	; (80074f0 <low_level_init+0x1f0>)
 8007340:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8007342:	4b6a      	ldr	r3, [pc, #424]	; (80074ec <low_level_init+0x1ec>)
 8007344:	2201      	movs	r2, #1
 8007346:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 8007348:	4b68      	ldr	r3, [pc, #416]	; (80074ec <low_level_init+0x1ec>)
 800734a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800734e:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8007350:	4b66      	ldr	r3, [pc, #408]	; (80074ec <low_level_init+0x1ec>)
 8007352:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007356:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8007358:	4b64      	ldr	r3, [pc, #400]	; (80074ec <low_level_init+0x1ec>)
 800735a:	2200      	movs	r2, #0
 800735c:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x02;
 800735e:	2302      	movs	r3, #2
 8007360:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  MACAddr[1] = 0x80;
 8007364:	2380      	movs	r3, #128	; 0x80
 8007366:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  MACAddr[2] = 0xE1;
 800736a:	23e1      	movs	r3, #225	; 0xe1
 800736c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  MACAddr[3] = (hashval & 0xff0000)>>16;
 8007370:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8007374:	f04f 0200 	mov.w	r2, #0
 8007378:	f04f 0300 	mov.w	r3, #0
 800737c:	0c02      	lsrs	r2, r0, #16
 800737e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8007382:	0c0b      	lsrs	r3, r1, #16
 8007384:	b2d3      	uxtb	r3, r2
 8007386:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  MACAddr[4] = (hashval & 0xff00)>>8;
 800738a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800738e:	f04f 0200 	mov.w	r2, #0
 8007392:	f04f 0300 	mov.w	r3, #0
 8007396:	0a02      	lsrs	r2, r0, #8
 8007398:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800739c:	0a0b      	lsrs	r3, r1, #8
 800739e:	b2d3      	uxtb	r3, r2
 80073a0:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  MACAddr[5] = (hashval & 0xff);
 80073a4:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80073a8:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  heth.Init.MACAddr = &MACAddr[0];
 80073ac:	4a4f      	ldr	r2, [pc, #316]	; (80074ec <low_level_init+0x1ec>)
 80073ae:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80073b2:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 80073b4:	4b4d      	ldr	r3, [pc, #308]	; (80074ec <low_level_init+0x1ec>)
 80073b6:	2201      	movs	r2, #1
 80073b8:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 80073ba:	4b4c      	ldr	r3, [pc, #304]	; (80074ec <low_level_init+0x1ec>)
 80073bc:	2200      	movs	r2, #0
 80073be:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 80073c0:	4b4a      	ldr	r3, [pc, #296]	; (80074ec <low_level_init+0x1ec>)
 80073c2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80073c6:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 80073c8:	4848      	ldr	r0, [pc, #288]	; (80074ec <low_level_init+0x1ec>)
 80073ca:	f7fc f953 	bl	8003674 <HAL_ETH_Init>
 80073ce:	4603      	mov	r3, r0
 80073d0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  if (hal_eth_init_status == HAL_OK)
 80073d4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d108      	bne.n	80073ee <low_level_init+0xee>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80073e2:	f043 0304 	orr.w	r3, r3, #4
 80073e6:	b2da      	uxtb	r2, r3
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 80073ee:	2304      	movs	r3, #4
 80073f0:	4a40      	ldr	r2, [pc, #256]	; (80074f4 <low_level_init+0x1f4>)
 80073f2:	4941      	ldr	r1, [pc, #260]	; (80074f8 <low_level_init+0x1f8>)
 80073f4:	483d      	ldr	r0, [pc, #244]	; (80074ec <low_level_init+0x1ec>)
 80073f6:	f7fc fad9 	bl	80039ac <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 80073fa:	2304      	movs	r3, #4
 80073fc:	4a3f      	ldr	r2, [pc, #252]	; (80074fc <low_level_init+0x1fc>)
 80073fe:	4940      	ldr	r1, [pc, #256]	; (8007500 <low_level_init+0x200>)
 8007400:	483a      	ldr	r0, [pc, #232]	; (80074ec <low_level_init+0x1ec>)
 8007402:	f7fc fb3c 	bl	8003a7e <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	2206      	movs	r2, #6
 800740a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800740e:	4b37      	ldr	r3, [pc, #220]	; (80074ec <low_level_init+0x1ec>)
 8007410:	695b      	ldr	r3, [r3, #20]
 8007412:	781a      	ldrb	r2, [r3, #0]
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800741a:	4b34      	ldr	r3, [pc, #208]	; (80074ec <low_level_init+0x1ec>)
 800741c:	695b      	ldr	r3, [r3, #20]
 800741e:	785a      	ldrb	r2, [r3, #1]
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8007426:	4b31      	ldr	r3, [pc, #196]	; (80074ec <low_level_init+0x1ec>)
 8007428:	695b      	ldr	r3, [r3, #20]
 800742a:	789a      	ldrb	r2, [r3, #2]
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8007432:	4b2e      	ldr	r3, [pc, #184]	; (80074ec <low_level_init+0x1ec>)
 8007434:	695b      	ldr	r3, [r3, #20]
 8007436:	78da      	ldrb	r2, [r3, #3]
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800743e:	4b2b      	ldr	r3, [pc, #172]	; (80074ec <low_level_init+0x1ec>)
 8007440:	695b      	ldr	r3, [r3, #20]
 8007442:	791a      	ldrb	r2, [r3, #4]
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800744a:	4b28      	ldr	r3, [pc, #160]	; (80074ec <low_level_init+0x1ec>)
 800744c:	695b      	ldr	r3, [r3, #20]
 800744e:	795a      	ldrb	r2, [r3, #5]
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

  /* maximum transfer unit */
  netif->mtu = 1500;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800745c:	851a      	strh	r2, [r3, #40]	; 0x28

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007464:	f043 030a 	orr.w	r3, r3, #10
 8007468:	b2da      	uxtb	r2, r3
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

/* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(SEM);
 8007470:	2300      	movs	r3, #0
 8007472:	62bb      	str	r3, [r7, #40]	; 0x28
 8007474:	2300      	movs	r3, #0
 8007476:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM), 1);
 8007478:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800747c:	2101      	movs	r1, #1
 800747e:	4618      	mov	r0, r3
 8007480:	f000 fc06 	bl	8007c90 <osSemaphoreCreate>
 8007484:	4603      	mov	r3, r0
 8007486:	4a1f      	ldr	r2, [pc, #124]	; (8007504 <low_level_init+0x204>)
 8007488:	6013      	str	r3, [r2, #0]

/* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 800748a:	4b1f      	ldr	r3, [pc, #124]	; (8007508 <low_level_init+0x208>)
 800748c:	f107 040c 	add.w	r4, r7, #12
 8007490:	461d      	mov	r5, r3
 8007492:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007494:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007496:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800749a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 800749e:	f107 030c 	add.w	r3, r7, #12
 80074a2:	6879      	ldr	r1, [r7, #4]
 80074a4:	4618      	mov	r0, r3
 80074a6:	f000 faf6 	bl	8007a96 <osThreadCreate>
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 80074aa:	4810      	ldr	r0, [pc, #64]	; (80074ec <low_level_init+0x1ec>)
 80074ac:	f7fc fe0f 	bl	80040ce <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 80074b0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80074b4:	461a      	mov	r2, r3
 80074b6:	211d      	movs	r1, #29
 80074b8:	480c      	ldr	r0, [pc, #48]	; (80074ec <low_level_init+0x1ec>)
 80074ba:	f7fc fd3a 	bl	8003f32 <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 80074be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074c0:	f043 030b 	orr.w	r3, r3, #11
 80074c4:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 80074c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074c8:	461a      	mov	r2, r3
 80074ca:	211d      	movs	r1, #29
 80074cc:	4807      	ldr	r0, [pc, #28]	; (80074ec <low_level_init+0x1ec>)
 80074ce:	f7fc fd98 	bl	8004002 <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 80074d2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80074d6:	461a      	mov	r2, r3
 80074d8:	211d      	movs	r1, #29
 80074da:	4804      	ldr	r0, [pc, #16]	; (80074ec <low_level_init+0x1ec>)
 80074dc:	f7fc fd29 	bl	8003f32 <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 80074e0:	bf00      	nop
 80074e2:	3748      	adds	r7, #72	; 0x48
 80074e4:	46bd      	mov	sp, r7
 80074e6:	bdb0      	pop	{r4, r5, r7, pc}
 80074e8:	1fff7a10 	.word	0x1fff7a10
 80074ec:	2000bbb0 	.word	0x2000bbb0
 80074f0:	40028000 	.word	0x40028000
 80074f4:	2000bbf8 	.word	0x2000bbf8
 80074f8:	2000a2e0 	.word	0x2000a2e0
 80074fc:	2000a360 	.word	0x2000a360
 8007500:	2000bb30 	.word	0x2000bb30
 8007504:	2000251c 	.word	0x2000251c
 8007508:	0801cbe4 	.word	0x0801cbe4
 800750c:	0b00b135 	.word	0x0b00b135
 8007510:	00000000 	.word	0x00000000

08007514 <low_level_output>:
 *       to become availale since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8007514:	b580      	push	{r7, lr}
 8007516:	b08a      	sub	sp, #40	; 0x28
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]
 800751c:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 800751e:	4b4b      	ldr	r3, [pc, #300]	; (800764c <low_level_output+0x138>)
 8007520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007522:	689b      	ldr	r3, [r3, #8]
 8007524:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 8007526:	2300      	movs	r3, #0
 8007528:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 800752a:	2300      	movs	r3, #0
 800752c:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 800752e:	2300      	movs	r3, #0
 8007530:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 8007532:	2300      	movs	r3, #0
 8007534:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 8007536:	4b45      	ldr	r3, [pc, #276]	; (800764c <low_level_output+0x138>)
 8007538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800753a:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 800753c:	2300      	movs	r3, #0
 800753e:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 8007540:	683b      	ldr	r3, [r7, #0]
 8007542:	623b      	str	r3, [r7, #32]
 8007544:	e05a      	b.n	80075fc <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8007546:	69bb      	ldr	r3, [r7, #24]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	2b00      	cmp	r3, #0
 800754c:	da03      	bge.n	8007556 <low_level_output+0x42>
      {
        errval = ERR_USE;
 800754e:	23f8      	movs	r3, #248	; 0xf8
 8007550:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 8007554:	e05c      	b.n	8007610 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 8007556:	6a3b      	ldr	r3, [r7, #32]
 8007558:	895b      	ldrh	r3, [r3, #10]
 800755a:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 800755c:	2300      	movs	r3, #0
 800755e:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8007560:	e02f      	b.n	80075c2 <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 8007562:	69fa      	ldr	r2, [r7, #28]
 8007564:	693b      	ldr	r3, [r7, #16]
 8007566:	18d0      	adds	r0, r2, r3
 8007568:	6a3b      	ldr	r3, [r7, #32]
 800756a:	685a      	ldr	r2, [r3, #4]
 800756c:	68bb      	ldr	r3, [r7, #8]
 800756e:	18d1      	adds	r1, r2, r3
 8007570:	693b      	ldr	r3, [r7, #16]
 8007572:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 8007576:	3304      	adds	r3, #4
 8007578:	461a      	mov	r2, r3
 800757a:	f013 fe1f 	bl	801b1bc <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 800757e:	69bb      	ldr	r3, [r7, #24]
 8007580:	68db      	ldr	r3, [r3, #12]
 8007582:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8007584:	69bb      	ldr	r3, [r7, #24]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	2b00      	cmp	r3, #0
 800758a:	da03      	bge.n	8007594 <low_level_output+0x80>
        {
          errval = ERR_USE;
 800758c:	23f8      	movs	r3, #248	; 0xf8
 800758e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 8007592:	e03d      	b.n	8007610 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8007594:	69bb      	ldr	r3, [r7, #24]
 8007596:	689b      	ldr	r3, [r3, #8]
 8007598:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 800759a:	693a      	ldr	r2, [r7, #16]
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	4413      	add	r3, r2
 80075a0:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 80075a4:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 80075a6:	68ba      	ldr	r2, [r7, #8]
 80075a8:	693b      	ldr	r3, [r7, #16]
 80075aa:	1ad3      	subs	r3, r2, r3
 80075ac:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80075b0:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 80075b2:	697a      	ldr	r2, [r7, #20]
 80075b4:	693b      	ldr	r3, [r7, #16]
 80075b6:	1ad3      	subs	r3, r2, r3
 80075b8:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80075bc:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 80075be:	2300      	movs	r3, #0
 80075c0:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 80075c2:	68fa      	ldr	r2, [r7, #12]
 80075c4:	693b      	ldr	r3, [r7, #16]
 80075c6:	4413      	add	r3, r2
 80075c8:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80075cc:	4293      	cmp	r3, r2
 80075ce:	d8c8      	bhi.n	8007562 <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 80075d0:	69fa      	ldr	r2, [r7, #28]
 80075d2:	693b      	ldr	r3, [r7, #16]
 80075d4:	18d0      	adds	r0, r2, r3
 80075d6:	6a3b      	ldr	r3, [r7, #32]
 80075d8:	685a      	ldr	r2, [r3, #4]
 80075da:	68bb      	ldr	r3, [r7, #8]
 80075dc:	4413      	add	r3, r2
 80075de:	68fa      	ldr	r2, [r7, #12]
 80075e0:	4619      	mov	r1, r3
 80075e2:	f013 fdeb 	bl	801b1bc <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 80075e6:	693a      	ldr	r2, [r7, #16]
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	4413      	add	r3, r2
 80075ec:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 80075ee:	697a      	ldr	r2, [r7, #20]
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	4413      	add	r3, r2
 80075f4:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 80075f6:	6a3b      	ldr	r3, [r7, #32]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	623b      	str	r3, [r7, #32]
 80075fc:	6a3b      	ldr	r3, [r7, #32]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d1a1      	bne.n	8007546 <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 8007602:	6979      	ldr	r1, [r7, #20]
 8007604:	4811      	ldr	r0, [pc, #68]	; (800764c <low_level_output+0x138>)
 8007606:	f7fc faa7 	bl	8003b58 <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 800760a:	2300      	movs	r3, #0
 800760c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8007610:	4b0e      	ldr	r3, [pc, #56]	; (800764c <low_level_output+0x138>)
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007618:	3314      	adds	r3, #20
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	f003 0320 	and.w	r3, r3, #32
 8007620:	2b00      	cmp	r3, #0
 8007622:	d00d      	beq.n	8007640 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8007624:	4b09      	ldr	r3, [pc, #36]	; (800764c <low_level_output+0x138>)
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800762c:	3314      	adds	r3, #20
 800762e:	2220      	movs	r2, #32
 8007630:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 8007632:	4b06      	ldr	r3, [pc, #24]	; (800764c <low_level_output+0x138>)
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800763a:	3304      	adds	r3, #4
 800763c:	2200      	movs	r2, #0
 800763e:	601a      	str	r2, [r3, #0]
  }
  return errval;
 8007640:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8007644:	4618      	mov	r0, r3
 8007646:	3728      	adds	r7, #40	; 0x28
 8007648:	46bd      	mov	sp, r7
 800764a:	bd80      	pop	{r7, pc}
 800764c:	2000bbb0 	.word	0x2000bbb0

08007650 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8007650:	b580      	push	{r7, lr}
 8007652:	b08c      	sub	sp, #48	; 0x30
 8007654:	af00      	add	r7, sp, #0
 8007656:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8007658:	2300      	movs	r3, #0
 800765a:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 800765c:	2300      	movs	r3, #0
 800765e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 8007660:	2300      	movs	r3, #0
 8007662:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 8007664:	2300      	movs	r3, #0
 8007666:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 8007668:	2300      	movs	r3, #0
 800766a:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 800766c:	2300      	movs	r3, #0
 800766e:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 8007670:	2300      	movs	r3, #0
 8007672:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 8007674:	484f      	ldr	r0, [pc, #316]	; (80077b4 <low_level_input+0x164>)
 8007676:	f7fc fb59 	bl	8003d2c <HAL_ETH_GetReceivedFrame_IT>
 800767a:	4603      	mov	r3, r0
 800767c:	2b00      	cmp	r3, #0
 800767e:	d001      	beq.n	8007684 <low_level_input+0x34>

    return NULL;
 8007680:	2300      	movs	r3, #0
 8007682:	e092      	b.n	80077aa <low_level_input+0x15a>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 8007684:	4b4b      	ldr	r3, [pc, #300]	; (80077b4 <low_level_input+0x164>)
 8007686:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007688:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 800768a:	4b4a      	ldr	r3, [pc, #296]	; (80077b4 <low_level_input+0x164>)
 800768c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800768e:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 8007690:	89fb      	ldrh	r3, [r7, #14]
 8007692:	2b00      	cmp	r3, #0
 8007694:	d007      	beq.n	80076a6 <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 8007696:	89fb      	ldrh	r3, [r7, #14]
 8007698:	f44f 72c1 	mov.w	r2, #386	; 0x182
 800769c:	4619      	mov	r1, r3
 800769e:	2000      	movs	r0, #0
 80076a0:	f006 fd50 	bl	800e144 <pbuf_alloc>
 80076a4:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 80076a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d04b      	beq.n	8007744 <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 80076ac:	4b41      	ldr	r3, [pc, #260]	; (80077b4 <low_level_input+0x164>)
 80076ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076b0:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 80076b2:	2300      	movs	r3, #0
 80076b4:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 80076b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80076ba:	e040      	b.n	800773e <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 80076bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076be:	895b      	ldrh	r3, [r3, #10]
 80076c0:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 80076c2:	2300      	movs	r3, #0
 80076c4:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 80076c6:	e021      	b.n	800770c <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 80076c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076ca:	685a      	ldr	r2, [r3, #4]
 80076cc:	69bb      	ldr	r3, [r7, #24]
 80076ce:	18d0      	adds	r0, r2, r3
 80076d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80076d2:	69fb      	ldr	r3, [r7, #28]
 80076d4:	18d1      	adds	r1, r2, r3
 80076d6:	69fb      	ldr	r3, [r7, #28]
 80076d8:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 80076dc:	3304      	adds	r3, #4
 80076de:	461a      	mov	r2, r3
 80076e0:	f013 fd6c 	bl	801b1bc <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 80076e4:	6a3b      	ldr	r3, [r7, #32]
 80076e6:	68db      	ldr	r3, [r3, #12]
 80076e8:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 80076ea:	6a3b      	ldr	r3, [r7, #32]
 80076ec:	689b      	ldr	r3, [r3, #8]
 80076ee:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 80076f0:	69fa      	ldr	r2, [r7, #28]
 80076f2:	697b      	ldr	r3, [r7, #20]
 80076f4:	4413      	add	r3, r2
 80076f6:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 80076fa:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 80076fc:	69ba      	ldr	r2, [r7, #24]
 80076fe:	69fb      	ldr	r3, [r7, #28]
 8007700:	1ad3      	subs	r3, r2, r3
 8007702:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8007706:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 8007708:	2300      	movs	r3, #0
 800770a:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800770c:	697a      	ldr	r2, [r7, #20]
 800770e:	69fb      	ldr	r3, [r7, #28]
 8007710:	4413      	add	r3, r2
 8007712:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8007716:	4293      	cmp	r3, r2
 8007718:	d8d6      	bhi.n	80076c8 <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 800771a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800771c:	685a      	ldr	r2, [r3, #4]
 800771e:	69bb      	ldr	r3, [r7, #24]
 8007720:	18d0      	adds	r0, r2, r3
 8007722:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007724:	69fb      	ldr	r3, [r7, #28]
 8007726:	4413      	add	r3, r2
 8007728:	697a      	ldr	r2, [r7, #20]
 800772a:	4619      	mov	r1, r3
 800772c:	f013 fd46 	bl	801b1bc <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8007730:	69fa      	ldr	r2, [r7, #28]
 8007732:	697b      	ldr	r3, [r7, #20]
 8007734:	4413      	add	r3, r2
 8007736:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8007738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	62bb      	str	r3, [r7, #40]	; 0x28
 800773e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007740:	2b00      	cmp	r3, #0
 8007742:	d1bb      	bne.n	80076bc <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8007744:	4b1b      	ldr	r3, [pc, #108]	; (80077b4 <low_level_input+0x164>)
 8007746:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007748:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800774a:	2300      	movs	r3, #0
 800774c:	613b      	str	r3, [r7, #16]
 800774e:	e00b      	b.n	8007768 <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8007750:	6a3b      	ldr	r3, [r7, #32]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8007758:	6a3b      	ldr	r3, [r7, #32]
 800775a:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800775c:	6a3b      	ldr	r3, [r7, #32]
 800775e:	68db      	ldr	r3, [r3, #12]
 8007760:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8007762:	693b      	ldr	r3, [r7, #16]
 8007764:	3301      	adds	r3, #1
 8007766:	613b      	str	r3, [r7, #16]
 8007768:	4b12      	ldr	r3, [pc, #72]	; (80077b4 <low_level_input+0x164>)
 800776a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800776c:	693a      	ldr	r2, [r7, #16]
 800776e:	429a      	cmp	r2, r3
 8007770:	d3ee      	bcc.n	8007750 <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 8007772:	4b10      	ldr	r3, [pc, #64]	; (80077b4 <low_level_input+0x164>)
 8007774:	2200      	movs	r2, #0
 8007776:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 8007778:	4b0e      	ldr	r3, [pc, #56]	; (80077b4 <low_level_input+0x164>)
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007780:	3314      	adds	r3, #20
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007788:	2b00      	cmp	r3, #0
 800778a:	d00d      	beq.n	80077a8 <low_level_input+0x158>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 800778c:	4b09      	ldr	r3, [pc, #36]	; (80077b4 <low_level_input+0x164>)
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007794:	3314      	adds	r3, #20
 8007796:	2280      	movs	r2, #128	; 0x80
 8007798:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 800779a:	4b06      	ldr	r3, [pc, #24]	; (80077b4 <low_level_input+0x164>)
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80077a2:	3308      	adds	r3, #8
 80077a4:	2200      	movs	r2, #0
 80077a6:	601a      	str	r2, [r3, #0]
  }
  return p;
 80077a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80077aa:	4618      	mov	r0, r3
 80077ac:	3730      	adds	r7, #48	; 0x30
 80077ae:	46bd      	mov	sp, r7
 80077b0:	bd80      	pop	{r7, pc}
 80077b2:	bf00      	nop
 80077b4:	2000bbb0 	.word	0x2000bbb0

080077b8 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void const * argument)
{
 80077b8:	b580      	push	{r7, lr}
 80077ba:	b084      	sub	sp, #16
 80077bc:	af00      	add	r7, sp, #0
 80077be:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	60fb      	str	r3, [r7, #12]

  for( ;; )
  {
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 80077c4:	4b12      	ldr	r3, [pc, #72]	; (8007810 <ethernetif_input+0x58>)
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	f04f 31ff 	mov.w	r1, #4294967295
 80077cc:	4618      	mov	r0, r3
 80077ce:	f000 fa91 	bl	8007cf4 <osSemaphoreWait>
 80077d2:	4603      	mov	r3, r0
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d1f5      	bne.n	80077c4 <ethernetif_input+0xc>
    {
      do
      {
        LOCK_TCPIP_CORE();
 80077d8:	480e      	ldr	r0, [pc, #56]	; (8007814 <ethernetif_input+0x5c>)
 80077da:	f013 fbf1 	bl	801afc0 <sys_mutex_lock>
        p = low_level_input( netif );
 80077de:	68f8      	ldr	r0, [r7, #12]
 80077e0:	f7ff ff36 	bl	8007650 <low_level_input>
 80077e4:	60b8      	str	r0, [r7, #8]
        if   (p != NULL)
 80077e6:	68bb      	ldr	r3, [r7, #8]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d00a      	beq.n	8007802 <ethernetif_input+0x4a>
        {
          if (netif->input( p, netif) != ERR_OK )
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	691b      	ldr	r3, [r3, #16]
 80077f0:	68f9      	ldr	r1, [r7, #12]
 80077f2:	68b8      	ldr	r0, [r7, #8]
 80077f4:	4798      	blx	r3
 80077f6:	4603      	mov	r3, r0
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d002      	beq.n	8007802 <ethernetif_input+0x4a>
          {
            pbuf_free(p);
 80077fc:	68b8      	ldr	r0, [r7, #8]
 80077fe:	f006 ffb7 	bl	800e770 <pbuf_free>
          }
        }
        UNLOCK_TCPIP_CORE();
 8007802:	4804      	ldr	r0, [pc, #16]	; (8007814 <ethernetif_input+0x5c>)
 8007804:	f013 fbeb 	bl	801afde <sys_mutex_unlock>
      } while(p!=NULL);
 8007808:	68bb      	ldr	r3, [r7, #8]
 800780a:	2b00      	cmp	r3, #0
 800780c:	d1e4      	bne.n	80077d8 <ethernetif_input+0x20>
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800780e:	e7d9      	b.n	80077c4 <ethernetif_input+0xc>
 8007810:	2000251c 	.word	0x2000251c
 8007814:	2000d408 	.word	0x2000d408

08007818 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8007818:	b580      	push	{r7, lr}
 800781a:	b082      	sub	sp, #8
 800781c:	af00      	add	r7, sp, #0
 800781e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	2b00      	cmp	r3, #0
 8007824:	d10a      	bne.n	800783c <ethernetif_init+0x24>
 8007826:	f44f 7219 	mov.w	r2, #612	; 0x264
 800782a:	490f      	ldr	r1, [pc, #60]	; (8007868 <ethernetif_init+0x50>)
 800782c:	480f      	ldr	r0, [pc, #60]	; (800786c <ethernetif_init+0x54>)
 800782e:	f013 fc71 	bl	801b114 <trace_printf>
 8007832:	490f      	ldr	r1, [pc, #60]	; (8007870 <ethernetif_init+0x58>)
 8007834:	480f      	ldr	r0, [pc, #60]	; (8007874 <ethernetif_init+0x5c>)
 8007836:	f013 fc6d 	bl	801b114 <trace_printf>
 800783a:	e7fe      	b.n	800783a <ethernetif_init+0x22>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	2273      	movs	r2, #115	; 0x73
 8007840:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  netif->name[1] = IFNAME1;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	2274      	movs	r2, #116	; 0x74
 8007848:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	4a0a      	ldr	r2, [pc, #40]	; (8007878 <ethernetif_init+0x60>)
 8007850:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	4a09      	ldr	r2, [pc, #36]	; (800787c <ethernetif_init+0x64>)
 8007856:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8007858:	6878      	ldr	r0, [r7, #4]
 800785a:	f7ff fd51 	bl	8007300 <low_level_init>

  return ERR_OK;
 800785e:	2300      	movs	r3, #0
}
 8007860:	4618      	mov	r0, r3
 8007862:	3708      	adds	r7, #8
 8007864:	46bd      	mov	sp, r7
 8007866:	bd80      	pop	{r7, pc}
 8007868:	0801cc00 	.word	0x0801cc00
 800786c:	0801cc10 	.word	0x0801cc10
 8007870:	0801cc30 	.word	0x0801cc30
 8007874:	0801cc4c 	.word	0x0801cc4c
 8007878:	08018ad5 	.word	0x08018ad5
 800787c:	08007515 	.word	0x08007515

08007880 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 8007880:	b580      	push	{r7, lr}
 8007882:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8007884:	f7fb fde4 	bl	8003450 <HAL_GetTick>
 8007888:	4603      	mov	r3, r0
}
 800788a:	4618      	mov	r0, r3
 800788c:	bd80      	pop	{r7, pc}
	...

08007890 <ethernetif_set_link>:
  * @param  netif: the network interface
  * @retval None
  */
void ethernetif_set_link(void const *argument)

{
 8007890:	b580      	push	{r7, lr}
 8007892:	b084      	sub	sp, #16
 8007894:	af00      	add	r7, sp, #0
 8007896:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8007898:	2300      	movs	r3, #0
 800789a:	60bb      	str	r3, [r7, #8]
  struct link_str *link_arg = (struct link_str *)argument;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	60fb      	str	r3, [r7, #12]

  for(;;)
  {
    /* Read PHY_BSR*/
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 80078a0:	f107 0308 	add.w	r3, r7, #8
 80078a4:	461a      	mov	r2, r3
 80078a6:	2101      	movs	r1, #1
 80078a8:	4816      	ldr	r0, [pc, #88]	; (8007904 <ethernetif_set_link+0x74>)
 80078aa:	f7fc fb42 	bl	8003f32 <HAL_ETH_ReadPHYRegister>

    regvalue &= PHY_LINKED_STATUS;
 80078ae:	68bb      	ldr	r3, [r7, #8]
 80078b0:	f003 0304 	and.w	r3, r3, #4
 80078b4:	60bb      	str	r3, [r7, #8]

    /* Check whether the netif link down and the PHY link is up */
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80078be:	f003 0304 	and.w	r3, r3, #4
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d108      	bne.n	80078d8 <ethernetif_set_link+0x48>
 80078c6:	68bb      	ldr	r3, [r7, #8]
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d005      	beq.n	80078d8 <ethernetif_set_link+0x48>
    {
      /* network cable is connected */
      netif_set_link_up(link_arg->netif);
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	4618      	mov	r0, r3
 80078d2:	f006 fafb 	bl	800decc <netif_set_link_up>
 80078d6:	e011      	b.n	80078fc <ethernetif_set_link+0x6c>
    }
    else if(netif_is_link_up(link_arg->netif) && (!regvalue))
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80078e0:	089b      	lsrs	r3, r3, #2
 80078e2:	f003 0301 	and.w	r3, r3, #1
 80078e6:	b2db      	uxtb	r3, r3
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d007      	beq.n	80078fc <ethernetif_set_link+0x6c>
 80078ec:	68bb      	ldr	r3, [r7, #8]
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d104      	bne.n	80078fc <ethernetif_set_link+0x6c>
    {
      /* network cable is dis-connected */
      netif_set_link_down(link_arg->netif);
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	4618      	mov	r0, r3
 80078f8:	f006 fb24 	bl	800df44 <netif_set_link_down>
    }

    /* Suspend thread for 200 ms */
    osDelay(200);
 80078fc:	20c8      	movs	r0, #200	; 0xc8
 80078fe:	f000 f916 	bl	8007b2e <osDelay>
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8007902:	e7cd      	b.n	80078a0 <ethernetif_set_link+0x10>
 8007904:	2000bbb0 	.word	0x2000bbb0

08007908 <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 8007908:	b580      	push	{r7, lr}
 800790a:	b084      	sub	sp, #16
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 8007910:	2300      	movs	r3, #0
 8007912:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 8007914:	2300      	movs	r3, #0
 8007916:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800791e:	089b      	lsrs	r3, r3, #2
 8007920:	f003 0301 	and.w	r3, r3, #1
 8007924:	b2db      	uxtb	r3, r3
 8007926:	2b00      	cmp	r3, #0
 8007928:	d05d      	beq.n	80079e6 <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 800792a:	4b34      	ldr	r3, [pc, #208]	; (80079fc <ethernetif_update_config+0xf4>)
 800792c:	685b      	ldr	r3, [r3, #4]
 800792e:	2b00      	cmp	r3, #0
 8007930:	d03f      	beq.n	80079b2 <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 8007932:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007936:	2100      	movs	r1, #0
 8007938:	4830      	ldr	r0, [pc, #192]	; (80079fc <ethernetif_update_config+0xf4>)
 800793a:	f7fc fb62 	bl	8004002 <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 800793e:	f7fb fd87 	bl	8003450 <HAL_GetTick>
 8007942:	4603      	mov	r3, r0
 8007944:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8007946:	f107 0308 	add.w	r3, r7, #8
 800794a:	461a      	mov	r2, r3
 800794c:	2101      	movs	r1, #1
 800794e:	482b      	ldr	r0, [pc, #172]	; (80079fc <ethernetif_update_config+0xf4>)
 8007950:	f7fc faef 	bl	8003f32 <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 8007954:	f7fb fd7c 	bl	8003450 <HAL_GetTick>
 8007958:	4602      	mov	r2, r0
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	1ad3      	subs	r3, r2, r3
 800795e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007962:	d828      	bhi.n	80079b6 <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8007964:	68bb      	ldr	r3, [r7, #8]
 8007966:	f003 0320 	and.w	r3, r3, #32
 800796a:	2b00      	cmp	r3, #0
 800796c:	d0eb      	beq.n	8007946 <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 800796e:	f107 0308 	add.w	r3, r7, #8
 8007972:	461a      	mov	r2, r3
 8007974:	211f      	movs	r1, #31
 8007976:	4821      	ldr	r0, [pc, #132]	; (80079fc <ethernetif_update_config+0xf4>)
 8007978:	f7fc fadb 	bl	8003f32 <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 800797c:	68bb      	ldr	r3, [r7, #8]
 800797e:	f003 0310 	and.w	r3, r3, #16
 8007982:	2b00      	cmp	r3, #0
 8007984:	d004      	beq.n	8007990 <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8007986:	4b1d      	ldr	r3, [pc, #116]	; (80079fc <ethernetif_update_config+0xf4>)
 8007988:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800798c:	60da      	str	r2, [r3, #12]
 800798e:	e002      	b.n	8007996 <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 8007990:	4b1a      	ldr	r3, [pc, #104]	; (80079fc <ethernetif_update_config+0xf4>)
 8007992:	2200      	movs	r2, #0
 8007994:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 8007996:	68bb      	ldr	r3, [r7, #8]
 8007998:	f003 0304 	and.w	r3, r3, #4
 800799c:	2b00      	cmp	r3, #0
 800799e:	d003      	beq.n	80079a8 <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 80079a0:	4b16      	ldr	r3, [pc, #88]	; (80079fc <ethernetif_update_config+0xf4>)
 80079a2:	2200      	movs	r2, #0
 80079a4:	609a      	str	r2, [r3, #8]
 80079a6:	e016      	b.n	80079d6 <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 80079a8:	4b14      	ldr	r3, [pc, #80]	; (80079fc <ethernetif_update_config+0xf4>)
 80079aa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80079ae:	609a      	str	r2, [r3, #8]
 80079b0:	e011      	b.n	80079d6 <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 80079b2:	bf00      	nop
 80079b4:	e000      	b.n	80079b8 <ethernetif_update_config+0xb0>
          goto error;
 80079b6:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 80079b8:	4b10      	ldr	r3, [pc, #64]	; (80079fc <ethernetif_update_config+0xf4>)
 80079ba:	68db      	ldr	r3, [r3, #12]
 80079bc:	08db      	lsrs	r3, r3, #3
 80079be:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 80079c0:	4b0e      	ldr	r3, [pc, #56]	; (80079fc <ethernetif_update_config+0xf4>)
 80079c2:	689b      	ldr	r3, [r3, #8]
 80079c4:	085b      	lsrs	r3, r3, #1
 80079c6:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 80079c8:	4313      	orrs	r3, r2
 80079ca:	b29b      	uxth	r3, r3
 80079cc:	461a      	mov	r2, r3
 80079ce:	2100      	movs	r1, #0
 80079d0:	480a      	ldr	r0, [pc, #40]	; (80079fc <ethernetif_update_config+0xf4>)
 80079d2:	f7fc fb16 	bl	8004002 <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 80079d6:	2100      	movs	r1, #0
 80079d8:	4808      	ldr	r0, [pc, #32]	; (80079fc <ethernetif_update_config+0xf4>)
 80079da:	f7fc fbd7 	bl	800418c <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 80079de:	4807      	ldr	r0, [pc, #28]	; (80079fc <ethernetif_update_config+0xf4>)
 80079e0:	f7fc fb75 	bl	80040ce <HAL_ETH_Start>
 80079e4:	e002      	b.n	80079ec <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 80079e6:	4805      	ldr	r0, [pc, #20]	; (80079fc <ethernetif_update_config+0xf4>)
 80079e8:	f7fc fba0 	bl	800412c <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 80079ec:	6878      	ldr	r0, [r7, #4]
 80079ee:	f000 f807 	bl	8007a00 <ethernetif_notify_conn_changed>
}
 80079f2:	bf00      	nop
 80079f4:	3710      	adds	r7, #16
 80079f6:	46bd      	mov	sp, r7
 80079f8:	bd80      	pop	{r7, pc}
 80079fa:	bf00      	nop
 80079fc:	2000bbb0 	.word	0x2000bbb0

08007a00 <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 8007a00:	b480      	push	{r7}
 8007a02:	b083      	sub	sp, #12
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 8007a08:	bf00      	nop
 8007a0a:	370c      	adds	r7, #12
 8007a0c:	46bd      	mov	sp, r7
 8007a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a12:	4770      	bx	lr

08007a14 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8007a14:	b480      	push	{r7}
 8007a16:	b085      	sub	sp, #20
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	4603      	mov	r3, r0
 8007a1c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8007a1e:	2300      	movs	r3, #0
 8007a20:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8007a22:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007a26:	2b84      	cmp	r3, #132	; 0x84
 8007a28:	d005      	beq.n	8007a36 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8007a2a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	4413      	add	r3, r2
 8007a32:	3303      	adds	r3, #3
 8007a34:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8007a36:	68fb      	ldr	r3, [r7, #12]
}
 8007a38:	4618      	mov	r0, r3
 8007a3a:	3714      	adds	r7, #20
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a42:	4770      	bx	lr

08007a44 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8007a44:	b480      	push	{r7}
 8007a46:	b083      	sub	sp, #12
 8007a48:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007a4a:	f3ef 8305 	mrs	r3, IPSR
 8007a4e:	607b      	str	r3, [r7, #4]
  return(result);
 8007a50:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	bf14      	ite	ne
 8007a56:	2301      	movne	r3, #1
 8007a58:	2300      	moveq	r3, #0
 8007a5a:	b2db      	uxtb	r3, r3
}
 8007a5c:	4618      	mov	r0, r3
 8007a5e:	370c      	adds	r7, #12
 8007a60:	46bd      	mov	sp, r7
 8007a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a66:	4770      	bx	lr

08007a68 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8007a68:	b580      	push	{r7, lr}
 8007a6a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8007a6c:	f001 fda8 	bl	80095c0 <vTaskStartScheduler>
  
  return osOK;
 8007a70:	2300      	movs	r3, #0
}
 8007a72:	4618      	mov	r0, r3
 8007a74:	bd80      	pop	{r7, pc}

08007a76 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8007a76:	b580      	push	{r7, lr}
 8007a78:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8007a7a:	f7ff ffe3 	bl	8007a44 <inHandlerMode>
 8007a7e:	4603      	mov	r3, r0
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d003      	beq.n	8007a8c <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8007a84:	f001 feb6 	bl	80097f4 <xTaskGetTickCountFromISR>
 8007a88:	4603      	mov	r3, r0
 8007a8a:	e002      	b.n	8007a92 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8007a8c:	f001 fea2 	bl	80097d4 <xTaskGetTickCount>
 8007a90:	4603      	mov	r3, r0
  }
}
 8007a92:	4618      	mov	r0, r3
 8007a94:	bd80      	pop	{r7, pc}

08007a96 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8007a96:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007a98:	b089      	sub	sp, #36	; 0x24
 8007a9a:	af04      	add	r7, sp, #16
 8007a9c:	6078      	str	r0, [r7, #4]
 8007a9e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	695b      	ldr	r3, [r3, #20]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d020      	beq.n	8007aea <osThreadCreate+0x54>
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	699b      	ldr	r3, [r3, #24]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d01c      	beq.n	8007aea <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	685c      	ldr	r4, [r3, #4]
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681d      	ldr	r5, [r3, #0]
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	691e      	ldr	r6, [r3, #16]
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	f7ff ffa6 	bl	8007a14 <makeFreeRtosPriority>
 8007ac8:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	695b      	ldr	r3, [r3, #20]
 8007ace:	687a      	ldr	r2, [r7, #4]
 8007ad0:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007ad2:	9202      	str	r2, [sp, #8]
 8007ad4:	9301      	str	r3, [sp, #4]
 8007ad6:	9100      	str	r1, [sp, #0]
 8007ad8:	683b      	ldr	r3, [r7, #0]
 8007ada:	4632      	mov	r2, r6
 8007adc:	4629      	mov	r1, r5
 8007ade:	4620      	mov	r0, r4
 8007ae0:	f001 fb28 	bl	8009134 <xTaskCreateStatic>
 8007ae4:	4603      	mov	r3, r0
 8007ae6:	60fb      	str	r3, [r7, #12]
 8007ae8:	e01c      	b.n	8007b24 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	685c      	ldr	r4, [r3, #4]
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007af6:	b29e      	uxth	r6, r3
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007afe:	4618      	mov	r0, r3
 8007b00:	f7ff ff88 	bl	8007a14 <makeFreeRtosPriority>
 8007b04:	4602      	mov	r2, r0
 8007b06:	f107 030c 	add.w	r3, r7, #12
 8007b0a:	9301      	str	r3, [sp, #4]
 8007b0c:	9200      	str	r2, [sp, #0]
 8007b0e:	683b      	ldr	r3, [r7, #0]
 8007b10:	4632      	mov	r2, r6
 8007b12:	4629      	mov	r1, r5
 8007b14:	4620      	mov	r0, r4
 8007b16:	f001 fb6a 	bl	80091ee <xTaskCreate>
 8007b1a:	4603      	mov	r3, r0
 8007b1c:	2b01      	cmp	r3, #1
 8007b1e:	d001      	beq.n	8007b24 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8007b20:	2300      	movs	r3, #0
 8007b22:	e000      	b.n	8007b26 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8007b24:	68fb      	ldr	r3, [r7, #12]
}
 8007b26:	4618      	mov	r0, r3
 8007b28:	3714      	adds	r7, #20
 8007b2a:	46bd      	mov	sp, r7
 8007b2c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007b2e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8007b2e:	b580      	push	{r7, lr}
 8007b30:	b084      	sub	sp, #16
 8007b32:	af00      	add	r7, sp, #0
 8007b34:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d001      	beq.n	8007b44 <osDelay+0x16>
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	e000      	b.n	8007b46 <osDelay+0x18>
 8007b44:	2301      	movs	r3, #1
 8007b46:	4618      	mov	r0, r3
 8007b48:	f001 fd06 	bl	8009558 <vTaskDelay>
  
  return osOK;
 8007b4c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8007b4e:	4618      	mov	r0, r3
 8007b50:	3710      	adds	r7, #16
 8007b52:	46bd      	mov	sp, r7
 8007b54:	bd80      	pop	{r7, pc}

08007b56 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8007b56:	b580      	push	{r7, lr}
 8007b58:	b082      	sub	sp, #8
 8007b5a:	af00      	add	r7, sp, #0
 8007b5c:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	685b      	ldr	r3, [r3, #4]
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d007      	beq.n	8007b76 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	685b      	ldr	r3, [r3, #4]
 8007b6a:	4619      	mov	r1, r3
 8007b6c:	2001      	movs	r0, #1
 8007b6e:	f000 fc84 	bl	800847a <xQueueCreateMutexStatic>
 8007b72:	4603      	mov	r3, r0
 8007b74:	e003      	b.n	8007b7e <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8007b76:	2001      	movs	r0, #1
 8007b78:	f000 fc67 	bl	800844a <xQueueCreateMutex>
 8007b7c:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8007b7e:	4618      	mov	r0, r3
 8007b80:	3708      	adds	r7, #8
 8007b82:	46bd      	mov	sp, r7
 8007b84:	bd80      	pop	{r7, pc}
	...

08007b88 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8007b88:	b580      	push	{r7, lr}
 8007b8a:	b084      	sub	sp, #16
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	6078      	str	r0, [r7, #4]
 8007b90:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8007b92:	2300      	movs	r3, #0
 8007b94:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d101      	bne.n	8007ba0 <osMutexWait+0x18>
    return osErrorParameter;
 8007b9c:	2380      	movs	r3, #128	; 0x80
 8007b9e:	e03a      	b.n	8007c16 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8007ba0:	2300      	movs	r3, #0
 8007ba2:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8007ba4:	683b      	ldr	r3, [r7, #0]
 8007ba6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007baa:	d103      	bne.n	8007bb4 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8007bac:	f04f 33ff 	mov.w	r3, #4294967295
 8007bb0:	60fb      	str	r3, [r7, #12]
 8007bb2:	e009      	b.n	8007bc8 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8007bb4:	683b      	ldr	r3, [r7, #0]
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d006      	beq.n	8007bc8 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8007bba:	683b      	ldr	r3, [r7, #0]
 8007bbc:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d101      	bne.n	8007bc8 <osMutexWait+0x40>
      ticks = 1;
 8007bc4:	2301      	movs	r3, #1
 8007bc6:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8007bc8:	f7ff ff3c 	bl	8007a44 <inHandlerMode>
 8007bcc:	4603      	mov	r3, r0
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d017      	beq.n	8007c02 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8007bd2:	f107 0308 	add.w	r3, r7, #8
 8007bd6:	461a      	mov	r2, r3
 8007bd8:	2100      	movs	r1, #0
 8007bda:	6878      	ldr	r0, [r7, #4]
 8007bdc:	f001 f878 	bl	8008cd0 <xQueueReceiveFromISR>
 8007be0:	4603      	mov	r3, r0
 8007be2:	2b01      	cmp	r3, #1
 8007be4:	d001      	beq.n	8007bea <osMutexWait+0x62>
      return osErrorOS;
 8007be6:	23ff      	movs	r3, #255	; 0xff
 8007be8:	e015      	b.n	8007c16 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8007bea:	68bb      	ldr	r3, [r7, #8]
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d011      	beq.n	8007c14 <osMutexWait+0x8c>
 8007bf0:	4b0b      	ldr	r3, [pc, #44]	; (8007c20 <osMutexWait+0x98>)
 8007bf2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007bf6:	601a      	str	r2, [r3, #0]
 8007bf8:	f3bf 8f4f 	dsb	sy
 8007bfc:	f3bf 8f6f 	isb	sy
 8007c00:	e008      	b.n	8007c14 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8007c02:	68f9      	ldr	r1, [r7, #12]
 8007c04:	6878      	ldr	r0, [r7, #4]
 8007c06:	f000 ff57 	bl	8008ab8 <xQueueSemaphoreTake>
 8007c0a:	4603      	mov	r3, r0
 8007c0c:	2b01      	cmp	r3, #1
 8007c0e:	d001      	beq.n	8007c14 <osMutexWait+0x8c>
    return osErrorOS;
 8007c10:	23ff      	movs	r3, #255	; 0xff
 8007c12:	e000      	b.n	8007c16 <osMutexWait+0x8e>
  }
  
  return osOK;
 8007c14:	2300      	movs	r3, #0
}
 8007c16:	4618      	mov	r0, r3
 8007c18:	3710      	adds	r7, #16
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	bd80      	pop	{r7, pc}
 8007c1e:	bf00      	nop
 8007c20:	e000ed04 	.word	0xe000ed04

08007c24 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8007c24:	b580      	push	{r7, lr}
 8007c26:	b084      	sub	sp, #16
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8007c2c:	2300      	movs	r3, #0
 8007c2e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8007c30:	2300      	movs	r3, #0
 8007c32:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8007c34:	f7ff ff06 	bl	8007a44 <inHandlerMode>
 8007c38:	4603      	mov	r3, r0
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d016      	beq.n	8007c6c <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8007c3e:	f107 0308 	add.w	r3, r7, #8
 8007c42:	4619      	mov	r1, r3
 8007c44:	6878      	ldr	r0, [r7, #4]
 8007c46:	f000 fdc9 	bl	80087dc <xQueueGiveFromISR>
 8007c4a:	4603      	mov	r3, r0
 8007c4c:	2b01      	cmp	r3, #1
 8007c4e:	d001      	beq.n	8007c54 <osMutexRelease+0x30>
      return osErrorOS;
 8007c50:	23ff      	movs	r3, #255	; 0xff
 8007c52:	e017      	b.n	8007c84 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8007c54:	68bb      	ldr	r3, [r7, #8]
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d013      	beq.n	8007c82 <osMutexRelease+0x5e>
 8007c5a:	4b0c      	ldr	r3, [pc, #48]	; (8007c8c <osMutexRelease+0x68>)
 8007c5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c60:	601a      	str	r2, [r3, #0]
 8007c62:	f3bf 8f4f 	dsb	sy
 8007c66:	f3bf 8f6f 	isb	sy
 8007c6a:	e00a      	b.n	8007c82 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8007c6c:	2300      	movs	r3, #0
 8007c6e:	2200      	movs	r2, #0
 8007c70:	2100      	movs	r1, #0
 8007c72:	6878      	ldr	r0, [r7, #4]
 8007c74:	f000 fc1c 	bl	80084b0 <xQueueGenericSend>
 8007c78:	4603      	mov	r3, r0
 8007c7a:	2b01      	cmp	r3, #1
 8007c7c:	d001      	beq.n	8007c82 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8007c7e:	23ff      	movs	r3, #255	; 0xff
 8007c80:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8007c82:	68fb      	ldr	r3, [r7, #12]
}
 8007c84:	4618      	mov	r0, r3
 8007c86:	3710      	adds	r7, #16
 8007c88:	46bd      	mov	sp, r7
 8007c8a:	bd80      	pop	{r7, pc}
 8007c8c:	e000ed04 	.word	0xe000ed04

08007c90 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8007c90:	b580      	push	{r7, lr}
 8007c92:	b086      	sub	sp, #24
 8007c94:	af02      	add	r7, sp, #8
 8007c96:	6078      	str	r0, [r7, #4]
 8007c98:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	685b      	ldr	r3, [r3, #4]
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d00f      	beq.n	8007cc2 <osSemaphoreCreate+0x32>
    if (count == 1) {
 8007ca2:	683b      	ldr	r3, [r7, #0]
 8007ca4:	2b01      	cmp	r3, #1
 8007ca6:	d10a      	bne.n	8007cbe <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	685b      	ldr	r3, [r3, #4]
 8007cac:	2203      	movs	r2, #3
 8007cae:	9200      	str	r2, [sp, #0]
 8007cb0:	2200      	movs	r2, #0
 8007cb2:	2100      	movs	r1, #0
 8007cb4:	2001      	movs	r0, #1
 8007cb6:	f000 fad7 	bl	8008268 <xQueueGenericCreateStatic>
 8007cba:	4603      	mov	r3, r0
 8007cbc:	e016      	b.n	8007cec <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8007cbe:	2300      	movs	r3, #0
 8007cc0:	e014      	b.n	8007cec <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8007cc2:	683b      	ldr	r3, [r7, #0]
 8007cc4:	2b01      	cmp	r3, #1
 8007cc6:	d110      	bne.n	8007cea <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8007cc8:	2203      	movs	r2, #3
 8007cca:	2100      	movs	r1, #0
 8007ccc:	2001      	movs	r0, #1
 8007cce:	f000 fb43 	bl	8008358 <xQueueGenericCreate>
 8007cd2:	60f8      	str	r0, [r7, #12]
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d005      	beq.n	8007ce6 <osSemaphoreCreate+0x56>
 8007cda:	2300      	movs	r3, #0
 8007cdc:	2200      	movs	r2, #0
 8007cde:	2100      	movs	r1, #0
 8007ce0:	68f8      	ldr	r0, [r7, #12]
 8007ce2:	f000 fbe5 	bl	80084b0 <xQueueGenericSend>
      return sema;
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	e000      	b.n	8007cec <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8007cea:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8007cec:	4618      	mov	r0, r3
 8007cee:	3710      	adds	r7, #16
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	bd80      	pop	{r7, pc}

08007cf4 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8007cf4:	b580      	push	{r7, lr}
 8007cf6:	b084      	sub	sp, #16
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	6078      	str	r0, [r7, #4]
 8007cfc:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8007cfe:	2300      	movs	r3, #0
 8007d00:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d101      	bne.n	8007d0c <osSemaphoreWait+0x18>
    return osErrorParameter;
 8007d08:	2380      	movs	r3, #128	; 0x80
 8007d0a:	e03a      	b.n	8007d82 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8007d0c:	2300      	movs	r3, #0
 8007d0e:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8007d10:	683b      	ldr	r3, [r7, #0]
 8007d12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d16:	d103      	bne.n	8007d20 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8007d18:	f04f 33ff 	mov.w	r3, #4294967295
 8007d1c:	60fb      	str	r3, [r7, #12]
 8007d1e:	e009      	b.n	8007d34 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8007d20:	683b      	ldr	r3, [r7, #0]
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d006      	beq.n	8007d34 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8007d26:	683b      	ldr	r3, [r7, #0]
 8007d28:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d101      	bne.n	8007d34 <osSemaphoreWait+0x40>
      ticks = 1;
 8007d30:	2301      	movs	r3, #1
 8007d32:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8007d34:	f7ff fe86 	bl	8007a44 <inHandlerMode>
 8007d38:	4603      	mov	r3, r0
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d017      	beq.n	8007d6e <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8007d3e:	f107 0308 	add.w	r3, r7, #8
 8007d42:	461a      	mov	r2, r3
 8007d44:	2100      	movs	r1, #0
 8007d46:	6878      	ldr	r0, [r7, #4]
 8007d48:	f000 ffc2 	bl	8008cd0 <xQueueReceiveFromISR>
 8007d4c:	4603      	mov	r3, r0
 8007d4e:	2b01      	cmp	r3, #1
 8007d50:	d001      	beq.n	8007d56 <osSemaphoreWait+0x62>
      return osErrorOS;
 8007d52:	23ff      	movs	r3, #255	; 0xff
 8007d54:	e015      	b.n	8007d82 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8007d56:	68bb      	ldr	r3, [r7, #8]
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d011      	beq.n	8007d80 <osSemaphoreWait+0x8c>
 8007d5c:	4b0b      	ldr	r3, [pc, #44]	; (8007d8c <osSemaphoreWait+0x98>)
 8007d5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d62:	601a      	str	r2, [r3, #0]
 8007d64:	f3bf 8f4f 	dsb	sy
 8007d68:	f3bf 8f6f 	isb	sy
 8007d6c:	e008      	b.n	8007d80 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8007d6e:	68f9      	ldr	r1, [r7, #12]
 8007d70:	6878      	ldr	r0, [r7, #4]
 8007d72:	f000 fea1 	bl	8008ab8 <xQueueSemaphoreTake>
 8007d76:	4603      	mov	r3, r0
 8007d78:	2b01      	cmp	r3, #1
 8007d7a:	d001      	beq.n	8007d80 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8007d7c:	23ff      	movs	r3, #255	; 0xff
 8007d7e:	e000      	b.n	8007d82 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8007d80:	2300      	movs	r3, #0
}
 8007d82:	4618      	mov	r0, r3
 8007d84:	3710      	adds	r7, #16
 8007d86:	46bd      	mov	sp, r7
 8007d88:	bd80      	pop	{r7, pc}
 8007d8a:	bf00      	nop
 8007d8c:	e000ed04 	.word	0xe000ed04

08007d90 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8007d90:	b580      	push	{r7, lr}
 8007d92:	b084      	sub	sp, #16
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8007d98:	2300      	movs	r3, #0
 8007d9a:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8007d9c:	2300      	movs	r3, #0
 8007d9e:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8007da0:	f7ff fe50 	bl	8007a44 <inHandlerMode>
 8007da4:	4603      	mov	r3, r0
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d016      	beq.n	8007dd8 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8007daa:	f107 0308 	add.w	r3, r7, #8
 8007dae:	4619      	mov	r1, r3
 8007db0:	6878      	ldr	r0, [r7, #4]
 8007db2:	f000 fd13 	bl	80087dc <xQueueGiveFromISR>
 8007db6:	4603      	mov	r3, r0
 8007db8:	2b01      	cmp	r3, #1
 8007dba:	d001      	beq.n	8007dc0 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8007dbc:	23ff      	movs	r3, #255	; 0xff
 8007dbe:	e017      	b.n	8007df0 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8007dc0:	68bb      	ldr	r3, [r7, #8]
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d013      	beq.n	8007dee <osSemaphoreRelease+0x5e>
 8007dc6:	4b0c      	ldr	r3, [pc, #48]	; (8007df8 <osSemaphoreRelease+0x68>)
 8007dc8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007dcc:	601a      	str	r2, [r3, #0]
 8007dce:	f3bf 8f4f 	dsb	sy
 8007dd2:	f3bf 8f6f 	isb	sy
 8007dd6:	e00a      	b.n	8007dee <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8007dd8:	2300      	movs	r3, #0
 8007dda:	2200      	movs	r2, #0
 8007ddc:	2100      	movs	r1, #0
 8007dde:	6878      	ldr	r0, [r7, #4]
 8007de0:	f000 fb66 	bl	80084b0 <xQueueGenericSend>
 8007de4:	4603      	mov	r3, r0
 8007de6:	2b01      	cmp	r3, #1
 8007de8:	d001      	beq.n	8007dee <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8007dea:	23ff      	movs	r3, #255	; 0xff
 8007dec:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8007dee:	68fb      	ldr	r3, [r7, #12]
}
 8007df0:	4618      	mov	r0, r3
 8007df2:	3710      	adds	r7, #16
 8007df4:	46bd      	mov	sp, r7
 8007df6:	bd80      	pop	{r7, pc}
 8007df8:	e000ed04 	.word	0xe000ed04

08007dfc <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 8007dfc:	b580      	push	{r7, lr}
 8007dfe:	b082      	sub	sp, #8
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8007e04:	f7ff fe1e 	bl	8007a44 <inHandlerMode>
 8007e08:	4603      	mov	r3, r0
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d001      	beq.n	8007e12 <osSemaphoreDelete+0x16>
    return osErrorISR;
 8007e0e:	2382      	movs	r3, #130	; 0x82
 8007e10:	e003      	b.n	8007e1a <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 8007e12:	6878      	ldr	r0, [r7, #4]
 8007e14:	f001 f818 	bl	8008e48 <vQueueDelete>

  return osOK; 
 8007e18:	2300      	movs	r3, #0
}
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	3708      	adds	r7, #8
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	bd80      	pop	{r7, pc}

08007e22 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8007e22:	b590      	push	{r4, r7, lr}
 8007e24:	b085      	sub	sp, #20
 8007e26:	af02      	add	r7, sp, #8
 8007e28:	6078      	str	r0, [r7, #4]
 8007e2a:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	689b      	ldr	r3, [r3, #8]
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d011      	beq.n	8007e58 <osMessageCreate+0x36>
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	68db      	ldr	r3, [r3, #12]
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d00d      	beq.n	8007e58 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	6818      	ldr	r0, [r3, #0]
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	6859      	ldr	r1, [r3, #4]
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	689a      	ldr	r2, [r3, #8]
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	68db      	ldr	r3, [r3, #12]
 8007e4c:	2400      	movs	r4, #0
 8007e4e:	9400      	str	r4, [sp, #0]
 8007e50:	f000 fa0a 	bl	8008268 <xQueueGenericCreateStatic>
 8007e54:	4603      	mov	r3, r0
 8007e56:	e008      	b.n	8007e6a <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	6818      	ldr	r0, [r3, #0]
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	685b      	ldr	r3, [r3, #4]
 8007e60:	2200      	movs	r2, #0
 8007e62:	4619      	mov	r1, r3
 8007e64:	f000 fa78 	bl	8008358 <xQueueGenericCreate>
 8007e68:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8007e6a:	4618      	mov	r0, r3
 8007e6c:	370c      	adds	r7, #12
 8007e6e:	46bd      	mov	sp, r7
 8007e70:	bd90      	pop	{r4, r7, pc}
	...

08007e74 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8007e74:	b580      	push	{r7, lr}
 8007e76:	b086      	sub	sp, #24
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	60f8      	str	r0, [r7, #12]
 8007e7c:	60b9      	str	r1, [r7, #8]
 8007e7e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8007e80:	2300      	movs	r3, #0
 8007e82:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8007e88:	697b      	ldr	r3, [r7, #20]
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d101      	bne.n	8007e92 <osMessagePut+0x1e>
    ticks = 1;
 8007e8e:	2301      	movs	r3, #1
 8007e90:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8007e92:	f7ff fdd7 	bl	8007a44 <inHandlerMode>
 8007e96:	4603      	mov	r3, r0
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d018      	beq.n	8007ece <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8007e9c:	f107 0210 	add.w	r2, r7, #16
 8007ea0:	f107 0108 	add.w	r1, r7, #8
 8007ea4:	2300      	movs	r3, #0
 8007ea6:	68f8      	ldr	r0, [r7, #12]
 8007ea8:	f000 fc00 	bl	80086ac <xQueueGenericSendFromISR>
 8007eac:	4603      	mov	r3, r0
 8007eae:	2b01      	cmp	r3, #1
 8007eb0:	d001      	beq.n	8007eb6 <osMessagePut+0x42>
      return osErrorOS;
 8007eb2:	23ff      	movs	r3, #255	; 0xff
 8007eb4:	e018      	b.n	8007ee8 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8007eb6:	693b      	ldr	r3, [r7, #16]
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d014      	beq.n	8007ee6 <osMessagePut+0x72>
 8007ebc:	4b0c      	ldr	r3, [pc, #48]	; (8007ef0 <osMessagePut+0x7c>)
 8007ebe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ec2:	601a      	str	r2, [r3, #0]
 8007ec4:	f3bf 8f4f 	dsb	sy
 8007ec8:	f3bf 8f6f 	isb	sy
 8007ecc:	e00b      	b.n	8007ee6 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8007ece:	f107 0108 	add.w	r1, r7, #8
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	697a      	ldr	r2, [r7, #20]
 8007ed6:	68f8      	ldr	r0, [r7, #12]
 8007ed8:	f000 faea 	bl	80084b0 <xQueueGenericSend>
 8007edc:	4603      	mov	r3, r0
 8007ede:	2b01      	cmp	r3, #1
 8007ee0:	d001      	beq.n	8007ee6 <osMessagePut+0x72>
      return osErrorOS;
 8007ee2:	23ff      	movs	r3, #255	; 0xff
 8007ee4:	e000      	b.n	8007ee8 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8007ee6:	2300      	movs	r3, #0
}
 8007ee8:	4618      	mov	r0, r3
 8007eea:	3718      	adds	r7, #24
 8007eec:	46bd      	mov	sp, r7
 8007eee:	bd80      	pop	{r7, pc}
 8007ef0:	e000ed04 	.word	0xe000ed04

08007ef4 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8007ef4:	b590      	push	{r4, r7, lr}
 8007ef6:	b08b      	sub	sp, #44	; 0x2c
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	60f8      	str	r0, [r7, #12]
 8007efc:	60b9      	str	r1, [r7, #8]
 8007efe:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8007f00:	68bb      	ldr	r3, [r7, #8]
 8007f02:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8007f04:	2300      	movs	r3, #0
 8007f06:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8007f08:	68bb      	ldr	r3, [r7, #8]
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d10a      	bne.n	8007f24 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8007f0e:	2380      	movs	r3, #128	; 0x80
 8007f10:	617b      	str	r3, [r7, #20]
    return event;
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	461c      	mov	r4, r3
 8007f16:	f107 0314 	add.w	r3, r7, #20
 8007f1a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007f1e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007f22:	e054      	b.n	8007fce <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8007f24:	2300      	movs	r3, #0
 8007f26:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8007f28:	2300      	movs	r3, #0
 8007f2a:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f32:	d103      	bne.n	8007f3c <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8007f34:	f04f 33ff 	mov.w	r3, #4294967295
 8007f38:	627b      	str	r3, [r7, #36]	; 0x24
 8007f3a:	e009      	b.n	8007f50 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d006      	beq.n	8007f50 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8007f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d101      	bne.n	8007f50 <osMessageGet+0x5c>
      ticks = 1;
 8007f4c:	2301      	movs	r3, #1
 8007f4e:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8007f50:	f7ff fd78 	bl	8007a44 <inHandlerMode>
 8007f54:	4603      	mov	r3, r0
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d01c      	beq.n	8007f94 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8007f5a:	f107 0220 	add.w	r2, r7, #32
 8007f5e:	f107 0314 	add.w	r3, r7, #20
 8007f62:	3304      	adds	r3, #4
 8007f64:	4619      	mov	r1, r3
 8007f66:	68b8      	ldr	r0, [r7, #8]
 8007f68:	f000 feb2 	bl	8008cd0 <xQueueReceiveFromISR>
 8007f6c:	4603      	mov	r3, r0
 8007f6e:	2b01      	cmp	r3, #1
 8007f70:	d102      	bne.n	8007f78 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8007f72:	2310      	movs	r3, #16
 8007f74:	617b      	str	r3, [r7, #20]
 8007f76:	e001      	b.n	8007f7c <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8007f78:	2300      	movs	r3, #0
 8007f7a:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8007f7c:	6a3b      	ldr	r3, [r7, #32]
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d01d      	beq.n	8007fbe <osMessageGet+0xca>
 8007f82:	4b15      	ldr	r3, [pc, #84]	; (8007fd8 <osMessageGet+0xe4>)
 8007f84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f88:	601a      	str	r2, [r3, #0]
 8007f8a:	f3bf 8f4f 	dsb	sy
 8007f8e:	f3bf 8f6f 	isb	sy
 8007f92:	e014      	b.n	8007fbe <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8007f94:	f107 0314 	add.w	r3, r7, #20
 8007f98:	3304      	adds	r3, #4
 8007f9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f9c:	4619      	mov	r1, r3
 8007f9e:	68b8      	ldr	r0, [r7, #8]
 8007fa0:	f000 fcaa 	bl	80088f8 <xQueueReceive>
 8007fa4:	4603      	mov	r3, r0
 8007fa6:	2b01      	cmp	r3, #1
 8007fa8:	d102      	bne.n	8007fb0 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8007faa:	2310      	movs	r3, #16
 8007fac:	617b      	str	r3, [r7, #20]
 8007fae:	e006      	b.n	8007fbe <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8007fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d101      	bne.n	8007fba <osMessageGet+0xc6>
 8007fb6:	2300      	movs	r3, #0
 8007fb8:	e000      	b.n	8007fbc <osMessageGet+0xc8>
 8007fba:	2340      	movs	r3, #64	; 0x40
 8007fbc:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	461c      	mov	r4, r3
 8007fc2:	f107 0314 	add.w	r3, r7, #20
 8007fc6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007fca:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8007fce:	68f8      	ldr	r0, [r7, #12]
 8007fd0:	372c      	adds	r7, #44	; 0x2c
 8007fd2:	46bd      	mov	sp, r7
 8007fd4:	bd90      	pop	{r4, r7, pc}
 8007fd6:	bf00      	nop
 8007fd8:	e000ed04 	.word	0xe000ed04

08007fdc <osMessageWaiting>:
* @brief  Get the number of messaged stored in a queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
 8007fdc:	b580      	push	{r7, lr}
 8007fde:	b082      	sub	sp, #8
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8007fe4:	f7ff fd2e 	bl	8007a44 <inHandlerMode>
 8007fe8:	4603      	mov	r3, r0
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d004      	beq.n	8007ff8 <osMessageWaiting+0x1c>
    return uxQueueMessagesWaitingFromISR(queue_id);
 8007fee:	6878      	ldr	r0, [r7, #4]
 8007ff0:	f000 ff0c 	bl	8008e0c <uxQueueMessagesWaitingFromISR>
 8007ff4:	4603      	mov	r3, r0
 8007ff6:	e003      	b.n	8008000 <osMessageWaiting+0x24>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 8007ff8:	6878      	ldr	r0, [r7, #4]
 8007ffa:	f000 fee9 	bl	8008dd0 <uxQueueMessagesWaiting>
 8007ffe:	4603      	mov	r3, r0
  }
}
 8008000:	4618      	mov	r0, r3
 8008002:	3708      	adds	r7, #8
 8008004:	46bd      	mov	sp, r7
 8008006:	bd80      	pop	{r7, pc}

08008008 <osMessageDelete>:
* @brief Delete a Message Queue
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osMessageDelete (osMessageQId queue_id)
{
 8008008:	b580      	push	{r7, lr}
 800800a:	b082      	sub	sp, #8
 800800c:	af00      	add	r7, sp, #0
 800800e:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8008010:	f7ff fd18 	bl	8007a44 <inHandlerMode>
 8008014:	4603      	mov	r3, r0
 8008016:	2b00      	cmp	r3, #0
 8008018:	d001      	beq.n	800801e <osMessageDelete+0x16>
    return osErrorISR;
 800801a:	2382      	movs	r3, #130	; 0x82
 800801c:	e003      	b.n	8008026 <osMessageDelete+0x1e>
  }

  vQueueDelete(queue_id);
 800801e:	6878      	ldr	r0, [r7, #4]
 8008020:	f000 ff12 	bl	8008e48 <vQueueDelete>

  return osOK; 
 8008024:	2300      	movs	r3, #0
}
 8008026:	4618      	mov	r0, r3
 8008028:	3708      	adds	r7, #8
 800802a:	46bd      	mov	sp, r7
 800802c:	bd80      	pop	{r7, pc}

0800802e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800802e:	b480      	push	{r7}
 8008030:	b083      	sub	sp, #12
 8008032:	af00      	add	r7, sp, #0
 8008034:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	f103 0208 	add.w	r2, r3, #8
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	f04f 32ff 	mov.w	r2, #4294967295
 8008046:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	f103 0208 	add.w	r2, r3, #8
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	f103 0208 	add.w	r2, r3, #8
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	2200      	movs	r2, #0
 8008060:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008062:	bf00      	nop
 8008064:	370c      	adds	r7, #12
 8008066:	46bd      	mov	sp, r7
 8008068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806c:	4770      	bx	lr

0800806e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800806e:	b480      	push	{r7}
 8008070:	b083      	sub	sp, #12
 8008072:	af00      	add	r7, sp, #0
 8008074:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	2200      	movs	r2, #0
 800807a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800807c:	bf00      	nop
 800807e:	370c      	adds	r7, #12
 8008080:	46bd      	mov	sp, r7
 8008082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008086:	4770      	bx	lr

08008088 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008088:	b480      	push	{r7}
 800808a:	b085      	sub	sp, #20
 800808c:	af00      	add	r7, sp, #0
 800808e:	6078      	str	r0, [r7, #4]
 8008090:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	685b      	ldr	r3, [r3, #4]
 8008096:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008098:	683b      	ldr	r3, [r7, #0]
 800809a:	68fa      	ldr	r2, [r7, #12]
 800809c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	689a      	ldr	r2, [r3, #8]
 80080a2:	683b      	ldr	r3, [r7, #0]
 80080a4:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	689b      	ldr	r3, [r3, #8]
 80080aa:	683a      	ldr	r2, [r7, #0]
 80080ac:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	683a      	ldr	r2, [r7, #0]
 80080b2:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80080b4:	683b      	ldr	r3, [r7, #0]
 80080b6:	687a      	ldr	r2, [r7, #4]
 80080b8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	1c5a      	adds	r2, r3, #1
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	601a      	str	r2, [r3, #0]
}
 80080c4:	bf00      	nop
 80080c6:	3714      	adds	r7, #20
 80080c8:	46bd      	mov	sp, r7
 80080ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ce:	4770      	bx	lr

080080d0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80080d0:	b480      	push	{r7}
 80080d2:	b085      	sub	sp, #20
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	6078      	str	r0, [r7, #4]
 80080d8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80080da:	683b      	ldr	r3, [r7, #0]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80080e0:	68bb      	ldr	r3, [r7, #8]
 80080e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080e6:	d103      	bne.n	80080f0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	691b      	ldr	r3, [r3, #16]
 80080ec:	60fb      	str	r3, [r7, #12]
 80080ee:	e00c      	b.n	800810a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	3308      	adds	r3, #8
 80080f4:	60fb      	str	r3, [r7, #12]
 80080f6:	e002      	b.n	80080fe <vListInsert+0x2e>
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	685b      	ldr	r3, [r3, #4]
 80080fc:	60fb      	str	r3, [r7, #12]
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	685b      	ldr	r3, [r3, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	68ba      	ldr	r2, [r7, #8]
 8008106:	429a      	cmp	r2, r3
 8008108:	d2f6      	bcs.n	80080f8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	685a      	ldr	r2, [r3, #4]
 800810e:	683b      	ldr	r3, [r7, #0]
 8008110:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008112:	683b      	ldr	r3, [r7, #0]
 8008114:	685b      	ldr	r3, [r3, #4]
 8008116:	683a      	ldr	r2, [r7, #0]
 8008118:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800811a:	683b      	ldr	r3, [r7, #0]
 800811c:	68fa      	ldr	r2, [r7, #12]
 800811e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	683a      	ldr	r2, [r7, #0]
 8008124:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008126:	683b      	ldr	r3, [r7, #0]
 8008128:	687a      	ldr	r2, [r7, #4]
 800812a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	1c5a      	adds	r2, r3, #1
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	601a      	str	r2, [r3, #0]
}
 8008136:	bf00      	nop
 8008138:	3714      	adds	r7, #20
 800813a:	46bd      	mov	sp, r7
 800813c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008140:	4770      	bx	lr

08008142 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008142:	b480      	push	{r7}
 8008144:	b085      	sub	sp, #20
 8008146:	af00      	add	r7, sp, #0
 8008148:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	691b      	ldr	r3, [r3, #16]
 800814e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	685b      	ldr	r3, [r3, #4]
 8008154:	687a      	ldr	r2, [r7, #4]
 8008156:	6892      	ldr	r2, [r2, #8]
 8008158:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	689b      	ldr	r3, [r3, #8]
 800815e:	687a      	ldr	r2, [r7, #4]
 8008160:	6852      	ldr	r2, [r2, #4]
 8008162:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	685b      	ldr	r3, [r3, #4]
 8008168:	687a      	ldr	r2, [r7, #4]
 800816a:	429a      	cmp	r2, r3
 800816c:	d103      	bne.n	8008176 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	689a      	ldr	r2, [r3, #8]
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	2200      	movs	r2, #0
 800817a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	1e5a      	subs	r2, r3, #1
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	681b      	ldr	r3, [r3, #0]
}
 800818a:	4618      	mov	r0, r3
 800818c:	3714      	adds	r7, #20
 800818e:	46bd      	mov	sp, r7
 8008190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008194:	4770      	bx	lr
	...

08008198 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008198:	b580      	push	{r7, lr}
 800819a:	b084      	sub	sp, #16
 800819c:	af00      	add	r7, sp, #0
 800819e:	6078      	str	r0, [r7, #4]
 80081a0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d10a      	bne.n	80081c2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80081ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081b0:	f383 8811 	msr	BASEPRI, r3
 80081b4:	f3bf 8f6f 	isb	sy
 80081b8:	f3bf 8f4f 	dsb	sy
 80081bc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80081be:	bf00      	nop
 80081c0:	e7fe      	b.n	80081c0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80081c2:	f002 fa7f 	bl	800a6c4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	681a      	ldr	r2, [r3, #0]
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081ce:	68f9      	ldr	r1, [r7, #12]
 80081d0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80081d2:	fb01 f303 	mul.w	r3, r1, r3
 80081d6:	441a      	add	r2, r3
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	2200      	movs	r2, #0
 80081e0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	681a      	ldr	r2, [r3, #0]
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	681a      	ldr	r2, [r3, #0]
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081f2:	3b01      	subs	r3, #1
 80081f4:	68f9      	ldr	r1, [r7, #12]
 80081f6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80081f8:	fb01 f303 	mul.w	r3, r1, r3
 80081fc:	441a      	add	r2, r3
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	22ff      	movs	r2, #255	; 0xff
 8008206:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	22ff      	movs	r2, #255	; 0xff
 800820e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8008212:	683b      	ldr	r3, [r7, #0]
 8008214:	2b00      	cmp	r3, #0
 8008216:	d114      	bne.n	8008242 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	691b      	ldr	r3, [r3, #16]
 800821c:	2b00      	cmp	r3, #0
 800821e:	d01a      	beq.n	8008256 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	3310      	adds	r3, #16
 8008224:	4618      	mov	r0, r3
 8008226:	f001 fc2f 	bl	8009a88 <xTaskRemoveFromEventList>
 800822a:	4603      	mov	r3, r0
 800822c:	2b00      	cmp	r3, #0
 800822e:	d012      	beq.n	8008256 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008230:	4b0c      	ldr	r3, [pc, #48]	; (8008264 <xQueueGenericReset+0xcc>)
 8008232:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008236:	601a      	str	r2, [r3, #0]
 8008238:	f3bf 8f4f 	dsb	sy
 800823c:	f3bf 8f6f 	isb	sy
 8008240:	e009      	b.n	8008256 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	3310      	adds	r3, #16
 8008246:	4618      	mov	r0, r3
 8008248:	f7ff fef1 	bl	800802e <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	3324      	adds	r3, #36	; 0x24
 8008250:	4618      	mov	r0, r3
 8008252:	f7ff feec 	bl	800802e <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008256:	f002 fa65 	bl	800a724 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800825a:	2301      	movs	r3, #1
}
 800825c:	4618      	mov	r0, r3
 800825e:	3710      	adds	r7, #16
 8008260:	46bd      	mov	sp, r7
 8008262:	bd80      	pop	{r7, pc}
 8008264:	e000ed04 	.word	0xe000ed04

08008268 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008268:	b580      	push	{r7, lr}
 800826a:	b08e      	sub	sp, #56	; 0x38
 800826c:	af02      	add	r7, sp, #8
 800826e:	60f8      	str	r0, [r7, #12]
 8008270:	60b9      	str	r1, [r7, #8]
 8008272:	607a      	str	r2, [r7, #4]
 8008274:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	2b00      	cmp	r3, #0
 800827a:	d10a      	bne.n	8008292 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800827c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008280:	f383 8811 	msr	BASEPRI, r3
 8008284:	f3bf 8f6f 	isb	sy
 8008288:	f3bf 8f4f 	dsb	sy
 800828c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800828e:	bf00      	nop
 8008290:	e7fe      	b.n	8008290 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008292:	683b      	ldr	r3, [r7, #0]
 8008294:	2b00      	cmp	r3, #0
 8008296:	d10a      	bne.n	80082ae <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8008298:	f04f 0350 	mov.w	r3, #80	; 0x50
 800829c:	f383 8811 	msr	BASEPRI, r3
 80082a0:	f3bf 8f6f 	isb	sy
 80082a4:	f3bf 8f4f 	dsb	sy
 80082a8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80082aa:	bf00      	nop
 80082ac:	e7fe      	b.n	80082ac <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d002      	beq.n	80082ba <xQueueGenericCreateStatic+0x52>
 80082b4:	68bb      	ldr	r3, [r7, #8]
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d001      	beq.n	80082be <xQueueGenericCreateStatic+0x56>
 80082ba:	2301      	movs	r3, #1
 80082bc:	e000      	b.n	80082c0 <xQueueGenericCreateStatic+0x58>
 80082be:	2300      	movs	r3, #0
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d10a      	bne.n	80082da <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80082c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082c8:	f383 8811 	msr	BASEPRI, r3
 80082cc:	f3bf 8f6f 	isb	sy
 80082d0:	f3bf 8f4f 	dsb	sy
 80082d4:	623b      	str	r3, [r7, #32]
}
 80082d6:	bf00      	nop
 80082d8:	e7fe      	b.n	80082d8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d102      	bne.n	80082e6 <xQueueGenericCreateStatic+0x7e>
 80082e0:	68bb      	ldr	r3, [r7, #8]
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d101      	bne.n	80082ea <xQueueGenericCreateStatic+0x82>
 80082e6:	2301      	movs	r3, #1
 80082e8:	e000      	b.n	80082ec <xQueueGenericCreateStatic+0x84>
 80082ea:	2300      	movs	r3, #0
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d10a      	bne.n	8008306 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80082f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082f4:	f383 8811 	msr	BASEPRI, r3
 80082f8:	f3bf 8f6f 	isb	sy
 80082fc:	f3bf 8f4f 	dsb	sy
 8008300:	61fb      	str	r3, [r7, #28]
}
 8008302:	bf00      	nop
 8008304:	e7fe      	b.n	8008304 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008306:	2348      	movs	r3, #72	; 0x48
 8008308:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800830a:	697b      	ldr	r3, [r7, #20]
 800830c:	2b48      	cmp	r3, #72	; 0x48
 800830e:	d00a      	beq.n	8008326 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8008310:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008314:	f383 8811 	msr	BASEPRI, r3
 8008318:	f3bf 8f6f 	isb	sy
 800831c:	f3bf 8f4f 	dsb	sy
 8008320:	61bb      	str	r3, [r7, #24]
}
 8008322:	bf00      	nop
 8008324:	e7fe      	b.n	8008324 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008326:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008328:	683b      	ldr	r3, [r7, #0]
 800832a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800832c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800832e:	2b00      	cmp	r3, #0
 8008330:	d00d      	beq.n	800834e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008332:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008334:	2201      	movs	r2, #1
 8008336:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800833a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800833e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008340:	9300      	str	r3, [sp, #0]
 8008342:	4613      	mov	r3, r2
 8008344:	687a      	ldr	r2, [r7, #4]
 8008346:	68b9      	ldr	r1, [r7, #8]
 8008348:	68f8      	ldr	r0, [r7, #12]
 800834a:	f000 f845 	bl	80083d8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800834e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008350:	4618      	mov	r0, r3
 8008352:	3730      	adds	r7, #48	; 0x30
 8008354:	46bd      	mov	sp, r7
 8008356:	bd80      	pop	{r7, pc}

08008358 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8008358:	b580      	push	{r7, lr}
 800835a:	b08a      	sub	sp, #40	; 0x28
 800835c:	af02      	add	r7, sp, #8
 800835e:	60f8      	str	r0, [r7, #12]
 8008360:	60b9      	str	r1, [r7, #8]
 8008362:	4613      	mov	r3, r2
 8008364:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	2b00      	cmp	r3, #0
 800836a:	d10a      	bne.n	8008382 <xQueueGenericCreate+0x2a>
	__asm volatile
 800836c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008370:	f383 8811 	msr	BASEPRI, r3
 8008374:	f3bf 8f6f 	isb	sy
 8008378:	f3bf 8f4f 	dsb	sy
 800837c:	613b      	str	r3, [r7, #16]
}
 800837e:	bf00      	nop
 8008380:	e7fe      	b.n	8008380 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8008382:	68bb      	ldr	r3, [r7, #8]
 8008384:	2b00      	cmp	r3, #0
 8008386:	d102      	bne.n	800838e <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8008388:	2300      	movs	r3, #0
 800838a:	61fb      	str	r3, [r7, #28]
 800838c:	e004      	b.n	8008398 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	68ba      	ldr	r2, [r7, #8]
 8008392:	fb02 f303 	mul.w	r3, r2, r3
 8008396:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8008398:	69fb      	ldr	r3, [r7, #28]
 800839a:	3348      	adds	r3, #72	; 0x48
 800839c:	4618      	mov	r0, r3
 800839e:	f002 fab3 	bl	800a908 <pvPortMalloc>
 80083a2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80083a4:	69bb      	ldr	r3, [r7, #24]
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d011      	beq.n	80083ce <xQueueGenericCreate+0x76>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80083aa:	69bb      	ldr	r3, [r7, #24]
 80083ac:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80083ae:	697b      	ldr	r3, [r7, #20]
 80083b0:	3348      	adds	r3, #72	; 0x48
 80083b2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80083b4:	69bb      	ldr	r3, [r7, #24]
 80083b6:	2200      	movs	r2, #0
 80083b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80083bc:	79fa      	ldrb	r2, [r7, #7]
 80083be:	69bb      	ldr	r3, [r7, #24]
 80083c0:	9300      	str	r3, [sp, #0]
 80083c2:	4613      	mov	r3, r2
 80083c4:	697a      	ldr	r2, [r7, #20]
 80083c6:	68b9      	ldr	r1, [r7, #8]
 80083c8:	68f8      	ldr	r0, [r7, #12]
 80083ca:	f000 f805 	bl	80083d8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80083ce:	69bb      	ldr	r3, [r7, #24]
	}
 80083d0:	4618      	mov	r0, r3
 80083d2:	3720      	adds	r7, #32
 80083d4:	46bd      	mov	sp, r7
 80083d6:	bd80      	pop	{r7, pc}

080083d8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80083d8:	b580      	push	{r7, lr}
 80083da:	b084      	sub	sp, #16
 80083dc:	af00      	add	r7, sp, #0
 80083de:	60f8      	str	r0, [r7, #12]
 80083e0:	60b9      	str	r1, [r7, #8]
 80083e2:	607a      	str	r2, [r7, #4]
 80083e4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80083e6:	68bb      	ldr	r3, [r7, #8]
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d103      	bne.n	80083f4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80083ec:	69bb      	ldr	r3, [r7, #24]
 80083ee:	69ba      	ldr	r2, [r7, #24]
 80083f0:	601a      	str	r2, [r3, #0]
 80083f2:	e002      	b.n	80083fa <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80083f4:	69bb      	ldr	r3, [r7, #24]
 80083f6:	687a      	ldr	r2, [r7, #4]
 80083f8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80083fa:	69bb      	ldr	r3, [r7, #24]
 80083fc:	68fa      	ldr	r2, [r7, #12]
 80083fe:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008400:	69bb      	ldr	r3, [r7, #24]
 8008402:	68ba      	ldr	r2, [r7, #8]
 8008404:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008406:	2101      	movs	r1, #1
 8008408:	69b8      	ldr	r0, [r7, #24]
 800840a:	f7ff fec5 	bl	8008198 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800840e:	bf00      	nop
 8008410:	3710      	adds	r7, #16
 8008412:	46bd      	mov	sp, r7
 8008414:	bd80      	pop	{r7, pc}

08008416 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8008416:	b580      	push	{r7, lr}
 8008418:	b082      	sub	sp, #8
 800841a:	af00      	add	r7, sp, #0
 800841c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	2b00      	cmp	r3, #0
 8008422:	d00e      	beq.n	8008442 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	2200      	movs	r2, #0
 8008428:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	2200      	movs	r2, #0
 800842e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	2200      	movs	r2, #0
 8008434:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8008436:	2300      	movs	r3, #0
 8008438:	2200      	movs	r2, #0
 800843a:	2100      	movs	r1, #0
 800843c:	6878      	ldr	r0, [r7, #4]
 800843e:	f000 f837 	bl	80084b0 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8008442:	bf00      	nop
 8008444:	3708      	adds	r7, #8
 8008446:	46bd      	mov	sp, r7
 8008448:	bd80      	pop	{r7, pc}

0800844a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800844a:	b580      	push	{r7, lr}
 800844c:	b086      	sub	sp, #24
 800844e:	af00      	add	r7, sp, #0
 8008450:	4603      	mov	r3, r0
 8008452:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8008454:	2301      	movs	r3, #1
 8008456:	617b      	str	r3, [r7, #20]
 8008458:	2300      	movs	r3, #0
 800845a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800845c:	79fb      	ldrb	r3, [r7, #7]
 800845e:	461a      	mov	r2, r3
 8008460:	6939      	ldr	r1, [r7, #16]
 8008462:	6978      	ldr	r0, [r7, #20]
 8008464:	f7ff ff78 	bl	8008358 <xQueueGenericCreate>
 8008468:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800846a:	68f8      	ldr	r0, [r7, #12]
 800846c:	f7ff ffd3 	bl	8008416 <prvInitialiseMutex>

		return xNewQueue;
 8008470:	68fb      	ldr	r3, [r7, #12]
	}
 8008472:	4618      	mov	r0, r3
 8008474:	3718      	adds	r7, #24
 8008476:	46bd      	mov	sp, r7
 8008478:	bd80      	pop	{r7, pc}

0800847a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800847a:	b580      	push	{r7, lr}
 800847c:	b088      	sub	sp, #32
 800847e:	af02      	add	r7, sp, #8
 8008480:	4603      	mov	r3, r0
 8008482:	6039      	str	r1, [r7, #0]
 8008484:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8008486:	2301      	movs	r3, #1
 8008488:	617b      	str	r3, [r7, #20]
 800848a:	2300      	movs	r3, #0
 800848c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800848e:	79fb      	ldrb	r3, [r7, #7]
 8008490:	9300      	str	r3, [sp, #0]
 8008492:	683b      	ldr	r3, [r7, #0]
 8008494:	2200      	movs	r2, #0
 8008496:	6939      	ldr	r1, [r7, #16]
 8008498:	6978      	ldr	r0, [r7, #20]
 800849a:	f7ff fee5 	bl	8008268 <xQueueGenericCreateStatic>
 800849e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80084a0:	68f8      	ldr	r0, [r7, #12]
 80084a2:	f7ff ffb8 	bl	8008416 <prvInitialiseMutex>

		return xNewQueue;
 80084a6:	68fb      	ldr	r3, [r7, #12]
	}
 80084a8:	4618      	mov	r0, r3
 80084aa:	3718      	adds	r7, #24
 80084ac:	46bd      	mov	sp, r7
 80084ae:	bd80      	pop	{r7, pc}

080084b0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80084b0:	b580      	push	{r7, lr}
 80084b2:	b08e      	sub	sp, #56	; 0x38
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	60f8      	str	r0, [r7, #12]
 80084b8:	60b9      	str	r1, [r7, #8]
 80084ba:	607a      	str	r2, [r7, #4]
 80084bc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80084be:	2300      	movs	r3, #0
 80084c0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80084c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d10a      	bne.n	80084e2 <xQueueGenericSend+0x32>
	__asm volatile
 80084cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084d0:	f383 8811 	msr	BASEPRI, r3
 80084d4:	f3bf 8f6f 	isb	sy
 80084d8:	f3bf 8f4f 	dsb	sy
 80084dc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80084de:	bf00      	nop
 80084e0:	e7fe      	b.n	80084e0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80084e2:	68bb      	ldr	r3, [r7, #8]
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d103      	bne.n	80084f0 <xQueueGenericSend+0x40>
 80084e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d101      	bne.n	80084f4 <xQueueGenericSend+0x44>
 80084f0:	2301      	movs	r3, #1
 80084f2:	e000      	b.n	80084f6 <xQueueGenericSend+0x46>
 80084f4:	2300      	movs	r3, #0
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d10a      	bne.n	8008510 <xQueueGenericSend+0x60>
	__asm volatile
 80084fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084fe:	f383 8811 	msr	BASEPRI, r3
 8008502:	f3bf 8f6f 	isb	sy
 8008506:	f3bf 8f4f 	dsb	sy
 800850a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800850c:	bf00      	nop
 800850e:	e7fe      	b.n	800850e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008510:	683b      	ldr	r3, [r7, #0]
 8008512:	2b02      	cmp	r3, #2
 8008514:	d103      	bne.n	800851e <xQueueGenericSend+0x6e>
 8008516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008518:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800851a:	2b01      	cmp	r3, #1
 800851c:	d101      	bne.n	8008522 <xQueueGenericSend+0x72>
 800851e:	2301      	movs	r3, #1
 8008520:	e000      	b.n	8008524 <xQueueGenericSend+0x74>
 8008522:	2300      	movs	r3, #0
 8008524:	2b00      	cmp	r3, #0
 8008526:	d10a      	bne.n	800853e <xQueueGenericSend+0x8e>
	__asm volatile
 8008528:	f04f 0350 	mov.w	r3, #80	; 0x50
 800852c:	f383 8811 	msr	BASEPRI, r3
 8008530:	f3bf 8f6f 	isb	sy
 8008534:	f3bf 8f4f 	dsb	sy
 8008538:	623b      	str	r3, [r7, #32]
}
 800853a:	bf00      	nop
 800853c:	e7fe      	b.n	800853c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800853e:	f001 fc5f 	bl	8009e00 <xTaskGetSchedulerState>
 8008542:	4603      	mov	r3, r0
 8008544:	2b00      	cmp	r3, #0
 8008546:	d102      	bne.n	800854e <xQueueGenericSend+0x9e>
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	2b00      	cmp	r3, #0
 800854c:	d101      	bne.n	8008552 <xQueueGenericSend+0xa2>
 800854e:	2301      	movs	r3, #1
 8008550:	e000      	b.n	8008554 <xQueueGenericSend+0xa4>
 8008552:	2300      	movs	r3, #0
 8008554:	2b00      	cmp	r3, #0
 8008556:	d10a      	bne.n	800856e <xQueueGenericSend+0xbe>
	__asm volatile
 8008558:	f04f 0350 	mov.w	r3, #80	; 0x50
 800855c:	f383 8811 	msr	BASEPRI, r3
 8008560:	f3bf 8f6f 	isb	sy
 8008564:	f3bf 8f4f 	dsb	sy
 8008568:	61fb      	str	r3, [r7, #28]
}
 800856a:	bf00      	nop
 800856c:	e7fe      	b.n	800856c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800856e:	f002 f8a9 	bl	800a6c4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008574:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008578:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800857a:	429a      	cmp	r2, r3
 800857c:	d302      	bcc.n	8008584 <xQueueGenericSend+0xd4>
 800857e:	683b      	ldr	r3, [r7, #0]
 8008580:	2b02      	cmp	r3, #2
 8008582:	d129      	bne.n	80085d8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008584:	683a      	ldr	r2, [r7, #0]
 8008586:	68b9      	ldr	r1, [r7, #8]
 8008588:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800858a:	f000 fc98 	bl	8008ebe <prvCopyDataToQueue>
 800858e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008594:	2b00      	cmp	r3, #0
 8008596:	d010      	beq.n	80085ba <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008598:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800859a:	3324      	adds	r3, #36	; 0x24
 800859c:	4618      	mov	r0, r3
 800859e:	f001 fa73 	bl	8009a88 <xTaskRemoveFromEventList>
 80085a2:	4603      	mov	r3, r0
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d013      	beq.n	80085d0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80085a8:	4b3f      	ldr	r3, [pc, #252]	; (80086a8 <xQueueGenericSend+0x1f8>)
 80085aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80085ae:	601a      	str	r2, [r3, #0]
 80085b0:	f3bf 8f4f 	dsb	sy
 80085b4:	f3bf 8f6f 	isb	sy
 80085b8:	e00a      	b.n	80085d0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80085ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d007      	beq.n	80085d0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80085c0:	4b39      	ldr	r3, [pc, #228]	; (80086a8 <xQueueGenericSend+0x1f8>)
 80085c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80085c6:	601a      	str	r2, [r3, #0]
 80085c8:	f3bf 8f4f 	dsb	sy
 80085cc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80085d0:	f002 f8a8 	bl	800a724 <vPortExitCritical>
				return pdPASS;
 80085d4:	2301      	movs	r3, #1
 80085d6:	e063      	b.n	80086a0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d103      	bne.n	80085e6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80085de:	f002 f8a1 	bl	800a724 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80085e2:	2300      	movs	r3, #0
 80085e4:	e05c      	b.n	80086a0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80085e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d106      	bne.n	80085fa <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80085ec:	f107 0314 	add.w	r3, r7, #20
 80085f0:	4618      	mov	r0, r3
 80085f2:	f001 faab 	bl	8009b4c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80085f6:	2301      	movs	r3, #1
 80085f8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80085fa:	f002 f893 	bl	800a724 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80085fe:	f001 f83f 	bl	8009680 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008602:	f002 f85f 	bl	800a6c4 <vPortEnterCritical>
 8008606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008608:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800860c:	b25b      	sxtb	r3, r3
 800860e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008612:	d103      	bne.n	800861c <xQueueGenericSend+0x16c>
 8008614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008616:	2200      	movs	r2, #0
 8008618:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800861c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800861e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008622:	b25b      	sxtb	r3, r3
 8008624:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008628:	d103      	bne.n	8008632 <xQueueGenericSend+0x182>
 800862a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800862c:	2200      	movs	r2, #0
 800862e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008632:	f002 f877 	bl	800a724 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008636:	1d3a      	adds	r2, r7, #4
 8008638:	f107 0314 	add.w	r3, r7, #20
 800863c:	4611      	mov	r1, r2
 800863e:	4618      	mov	r0, r3
 8008640:	f001 fa9a 	bl	8009b78 <xTaskCheckForTimeOut>
 8008644:	4603      	mov	r3, r0
 8008646:	2b00      	cmp	r3, #0
 8008648:	d124      	bne.n	8008694 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800864a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800864c:	f000 fd2f 	bl	80090ae <prvIsQueueFull>
 8008650:	4603      	mov	r3, r0
 8008652:	2b00      	cmp	r3, #0
 8008654:	d018      	beq.n	8008688 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008658:	3310      	adds	r3, #16
 800865a:	687a      	ldr	r2, [r7, #4]
 800865c:	4611      	mov	r1, r2
 800865e:	4618      	mov	r0, r3
 8008660:	f001 f9ee 	bl	8009a40 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008664:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008666:	f000 fcba 	bl	8008fde <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800866a:	f001 f817 	bl	800969c <xTaskResumeAll>
 800866e:	4603      	mov	r3, r0
 8008670:	2b00      	cmp	r3, #0
 8008672:	f47f af7c 	bne.w	800856e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8008676:	4b0c      	ldr	r3, [pc, #48]	; (80086a8 <xQueueGenericSend+0x1f8>)
 8008678:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800867c:	601a      	str	r2, [r3, #0]
 800867e:	f3bf 8f4f 	dsb	sy
 8008682:	f3bf 8f6f 	isb	sy
 8008686:	e772      	b.n	800856e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008688:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800868a:	f000 fca8 	bl	8008fde <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800868e:	f001 f805 	bl	800969c <xTaskResumeAll>
 8008692:	e76c      	b.n	800856e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008694:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008696:	f000 fca2 	bl	8008fde <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800869a:	f000 ffff 	bl	800969c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800869e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80086a0:	4618      	mov	r0, r3
 80086a2:	3738      	adds	r7, #56	; 0x38
 80086a4:	46bd      	mov	sp, r7
 80086a6:	bd80      	pop	{r7, pc}
 80086a8:	e000ed04 	.word	0xe000ed04

080086ac <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80086ac:	b580      	push	{r7, lr}
 80086ae:	b08e      	sub	sp, #56	; 0x38
 80086b0:	af00      	add	r7, sp, #0
 80086b2:	60f8      	str	r0, [r7, #12]
 80086b4:	60b9      	str	r1, [r7, #8]
 80086b6:	607a      	str	r2, [r7, #4]
 80086b8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80086be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d10a      	bne.n	80086da <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80086c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086c8:	f383 8811 	msr	BASEPRI, r3
 80086cc:	f3bf 8f6f 	isb	sy
 80086d0:	f3bf 8f4f 	dsb	sy
 80086d4:	627b      	str	r3, [r7, #36]	; 0x24
}
 80086d6:	bf00      	nop
 80086d8:	e7fe      	b.n	80086d8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80086da:	68bb      	ldr	r3, [r7, #8]
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d103      	bne.n	80086e8 <xQueueGenericSendFromISR+0x3c>
 80086e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d101      	bne.n	80086ec <xQueueGenericSendFromISR+0x40>
 80086e8:	2301      	movs	r3, #1
 80086ea:	e000      	b.n	80086ee <xQueueGenericSendFromISR+0x42>
 80086ec:	2300      	movs	r3, #0
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d10a      	bne.n	8008708 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80086f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086f6:	f383 8811 	msr	BASEPRI, r3
 80086fa:	f3bf 8f6f 	isb	sy
 80086fe:	f3bf 8f4f 	dsb	sy
 8008702:	623b      	str	r3, [r7, #32]
}
 8008704:	bf00      	nop
 8008706:	e7fe      	b.n	8008706 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008708:	683b      	ldr	r3, [r7, #0]
 800870a:	2b02      	cmp	r3, #2
 800870c:	d103      	bne.n	8008716 <xQueueGenericSendFromISR+0x6a>
 800870e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008710:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008712:	2b01      	cmp	r3, #1
 8008714:	d101      	bne.n	800871a <xQueueGenericSendFromISR+0x6e>
 8008716:	2301      	movs	r3, #1
 8008718:	e000      	b.n	800871c <xQueueGenericSendFromISR+0x70>
 800871a:	2300      	movs	r3, #0
 800871c:	2b00      	cmp	r3, #0
 800871e:	d10a      	bne.n	8008736 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8008720:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008724:	f383 8811 	msr	BASEPRI, r3
 8008728:	f3bf 8f6f 	isb	sy
 800872c:	f3bf 8f4f 	dsb	sy
 8008730:	61fb      	str	r3, [r7, #28]
}
 8008732:	bf00      	nop
 8008734:	e7fe      	b.n	8008734 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008736:	f002 f8a7 	bl	800a888 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800873a:	f3ef 8211 	mrs	r2, BASEPRI
 800873e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008742:	f383 8811 	msr	BASEPRI, r3
 8008746:	f3bf 8f6f 	isb	sy
 800874a:	f3bf 8f4f 	dsb	sy
 800874e:	61ba      	str	r2, [r7, #24]
 8008750:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008752:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008754:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008758:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800875a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800875c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800875e:	429a      	cmp	r2, r3
 8008760:	d302      	bcc.n	8008768 <xQueueGenericSendFromISR+0xbc>
 8008762:	683b      	ldr	r3, [r7, #0]
 8008764:	2b02      	cmp	r3, #2
 8008766:	d12c      	bne.n	80087c2 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008768:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800876a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800876e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008772:	683a      	ldr	r2, [r7, #0]
 8008774:	68b9      	ldr	r1, [r7, #8]
 8008776:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008778:	f000 fba1 	bl	8008ebe <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800877c:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8008780:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008784:	d112      	bne.n	80087ac <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800878a:	2b00      	cmp	r3, #0
 800878c:	d016      	beq.n	80087bc <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800878e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008790:	3324      	adds	r3, #36	; 0x24
 8008792:	4618      	mov	r0, r3
 8008794:	f001 f978 	bl	8009a88 <xTaskRemoveFromEventList>
 8008798:	4603      	mov	r3, r0
 800879a:	2b00      	cmp	r3, #0
 800879c:	d00e      	beq.n	80087bc <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d00b      	beq.n	80087bc <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	2201      	movs	r2, #1
 80087a8:	601a      	str	r2, [r3, #0]
 80087aa:	e007      	b.n	80087bc <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80087ac:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80087b0:	3301      	adds	r3, #1
 80087b2:	b2db      	uxtb	r3, r3
 80087b4:	b25a      	sxtb	r2, r3
 80087b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80087bc:	2301      	movs	r3, #1
 80087be:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80087c0:	e001      	b.n	80087c6 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80087c2:	2300      	movs	r3, #0
 80087c4:	637b      	str	r3, [r7, #52]	; 0x34
 80087c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087c8:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80087ca:	693b      	ldr	r3, [r7, #16]
 80087cc:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80087d0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80087d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80087d4:	4618      	mov	r0, r3
 80087d6:	3738      	adds	r7, #56	; 0x38
 80087d8:	46bd      	mov	sp, r7
 80087da:	bd80      	pop	{r7, pc}

080087dc <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80087dc:	b580      	push	{r7, lr}
 80087de:	b08e      	sub	sp, #56	; 0x38
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	6078      	str	r0, [r7, #4]
 80087e4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80087ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d10a      	bne.n	8008806 <xQueueGiveFromISR+0x2a>
	__asm volatile
 80087f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087f4:	f383 8811 	msr	BASEPRI, r3
 80087f8:	f3bf 8f6f 	isb	sy
 80087fc:	f3bf 8f4f 	dsb	sy
 8008800:	623b      	str	r3, [r7, #32]
}
 8008802:	bf00      	nop
 8008804:	e7fe      	b.n	8008804 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800880a:	2b00      	cmp	r3, #0
 800880c:	d00a      	beq.n	8008824 <xQueueGiveFromISR+0x48>
	__asm volatile
 800880e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008812:	f383 8811 	msr	BASEPRI, r3
 8008816:	f3bf 8f6f 	isb	sy
 800881a:	f3bf 8f4f 	dsb	sy
 800881e:	61fb      	str	r3, [r7, #28]
}
 8008820:	bf00      	nop
 8008822:	e7fe      	b.n	8008822 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8008824:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	2b00      	cmp	r3, #0
 800882a:	d103      	bne.n	8008834 <xQueueGiveFromISR+0x58>
 800882c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800882e:	689b      	ldr	r3, [r3, #8]
 8008830:	2b00      	cmp	r3, #0
 8008832:	d101      	bne.n	8008838 <xQueueGiveFromISR+0x5c>
 8008834:	2301      	movs	r3, #1
 8008836:	e000      	b.n	800883a <xQueueGiveFromISR+0x5e>
 8008838:	2300      	movs	r3, #0
 800883a:	2b00      	cmp	r3, #0
 800883c:	d10a      	bne.n	8008854 <xQueueGiveFromISR+0x78>
	__asm volatile
 800883e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008842:	f383 8811 	msr	BASEPRI, r3
 8008846:	f3bf 8f6f 	isb	sy
 800884a:	f3bf 8f4f 	dsb	sy
 800884e:	61bb      	str	r3, [r7, #24]
}
 8008850:	bf00      	nop
 8008852:	e7fe      	b.n	8008852 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008854:	f002 f818 	bl	800a888 <vPortValidateInterruptPriority>
	__asm volatile
 8008858:	f3ef 8211 	mrs	r2, BASEPRI
 800885c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008860:	f383 8811 	msr	BASEPRI, r3
 8008864:	f3bf 8f6f 	isb	sy
 8008868:	f3bf 8f4f 	dsb	sy
 800886c:	617a      	str	r2, [r7, #20]
 800886e:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8008870:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008872:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008876:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008878:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800887a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800887c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800887e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008880:	429a      	cmp	r2, r3
 8008882:	d22b      	bcs.n	80088dc <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008884:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008886:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800888a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800888e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008890:	1c5a      	adds	r2, r3, #1
 8008892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008894:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008896:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800889a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800889e:	d112      	bne.n	80088c6 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80088a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d016      	beq.n	80088d6 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80088a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088aa:	3324      	adds	r3, #36	; 0x24
 80088ac:	4618      	mov	r0, r3
 80088ae:	f001 f8eb 	bl	8009a88 <xTaskRemoveFromEventList>
 80088b2:	4603      	mov	r3, r0
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d00e      	beq.n	80088d6 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80088b8:	683b      	ldr	r3, [r7, #0]
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d00b      	beq.n	80088d6 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80088be:	683b      	ldr	r3, [r7, #0]
 80088c0:	2201      	movs	r2, #1
 80088c2:	601a      	str	r2, [r3, #0]
 80088c4:	e007      	b.n	80088d6 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80088c6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80088ca:	3301      	adds	r3, #1
 80088cc:	b2db      	uxtb	r3, r3
 80088ce:	b25a      	sxtb	r2, r3
 80088d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80088d6:	2301      	movs	r3, #1
 80088d8:	637b      	str	r3, [r7, #52]	; 0x34
 80088da:	e001      	b.n	80088e0 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80088dc:	2300      	movs	r3, #0
 80088de:	637b      	str	r3, [r7, #52]	; 0x34
 80088e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088e2:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	f383 8811 	msr	BASEPRI, r3
}
 80088ea:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80088ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80088ee:	4618      	mov	r0, r3
 80088f0:	3738      	adds	r7, #56	; 0x38
 80088f2:	46bd      	mov	sp, r7
 80088f4:	bd80      	pop	{r7, pc}
	...

080088f8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80088f8:	b580      	push	{r7, lr}
 80088fa:	b08c      	sub	sp, #48	; 0x30
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	60f8      	str	r0, [r7, #12]
 8008900:	60b9      	str	r1, [r7, #8]
 8008902:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008904:	2300      	movs	r3, #0
 8008906:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800890c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800890e:	2b00      	cmp	r3, #0
 8008910:	d10a      	bne.n	8008928 <xQueueReceive+0x30>
	__asm volatile
 8008912:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008916:	f383 8811 	msr	BASEPRI, r3
 800891a:	f3bf 8f6f 	isb	sy
 800891e:	f3bf 8f4f 	dsb	sy
 8008922:	623b      	str	r3, [r7, #32]
}
 8008924:	bf00      	nop
 8008926:	e7fe      	b.n	8008926 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008928:	68bb      	ldr	r3, [r7, #8]
 800892a:	2b00      	cmp	r3, #0
 800892c:	d103      	bne.n	8008936 <xQueueReceive+0x3e>
 800892e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008932:	2b00      	cmp	r3, #0
 8008934:	d101      	bne.n	800893a <xQueueReceive+0x42>
 8008936:	2301      	movs	r3, #1
 8008938:	e000      	b.n	800893c <xQueueReceive+0x44>
 800893a:	2300      	movs	r3, #0
 800893c:	2b00      	cmp	r3, #0
 800893e:	d10a      	bne.n	8008956 <xQueueReceive+0x5e>
	__asm volatile
 8008940:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008944:	f383 8811 	msr	BASEPRI, r3
 8008948:	f3bf 8f6f 	isb	sy
 800894c:	f3bf 8f4f 	dsb	sy
 8008950:	61fb      	str	r3, [r7, #28]
}
 8008952:	bf00      	nop
 8008954:	e7fe      	b.n	8008954 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008956:	f001 fa53 	bl	8009e00 <xTaskGetSchedulerState>
 800895a:	4603      	mov	r3, r0
 800895c:	2b00      	cmp	r3, #0
 800895e:	d102      	bne.n	8008966 <xQueueReceive+0x6e>
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	2b00      	cmp	r3, #0
 8008964:	d101      	bne.n	800896a <xQueueReceive+0x72>
 8008966:	2301      	movs	r3, #1
 8008968:	e000      	b.n	800896c <xQueueReceive+0x74>
 800896a:	2300      	movs	r3, #0
 800896c:	2b00      	cmp	r3, #0
 800896e:	d10a      	bne.n	8008986 <xQueueReceive+0x8e>
	__asm volatile
 8008970:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008974:	f383 8811 	msr	BASEPRI, r3
 8008978:	f3bf 8f6f 	isb	sy
 800897c:	f3bf 8f4f 	dsb	sy
 8008980:	61bb      	str	r3, [r7, #24]
}
 8008982:	bf00      	nop
 8008984:	e7fe      	b.n	8008984 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008986:	f001 fe9d 	bl	800a6c4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800898a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800898c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800898e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008992:	2b00      	cmp	r3, #0
 8008994:	d01f      	beq.n	80089d6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008996:	68b9      	ldr	r1, [r7, #8]
 8008998:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800899a:	f000 fafa 	bl	8008f92 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800899e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089a0:	1e5a      	subs	r2, r3, #1
 80089a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089a4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80089a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089a8:	691b      	ldr	r3, [r3, #16]
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d00f      	beq.n	80089ce <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80089ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089b0:	3310      	adds	r3, #16
 80089b2:	4618      	mov	r0, r3
 80089b4:	f001 f868 	bl	8009a88 <xTaskRemoveFromEventList>
 80089b8:	4603      	mov	r3, r0
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d007      	beq.n	80089ce <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80089be:	4b3d      	ldr	r3, [pc, #244]	; (8008ab4 <xQueueReceive+0x1bc>)
 80089c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80089c4:	601a      	str	r2, [r3, #0]
 80089c6:	f3bf 8f4f 	dsb	sy
 80089ca:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80089ce:	f001 fea9 	bl	800a724 <vPortExitCritical>
				return pdPASS;
 80089d2:	2301      	movs	r3, #1
 80089d4:	e069      	b.n	8008aaa <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d103      	bne.n	80089e4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80089dc:	f001 fea2 	bl	800a724 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80089e0:	2300      	movs	r3, #0
 80089e2:	e062      	b.n	8008aaa <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80089e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d106      	bne.n	80089f8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80089ea:	f107 0310 	add.w	r3, r7, #16
 80089ee:	4618      	mov	r0, r3
 80089f0:	f001 f8ac 	bl	8009b4c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80089f4:	2301      	movs	r3, #1
 80089f6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80089f8:	f001 fe94 	bl	800a724 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80089fc:	f000 fe40 	bl	8009680 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008a00:	f001 fe60 	bl	800a6c4 <vPortEnterCritical>
 8008a04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a06:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008a0a:	b25b      	sxtb	r3, r3
 8008a0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a10:	d103      	bne.n	8008a1a <xQueueReceive+0x122>
 8008a12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a14:	2200      	movs	r2, #0
 8008a16:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008a1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a1c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008a20:	b25b      	sxtb	r3, r3
 8008a22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a26:	d103      	bne.n	8008a30 <xQueueReceive+0x138>
 8008a28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a2a:	2200      	movs	r2, #0
 8008a2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008a30:	f001 fe78 	bl	800a724 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008a34:	1d3a      	adds	r2, r7, #4
 8008a36:	f107 0310 	add.w	r3, r7, #16
 8008a3a:	4611      	mov	r1, r2
 8008a3c:	4618      	mov	r0, r3
 8008a3e:	f001 f89b 	bl	8009b78 <xTaskCheckForTimeOut>
 8008a42:	4603      	mov	r3, r0
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d123      	bne.n	8008a90 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008a48:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008a4a:	f000 fb1a 	bl	8009082 <prvIsQueueEmpty>
 8008a4e:	4603      	mov	r3, r0
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d017      	beq.n	8008a84 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008a54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a56:	3324      	adds	r3, #36	; 0x24
 8008a58:	687a      	ldr	r2, [r7, #4]
 8008a5a:	4611      	mov	r1, r2
 8008a5c:	4618      	mov	r0, r3
 8008a5e:	f000 ffef 	bl	8009a40 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008a62:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008a64:	f000 fabb 	bl	8008fde <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008a68:	f000 fe18 	bl	800969c <xTaskResumeAll>
 8008a6c:	4603      	mov	r3, r0
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d189      	bne.n	8008986 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8008a72:	4b10      	ldr	r3, [pc, #64]	; (8008ab4 <xQueueReceive+0x1bc>)
 8008a74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a78:	601a      	str	r2, [r3, #0]
 8008a7a:	f3bf 8f4f 	dsb	sy
 8008a7e:	f3bf 8f6f 	isb	sy
 8008a82:	e780      	b.n	8008986 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008a84:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008a86:	f000 faaa 	bl	8008fde <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008a8a:	f000 fe07 	bl	800969c <xTaskResumeAll>
 8008a8e:	e77a      	b.n	8008986 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008a90:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008a92:	f000 faa4 	bl	8008fde <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008a96:	f000 fe01 	bl	800969c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008a9a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008a9c:	f000 faf1 	bl	8009082 <prvIsQueueEmpty>
 8008aa0:	4603      	mov	r3, r0
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	f43f af6f 	beq.w	8008986 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008aa8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008aaa:	4618      	mov	r0, r3
 8008aac:	3730      	adds	r7, #48	; 0x30
 8008aae:	46bd      	mov	sp, r7
 8008ab0:	bd80      	pop	{r7, pc}
 8008ab2:	bf00      	nop
 8008ab4:	e000ed04 	.word	0xe000ed04

08008ab8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8008ab8:	b580      	push	{r7, lr}
 8008aba:	b08e      	sub	sp, #56	; 0x38
 8008abc:	af00      	add	r7, sp, #0
 8008abe:	6078      	str	r0, [r7, #4]
 8008ac0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8008ac2:	2300      	movs	r3, #0
 8008ac4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8008aca:	2300      	movs	r3, #0
 8008acc:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008ace:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d10a      	bne.n	8008aea <xQueueSemaphoreTake+0x32>
	__asm volatile
 8008ad4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ad8:	f383 8811 	msr	BASEPRI, r3
 8008adc:	f3bf 8f6f 	isb	sy
 8008ae0:	f3bf 8f4f 	dsb	sy
 8008ae4:	623b      	str	r3, [r7, #32]
}
 8008ae6:	bf00      	nop
 8008ae8:	e7fe      	b.n	8008ae8 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008aea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d00a      	beq.n	8008b08 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8008af2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008af6:	f383 8811 	msr	BASEPRI, r3
 8008afa:	f3bf 8f6f 	isb	sy
 8008afe:	f3bf 8f4f 	dsb	sy
 8008b02:	61fb      	str	r3, [r7, #28]
}
 8008b04:	bf00      	nop
 8008b06:	e7fe      	b.n	8008b06 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008b08:	f001 f97a 	bl	8009e00 <xTaskGetSchedulerState>
 8008b0c:	4603      	mov	r3, r0
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d102      	bne.n	8008b18 <xQueueSemaphoreTake+0x60>
 8008b12:	683b      	ldr	r3, [r7, #0]
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d101      	bne.n	8008b1c <xQueueSemaphoreTake+0x64>
 8008b18:	2301      	movs	r3, #1
 8008b1a:	e000      	b.n	8008b1e <xQueueSemaphoreTake+0x66>
 8008b1c:	2300      	movs	r3, #0
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d10a      	bne.n	8008b38 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8008b22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b26:	f383 8811 	msr	BASEPRI, r3
 8008b2a:	f3bf 8f6f 	isb	sy
 8008b2e:	f3bf 8f4f 	dsb	sy
 8008b32:	61bb      	str	r3, [r7, #24]
}
 8008b34:	bf00      	nop
 8008b36:	e7fe      	b.n	8008b36 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008b38:	f001 fdc4 	bl	800a6c4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8008b3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b40:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8008b42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d024      	beq.n	8008b92 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8008b48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b4a:	1e5a      	subs	r2, r3, #1
 8008b4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b4e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008b50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d104      	bne.n	8008b62 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8008b58:	f001 fb10 	bl	800a17c <pvTaskIncrementMutexHeldCount>
 8008b5c:	4602      	mov	r2, r0
 8008b5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b60:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008b62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b64:	691b      	ldr	r3, [r3, #16]
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d00f      	beq.n	8008b8a <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008b6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b6c:	3310      	adds	r3, #16
 8008b6e:	4618      	mov	r0, r3
 8008b70:	f000 ff8a 	bl	8009a88 <xTaskRemoveFromEventList>
 8008b74:	4603      	mov	r3, r0
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d007      	beq.n	8008b8a <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008b7a:	4b54      	ldr	r3, [pc, #336]	; (8008ccc <xQueueSemaphoreTake+0x214>)
 8008b7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b80:	601a      	str	r2, [r3, #0]
 8008b82:	f3bf 8f4f 	dsb	sy
 8008b86:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008b8a:	f001 fdcb 	bl	800a724 <vPortExitCritical>
				return pdPASS;
 8008b8e:	2301      	movs	r3, #1
 8008b90:	e097      	b.n	8008cc2 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008b92:	683b      	ldr	r3, [r7, #0]
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d111      	bne.n	8008bbc <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8008b98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d00a      	beq.n	8008bb4 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8008b9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ba2:	f383 8811 	msr	BASEPRI, r3
 8008ba6:	f3bf 8f6f 	isb	sy
 8008baa:	f3bf 8f4f 	dsb	sy
 8008bae:	617b      	str	r3, [r7, #20]
}
 8008bb0:	bf00      	nop
 8008bb2:	e7fe      	b.n	8008bb2 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8008bb4:	f001 fdb6 	bl	800a724 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008bb8:	2300      	movs	r3, #0
 8008bba:	e082      	b.n	8008cc2 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008bbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d106      	bne.n	8008bd0 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008bc2:	f107 030c 	add.w	r3, r7, #12
 8008bc6:	4618      	mov	r0, r3
 8008bc8:	f000 ffc0 	bl	8009b4c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008bcc:	2301      	movs	r3, #1
 8008bce:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008bd0:	f001 fda8 	bl	800a724 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008bd4:	f000 fd54 	bl	8009680 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008bd8:	f001 fd74 	bl	800a6c4 <vPortEnterCritical>
 8008bdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bde:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008be2:	b25b      	sxtb	r3, r3
 8008be4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008be8:	d103      	bne.n	8008bf2 <xQueueSemaphoreTake+0x13a>
 8008bea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bec:	2200      	movs	r2, #0
 8008bee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008bf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bf4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008bf8:	b25b      	sxtb	r3, r3
 8008bfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bfe:	d103      	bne.n	8008c08 <xQueueSemaphoreTake+0x150>
 8008c00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c02:	2200      	movs	r2, #0
 8008c04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008c08:	f001 fd8c 	bl	800a724 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008c0c:	463a      	mov	r2, r7
 8008c0e:	f107 030c 	add.w	r3, r7, #12
 8008c12:	4611      	mov	r1, r2
 8008c14:	4618      	mov	r0, r3
 8008c16:	f000 ffaf 	bl	8009b78 <xTaskCheckForTimeOut>
 8008c1a:	4603      	mov	r3, r0
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d132      	bne.n	8008c86 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008c20:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008c22:	f000 fa2e 	bl	8009082 <prvIsQueueEmpty>
 8008c26:	4603      	mov	r3, r0
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d026      	beq.n	8008c7a <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008c2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d109      	bne.n	8008c48 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8008c34:	f001 fd46 	bl	800a6c4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008c38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c3a:	689b      	ldr	r3, [r3, #8]
 8008c3c:	4618      	mov	r0, r3
 8008c3e:	f001 f8fd 	bl	8009e3c <xTaskPriorityInherit>
 8008c42:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8008c44:	f001 fd6e 	bl	800a724 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008c48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c4a:	3324      	adds	r3, #36	; 0x24
 8008c4c:	683a      	ldr	r2, [r7, #0]
 8008c4e:	4611      	mov	r1, r2
 8008c50:	4618      	mov	r0, r3
 8008c52:	f000 fef5 	bl	8009a40 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008c56:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008c58:	f000 f9c1 	bl	8008fde <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008c5c:	f000 fd1e 	bl	800969c <xTaskResumeAll>
 8008c60:	4603      	mov	r3, r0
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	f47f af68 	bne.w	8008b38 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8008c68:	4b18      	ldr	r3, [pc, #96]	; (8008ccc <xQueueSemaphoreTake+0x214>)
 8008c6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c6e:	601a      	str	r2, [r3, #0]
 8008c70:	f3bf 8f4f 	dsb	sy
 8008c74:	f3bf 8f6f 	isb	sy
 8008c78:	e75e      	b.n	8008b38 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8008c7a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008c7c:	f000 f9af 	bl	8008fde <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008c80:	f000 fd0c 	bl	800969c <xTaskResumeAll>
 8008c84:	e758      	b.n	8008b38 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8008c86:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008c88:	f000 f9a9 	bl	8008fde <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008c8c:	f000 fd06 	bl	800969c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008c90:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008c92:	f000 f9f6 	bl	8009082 <prvIsQueueEmpty>
 8008c96:	4603      	mov	r3, r0
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	f43f af4d 	beq.w	8008b38 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8008c9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d00d      	beq.n	8008cc0 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8008ca4:	f001 fd0e 	bl	800a6c4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8008ca8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008caa:	f000 f8f0 	bl	8008e8e <prvGetDisinheritPriorityAfterTimeout>
 8008cae:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8008cb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cb2:	689b      	ldr	r3, [r3, #8]
 8008cb4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008cb6:	4618      	mov	r0, r3
 8008cb8:	f001 f9c6 	bl	800a048 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8008cbc:	f001 fd32 	bl	800a724 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008cc0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008cc2:	4618      	mov	r0, r3
 8008cc4:	3738      	adds	r7, #56	; 0x38
 8008cc6:	46bd      	mov	sp, r7
 8008cc8:	bd80      	pop	{r7, pc}
 8008cca:	bf00      	nop
 8008ccc:	e000ed04 	.word	0xe000ed04

08008cd0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008cd0:	b580      	push	{r7, lr}
 8008cd2:	b08e      	sub	sp, #56	; 0x38
 8008cd4:	af00      	add	r7, sp, #0
 8008cd6:	60f8      	str	r0, [r7, #12]
 8008cd8:	60b9      	str	r1, [r7, #8]
 8008cda:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008ce0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d10a      	bne.n	8008cfc <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8008ce6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cea:	f383 8811 	msr	BASEPRI, r3
 8008cee:	f3bf 8f6f 	isb	sy
 8008cf2:	f3bf 8f4f 	dsb	sy
 8008cf6:	623b      	str	r3, [r7, #32]
}
 8008cf8:	bf00      	nop
 8008cfa:	e7fe      	b.n	8008cfa <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008cfc:	68bb      	ldr	r3, [r7, #8]
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d103      	bne.n	8008d0a <xQueueReceiveFromISR+0x3a>
 8008d02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d101      	bne.n	8008d0e <xQueueReceiveFromISR+0x3e>
 8008d0a:	2301      	movs	r3, #1
 8008d0c:	e000      	b.n	8008d10 <xQueueReceiveFromISR+0x40>
 8008d0e:	2300      	movs	r3, #0
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d10a      	bne.n	8008d2a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8008d14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d18:	f383 8811 	msr	BASEPRI, r3
 8008d1c:	f3bf 8f6f 	isb	sy
 8008d20:	f3bf 8f4f 	dsb	sy
 8008d24:	61fb      	str	r3, [r7, #28]
}
 8008d26:	bf00      	nop
 8008d28:	e7fe      	b.n	8008d28 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008d2a:	f001 fdad 	bl	800a888 <vPortValidateInterruptPriority>
	__asm volatile
 8008d2e:	f3ef 8211 	mrs	r2, BASEPRI
 8008d32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d36:	f383 8811 	msr	BASEPRI, r3
 8008d3a:	f3bf 8f6f 	isb	sy
 8008d3e:	f3bf 8f4f 	dsb	sy
 8008d42:	61ba      	str	r2, [r7, #24]
 8008d44:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8008d46:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008d48:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008d4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d4e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008d50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d02f      	beq.n	8008db6 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8008d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d58:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008d5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008d60:	68b9      	ldr	r1, [r7, #8]
 8008d62:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008d64:	f000 f915 	bl	8008f92 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008d68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d6a:	1e5a      	subs	r2, r3, #1
 8008d6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d6e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8008d70:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008d74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d78:	d112      	bne.n	8008da0 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008d7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d7c:	691b      	ldr	r3, [r3, #16]
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d016      	beq.n	8008db0 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008d82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d84:	3310      	adds	r3, #16
 8008d86:	4618      	mov	r0, r3
 8008d88:	f000 fe7e 	bl	8009a88 <xTaskRemoveFromEventList>
 8008d8c:	4603      	mov	r3, r0
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d00e      	beq.n	8008db0 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d00b      	beq.n	8008db0 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	2201      	movs	r2, #1
 8008d9c:	601a      	str	r2, [r3, #0]
 8008d9e:	e007      	b.n	8008db0 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8008da0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008da4:	3301      	adds	r3, #1
 8008da6:	b2db      	uxtb	r3, r3
 8008da8:	b25a      	sxtb	r2, r3
 8008daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8008db0:	2301      	movs	r3, #1
 8008db2:	637b      	str	r3, [r7, #52]	; 0x34
 8008db4:	e001      	b.n	8008dba <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8008db6:	2300      	movs	r3, #0
 8008db8:	637b      	str	r3, [r7, #52]	; 0x34
 8008dba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dbc:	613b      	str	r3, [r7, #16]
	__asm volatile
 8008dbe:	693b      	ldr	r3, [r7, #16]
 8008dc0:	f383 8811 	msr	BASEPRI, r3
}
 8008dc4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008dc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008dc8:	4618      	mov	r0, r3
 8008dca:	3738      	adds	r7, #56	; 0x38
 8008dcc:	46bd      	mov	sp, r7
 8008dce:	bd80      	pop	{r7, pc}

08008dd0 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8008dd0:	b580      	push	{r7, lr}
 8008dd2:	b084      	sub	sp, #16
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d10a      	bne.n	8008df4 <uxQueueMessagesWaiting+0x24>
	__asm volatile
 8008dde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008de2:	f383 8811 	msr	BASEPRI, r3
 8008de6:	f3bf 8f6f 	isb	sy
 8008dea:	f3bf 8f4f 	dsb	sy
 8008dee:	60bb      	str	r3, [r7, #8]
}
 8008df0:	bf00      	nop
 8008df2:	e7fe      	b.n	8008df2 <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 8008df4:	f001 fc66 	bl	800a6c4 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dfc:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8008dfe:	f001 fc91 	bl	800a724 <vPortExitCritical>

	return uxReturn;
 8008e02:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8008e04:	4618      	mov	r0, r3
 8008e06:	3710      	adds	r7, #16
 8008e08:	46bd      	mov	sp, r7
 8008e0a:	bd80      	pop	{r7, pc}

08008e0c <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8008e0c:	b480      	push	{r7}
 8008e0e:	b087      	sub	sp, #28
 8008e10:	af00      	add	r7, sp, #0
 8008e12:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8008e18:	697b      	ldr	r3, [r7, #20]
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d10a      	bne.n	8008e34 <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 8008e1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e22:	f383 8811 	msr	BASEPRI, r3
 8008e26:	f3bf 8f6f 	isb	sy
 8008e2a:	f3bf 8f4f 	dsb	sy
 8008e2e:	60fb      	str	r3, [r7, #12]
}
 8008e30:	bf00      	nop
 8008e32:	e7fe      	b.n	8008e32 <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 8008e34:	697b      	ldr	r3, [r7, #20]
 8008e36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e38:	613b      	str	r3, [r7, #16]

	return uxReturn;
 8008e3a:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8008e3c:	4618      	mov	r0, r3
 8008e3e:	371c      	adds	r7, #28
 8008e40:	46bd      	mov	sp, r7
 8008e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e46:	4770      	bx	lr

08008e48 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8008e48:	b580      	push	{r7, lr}
 8008e4a:	b084      	sub	sp, #16
 8008e4c:	af00      	add	r7, sp, #0
 8008e4e:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d10a      	bne.n	8008e70 <vQueueDelete+0x28>
	__asm volatile
 8008e5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e5e:	f383 8811 	msr	BASEPRI, r3
 8008e62:	f3bf 8f6f 	isb	sy
 8008e66:	f3bf 8f4f 	dsb	sy
 8008e6a:	60bb      	str	r3, [r7, #8]
}
 8008e6c:	bf00      	nop
 8008e6e:	e7fe      	b.n	8008e6e <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8008e70:	68f8      	ldr	r0, [r7, #12]
 8008e72:	f000 f935 	bl	80090e0 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d102      	bne.n	8008e86 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8008e80:	68f8      	ldr	r0, [r7, #12]
 8008e82:	f001 fe05 	bl	800aa90 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8008e86:	bf00      	nop
 8008e88:	3710      	adds	r7, #16
 8008e8a:	46bd      	mov	sp, r7
 8008e8c:	bd80      	pop	{r7, pc}

08008e8e <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8008e8e:	b480      	push	{r7}
 8008e90:	b085      	sub	sp, #20
 8008e92:	af00      	add	r7, sp, #0
 8008e94:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d006      	beq.n	8008eac <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	f1c3 0307 	rsb	r3, r3, #7
 8008ea8:	60fb      	str	r3, [r7, #12]
 8008eaa:	e001      	b.n	8008eb0 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8008eac:	2300      	movs	r3, #0
 8008eae:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8008eb0:	68fb      	ldr	r3, [r7, #12]
	}
 8008eb2:	4618      	mov	r0, r3
 8008eb4:	3714      	adds	r7, #20
 8008eb6:	46bd      	mov	sp, r7
 8008eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ebc:	4770      	bx	lr

08008ebe <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008ebe:	b580      	push	{r7, lr}
 8008ec0:	b086      	sub	sp, #24
 8008ec2:	af00      	add	r7, sp, #0
 8008ec4:	60f8      	str	r0, [r7, #12]
 8008ec6:	60b9      	str	r1, [r7, #8]
 8008ec8:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008eca:	2300      	movs	r3, #0
 8008ecc:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ed2:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d10d      	bne.n	8008ef8 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d14d      	bne.n	8008f80 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	689b      	ldr	r3, [r3, #8]
 8008ee8:	4618      	mov	r0, r3
 8008eea:	f001 f827 	bl	8009f3c <xTaskPriorityDisinherit>
 8008eee:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	2200      	movs	r2, #0
 8008ef4:	609a      	str	r2, [r3, #8]
 8008ef6:	e043      	b.n	8008f80 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d119      	bne.n	8008f32 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	6858      	ldr	r0, [r3, #4]
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f06:	461a      	mov	r2, r3
 8008f08:	68b9      	ldr	r1, [r7, #8]
 8008f0a:	f012 f957 	bl	801b1bc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	685a      	ldr	r2, [r3, #4]
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f16:	441a      	add	r2, r3
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	685a      	ldr	r2, [r3, #4]
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	689b      	ldr	r3, [r3, #8]
 8008f24:	429a      	cmp	r2, r3
 8008f26:	d32b      	bcc.n	8008f80 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	681a      	ldr	r2, [r3, #0]
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	605a      	str	r2, [r3, #4]
 8008f30:	e026      	b.n	8008f80 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	68d8      	ldr	r0, [r3, #12]
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f3a:	461a      	mov	r2, r3
 8008f3c:	68b9      	ldr	r1, [r7, #8]
 8008f3e:	f012 f93d 	bl	801b1bc <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	68da      	ldr	r2, [r3, #12]
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f4a:	425b      	negs	r3, r3
 8008f4c:	441a      	add	r2, r3
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	68da      	ldr	r2, [r3, #12]
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	429a      	cmp	r2, r3
 8008f5c:	d207      	bcs.n	8008f6e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	689a      	ldr	r2, [r3, #8]
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f66:	425b      	negs	r3, r3
 8008f68:	441a      	add	r2, r3
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	2b02      	cmp	r3, #2
 8008f72:	d105      	bne.n	8008f80 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008f74:	693b      	ldr	r3, [r7, #16]
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d002      	beq.n	8008f80 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008f7a:	693b      	ldr	r3, [r7, #16]
 8008f7c:	3b01      	subs	r3, #1
 8008f7e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008f80:	693b      	ldr	r3, [r7, #16]
 8008f82:	1c5a      	adds	r2, r3, #1
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008f88:	697b      	ldr	r3, [r7, #20]
}
 8008f8a:	4618      	mov	r0, r3
 8008f8c:	3718      	adds	r7, #24
 8008f8e:	46bd      	mov	sp, r7
 8008f90:	bd80      	pop	{r7, pc}

08008f92 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008f92:	b580      	push	{r7, lr}
 8008f94:	b082      	sub	sp, #8
 8008f96:	af00      	add	r7, sp, #0
 8008f98:	6078      	str	r0, [r7, #4]
 8008f9a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d018      	beq.n	8008fd6 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	68da      	ldr	r2, [r3, #12]
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fac:	441a      	add	r2, r3
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	68da      	ldr	r2, [r3, #12]
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	689b      	ldr	r3, [r3, #8]
 8008fba:	429a      	cmp	r2, r3
 8008fbc:	d303      	bcc.n	8008fc6 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	681a      	ldr	r2, [r3, #0]
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	68d9      	ldr	r1, [r3, #12]
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fce:	461a      	mov	r2, r3
 8008fd0:	6838      	ldr	r0, [r7, #0]
 8008fd2:	f012 f8f3 	bl	801b1bc <memcpy>
	}
}
 8008fd6:	bf00      	nop
 8008fd8:	3708      	adds	r7, #8
 8008fda:	46bd      	mov	sp, r7
 8008fdc:	bd80      	pop	{r7, pc}

08008fde <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008fde:	b580      	push	{r7, lr}
 8008fe0:	b084      	sub	sp, #16
 8008fe2:	af00      	add	r7, sp, #0
 8008fe4:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008fe6:	f001 fb6d 	bl	800a6c4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008ff0:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008ff2:	e011      	b.n	8009018 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d012      	beq.n	8009022 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	3324      	adds	r3, #36	; 0x24
 8009000:	4618      	mov	r0, r3
 8009002:	f000 fd41 	bl	8009a88 <xTaskRemoveFromEventList>
 8009006:	4603      	mov	r3, r0
 8009008:	2b00      	cmp	r3, #0
 800900a:	d001      	beq.n	8009010 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800900c:	f000 fe16 	bl	8009c3c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009010:	7bfb      	ldrb	r3, [r7, #15]
 8009012:	3b01      	subs	r3, #1
 8009014:	b2db      	uxtb	r3, r3
 8009016:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009018:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800901c:	2b00      	cmp	r3, #0
 800901e:	dce9      	bgt.n	8008ff4 <prvUnlockQueue+0x16>
 8009020:	e000      	b.n	8009024 <prvUnlockQueue+0x46>
					break;
 8009022:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	22ff      	movs	r2, #255	; 0xff
 8009028:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800902c:	f001 fb7a 	bl	800a724 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009030:	f001 fb48 	bl	800a6c4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800903a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800903c:	e011      	b.n	8009062 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	691b      	ldr	r3, [r3, #16]
 8009042:	2b00      	cmp	r3, #0
 8009044:	d012      	beq.n	800906c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	3310      	adds	r3, #16
 800904a:	4618      	mov	r0, r3
 800904c:	f000 fd1c 	bl	8009a88 <xTaskRemoveFromEventList>
 8009050:	4603      	mov	r3, r0
 8009052:	2b00      	cmp	r3, #0
 8009054:	d001      	beq.n	800905a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009056:	f000 fdf1 	bl	8009c3c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800905a:	7bbb      	ldrb	r3, [r7, #14]
 800905c:	3b01      	subs	r3, #1
 800905e:	b2db      	uxtb	r3, r3
 8009060:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009062:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009066:	2b00      	cmp	r3, #0
 8009068:	dce9      	bgt.n	800903e <prvUnlockQueue+0x60>
 800906a:	e000      	b.n	800906e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800906c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	22ff      	movs	r2, #255	; 0xff
 8009072:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009076:	f001 fb55 	bl	800a724 <vPortExitCritical>
}
 800907a:	bf00      	nop
 800907c:	3710      	adds	r7, #16
 800907e:	46bd      	mov	sp, r7
 8009080:	bd80      	pop	{r7, pc}

08009082 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009082:	b580      	push	{r7, lr}
 8009084:	b084      	sub	sp, #16
 8009086:	af00      	add	r7, sp, #0
 8009088:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800908a:	f001 fb1b 	bl	800a6c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009092:	2b00      	cmp	r3, #0
 8009094:	d102      	bne.n	800909c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009096:	2301      	movs	r3, #1
 8009098:	60fb      	str	r3, [r7, #12]
 800909a:	e001      	b.n	80090a0 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800909c:	2300      	movs	r3, #0
 800909e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80090a0:	f001 fb40 	bl	800a724 <vPortExitCritical>

	return xReturn;
 80090a4:	68fb      	ldr	r3, [r7, #12]
}
 80090a6:	4618      	mov	r0, r3
 80090a8:	3710      	adds	r7, #16
 80090aa:	46bd      	mov	sp, r7
 80090ac:	bd80      	pop	{r7, pc}

080090ae <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80090ae:	b580      	push	{r7, lr}
 80090b0:	b084      	sub	sp, #16
 80090b2:	af00      	add	r7, sp, #0
 80090b4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80090b6:	f001 fb05 	bl	800a6c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80090c2:	429a      	cmp	r2, r3
 80090c4:	d102      	bne.n	80090cc <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80090c6:	2301      	movs	r3, #1
 80090c8:	60fb      	str	r3, [r7, #12]
 80090ca:	e001      	b.n	80090d0 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80090cc:	2300      	movs	r3, #0
 80090ce:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80090d0:	f001 fb28 	bl	800a724 <vPortExitCritical>

	return xReturn;
 80090d4:	68fb      	ldr	r3, [r7, #12]
}
 80090d6:	4618      	mov	r0, r3
 80090d8:	3710      	adds	r7, #16
 80090da:	46bd      	mov	sp, r7
 80090dc:	bd80      	pop	{r7, pc}
	...

080090e0 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80090e0:	b480      	push	{r7}
 80090e2:	b085      	sub	sp, #20
 80090e4:	af00      	add	r7, sp, #0
 80090e6:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80090e8:	2300      	movs	r3, #0
 80090ea:	60fb      	str	r3, [r7, #12]
 80090ec:	e016      	b.n	800911c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80090ee:	4a10      	ldr	r2, [pc, #64]	; (8009130 <vQueueUnregisterQueue+0x50>)
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	00db      	lsls	r3, r3, #3
 80090f4:	4413      	add	r3, r2
 80090f6:	685b      	ldr	r3, [r3, #4]
 80090f8:	687a      	ldr	r2, [r7, #4]
 80090fa:	429a      	cmp	r2, r3
 80090fc:	d10b      	bne.n	8009116 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80090fe:	4a0c      	ldr	r2, [pc, #48]	; (8009130 <vQueueUnregisterQueue+0x50>)
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	2100      	movs	r1, #0
 8009104:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8009108:	4a09      	ldr	r2, [pc, #36]	; (8009130 <vQueueUnregisterQueue+0x50>)
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	00db      	lsls	r3, r3, #3
 800910e:	4413      	add	r3, r2
 8009110:	2200      	movs	r2, #0
 8009112:	605a      	str	r2, [r3, #4]
				break;
 8009114:	e006      	b.n	8009124 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	3301      	adds	r3, #1
 800911a:	60fb      	str	r3, [r7, #12]
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	2b07      	cmp	r3, #7
 8009120:	d9e5      	bls.n	80090ee <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8009122:	bf00      	nop
 8009124:	bf00      	nop
 8009126:	3714      	adds	r7, #20
 8009128:	46bd      	mov	sp, r7
 800912a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800912e:	4770      	bx	lr
 8009130:	2000d3c8 	.word	0x2000d3c8

08009134 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009134:	b580      	push	{r7, lr}
 8009136:	b08e      	sub	sp, #56	; 0x38
 8009138:	af04      	add	r7, sp, #16
 800913a:	60f8      	str	r0, [r7, #12]
 800913c:	60b9      	str	r1, [r7, #8]
 800913e:	607a      	str	r2, [r7, #4]
 8009140:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009142:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009144:	2b00      	cmp	r3, #0
 8009146:	d10a      	bne.n	800915e <xTaskCreateStatic+0x2a>
	__asm volatile
 8009148:	f04f 0350 	mov.w	r3, #80	; 0x50
 800914c:	f383 8811 	msr	BASEPRI, r3
 8009150:	f3bf 8f6f 	isb	sy
 8009154:	f3bf 8f4f 	dsb	sy
 8009158:	623b      	str	r3, [r7, #32]
}
 800915a:	bf00      	nop
 800915c:	e7fe      	b.n	800915c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800915e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009160:	2b00      	cmp	r3, #0
 8009162:	d10a      	bne.n	800917a <xTaskCreateStatic+0x46>
	__asm volatile
 8009164:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009168:	f383 8811 	msr	BASEPRI, r3
 800916c:	f3bf 8f6f 	isb	sy
 8009170:	f3bf 8f4f 	dsb	sy
 8009174:	61fb      	str	r3, [r7, #28]
}
 8009176:	bf00      	nop
 8009178:	e7fe      	b.n	8009178 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800917a:	2354      	movs	r3, #84	; 0x54
 800917c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800917e:	693b      	ldr	r3, [r7, #16]
 8009180:	2b54      	cmp	r3, #84	; 0x54
 8009182:	d00a      	beq.n	800919a <xTaskCreateStatic+0x66>
	__asm volatile
 8009184:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009188:	f383 8811 	msr	BASEPRI, r3
 800918c:	f3bf 8f6f 	isb	sy
 8009190:	f3bf 8f4f 	dsb	sy
 8009194:	61bb      	str	r3, [r7, #24]
}
 8009196:	bf00      	nop
 8009198:	e7fe      	b.n	8009198 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800919a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800919c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d01e      	beq.n	80091e0 <xTaskCreateStatic+0xac>
 80091a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d01b      	beq.n	80091e0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80091a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091aa:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80091ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80091b0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80091b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091b4:	2202      	movs	r2, #2
 80091b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80091ba:	2300      	movs	r3, #0
 80091bc:	9303      	str	r3, [sp, #12]
 80091be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091c0:	9302      	str	r3, [sp, #8]
 80091c2:	f107 0314 	add.w	r3, r7, #20
 80091c6:	9301      	str	r3, [sp, #4]
 80091c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091ca:	9300      	str	r3, [sp, #0]
 80091cc:	683b      	ldr	r3, [r7, #0]
 80091ce:	687a      	ldr	r2, [r7, #4]
 80091d0:	68b9      	ldr	r1, [r7, #8]
 80091d2:	68f8      	ldr	r0, [r7, #12]
 80091d4:	f000 f850 	bl	8009278 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80091d8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80091da:	f000 f8d5 	bl	8009388 <prvAddNewTaskToReadyList>
 80091de:	e001      	b.n	80091e4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80091e0:	2300      	movs	r3, #0
 80091e2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80091e4:	697b      	ldr	r3, [r7, #20]
	}
 80091e6:	4618      	mov	r0, r3
 80091e8:	3728      	adds	r7, #40	; 0x28
 80091ea:	46bd      	mov	sp, r7
 80091ec:	bd80      	pop	{r7, pc}

080091ee <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80091ee:	b580      	push	{r7, lr}
 80091f0:	b08c      	sub	sp, #48	; 0x30
 80091f2:	af04      	add	r7, sp, #16
 80091f4:	60f8      	str	r0, [r7, #12]
 80091f6:	60b9      	str	r1, [r7, #8]
 80091f8:	603b      	str	r3, [r7, #0]
 80091fa:	4613      	mov	r3, r2
 80091fc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80091fe:	88fb      	ldrh	r3, [r7, #6]
 8009200:	009b      	lsls	r3, r3, #2
 8009202:	4618      	mov	r0, r3
 8009204:	f001 fb80 	bl	800a908 <pvPortMalloc>
 8009208:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800920a:	697b      	ldr	r3, [r7, #20]
 800920c:	2b00      	cmp	r3, #0
 800920e:	d00e      	beq.n	800922e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009210:	2054      	movs	r0, #84	; 0x54
 8009212:	f001 fb79 	bl	800a908 <pvPortMalloc>
 8009216:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009218:	69fb      	ldr	r3, [r7, #28]
 800921a:	2b00      	cmp	r3, #0
 800921c:	d003      	beq.n	8009226 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800921e:	69fb      	ldr	r3, [r7, #28]
 8009220:	697a      	ldr	r2, [r7, #20]
 8009222:	631a      	str	r2, [r3, #48]	; 0x30
 8009224:	e005      	b.n	8009232 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009226:	6978      	ldr	r0, [r7, #20]
 8009228:	f001 fc32 	bl	800aa90 <vPortFree>
 800922c:	e001      	b.n	8009232 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800922e:	2300      	movs	r3, #0
 8009230:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009232:	69fb      	ldr	r3, [r7, #28]
 8009234:	2b00      	cmp	r3, #0
 8009236:	d017      	beq.n	8009268 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009238:	69fb      	ldr	r3, [r7, #28]
 800923a:	2200      	movs	r2, #0
 800923c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009240:	88fa      	ldrh	r2, [r7, #6]
 8009242:	2300      	movs	r3, #0
 8009244:	9303      	str	r3, [sp, #12]
 8009246:	69fb      	ldr	r3, [r7, #28]
 8009248:	9302      	str	r3, [sp, #8]
 800924a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800924c:	9301      	str	r3, [sp, #4]
 800924e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009250:	9300      	str	r3, [sp, #0]
 8009252:	683b      	ldr	r3, [r7, #0]
 8009254:	68b9      	ldr	r1, [r7, #8]
 8009256:	68f8      	ldr	r0, [r7, #12]
 8009258:	f000 f80e 	bl	8009278 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800925c:	69f8      	ldr	r0, [r7, #28]
 800925e:	f000 f893 	bl	8009388 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009262:	2301      	movs	r3, #1
 8009264:	61bb      	str	r3, [r7, #24]
 8009266:	e002      	b.n	800926e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009268:	f04f 33ff 	mov.w	r3, #4294967295
 800926c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800926e:	69bb      	ldr	r3, [r7, #24]
	}
 8009270:	4618      	mov	r0, r3
 8009272:	3720      	adds	r7, #32
 8009274:	46bd      	mov	sp, r7
 8009276:	bd80      	pop	{r7, pc}

08009278 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009278:	b580      	push	{r7, lr}
 800927a:	b088      	sub	sp, #32
 800927c:	af00      	add	r7, sp, #0
 800927e:	60f8      	str	r0, [r7, #12]
 8009280:	60b9      	str	r1, [r7, #8]
 8009282:	607a      	str	r2, [r7, #4]
 8009284:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009288:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009290:	3b01      	subs	r3, #1
 8009292:	009b      	lsls	r3, r3, #2
 8009294:	4413      	add	r3, r2
 8009296:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009298:	69bb      	ldr	r3, [r7, #24]
 800929a:	f023 0307 	bic.w	r3, r3, #7
 800929e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80092a0:	69bb      	ldr	r3, [r7, #24]
 80092a2:	f003 0307 	and.w	r3, r3, #7
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d00a      	beq.n	80092c0 <prvInitialiseNewTask+0x48>
	__asm volatile
 80092aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092ae:	f383 8811 	msr	BASEPRI, r3
 80092b2:	f3bf 8f6f 	isb	sy
 80092b6:	f3bf 8f4f 	dsb	sy
 80092ba:	617b      	str	r3, [r7, #20]
}
 80092bc:	bf00      	nop
 80092be:	e7fe      	b.n	80092be <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80092c0:	68bb      	ldr	r3, [r7, #8]
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d01f      	beq.n	8009306 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80092c6:	2300      	movs	r3, #0
 80092c8:	61fb      	str	r3, [r7, #28]
 80092ca:	e012      	b.n	80092f2 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80092cc:	68ba      	ldr	r2, [r7, #8]
 80092ce:	69fb      	ldr	r3, [r7, #28]
 80092d0:	4413      	add	r3, r2
 80092d2:	7819      	ldrb	r1, [r3, #0]
 80092d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80092d6:	69fb      	ldr	r3, [r7, #28]
 80092d8:	4413      	add	r3, r2
 80092da:	3334      	adds	r3, #52	; 0x34
 80092dc:	460a      	mov	r2, r1
 80092de:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80092e0:	68ba      	ldr	r2, [r7, #8]
 80092e2:	69fb      	ldr	r3, [r7, #28]
 80092e4:	4413      	add	r3, r2
 80092e6:	781b      	ldrb	r3, [r3, #0]
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d006      	beq.n	80092fa <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80092ec:	69fb      	ldr	r3, [r7, #28]
 80092ee:	3301      	adds	r3, #1
 80092f0:	61fb      	str	r3, [r7, #28]
 80092f2:	69fb      	ldr	r3, [r7, #28]
 80092f4:	2b0f      	cmp	r3, #15
 80092f6:	d9e9      	bls.n	80092cc <prvInitialiseNewTask+0x54>
 80092f8:	e000      	b.n	80092fc <prvInitialiseNewTask+0x84>
			{
				break;
 80092fa:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80092fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092fe:	2200      	movs	r2, #0
 8009300:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009304:	e003      	b.n	800930e <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009308:	2200      	movs	r2, #0
 800930a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800930e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009310:	2b06      	cmp	r3, #6
 8009312:	d901      	bls.n	8009318 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009314:	2306      	movs	r3, #6
 8009316:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800931a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800931c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800931e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009320:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009322:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8009324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009326:	2200      	movs	r2, #0
 8009328:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800932a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800932c:	3304      	adds	r3, #4
 800932e:	4618      	mov	r0, r3
 8009330:	f7fe fe9d 	bl	800806e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009334:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009336:	3318      	adds	r3, #24
 8009338:	4618      	mov	r0, r3
 800933a:	f7fe fe98 	bl	800806e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800933e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009340:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009342:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009346:	f1c3 0207 	rsb	r2, r3, #7
 800934a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800934c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800934e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009350:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009352:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009356:	2200      	movs	r2, #0
 8009358:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800935a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800935c:	2200      	movs	r2, #0
 800935e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009362:	683a      	ldr	r2, [r7, #0]
 8009364:	68f9      	ldr	r1, [r7, #12]
 8009366:	69b8      	ldr	r0, [r7, #24]
 8009368:	f001 f880 	bl	800a46c <pxPortInitialiseStack>
 800936c:	4602      	mov	r2, r0
 800936e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009370:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009372:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009374:	2b00      	cmp	r3, #0
 8009376:	d002      	beq.n	800937e <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009378:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800937a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800937c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800937e:	bf00      	nop
 8009380:	3720      	adds	r7, #32
 8009382:	46bd      	mov	sp, r7
 8009384:	bd80      	pop	{r7, pc}
	...

08009388 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009388:	b580      	push	{r7, lr}
 800938a:	b082      	sub	sp, #8
 800938c:	af00      	add	r7, sp, #0
 800938e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009390:	f001 f998 	bl	800a6c4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009394:	4b2a      	ldr	r3, [pc, #168]	; (8009440 <prvAddNewTaskToReadyList+0xb8>)
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	3301      	adds	r3, #1
 800939a:	4a29      	ldr	r2, [pc, #164]	; (8009440 <prvAddNewTaskToReadyList+0xb8>)
 800939c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800939e:	4b29      	ldr	r3, [pc, #164]	; (8009444 <prvAddNewTaskToReadyList+0xbc>)
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d109      	bne.n	80093ba <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80093a6:	4a27      	ldr	r2, [pc, #156]	; (8009444 <prvAddNewTaskToReadyList+0xbc>)
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80093ac:	4b24      	ldr	r3, [pc, #144]	; (8009440 <prvAddNewTaskToReadyList+0xb8>)
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	2b01      	cmp	r3, #1
 80093b2:	d110      	bne.n	80093d6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80093b4:	f000 fc66 	bl	8009c84 <prvInitialiseTaskLists>
 80093b8:	e00d      	b.n	80093d6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80093ba:	4b23      	ldr	r3, [pc, #140]	; (8009448 <prvAddNewTaskToReadyList+0xc0>)
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d109      	bne.n	80093d6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80093c2:	4b20      	ldr	r3, [pc, #128]	; (8009444 <prvAddNewTaskToReadyList+0xbc>)
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093cc:	429a      	cmp	r2, r3
 80093ce:	d802      	bhi.n	80093d6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80093d0:	4a1c      	ldr	r2, [pc, #112]	; (8009444 <prvAddNewTaskToReadyList+0xbc>)
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80093d6:	4b1d      	ldr	r3, [pc, #116]	; (800944c <prvAddNewTaskToReadyList+0xc4>)
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	3301      	adds	r3, #1
 80093dc:	4a1b      	ldr	r2, [pc, #108]	; (800944c <prvAddNewTaskToReadyList+0xc4>)
 80093de:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093e4:	2201      	movs	r2, #1
 80093e6:	409a      	lsls	r2, r3
 80093e8:	4b19      	ldr	r3, [pc, #100]	; (8009450 <prvAddNewTaskToReadyList+0xc8>)
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	4313      	orrs	r3, r2
 80093ee:	4a18      	ldr	r2, [pc, #96]	; (8009450 <prvAddNewTaskToReadyList+0xc8>)
 80093f0:	6013      	str	r3, [r2, #0]
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093f6:	4613      	mov	r3, r2
 80093f8:	009b      	lsls	r3, r3, #2
 80093fa:	4413      	add	r3, r2
 80093fc:	009b      	lsls	r3, r3, #2
 80093fe:	4a15      	ldr	r2, [pc, #84]	; (8009454 <prvAddNewTaskToReadyList+0xcc>)
 8009400:	441a      	add	r2, r3
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	3304      	adds	r3, #4
 8009406:	4619      	mov	r1, r3
 8009408:	4610      	mov	r0, r2
 800940a:	f7fe fe3d 	bl	8008088 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800940e:	f001 f989 	bl	800a724 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009412:	4b0d      	ldr	r3, [pc, #52]	; (8009448 <prvAddNewTaskToReadyList+0xc0>)
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	2b00      	cmp	r3, #0
 8009418:	d00e      	beq.n	8009438 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800941a:	4b0a      	ldr	r3, [pc, #40]	; (8009444 <prvAddNewTaskToReadyList+0xbc>)
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009424:	429a      	cmp	r2, r3
 8009426:	d207      	bcs.n	8009438 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009428:	4b0b      	ldr	r3, [pc, #44]	; (8009458 <prvAddNewTaskToReadyList+0xd0>)
 800942a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800942e:	601a      	str	r2, [r3, #0]
 8009430:	f3bf 8f4f 	dsb	sy
 8009434:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009438:	bf00      	nop
 800943a:	3708      	adds	r7, #8
 800943c:	46bd      	mov	sp, r7
 800943e:	bd80      	pop	{r7, pc}
 8009440:	20002620 	.word	0x20002620
 8009444:	20002520 	.word	0x20002520
 8009448:	2000262c 	.word	0x2000262c
 800944c:	2000263c 	.word	0x2000263c
 8009450:	20002628 	.word	0x20002628
 8009454:	20002524 	.word	0x20002524
 8009458:	e000ed04 	.word	0xe000ed04

0800945c <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800945c:	b580      	push	{r7, lr}
 800945e:	b08a      	sub	sp, #40	; 0x28
 8009460:	af00      	add	r7, sp, #0
 8009462:	6078      	str	r0, [r7, #4]
 8009464:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8009466:	2300      	movs	r3, #0
 8009468:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	2b00      	cmp	r3, #0
 800946e:	d10a      	bne.n	8009486 <vTaskDelayUntil+0x2a>
	__asm volatile
 8009470:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009474:	f383 8811 	msr	BASEPRI, r3
 8009478:	f3bf 8f6f 	isb	sy
 800947c:	f3bf 8f4f 	dsb	sy
 8009480:	617b      	str	r3, [r7, #20]
}
 8009482:	bf00      	nop
 8009484:	e7fe      	b.n	8009484 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 8009486:	683b      	ldr	r3, [r7, #0]
 8009488:	2b00      	cmp	r3, #0
 800948a:	d10a      	bne.n	80094a2 <vTaskDelayUntil+0x46>
	__asm volatile
 800948c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009490:	f383 8811 	msr	BASEPRI, r3
 8009494:	f3bf 8f6f 	isb	sy
 8009498:	f3bf 8f4f 	dsb	sy
 800949c:	613b      	str	r3, [r7, #16]
}
 800949e:	bf00      	nop
 80094a0:	e7fe      	b.n	80094a0 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 80094a2:	4b2a      	ldr	r3, [pc, #168]	; (800954c <vTaskDelayUntil+0xf0>)
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d00a      	beq.n	80094c0 <vTaskDelayUntil+0x64>
	__asm volatile
 80094aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094ae:	f383 8811 	msr	BASEPRI, r3
 80094b2:	f3bf 8f6f 	isb	sy
 80094b6:	f3bf 8f4f 	dsb	sy
 80094ba:	60fb      	str	r3, [r7, #12]
}
 80094bc:	bf00      	nop
 80094be:	e7fe      	b.n	80094be <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 80094c0:	f000 f8de 	bl	8009680 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 80094c4:	4b22      	ldr	r3, [pc, #136]	; (8009550 <vTaskDelayUntil+0xf4>)
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	683a      	ldr	r2, [r7, #0]
 80094d0:	4413      	add	r3, r2
 80094d2:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	6a3a      	ldr	r2, [r7, #32]
 80094da:	429a      	cmp	r2, r3
 80094dc:	d20b      	bcs.n	80094f6 <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	69fa      	ldr	r2, [r7, #28]
 80094e4:	429a      	cmp	r2, r3
 80094e6:	d211      	bcs.n	800950c <vTaskDelayUntil+0xb0>
 80094e8:	69fa      	ldr	r2, [r7, #28]
 80094ea:	6a3b      	ldr	r3, [r7, #32]
 80094ec:	429a      	cmp	r2, r3
 80094ee:	d90d      	bls.n	800950c <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 80094f0:	2301      	movs	r3, #1
 80094f2:	627b      	str	r3, [r7, #36]	; 0x24
 80094f4:	e00a      	b.n	800950c <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	69fa      	ldr	r2, [r7, #28]
 80094fc:	429a      	cmp	r2, r3
 80094fe:	d303      	bcc.n	8009508 <vTaskDelayUntil+0xac>
 8009500:	69fa      	ldr	r2, [r7, #28]
 8009502:	6a3b      	ldr	r3, [r7, #32]
 8009504:	429a      	cmp	r2, r3
 8009506:	d901      	bls.n	800950c <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8009508:	2301      	movs	r3, #1
 800950a:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	69fa      	ldr	r2, [r7, #28]
 8009510:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8009512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009514:	2b00      	cmp	r3, #0
 8009516:	d006      	beq.n	8009526 <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8009518:	69fa      	ldr	r2, [r7, #28]
 800951a:	6a3b      	ldr	r3, [r7, #32]
 800951c:	1ad3      	subs	r3, r2, r3
 800951e:	2100      	movs	r1, #0
 8009520:	4618      	mov	r0, r3
 8009522:	f000 ff3d 	bl	800a3a0 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8009526:	f000 f8b9 	bl	800969c <xTaskResumeAll>
 800952a:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800952c:	69bb      	ldr	r3, [r7, #24]
 800952e:	2b00      	cmp	r3, #0
 8009530:	d107      	bne.n	8009542 <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 8009532:	4b08      	ldr	r3, [pc, #32]	; (8009554 <vTaskDelayUntil+0xf8>)
 8009534:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009538:	601a      	str	r2, [r3, #0]
 800953a:	f3bf 8f4f 	dsb	sy
 800953e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009542:	bf00      	nop
 8009544:	3728      	adds	r7, #40	; 0x28
 8009546:	46bd      	mov	sp, r7
 8009548:	bd80      	pop	{r7, pc}
 800954a:	bf00      	nop
 800954c:	20002648 	.word	0x20002648
 8009550:	20002624 	.word	0x20002624
 8009554:	e000ed04 	.word	0xe000ed04

08009558 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009558:	b580      	push	{r7, lr}
 800955a:	b084      	sub	sp, #16
 800955c:	af00      	add	r7, sp, #0
 800955e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009560:	2300      	movs	r3, #0
 8009562:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	2b00      	cmp	r3, #0
 8009568:	d017      	beq.n	800959a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800956a:	4b13      	ldr	r3, [pc, #76]	; (80095b8 <vTaskDelay+0x60>)
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	2b00      	cmp	r3, #0
 8009570:	d00a      	beq.n	8009588 <vTaskDelay+0x30>
	__asm volatile
 8009572:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009576:	f383 8811 	msr	BASEPRI, r3
 800957a:	f3bf 8f6f 	isb	sy
 800957e:	f3bf 8f4f 	dsb	sy
 8009582:	60bb      	str	r3, [r7, #8]
}
 8009584:	bf00      	nop
 8009586:	e7fe      	b.n	8009586 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009588:	f000 f87a 	bl	8009680 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800958c:	2100      	movs	r1, #0
 800958e:	6878      	ldr	r0, [r7, #4]
 8009590:	f000 ff06 	bl	800a3a0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009594:	f000 f882 	bl	800969c <xTaskResumeAll>
 8009598:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	2b00      	cmp	r3, #0
 800959e:	d107      	bne.n	80095b0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80095a0:	4b06      	ldr	r3, [pc, #24]	; (80095bc <vTaskDelay+0x64>)
 80095a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80095a6:	601a      	str	r2, [r3, #0]
 80095a8:	f3bf 8f4f 	dsb	sy
 80095ac:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80095b0:	bf00      	nop
 80095b2:	3710      	adds	r7, #16
 80095b4:	46bd      	mov	sp, r7
 80095b6:	bd80      	pop	{r7, pc}
 80095b8:	20002648 	.word	0x20002648
 80095bc:	e000ed04 	.word	0xe000ed04

080095c0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80095c0:	b580      	push	{r7, lr}
 80095c2:	b08a      	sub	sp, #40	; 0x28
 80095c4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80095c6:	2300      	movs	r3, #0
 80095c8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80095ca:	2300      	movs	r3, #0
 80095cc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80095ce:	463a      	mov	r2, r7
 80095d0:	1d39      	adds	r1, r7, #4
 80095d2:	f107 0308 	add.w	r3, r7, #8
 80095d6:	4618      	mov	r0, r3
 80095d8:	f7f7 fbf0 	bl	8000dbc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80095dc:	6839      	ldr	r1, [r7, #0]
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	68ba      	ldr	r2, [r7, #8]
 80095e2:	9202      	str	r2, [sp, #8]
 80095e4:	9301      	str	r3, [sp, #4]
 80095e6:	2300      	movs	r3, #0
 80095e8:	9300      	str	r3, [sp, #0]
 80095ea:	2300      	movs	r3, #0
 80095ec:	460a      	mov	r2, r1
 80095ee:	491e      	ldr	r1, [pc, #120]	; (8009668 <vTaskStartScheduler+0xa8>)
 80095f0:	481e      	ldr	r0, [pc, #120]	; (800966c <vTaskStartScheduler+0xac>)
 80095f2:	f7ff fd9f 	bl	8009134 <xTaskCreateStatic>
 80095f6:	4603      	mov	r3, r0
 80095f8:	4a1d      	ldr	r2, [pc, #116]	; (8009670 <vTaskStartScheduler+0xb0>)
 80095fa:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80095fc:	4b1c      	ldr	r3, [pc, #112]	; (8009670 <vTaskStartScheduler+0xb0>)
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	2b00      	cmp	r3, #0
 8009602:	d002      	beq.n	800960a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009604:	2301      	movs	r3, #1
 8009606:	617b      	str	r3, [r7, #20]
 8009608:	e001      	b.n	800960e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800960a:	2300      	movs	r3, #0
 800960c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800960e:	697b      	ldr	r3, [r7, #20]
 8009610:	2b01      	cmp	r3, #1
 8009612:	d116      	bne.n	8009642 <vTaskStartScheduler+0x82>
	__asm volatile
 8009614:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009618:	f383 8811 	msr	BASEPRI, r3
 800961c:	f3bf 8f6f 	isb	sy
 8009620:	f3bf 8f4f 	dsb	sy
 8009624:	613b      	str	r3, [r7, #16]
}
 8009626:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009628:	4b12      	ldr	r3, [pc, #72]	; (8009674 <vTaskStartScheduler+0xb4>)
 800962a:	f04f 32ff 	mov.w	r2, #4294967295
 800962e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009630:	4b11      	ldr	r3, [pc, #68]	; (8009678 <vTaskStartScheduler+0xb8>)
 8009632:	2201      	movs	r2, #1
 8009634:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009636:	4b11      	ldr	r3, [pc, #68]	; (800967c <vTaskStartScheduler+0xbc>)
 8009638:	2200      	movs	r2, #0
 800963a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800963c:	f000 ffa0 	bl	800a580 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009640:	e00e      	b.n	8009660 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009642:	697b      	ldr	r3, [r7, #20]
 8009644:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009648:	d10a      	bne.n	8009660 <vTaskStartScheduler+0xa0>
	__asm volatile
 800964a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800964e:	f383 8811 	msr	BASEPRI, r3
 8009652:	f3bf 8f6f 	isb	sy
 8009656:	f3bf 8f4f 	dsb	sy
 800965a:	60fb      	str	r3, [r7, #12]
}
 800965c:	bf00      	nop
 800965e:	e7fe      	b.n	800965e <vTaskStartScheduler+0x9e>
}
 8009660:	bf00      	nop
 8009662:	3718      	adds	r7, #24
 8009664:	46bd      	mov	sp, r7
 8009666:	bd80      	pop	{r7, pc}
 8009668:	0801cc50 	.word	0x0801cc50
 800966c:	08009c55 	.word	0x08009c55
 8009670:	20002644 	.word	0x20002644
 8009674:	20002640 	.word	0x20002640
 8009678:	2000262c 	.word	0x2000262c
 800967c:	20002624 	.word	0x20002624

08009680 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009680:	b480      	push	{r7}
 8009682:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8009684:	4b04      	ldr	r3, [pc, #16]	; (8009698 <vTaskSuspendAll+0x18>)
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	3301      	adds	r3, #1
 800968a:	4a03      	ldr	r2, [pc, #12]	; (8009698 <vTaskSuspendAll+0x18>)
 800968c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800968e:	bf00      	nop
 8009690:	46bd      	mov	sp, r7
 8009692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009696:	4770      	bx	lr
 8009698:	20002648 	.word	0x20002648

0800969c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800969c:	b580      	push	{r7, lr}
 800969e:	b084      	sub	sp, #16
 80096a0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80096a2:	2300      	movs	r3, #0
 80096a4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80096a6:	2300      	movs	r3, #0
 80096a8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80096aa:	4b41      	ldr	r3, [pc, #260]	; (80097b0 <xTaskResumeAll+0x114>)
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d10a      	bne.n	80096c8 <xTaskResumeAll+0x2c>
	__asm volatile
 80096b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096b6:	f383 8811 	msr	BASEPRI, r3
 80096ba:	f3bf 8f6f 	isb	sy
 80096be:	f3bf 8f4f 	dsb	sy
 80096c2:	603b      	str	r3, [r7, #0]
}
 80096c4:	bf00      	nop
 80096c6:	e7fe      	b.n	80096c6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80096c8:	f000 fffc 	bl	800a6c4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80096cc:	4b38      	ldr	r3, [pc, #224]	; (80097b0 <xTaskResumeAll+0x114>)
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	3b01      	subs	r3, #1
 80096d2:	4a37      	ldr	r2, [pc, #220]	; (80097b0 <xTaskResumeAll+0x114>)
 80096d4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80096d6:	4b36      	ldr	r3, [pc, #216]	; (80097b0 <xTaskResumeAll+0x114>)
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d161      	bne.n	80097a2 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80096de:	4b35      	ldr	r3, [pc, #212]	; (80097b4 <xTaskResumeAll+0x118>)
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d05d      	beq.n	80097a2 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80096e6:	e02e      	b.n	8009746 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80096e8:	4b33      	ldr	r3, [pc, #204]	; (80097b8 <xTaskResumeAll+0x11c>)
 80096ea:	68db      	ldr	r3, [r3, #12]
 80096ec:	68db      	ldr	r3, [r3, #12]
 80096ee:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	3318      	adds	r3, #24
 80096f4:	4618      	mov	r0, r3
 80096f6:	f7fe fd24 	bl	8008142 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	3304      	adds	r3, #4
 80096fe:	4618      	mov	r0, r3
 8009700:	f7fe fd1f 	bl	8008142 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009708:	2201      	movs	r2, #1
 800970a:	409a      	lsls	r2, r3
 800970c:	4b2b      	ldr	r3, [pc, #172]	; (80097bc <xTaskResumeAll+0x120>)
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	4313      	orrs	r3, r2
 8009712:	4a2a      	ldr	r2, [pc, #168]	; (80097bc <xTaskResumeAll+0x120>)
 8009714:	6013      	str	r3, [r2, #0]
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800971a:	4613      	mov	r3, r2
 800971c:	009b      	lsls	r3, r3, #2
 800971e:	4413      	add	r3, r2
 8009720:	009b      	lsls	r3, r3, #2
 8009722:	4a27      	ldr	r2, [pc, #156]	; (80097c0 <xTaskResumeAll+0x124>)
 8009724:	441a      	add	r2, r3
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	3304      	adds	r3, #4
 800972a:	4619      	mov	r1, r3
 800972c:	4610      	mov	r0, r2
 800972e:	f7fe fcab 	bl	8008088 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009736:	4b23      	ldr	r3, [pc, #140]	; (80097c4 <xTaskResumeAll+0x128>)
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800973c:	429a      	cmp	r2, r3
 800973e:	d302      	bcc.n	8009746 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8009740:	4b21      	ldr	r3, [pc, #132]	; (80097c8 <xTaskResumeAll+0x12c>)
 8009742:	2201      	movs	r2, #1
 8009744:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009746:	4b1c      	ldr	r3, [pc, #112]	; (80097b8 <xTaskResumeAll+0x11c>)
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	2b00      	cmp	r3, #0
 800974c:	d1cc      	bne.n	80096e8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	2b00      	cmp	r3, #0
 8009752:	d001      	beq.n	8009758 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009754:	f000 fb34 	bl	8009dc0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8009758:	4b1c      	ldr	r3, [pc, #112]	; (80097cc <xTaskResumeAll+0x130>)
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	2b00      	cmp	r3, #0
 8009762:	d010      	beq.n	8009786 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009764:	f000 f858 	bl	8009818 <xTaskIncrementTick>
 8009768:	4603      	mov	r3, r0
 800976a:	2b00      	cmp	r3, #0
 800976c:	d002      	beq.n	8009774 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800976e:	4b16      	ldr	r3, [pc, #88]	; (80097c8 <xTaskResumeAll+0x12c>)
 8009770:	2201      	movs	r2, #1
 8009772:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	3b01      	subs	r3, #1
 8009778:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	2b00      	cmp	r3, #0
 800977e:	d1f1      	bne.n	8009764 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8009780:	4b12      	ldr	r3, [pc, #72]	; (80097cc <xTaskResumeAll+0x130>)
 8009782:	2200      	movs	r2, #0
 8009784:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009786:	4b10      	ldr	r3, [pc, #64]	; (80097c8 <xTaskResumeAll+0x12c>)
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	2b00      	cmp	r3, #0
 800978c:	d009      	beq.n	80097a2 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800978e:	2301      	movs	r3, #1
 8009790:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009792:	4b0f      	ldr	r3, [pc, #60]	; (80097d0 <xTaskResumeAll+0x134>)
 8009794:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009798:	601a      	str	r2, [r3, #0]
 800979a:	f3bf 8f4f 	dsb	sy
 800979e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80097a2:	f000 ffbf 	bl	800a724 <vPortExitCritical>

	return xAlreadyYielded;
 80097a6:	68bb      	ldr	r3, [r7, #8]
}
 80097a8:	4618      	mov	r0, r3
 80097aa:	3710      	adds	r7, #16
 80097ac:	46bd      	mov	sp, r7
 80097ae:	bd80      	pop	{r7, pc}
 80097b0:	20002648 	.word	0x20002648
 80097b4:	20002620 	.word	0x20002620
 80097b8:	200025e0 	.word	0x200025e0
 80097bc:	20002628 	.word	0x20002628
 80097c0:	20002524 	.word	0x20002524
 80097c4:	20002520 	.word	0x20002520
 80097c8:	20002634 	.word	0x20002634
 80097cc:	20002630 	.word	0x20002630
 80097d0:	e000ed04 	.word	0xe000ed04

080097d4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80097d4:	b480      	push	{r7}
 80097d6:	b083      	sub	sp, #12
 80097d8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80097da:	4b05      	ldr	r3, [pc, #20]	; (80097f0 <xTaskGetTickCount+0x1c>)
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80097e0:	687b      	ldr	r3, [r7, #4]
}
 80097e2:	4618      	mov	r0, r3
 80097e4:	370c      	adds	r7, #12
 80097e6:	46bd      	mov	sp, r7
 80097e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ec:	4770      	bx	lr
 80097ee:	bf00      	nop
 80097f0:	20002624 	.word	0x20002624

080097f4 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80097f4:	b580      	push	{r7, lr}
 80097f6:	b082      	sub	sp, #8
 80097f8:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80097fa:	f001 f845 	bl	800a888 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80097fe:	2300      	movs	r3, #0
 8009800:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8009802:	4b04      	ldr	r3, [pc, #16]	; (8009814 <xTaskGetTickCountFromISR+0x20>)
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009808:	683b      	ldr	r3, [r7, #0]
}
 800980a:	4618      	mov	r0, r3
 800980c:	3708      	adds	r7, #8
 800980e:	46bd      	mov	sp, r7
 8009810:	bd80      	pop	{r7, pc}
 8009812:	bf00      	nop
 8009814:	20002624 	.word	0x20002624

08009818 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009818:	b580      	push	{r7, lr}
 800981a:	b086      	sub	sp, #24
 800981c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800981e:	2300      	movs	r3, #0
 8009820:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009822:	4b4e      	ldr	r3, [pc, #312]	; (800995c <xTaskIncrementTick+0x144>)
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	2b00      	cmp	r3, #0
 8009828:	f040 8088 	bne.w	800993c <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800982c:	4b4c      	ldr	r3, [pc, #304]	; (8009960 <xTaskIncrementTick+0x148>)
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	3301      	adds	r3, #1
 8009832:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009834:	4a4a      	ldr	r2, [pc, #296]	; (8009960 <xTaskIncrementTick+0x148>)
 8009836:	693b      	ldr	r3, [r7, #16]
 8009838:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800983a:	693b      	ldr	r3, [r7, #16]
 800983c:	2b00      	cmp	r3, #0
 800983e:	d120      	bne.n	8009882 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8009840:	4b48      	ldr	r3, [pc, #288]	; (8009964 <xTaskIncrementTick+0x14c>)
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	2b00      	cmp	r3, #0
 8009848:	d00a      	beq.n	8009860 <xTaskIncrementTick+0x48>
	__asm volatile
 800984a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800984e:	f383 8811 	msr	BASEPRI, r3
 8009852:	f3bf 8f6f 	isb	sy
 8009856:	f3bf 8f4f 	dsb	sy
 800985a:	603b      	str	r3, [r7, #0]
}
 800985c:	bf00      	nop
 800985e:	e7fe      	b.n	800985e <xTaskIncrementTick+0x46>
 8009860:	4b40      	ldr	r3, [pc, #256]	; (8009964 <xTaskIncrementTick+0x14c>)
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	60fb      	str	r3, [r7, #12]
 8009866:	4b40      	ldr	r3, [pc, #256]	; (8009968 <xTaskIncrementTick+0x150>)
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	4a3e      	ldr	r2, [pc, #248]	; (8009964 <xTaskIncrementTick+0x14c>)
 800986c:	6013      	str	r3, [r2, #0]
 800986e:	4a3e      	ldr	r2, [pc, #248]	; (8009968 <xTaskIncrementTick+0x150>)
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	6013      	str	r3, [r2, #0]
 8009874:	4b3d      	ldr	r3, [pc, #244]	; (800996c <xTaskIncrementTick+0x154>)
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	3301      	adds	r3, #1
 800987a:	4a3c      	ldr	r2, [pc, #240]	; (800996c <xTaskIncrementTick+0x154>)
 800987c:	6013      	str	r3, [r2, #0]
 800987e:	f000 fa9f 	bl	8009dc0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009882:	4b3b      	ldr	r3, [pc, #236]	; (8009970 <xTaskIncrementTick+0x158>)
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	693a      	ldr	r2, [r7, #16]
 8009888:	429a      	cmp	r2, r3
 800988a:	d348      	bcc.n	800991e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800988c:	4b35      	ldr	r3, [pc, #212]	; (8009964 <xTaskIncrementTick+0x14c>)
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	2b00      	cmp	r3, #0
 8009894:	d104      	bne.n	80098a0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009896:	4b36      	ldr	r3, [pc, #216]	; (8009970 <xTaskIncrementTick+0x158>)
 8009898:	f04f 32ff 	mov.w	r2, #4294967295
 800989c:	601a      	str	r2, [r3, #0]
					break;
 800989e:	e03e      	b.n	800991e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80098a0:	4b30      	ldr	r3, [pc, #192]	; (8009964 <xTaskIncrementTick+0x14c>)
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	68db      	ldr	r3, [r3, #12]
 80098a6:	68db      	ldr	r3, [r3, #12]
 80098a8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80098aa:	68bb      	ldr	r3, [r7, #8]
 80098ac:	685b      	ldr	r3, [r3, #4]
 80098ae:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80098b0:	693a      	ldr	r2, [r7, #16]
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	429a      	cmp	r2, r3
 80098b6:	d203      	bcs.n	80098c0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80098b8:	4a2d      	ldr	r2, [pc, #180]	; (8009970 <xTaskIncrementTick+0x158>)
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80098be:	e02e      	b.n	800991e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80098c0:	68bb      	ldr	r3, [r7, #8]
 80098c2:	3304      	adds	r3, #4
 80098c4:	4618      	mov	r0, r3
 80098c6:	f7fe fc3c 	bl	8008142 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80098ca:	68bb      	ldr	r3, [r7, #8]
 80098cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d004      	beq.n	80098dc <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80098d2:	68bb      	ldr	r3, [r7, #8]
 80098d4:	3318      	adds	r3, #24
 80098d6:	4618      	mov	r0, r3
 80098d8:	f7fe fc33 	bl	8008142 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80098dc:	68bb      	ldr	r3, [r7, #8]
 80098de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098e0:	2201      	movs	r2, #1
 80098e2:	409a      	lsls	r2, r3
 80098e4:	4b23      	ldr	r3, [pc, #140]	; (8009974 <xTaskIncrementTick+0x15c>)
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	4313      	orrs	r3, r2
 80098ea:	4a22      	ldr	r2, [pc, #136]	; (8009974 <xTaskIncrementTick+0x15c>)
 80098ec:	6013      	str	r3, [r2, #0]
 80098ee:	68bb      	ldr	r3, [r7, #8]
 80098f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098f2:	4613      	mov	r3, r2
 80098f4:	009b      	lsls	r3, r3, #2
 80098f6:	4413      	add	r3, r2
 80098f8:	009b      	lsls	r3, r3, #2
 80098fa:	4a1f      	ldr	r2, [pc, #124]	; (8009978 <xTaskIncrementTick+0x160>)
 80098fc:	441a      	add	r2, r3
 80098fe:	68bb      	ldr	r3, [r7, #8]
 8009900:	3304      	adds	r3, #4
 8009902:	4619      	mov	r1, r3
 8009904:	4610      	mov	r0, r2
 8009906:	f7fe fbbf 	bl	8008088 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800990a:	68bb      	ldr	r3, [r7, #8]
 800990c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800990e:	4b1b      	ldr	r3, [pc, #108]	; (800997c <xTaskIncrementTick+0x164>)
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009914:	429a      	cmp	r2, r3
 8009916:	d3b9      	bcc.n	800988c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8009918:	2301      	movs	r3, #1
 800991a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800991c:	e7b6      	b.n	800988c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800991e:	4b17      	ldr	r3, [pc, #92]	; (800997c <xTaskIncrementTick+0x164>)
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009924:	4914      	ldr	r1, [pc, #80]	; (8009978 <xTaskIncrementTick+0x160>)
 8009926:	4613      	mov	r3, r2
 8009928:	009b      	lsls	r3, r3, #2
 800992a:	4413      	add	r3, r2
 800992c:	009b      	lsls	r3, r3, #2
 800992e:	440b      	add	r3, r1
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	2b01      	cmp	r3, #1
 8009934:	d907      	bls.n	8009946 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 8009936:	2301      	movs	r3, #1
 8009938:	617b      	str	r3, [r7, #20]
 800993a:	e004      	b.n	8009946 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800993c:	4b10      	ldr	r3, [pc, #64]	; (8009980 <xTaskIncrementTick+0x168>)
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	3301      	adds	r3, #1
 8009942:	4a0f      	ldr	r2, [pc, #60]	; (8009980 <xTaskIncrementTick+0x168>)
 8009944:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8009946:	4b0f      	ldr	r3, [pc, #60]	; (8009984 <xTaskIncrementTick+0x16c>)
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	2b00      	cmp	r3, #0
 800994c:	d001      	beq.n	8009952 <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 800994e:	2301      	movs	r3, #1
 8009950:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8009952:	697b      	ldr	r3, [r7, #20]
}
 8009954:	4618      	mov	r0, r3
 8009956:	3718      	adds	r7, #24
 8009958:	46bd      	mov	sp, r7
 800995a:	bd80      	pop	{r7, pc}
 800995c:	20002648 	.word	0x20002648
 8009960:	20002624 	.word	0x20002624
 8009964:	200025d8 	.word	0x200025d8
 8009968:	200025dc 	.word	0x200025dc
 800996c:	20002638 	.word	0x20002638
 8009970:	20002640 	.word	0x20002640
 8009974:	20002628 	.word	0x20002628
 8009978:	20002524 	.word	0x20002524
 800997c:	20002520 	.word	0x20002520
 8009980:	20002630 	.word	0x20002630
 8009984:	20002634 	.word	0x20002634

08009988 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009988:	b480      	push	{r7}
 800998a:	b087      	sub	sp, #28
 800998c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800998e:	4b27      	ldr	r3, [pc, #156]	; (8009a2c <vTaskSwitchContext+0xa4>)
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	2b00      	cmp	r3, #0
 8009994:	d003      	beq.n	800999e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009996:	4b26      	ldr	r3, [pc, #152]	; (8009a30 <vTaskSwitchContext+0xa8>)
 8009998:	2201      	movs	r2, #1
 800999a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800999c:	e03f      	b.n	8009a1e <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800999e:	4b24      	ldr	r3, [pc, #144]	; (8009a30 <vTaskSwitchContext+0xa8>)
 80099a0:	2200      	movs	r2, #0
 80099a2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80099a4:	4b23      	ldr	r3, [pc, #140]	; (8009a34 <vTaskSwitchContext+0xac>)
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	fab3 f383 	clz	r3, r3
 80099b0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80099b2:	7afb      	ldrb	r3, [r7, #11]
 80099b4:	f1c3 031f 	rsb	r3, r3, #31
 80099b8:	617b      	str	r3, [r7, #20]
 80099ba:	491f      	ldr	r1, [pc, #124]	; (8009a38 <vTaskSwitchContext+0xb0>)
 80099bc:	697a      	ldr	r2, [r7, #20]
 80099be:	4613      	mov	r3, r2
 80099c0:	009b      	lsls	r3, r3, #2
 80099c2:	4413      	add	r3, r2
 80099c4:	009b      	lsls	r3, r3, #2
 80099c6:	440b      	add	r3, r1
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d10a      	bne.n	80099e4 <vTaskSwitchContext+0x5c>
	__asm volatile
 80099ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099d2:	f383 8811 	msr	BASEPRI, r3
 80099d6:	f3bf 8f6f 	isb	sy
 80099da:	f3bf 8f4f 	dsb	sy
 80099de:	607b      	str	r3, [r7, #4]
}
 80099e0:	bf00      	nop
 80099e2:	e7fe      	b.n	80099e2 <vTaskSwitchContext+0x5a>
 80099e4:	697a      	ldr	r2, [r7, #20]
 80099e6:	4613      	mov	r3, r2
 80099e8:	009b      	lsls	r3, r3, #2
 80099ea:	4413      	add	r3, r2
 80099ec:	009b      	lsls	r3, r3, #2
 80099ee:	4a12      	ldr	r2, [pc, #72]	; (8009a38 <vTaskSwitchContext+0xb0>)
 80099f0:	4413      	add	r3, r2
 80099f2:	613b      	str	r3, [r7, #16]
 80099f4:	693b      	ldr	r3, [r7, #16]
 80099f6:	685b      	ldr	r3, [r3, #4]
 80099f8:	685a      	ldr	r2, [r3, #4]
 80099fa:	693b      	ldr	r3, [r7, #16]
 80099fc:	605a      	str	r2, [r3, #4]
 80099fe:	693b      	ldr	r3, [r7, #16]
 8009a00:	685a      	ldr	r2, [r3, #4]
 8009a02:	693b      	ldr	r3, [r7, #16]
 8009a04:	3308      	adds	r3, #8
 8009a06:	429a      	cmp	r2, r3
 8009a08:	d104      	bne.n	8009a14 <vTaskSwitchContext+0x8c>
 8009a0a:	693b      	ldr	r3, [r7, #16]
 8009a0c:	685b      	ldr	r3, [r3, #4]
 8009a0e:	685a      	ldr	r2, [r3, #4]
 8009a10:	693b      	ldr	r3, [r7, #16]
 8009a12:	605a      	str	r2, [r3, #4]
 8009a14:	693b      	ldr	r3, [r7, #16]
 8009a16:	685b      	ldr	r3, [r3, #4]
 8009a18:	68db      	ldr	r3, [r3, #12]
 8009a1a:	4a08      	ldr	r2, [pc, #32]	; (8009a3c <vTaskSwitchContext+0xb4>)
 8009a1c:	6013      	str	r3, [r2, #0]
}
 8009a1e:	bf00      	nop
 8009a20:	371c      	adds	r7, #28
 8009a22:	46bd      	mov	sp, r7
 8009a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a28:	4770      	bx	lr
 8009a2a:	bf00      	nop
 8009a2c:	20002648 	.word	0x20002648
 8009a30:	20002634 	.word	0x20002634
 8009a34:	20002628 	.word	0x20002628
 8009a38:	20002524 	.word	0x20002524
 8009a3c:	20002520 	.word	0x20002520

08009a40 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009a40:	b580      	push	{r7, lr}
 8009a42:	b084      	sub	sp, #16
 8009a44:	af00      	add	r7, sp, #0
 8009a46:	6078      	str	r0, [r7, #4]
 8009a48:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d10a      	bne.n	8009a66 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8009a50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a54:	f383 8811 	msr	BASEPRI, r3
 8009a58:	f3bf 8f6f 	isb	sy
 8009a5c:	f3bf 8f4f 	dsb	sy
 8009a60:	60fb      	str	r3, [r7, #12]
}
 8009a62:	bf00      	nop
 8009a64:	e7fe      	b.n	8009a64 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009a66:	4b07      	ldr	r3, [pc, #28]	; (8009a84 <vTaskPlaceOnEventList+0x44>)
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	3318      	adds	r3, #24
 8009a6c:	4619      	mov	r1, r3
 8009a6e:	6878      	ldr	r0, [r7, #4]
 8009a70:	f7fe fb2e 	bl	80080d0 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009a74:	2101      	movs	r1, #1
 8009a76:	6838      	ldr	r0, [r7, #0]
 8009a78:	f000 fc92 	bl	800a3a0 <prvAddCurrentTaskToDelayedList>
}
 8009a7c:	bf00      	nop
 8009a7e:	3710      	adds	r7, #16
 8009a80:	46bd      	mov	sp, r7
 8009a82:	bd80      	pop	{r7, pc}
 8009a84:	20002520 	.word	0x20002520

08009a88 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009a88:	b580      	push	{r7, lr}
 8009a8a:	b086      	sub	sp, #24
 8009a8c:	af00      	add	r7, sp, #0
 8009a8e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	68db      	ldr	r3, [r3, #12]
 8009a94:	68db      	ldr	r3, [r3, #12]
 8009a96:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009a98:	693b      	ldr	r3, [r7, #16]
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d10a      	bne.n	8009ab4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8009a9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009aa2:	f383 8811 	msr	BASEPRI, r3
 8009aa6:	f3bf 8f6f 	isb	sy
 8009aaa:	f3bf 8f4f 	dsb	sy
 8009aae:	60fb      	str	r3, [r7, #12]
}
 8009ab0:	bf00      	nop
 8009ab2:	e7fe      	b.n	8009ab2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009ab4:	693b      	ldr	r3, [r7, #16]
 8009ab6:	3318      	adds	r3, #24
 8009ab8:	4618      	mov	r0, r3
 8009aba:	f7fe fb42 	bl	8008142 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009abe:	4b1d      	ldr	r3, [pc, #116]	; (8009b34 <xTaskRemoveFromEventList+0xac>)
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d11c      	bne.n	8009b00 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009ac6:	693b      	ldr	r3, [r7, #16]
 8009ac8:	3304      	adds	r3, #4
 8009aca:	4618      	mov	r0, r3
 8009acc:	f7fe fb39 	bl	8008142 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009ad0:	693b      	ldr	r3, [r7, #16]
 8009ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ad4:	2201      	movs	r2, #1
 8009ad6:	409a      	lsls	r2, r3
 8009ad8:	4b17      	ldr	r3, [pc, #92]	; (8009b38 <xTaskRemoveFromEventList+0xb0>)
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	4313      	orrs	r3, r2
 8009ade:	4a16      	ldr	r2, [pc, #88]	; (8009b38 <xTaskRemoveFromEventList+0xb0>)
 8009ae0:	6013      	str	r3, [r2, #0]
 8009ae2:	693b      	ldr	r3, [r7, #16]
 8009ae4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ae6:	4613      	mov	r3, r2
 8009ae8:	009b      	lsls	r3, r3, #2
 8009aea:	4413      	add	r3, r2
 8009aec:	009b      	lsls	r3, r3, #2
 8009aee:	4a13      	ldr	r2, [pc, #76]	; (8009b3c <xTaskRemoveFromEventList+0xb4>)
 8009af0:	441a      	add	r2, r3
 8009af2:	693b      	ldr	r3, [r7, #16]
 8009af4:	3304      	adds	r3, #4
 8009af6:	4619      	mov	r1, r3
 8009af8:	4610      	mov	r0, r2
 8009afa:	f7fe fac5 	bl	8008088 <vListInsertEnd>
 8009afe:	e005      	b.n	8009b0c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009b00:	693b      	ldr	r3, [r7, #16]
 8009b02:	3318      	adds	r3, #24
 8009b04:	4619      	mov	r1, r3
 8009b06:	480e      	ldr	r0, [pc, #56]	; (8009b40 <xTaskRemoveFromEventList+0xb8>)
 8009b08:	f7fe fabe 	bl	8008088 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009b0c:	693b      	ldr	r3, [r7, #16]
 8009b0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b10:	4b0c      	ldr	r3, [pc, #48]	; (8009b44 <xTaskRemoveFromEventList+0xbc>)
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b16:	429a      	cmp	r2, r3
 8009b18:	d905      	bls.n	8009b26 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009b1a:	2301      	movs	r3, #1
 8009b1c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009b1e:	4b0a      	ldr	r3, [pc, #40]	; (8009b48 <xTaskRemoveFromEventList+0xc0>)
 8009b20:	2201      	movs	r2, #1
 8009b22:	601a      	str	r2, [r3, #0]
 8009b24:	e001      	b.n	8009b2a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8009b26:	2300      	movs	r3, #0
 8009b28:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009b2a:	697b      	ldr	r3, [r7, #20]
}
 8009b2c:	4618      	mov	r0, r3
 8009b2e:	3718      	adds	r7, #24
 8009b30:	46bd      	mov	sp, r7
 8009b32:	bd80      	pop	{r7, pc}
 8009b34:	20002648 	.word	0x20002648
 8009b38:	20002628 	.word	0x20002628
 8009b3c:	20002524 	.word	0x20002524
 8009b40:	200025e0 	.word	0x200025e0
 8009b44:	20002520 	.word	0x20002520
 8009b48:	20002634 	.word	0x20002634

08009b4c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009b4c:	b480      	push	{r7}
 8009b4e:	b083      	sub	sp, #12
 8009b50:	af00      	add	r7, sp, #0
 8009b52:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009b54:	4b06      	ldr	r3, [pc, #24]	; (8009b70 <vTaskInternalSetTimeOutState+0x24>)
 8009b56:	681a      	ldr	r2, [r3, #0]
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009b5c:	4b05      	ldr	r3, [pc, #20]	; (8009b74 <vTaskInternalSetTimeOutState+0x28>)
 8009b5e:	681a      	ldr	r2, [r3, #0]
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	605a      	str	r2, [r3, #4]
}
 8009b64:	bf00      	nop
 8009b66:	370c      	adds	r7, #12
 8009b68:	46bd      	mov	sp, r7
 8009b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b6e:	4770      	bx	lr
 8009b70:	20002638 	.word	0x20002638
 8009b74:	20002624 	.word	0x20002624

08009b78 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009b78:	b580      	push	{r7, lr}
 8009b7a:	b088      	sub	sp, #32
 8009b7c:	af00      	add	r7, sp, #0
 8009b7e:	6078      	str	r0, [r7, #4]
 8009b80:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d10a      	bne.n	8009b9e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8009b88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b8c:	f383 8811 	msr	BASEPRI, r3
 8009b90:	f3bf 8f6f 	isb	sy
 8009b94:	f3bf 8f4f 	dsb	sy
 8009b98:	613b      	str	r3, [r7, #16]
}
 8009b9a:	bf00      	nop
 8009b9c:	e7fe      	b.n	8009b9c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009b9e:	683b      	ldr	r3, [r7, #0]
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d10a      	bne.n	8009bba <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8009ba4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ba8:	f383 8811 	msr	BASEPRI, r3
 8009bac:	f3bf 8f6f 	isb	sy
 8009bb0:	f3bf 8f4f 	dsb	sy
 8009bb4:	60fb      	str	r3, [r7, #12]
}
 8009bb6:	bf00      	nop
 8009bb8:	e7fe      	b.n	8009bb8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8009bba:	f000 fd83 	bl	800a6c4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009bbe:	4b1d      	ldr	r3, [pc, #116]	; (8009c34 <xTaskCheckForTimeOut+0xbc>)
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	685b      	ldr	r3, [r3, #4]
 8009bc8:	69ba      	ldr	r2, [r7, #24]
 8009bca:	1ad3      	subs	r3, r2, r3
 8009bcc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009bce:	683b      	ldr	r3, [r7, #0]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009bd6:	d102      	bne.n	8009bde <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009bd8:	2300      	movs	r3, #0
 8009bda:	61fb      	str	r3, [r7, #28]
 8009bdc:	e023      	b.n	8009c26 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	681a      	ldr	r2, [r3, #0]
 8009be2:	4b15      	ldr	r3, [pc, #84]	; (8009c38 <xTaskCheckForTimeOut+0xc0>)
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	429a      	cmp	r2, r3
 8009be8:	d007      	beq.n	8009bfa <xTaskCheckForTimeOut+0x82>
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	685b      	ldr	r3, [r3, #4]
 8009bee:	69ba      	ldr	r2, [r7, #24]
 8009bf0:	429a      	cmp	r2, r3
 8009bf2:	d302      	bcc.n	8009bfa <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009bf4:	2301      	movs	r3, #1
 8009bf6:	61fb      	str	r3, [r7, #28]
 8009bf8:	e015      	b.n	8009c26 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009bfa:	683b      	ldr	r3, [r7, #0]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	697a      	ldr	r2, [r7, #20]
 8009c00:	429a      	cmp	r2, r3
 8009c02:	d20b      	bcs.n	8009c1c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009c04:	683b      	ldr	r3, [r7, #0]
 8009c06:	681a      	ldr	r2, [r3, #0]
 8009c08:	697b      	ldr	r3, [r7, #20]
 8009c0a:	1ad2      	subs	r2, r2, r3
 8009c0c:	683b      	ldr	r3, [r7, #0]
 8009c0e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009c10:	6878      	ldr	r0, [r7, #4]
 8009c12:	f7ff ff9b 	bl	8009b4c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009c16:	2300      	movs	r3, #0
 8009c18:	61fb      	str	r3, [r7, #28]
 8009c1a:	e004      	b.n	8009c26 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8009c1c:	683b      	ldr	r3, [r7, #0]
 8009c1e:	2200      	movs	r2, #0
 8009c20:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009c22:	2301      	movs	r3, #1
 8009c24:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009c26:	f000 fd7d 	bl	800a724 <vPortExitCritical>

	return xReturn;
 8009c2a:	69fb      	ldr	r3, [r7, #28]
}
 8009c2c:	4618      	mov	r0, r3
 8009c2e:	3720      	adds	r7, #32
 8009c30:	46bd      	mov	sp, r7
 8009c32:	bd80      	pop	{r7, pc}
 8009c34:	20002624 	.word	0x20002624
 8009c38:	20002638 	.word	0x20002638

08009c3c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009c3c:	b480      	push	{r7}
 8009c3e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009c40:	4b03      	ldr	r3, [pc, #12]	; (8009c50 <vTaskMissedYield+0x14>)
 8009c42:	2201      	movs	r2, #1
 8009c44:	601a      	str	r2, [r3, #0]
}
 8009c46:	bf00      	nop
 8009c48:	46bd      	mov	sp, r7
 8009c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c4e:	4770      	bx	lr
 8009c50:	20002634 	.word	0x20002634

08009c54 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009c54:	b580      	push	{r7, lr}
 8009c56:	b082      	sub	sp, #8
 8009c58:	af00      	add	r7, sp, #0
 8009c5a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009c5c:	f000 f852 	bl	8009d04 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009c60:	4b06      	ldr	r3, [pc, #24]	; (8009c7c <prvIdleTask+0x28>)
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	2b01      	cmp	r3, #1
 8009c66:	d9f9      	bls.n	8009c5c <prvIdleTask+0x8>
			{
				taskYIELD();
 8009c68:	4b05      	ldr	r3, [pc, #20]	; (8009c80 <prvIdleTask+0x2c>)
 8009c6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c6e:	601a      	str	r2, [r3, #0]
 8009c70:	f3bf 8f4f 	dsb	sy
 8009c74:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009c78:	e7f0      	b.n	8009c5c <prvIdleTask+0x8>
 8009c7a:	bf00      	nop
 8009c7c:	20002524 	.word	0x20002524
 8009c80:	e000ed04 	.word	0xe000ed04

08009c84 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009c84:	b580      	push	{r7, lr}
 8009c86:	b082      	sub	sp, #8
 8009c88:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009c8a:	2300      	movs	r3, #0
 8009c8c:	607b      	str	r3, [r7, #4]
 8009c8e:	e00c      	b.n	8009caa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009c90:	687a      	ldr	r2, [r7, #4]
 8009c92:	4613      	mov	r3, r2
 8009c94:	009b      	lsls	r3, r3, #2
 8009c96:	4413      	add	r3, r2
 8009c98:	009b      	lsls	r3, r3, #2
 8009c9a:	4a12      	ldr	r2, [pc, #72]	; (8009ce4 <prvInitialiseTaskLists+0x60>)
 8009c9c:	4413      	add	r3, r2
 8009c9e:	4618      	mov	r0, r3
 8009ca0:	f7fe f9c5 	bl	800802e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	3301      	adds	r3, #1
 8009ca8:	607b      	str	r3, [r7, #4]
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	2b06      	cmp	r3, #6
 8009cae:	d9ef      	bls.n	8009c90 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009cb0:	480d      	ldr	r0, [pc, #52]	; (8009ce8 <prvInitialiseTaskLists+0x64>)
 8009cb2:	f7fe f9bc 	bl	800802e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009cb6:	480d      	ldr	r0, [pc, #52]	; (8009cec <prvInitialiseTaskLists+0x68>)
 8009cb8:	f7fe f9b9 	bl	800802e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009cbc:	480c      	ldr	r0, [pc, #48]	; (8009cf0 <prvInitialiseTaskLists+0x6c>)
 8009cbe:	f7fe f9b6 	bl	800802e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009cc2:	480c      	ldr	r0, [pc, #48]	; (8009cf4 <prvInitialiseTaskLists+0x70>)
 8009cc4:	f7fe f9b3 	bl	800802e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009cc8:	480b      	ldr	r0, [pc, #44]	; (8009cf8 <prvInitialiseTaskLists+0x74>)
 8009cca:	f7fe f9b0 	bl	800802e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009cce:	4b0b      	ldr	r3, [pc, #44]	; (8009cfc <prvInitialiseTaskLists+0x78>)
 8009cd0:	4a05      	ldr	r2, [pc, #20]	; (8009ce8 <prvInitialiseTaskLists+0x64>)
 8009cd2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009cd4:	4b0a      	ldr	r3, [pc, #40]	; (8009d00 <prvInitialiseTaskLists+0x7c>)
 8009cd6:	4a05      	ldr	r2, [pc, #20]	; (8009cec <prvInitialiseTaskLists+0x68>)
 8009cd8:	601a      	str	r2, [r3, #0]
}
 8009cda:	bf00      	nop
 8009cdc:	3708      	adds	r7, #8
 8009cde:	46bd      	mov	sp, r7
 8009ce0:	bd80      	pop	{r7, pc}
 8009ce2:	bf00      	nop
 8009ce4:	20002524 	.word	0x20002524
 8009ce8:	200025b0 	.word	0x200025b0
 8009cec:	200025c4 	.word	0x200025c4
 8009cf0:	200025e0 	.word	0x200025e0
 8009cf4:	200025f4 	.word	0x200025f4
 8009cf8:	2000260c 	.word	0x2000260c
 8009cfc:	200025d8 	.word	0x200025d8
 8009d00:	200025dc 	.word	0x200025dc

08009d04 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009d04:	b580      	push	{r7, lr}
 8009d06:	b082      	sub	sp, #8
 8009d08:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009d0a:	e019      	b.n	8009d40 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009d0c:	f000 fcda 	bl	800a6c4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009d10:	4b10      	ldr	r3, [pc, #64]	; (8009d54 <prvCheckTasksWaitingTermination+0x50>)
 8009d12:	68db      	ldr	r3, [r3, #12]
 8009d14:	68db      	ldr	r3, [r3, #12]
 8009d16:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	3304      	adds	r3, #4
 8009d1c:	4618      	mov	r0, r3
 8009d1e:	f7fe fa10 	bl	8008142 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009d22:	4b0d      	ldr	r3, [pc, #52]	; (8009d58 <prvCheckTasksWaitingTermination+0x54>)
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	3b01      	subs	r3, #1
 8009d28:	4a0b      	ldr	r2, [pc, #44]	; (8009d58 <prvCheckTasksWaitingTermination+0x54>)
 8009d2a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009d2c:	4b0b      	ldr	r3, [pc, #44]	; (8009d5c <prvCheckTasksWaitingTermination+0x58>)
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	3b01      	subs	r3, #1
 8009d32:	4a0a      	ldr	r2, [pc, #40]	; (8009d5c <prvCheckTasksWaitingTermination+0x58>)
 8009d34:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009d36:	f000 fcf5 	bl	800a724 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009d3a:	6878      	ldr	r0, [r7, #4]
 8009d3c:	f000 f810 	bl	8009d60 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009d40:	4b06      	ldr	r3, [pc, #24]	; (8009d5c <prvCheckTasksWaitingTermination+0x58>)
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d1e1      	bne.n	8009d0c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009d48:	bf00      	nop
 8009d4a:	bf00      	nop
 8009d4c:	3708      	adds	r7, #8
 8009d4e:	46bd      	mov	sp, r7
 8009d50:	bd80      	pop	{r7, pc}
 8009d52:	bf00      	nop
 8009d54:	200025f4 	.word	0x200025f4
 8009d58:	20002620 	.word	0x20002620
 8009d5c:	20002608 	.word	0x20002608

08009d60 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009d60:	b580      	push	{r7, lr}
 8009d62:	b084      	sub	sp, #16
 8009d64:	af00      	add	r7, sp, #0
 8009d66:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d108      	bne.n	8009d84 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d76:	4618      	mov	r0, r3
 8009d78:	f000 fe8a 	bl	800aa90 <vPortFree>
				vPortFree( pxTCB );
 8009d7c:	6878      	ldr	r0, [r7, #4]
 8009d7e:	f000 fe87 	bl	800aa90 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009d82:	e018      	b.n	8009db6 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009d8a:	2b01      	cmp	r3, #1
 8009d8c:	d103      	bne.n	8009d96 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8009d8e:	6878      	ldr	r0, [r7, #4]
 8009d90:	f000 fe7e 	bl	800aa90 <vPortFree>
	}
 8009d94:	e00f      	b.n	8009db6 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009d9c:	2b02      	cmp	r3, #2
 8009d9e:	d00a      	beq.n	8009db6 <prvDeleteTCB+0x56>
	__asm volatile
 8009da0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009da4:	f383 8811 	msr	BASEPRI, r3
 8009da8:	f3bf 8f6f 	isb	sy
 8009dac:	f3bf 8f4f 	dsb	sy
 8009db0:	60fb      	str	r3, [r7, #12]
}
 8009db2:	bf00      	nop
 8009db4:	e7fe      	b.n	8009db4 <prvDeleteTCB+0x54>
	}
 8009db6:	bf00      	nop
 8009db8:	3710      	adds	r7, #16
 8009dba:	46bd      	mov	sp, r7
 8009dbc:	bd80      	pop	{r7, pc}
	...

08009dc0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009dc0:	b480      	push	{r7}
 8009dc2:	b083      	sub	sp, #12
 8009dc4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009dc6:	4b0c      	ldr	r3, [pc, #48]	; (8009df8 <prvResetNextTaskUnblockTime+0x38>)
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d104      	bne.n	8009dda <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009dd0:	4b0a      	ldr	r3, [pc, #40]	; (8009dfc <prvResetNextTaskUnblockTime+0x3c>)
 8009dd2:	f04f 32ff 	mov.w	r2, #4294967295
 8009dd6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009dd8:	e008      	b.n	8009dec <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009dda:	4b07      	ldr	r3, [pc, #28]	; (8009df8 <prvResetNextTaskUnblockTime+0x38>)
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	68db      	ldr	r3, [r3, #12]
 8009de0:	68db      	ldr	r3, [r3, #12]
 8009de2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	685b      	ldr	r3, [r3, #4]
 8009de8:	4a04      	ldr	r2, [pc, #16]	; (8009dfc <prvResetNextTaskUnblockTime+0x3c>)
 8009dea:	6013      	str	r3, [r2, #0]
}
 8009dec:	bf00      	nop
 8009dee:	370c      	adds	r7, #12
 8009df0:	46bd      	mov	sp, r7
 8009df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df6:	4770      	bx	lr
 8009df8:	200025d8 	.word	0x200025d8
 8009dfc:	20002640 	.word	0x20002640

08009e00 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009e00:	b480      	push	{r7}
 8009e02:	b083      	sub	sp, #12
 8009e04:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009e06:	4b0b      	ldr	r3, [pc, #44]	; (8009e34 <xTaskGetSchedulerState+0x34>)
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d102      	bne.n	8009e14 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009e0e:	2301      	movs	r3, #1
 8009e10:	607b      	str	r3, [r7, #4]
 8009e12:	e008      	b.n	8009e26 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009e14:	4b08      	ldr	r3, [pc, #32]	; (8009e38 <xTaskGetSchedulerState+0x38>)
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d102      	bne.n	8009e22 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009e1c:	2302      	movs	r3, #2
 8009e1e:	607b      	str	r3, [r7, #4]
 8009e20:	e001      	b.n	8009e26 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009e22:	2300      	movs	r3, #0
 8009e24:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009e26:	687b      	ldr	r3, [r7, #4]
	}
 8009e28:	4618      	mov	r0, r3
 8009e2a:	370c      	adds	r7, #12
 8009e2c:	46bd      	mov	sp, r7
 8009e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e32:	4770      	bx	lr
 8009e34:	2000262c 	.word	0x2000262c
 8009e38:	20002648 	.word	0x20002648

08009e3c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8009e3c:	b580      	push	{r7, lr}
 8009e3e:	b084      	sub	sp, #16
 8009e40:	af00      	add	r7, sp, #0
 8009e42:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8009e48:	2300      	movs	r3, #0
 8009e4a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d069      	beq.n	8009f26 <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8009e52:	68bb      	ldr	r3, [r7, #8]
 8009e54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e56:	4b36      	ldr	r3, [pc, #216]	; (8009f30 <xTaskPriorityInherit+0xf4>)
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e5c:	429a      	cmp	r2, r3
 8009e5e:	d259      	bcs.n	8009f14 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009e60:	68bb      	ldr	r3, [r7, #8]
 8009e62:	699b      	ldr	r3, [r3, #24]
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	db06      	blt.n	8009e76 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009e68:	4b31      	ldr	r3, [pc, #196]	; (8009f30 <xTaskPriorityInherit+0xf4>)
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e6e:	f1c3 0207 	rsb	r2, r3, #7
 8009e72:	68bb      	ldr	r3, [r7, #8]
 8009e74:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8009e76:	68bb      	ldr	r3, [r7, #8]
 8009e78:	6959      	ldr	r1, [r3, #20]
 8009e7a:	68bb      	ldr	r3, [r7, #8]
 8009e7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e7e:	4613      	mov	r3, r2
 8009e80:	009b      	lsls	r3, r3, #2
 8009e82:	4413      	add	r3, r2
 8009e84:	009b      	lsls	r3, r3, #2
 8009e86:	4a2b      	ldr	r2, [pc, #172]	; (8009f34 <xTaskPriorityInherit+0xf8>)
 8009e88:	4413      	add	r3, r2
 8009e8a:	4299      	cmp	r1, r3
 8009e8c:	d13a      	bne.n	8009f04 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009e8e:	68bb      	ldr	r3, [r7, #8]
 8009e90:	3304      	adds	r3, #4
 8009e92:	4618      	mov	r0, r3
 8009e94:	f7fe f955 	bl	8008142 <uxListRemove>
 8009e98:	4603      	mov	r3, r0
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d115      	bne.n	8009eca <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8009e9e:	68bb      	ldr	r3, [r7, #8]
 8009ea0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ea2:	4924      	ldr	r1, [pc, #144]	; (8009f34 <xTaskPriorityInherit+0xf8>)
 8009ea4:	4613      	mov	r3, r2
 8009ea6:	009b      	lsls	r3, r3, #2
 8009ea8:	4413      	add	r3, r2
 8009eaa:	009b      	lsls	r3, r3, #2
 8009eac:	440b      	add	r3, r1
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d10a      	bne.n	8009eca <xTaskPriorityInherit+0x8e>
 8009eb4:	68bb      	ldr	r3, [r7, #8]
 8009eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009eb8:	2201      	movs	r2, #1
 8009eba:	fa02 f303 	lsl.w	r3, r2, r3
 8009ebe:	43da      	mvns	r2, r3
 8009ec0:	4b1d      	ldr	r3, [pc, #116]	; (8009f38 <xTaskPriorityInherit+0xfc>)
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	4013      	ands	r3, r2
 8009ec6:	4a1c      	ldr	r2, [pc, #112]	; (8009f38 <xTaskPriorityInherit+0xfc>)
 8009ec8:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009eca:	4b19      	ldr	r3, [pc, #100]	; (8009f30 <xTaskPriorityInherit+0xf4>)
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ed0:	68bb      	ldr	r3, [r7, #8]
 8009ed2:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8009ed4:	68bb      	ldr	r3, [r7, #8]
 8009ed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ed8:	2201      	movs	r2, #1
 8009eda:	409a      	lsls	r2, r3
 8009edc:	4b16      	ldr	r3, [pc, #88]	; (8009f38 <xTaskPriorityInherit+0xfc>)
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	4313      	orrs	r3, r2
 8009ee2:	4a15      	ldr	r2, [pc, #84]	; (8009f38 <xTaskPriorityInherit+0xfc>)
 8009ee4:	6013      	str	r3, [r2, #0]
 8009ee6:	68bb      	ldr	r3, [r7, #8]
 8009ee8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009eea:	4613      	mov	r3, r2
 8009eec:	009b      	lsls	r3, r3, #2
 8009eee:	4413      	add	r3, r2
 8009ef0:	009b      	lsls	r3, r3, #2
 8009ef2:	4a10      	ldr	r2, [pc, #64]	; (8009f34 <xTaskPriorityInherit+0xf8>)
 8009ef4:	441a      	add	r2, r3
 8009ef6:	68bb      	ldr	r3, [r7, #8]
 8009ef8:	3304      	adds	r3, #4
 8009efa:	4619      	mov	r1, r3
 8009efc:	4610      	mov	r0, r2
 8009efe:	f7fe f8c3 	bl	8008088 <vListInsertEnd>
 8009f02:	e004      	b.n	8009f0e <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009f04:	4b0a      	ldr	r3, [pc, #40]	; (8009f30 <xTaskPriorityInherit+0xf4>)
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f0a:	68bb      	ldr	r3, [r7, #8]
 8009f0c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8009f0e:	2301      	movs	r3, #1
 8009f10:	60fb      	str	r3, [r7, #12]
 8009f12:	e008      	b.n	8009f26 <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8009f14:	68bb      	ldr	r3, [r7, #8]
 8009f16:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009f18:	4b05      	ldr	r3, [pc, #20]	; (8009f30 <xTaskPriorityInherit+0xf4>)
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f1e:	429a      	cmp	r2, r3
 8009f20:	d201      	bcs.n	8009f26 <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8009f22:	2301      	movs	r3, #1
 8009f24:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009f26:	68fb      	ldr	r3, [r7, #12]
	}
 8009f28:	4618      	mov	r0, r3
 8009f2a:	3710      	adds	r7, #16
 8009f2c:	46bd      	mov	sp, r7
 8009f2e:	bd80      	pop	{r7, pc}
 8009f30:	20002520 	.word	0x20002520
 8009f34:	20002524 	.word	0x20002524
 8009f38:	20002628 	.word	0x20002628

08009f3c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009f3c:	b580      	push	{r7, lr}
 8009f3e:	b086      	sub	sp, #24
 8009f40:	af00      	add	r7, sp, #0
 8009f42:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009f48:	2300      	movs	r3, #0
 8009f4a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d06e      	beq.n	800a030 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009f52:	4b3a      	ldr	r3, [pc, #232]	; (800a03c <xTaskPriorityDisinherit+0x100>)
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	693a      	ldr	r2, [r7, #16]
 8009f58:	429a      	cmp	r2, r3
 8009f5a:	d00a      	beq.n	8009f72 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8009f5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f60:	f383 8811 	msr	BASEPRI, r3
 8009f64:	f3bf 8f6f 	isb	sy
 8009f68:	f3bf 8f4f 	dsb	sy
 8009f6c:	60fb      	str	r3, [r7, #12]
}
 8009f6e:	bf00      	nop
 8009f70:	e7fe      	b.n	8009f70 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009f72:	693b      	ldr	r3, [r7, #16]
 8009f74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d10a      	bne.n	8009f90 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8009f7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f7e:	f383 8811 	msr	BASEPRI, r3
 8009f82:	f3bf 8f6f 	isb	sy
 8009f86:	f3bf 8f4f 	dsb	sy
 8009f8a:	60bb      	str	r3, [r7, #8]
}
 8009f8c:	bf00      	nop
 8009f8e:	e7fe      	b.n	8009f8e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8009f90:	693b      	ldr	r3, [r7, #16]
 8009f92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009f94:	1e5a      	subs	r2, r3, #1
 8009f96:	693b      	ldr	r3, [r7, #16]
 8009f98:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009f9a:	693b      	ldr	r3, [r7, #16]
 8009f9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f9e:	693b      	ldr	r3, [r7, #16]
 8009fa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009fa2:	429a      	cmp	r2, r3
 8009fa4:	d044      	beq.n	800a030 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009fa6:	693b      	ldr	r3, [r7, #16]
 8009fa8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d140      	bne.n	800a030 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009fae:	693b      	ldr	r3, [r7, #16]
 8009fb0:	3304      	adds	r3, #4
 8009fb2:	4618      	mov	r0, r3
 8009fb4:	f7fe f8c5 	bl	8008142 <uxListRemove>
 8009fb8:	4603      	mov	r3, r0
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d115      	bne.n	8009fea <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8009fbe:	693b      	ldr	r3, [r7, #16]
 8009fc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009fc2:	491f      	ldr	r1, [pc, #124]	; (800a040 <xTaskPriorityDisinherit+0x104>)
 8009fc4:	4613      	mov	r3, r2
 8009fc6:	009b      	lsls	r3, r3, #2
 8009fc8:	4413      	add	r3, r2
 8009fca:	009b      	lsls	r3, r3, #2
 8009fcc:	440b      	add	r3, r1
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d10a      	bne.n	8009fea <xTaskPriorityDisinherit+0xae>
 8009fd4:	693b      	ldr	r3, [r7, #16]
 8009fd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fd8:	2201      	movs	r2, #1
 8009fda:	fa02 f303 	lsl.w	r3, r2, r3
 8009fde:	43da      	mvns	r2, r3
 8009fe0:	4b18      	ldr	r3, [pc, #96]	; (800a044 <xTaskPriorityDisinherit+0x108>)
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	4013      	ands	r3, r2
 8009fe6:	4a17      	ldr	r2, [pc, #92]	; (800a044 <xTaskPriorityDisinherit+0x108>)
 8009fe8:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009fea:	693b      	ldr	r3, [r7, #16]
 8009fec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009fee:	693b      	ldr	r3, [r7, #16]
 8009ff0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009ff2:	693b      	ldr	r3, [r7, #16]
 8009ff4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ff6:	f1c3 0207 	rsb	r2, r3, #7
 8009ffa:	693b      	ldr	r3, [r7, #16]
 8009ffc:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009ffe:	693b      	ldr	r3, [r7, #16]
 800a000:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a002:	2201      	movs	r2, #1
 800a004:	409a      	lsls	r2, r3
 800a006:	4b0f      	ldr	r3, [pc, #60]	; (800a044 <xTaskPriorityDisinherit+0x108>)
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	4313      	orrs	r3, r2
 800a00c:	4a0d      	ldr	r2, [pc, #52]	; (800a044 <xTaskPriorityDisinherit+0x108>)
 800a00e:	6013      	str	r3, [r2, #0]
 800a010:	693b      	ldr	r3, [r7, #16]
 800a012:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a014:	4613      	mov	r3, r2
 800a016:	009b      	lsls	r3, r3, #2
 800a018:	4413      	add	r3, r2
 800a01a:	009b      	lsls	r3, r3, #2
 800a01c:	4a08      	ldr	r2, [pc, #32]	; (800a040 <xTaskPriorityDisinherit+0x104>)
 800a01e:	441a      	add	r2, r3
 800a020:	693b      	ldr	r3, [r7, #16]
 800a022:	3304      	adds	r3, #4
 800a024:	4619      	mov	r1, r3
 800a026:	4610      	mov	r0, r2
 800a028:	f7fe f82e 	bl	8008088 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a02c:	2301      	movs	r3, #1
 800a02e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a030:	697b      	ldr	r3, [r7, #20]
	}
 800a032:	4618      	mov	r0, r3
 800a034:	3718      	adds	r7, #24
 800a036:	46bd      	mov	sp, r7
 800a038:	bd80      	pop	{r7, pc}
 800a03a:	bf00      	nop
 800a03c:	20002520 	.word	0x20002520
 800a040:	20002524 	.word	0x20002524
 800a044:	20002628 	.word	0x20002628

0800a048 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800a048:	b580      	push	{r7, lr}
 800a04a:	b088      	sub	sp, #32
 800a04c:	af00      	add	r7, sp, #0
 800a04e:	6078      	str	r0, [r7, #4]
 800a050:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800a056:	2301      	movs	r3, #1
 800a058:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	f000 8083 	beq.w	800a168 <vTaskPriorityDisinheritAfterTimeout+0x120>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800a062:	69bb      	ldr	r3, [r7, #24]
 800a064:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a066:	2b00      	cmp	r3, #0
 800a068:	d10a      	bne.n	800a080 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800a06a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a06e:	f383 8811 	msr	BASEPRI, r3
 800a072:	f3bf 8f6f 	isb	sy
 800a076:	f3bf 8f4f 	dsb	sy
 800a07a:	60fb      	str	r3, [r7, #12]
}
 800a07c:	bf00      	nop
 800a07e:	e7fe      	b.n	800a07e <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800a080:	69bb      	ldr	r3, [r7, #24]
 800a082:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a084:	683a      	ldr	r2, [r7, #0]
 800a086:	429a      	cmp	r2, r3
 800a088:	d902      	bls.n	800a090 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800a08a:	683b      	ldr	r3, [r7, #0]
 800a08c:	61fb      	str	r3, [r7, #28]
 800a08e:	e002      	b.n	800a096 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800a090:	69bb      	ldr	r3, [r7, #24]
 800a092:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a094:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800a096:	69bb      	ldr	r3, [r7, #24]
 800a098:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a09a:	69fa      	ldr	r2, [r7, #28]
 800a09c:	429a      	cmp	r2, r3
 800a09e:	d063      	beq.n	800a168 <vTaskPriorityDisinheritAfterTimeout+0x120>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800a0a0:	69bb      	ldr	r3, [r7, #24]
 800a0a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a0a4:	697a      	ldr	r2, [r7, #20]
 800a0a6:	429a      	cmp	r2, r3
 800a0a8:	d15e      	bne.n	800a168 <vTaskPriorityDisinheritAfterTimeout+0x120>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800a0aa:	4b31      	ldr	r3, [pc, #196]	; (800a170 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	69ba      	ldr	r2, [r7, #24]
 800a0b0:	429a      	cmp	r2, r3
 800a0b2:	d10a      	bne.n	800a0ca <vTaskPriorityDisinheritAfterTimeout+0x82>
	__asm volatile
 800a0b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0b8:	f383 8811 	msr	BASEPRI, r3
 800a0bc:	f3bf 8f6f 	isb	sy
 800a0c0:	f3bf 8f4f 	dsb	sy
 800a0c4:	60bb      	str	r3, [r7, #8]
}
 800a0c6:	bf00      	nop
 800a0c8:	e7fe      	b.n	800a0c8 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800a0ca:	69bb      	ldr	r3, [r7, #24]
 800a0cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0ce:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800a0d0:	69bb      	ldr	r3, [r7, #24]
 800a0d2:	69fa      	ldr	r2, [r7, #28]
 800a0d4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a0d6:	69bb      	ldr	r3, [r7, #24]
 800a0d8:	699b      	ldr	r3, [r3, #24]
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	db04      	blt.n	800a0e8 <vTaskPriorityDisinheritAfterTimeout+0xa0>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a0de:	69fb      	ldr	r3, [r7, #28]
 800a0e0:	f1c3 0207 	rsb	r2, r3, #7
 800a0e4:	69bb      	ldr	r3, [r7, #24]
 800a0e6:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800a0e8:	69bb      	ldr	r3, [r7, #24]
 800a0ea:	6959      	ldr	r1, [r3, #20]
 800a0ec:	693a      	ldr	r2, [r7, #16]
 800a0ee:	4613      	mov	r3, r2
 800a0f0:	009b      	lsls	r3, r3, #2
 800a0f2:	4413      	add	r3, r2
 800a0f4:	009b      	lsls	r3, r3, #2
 800a0f6:	4a1f      	ldr	r2, [pc, #124]	; (800a174 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800a0f8:	4413      	add	r3, r2
 800a0fa:	4299      	cmp	r1, r3
 800a0fc:	d134      	bne.n	800a168 <vTaskPriorityDisinheritAfterTimeout+0x120>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a0fe:	69bb      	ldr	r3, [r7, #24]
 800a100:	3304      	adds	r3, #4
 800a102:	4618      	mov	r0, r3
 800a104:	f7fe f81d 	bl	8008142 <uxListRemove>
 800a108:	4603      	mov	r3, r0
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d115      	bne.n	800a13a <vTaskPriorityDisinheritAfterTimeout+0xf2>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800a10e:	69bb      	ldr	r3, [r7, #24]
 800a110:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a112:	4918      	ldr	r1, [pc, #96]	; (800a174 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800a114:	4613      	mov	r3, r2
 800a116:	009b      	lsls	r3, r3, #2
 800a118:	4413      	add	r3, r2
 800a11a:	009b      	lsls	r3, r3, #2
 800a11c:	440b      	add	r3, r1
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	2b00      	cmp	r3, #0
 800a122:	d10a      	bne.n	800a13a <vTaskPriorityDisinheritAfterTimeout+0xf2>
 800a124:	69bb      	ldr	r3, [r7, #24]
 800a126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a128:	2201      	movs	r2, #1
 800a12a:	fa02 f303 	lsl.w	r3, r2, r3
 800a12e:	43da      	mvns	r2, r3
 800a130:	4b11      	ldr	r3, [pc, #68]	; (800a178 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	4013      	ands	r3, r2
 800a136:	4a10      	ldr	r2, [pc, #64]	; (800a178 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800a138:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800a13a:	69bb      	ldr	r3, [r7, #24]
 800a13c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a13e:	2201      	movs	r2, #1
 800a140:	409a      	lsls	r2, r3
 800a142:	4b0d      	ldr	r3, [pc, #52]	; (800a178 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	4313      	orrs	r3, r2
 800a148:	4a0b      	ldr	r2, [pc, #44]	; (800a178 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800a14a:	6013      	str	r3, [r2, #0]
 800a14c:	69bb      	ldr	r3, [r7, #24]
 800a14e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a150:	4613      	mov	r3, r2
 800a152:	009b      	lsls	r3, r3, #2
 800a154:	4413      	add	r3, r2
 800a156:	009b      	lsls	r3, r3, #2
 800a158:	4a06      	ldr	r2, [pc, #24]	; (800a174 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800a15a:	441a      	add	r2, r3
 800a15c:	69bb      	ldr	r3, [r7, #24]
 800a15e:	3304      	adds	r3, #4
 800a160:	4619      	mov	r1, r3
 800a162:	4610      	mov	r0, r2
 800a164:	f7fd ff90 	bl	8008088 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a168:	bf00      	nop
 800a16a:	3720      	adds	r7, #32
 800a16c:	46bd      	mov	sp, r7
 800a16e:	bd80      	pop	{r7, pc}
 800a170:	20002520 	.word	0x20002520
 800a174:	20002524 	.word	0x20002524
 800a178:	20002628 	.word	0x20002628

0800a17c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800a17c:	b480      	push	{r7}
 800a17e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800a180:	4b07      	ldr	r3, [pc, #28]	; (800a1a0 <pvTaskIncrementMutexHeldCount+0x24>)
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	2b00      	cmp	r3, #0
 800a186:	d004      	beq.n	800a192 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800a188:	4b05      	ldr	r3, [pc, #20]	; (800a1a0 <pvTaskIncrementMutexHeldCount+0x24>)
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a18e:	3201      	adds	r2, #1
 800a190:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800a192:	4b03      	ldr	r3, [pc, #12]	; (800a1a0 <pvTaskIncrementMutexHeldCount+0x24>)
 800a194:	681b      	ldr	r3, [r3, #0]
	}
 800a196:	4618      	mov	r0, r3
 800a198:	46bd      	mov	sp, r7
 800a19a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a19e:	4770      	bx	lr
 800a1a0:	20002520 	.word	0x20002520

0800a1a4 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 800a1a4:	b580      	push	{r7, lr}
 800a1a6:	b084      	sub	sp, #16
 800a1a8:	af00      	add	r7, sp, #0
 800a1aa:	6078      	str	r0, [r7, #4]
 800a1ac:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 800a1ae:	f000 fa89 	bl	800a6c4 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 800a1b2:	4b1e      	ldr	r3, [pc, #120]	; (800a22c <ulTaskNotifyTake+0x88>)
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d113      	bne.n	800a1e4 <ulTaskNotifyTake+0x40>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800a1bc:	4b1b      	ldr	r3, [pc, #108]	; (800a22c <ulTaskNotifyTake+0x88>)
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	2201      	movs	r2, #1
 800a1c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

				if( xTicksToWait > ( TickType_t ) 0 )
 800a1c6:	683b      	ldr	r3, [r7, #0]
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d00b      	beq.n	800a1e4 <ulTaskNotifyTake+0x40>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a1cc:	2101      	movs	r1, #1
 800a1ce:	6838      	ldr	r0, [r7, #0]
 800a1d0:	f000 f8e6 	bl	800a3a0 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800a1d4:	4b16      	ldr	r3, [pc, #88]	; (800a230 <ulTaskNotifyTake+0x8c>)
 800a1d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a1da:	601a      	str	r2, [r3, #0]
 800a1dc:	f3bf 8f4f 	dsb	sy
 800a1e0:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800a1e4:	f000 fa9e 	bl	800a724 <vPortExitCritical>

		taskENTER_CRITICAL();
 800a1e8:	f000 fa6c 	bl	800a6c4 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 800a1ec:	4b0f      	ldr	r3, [pc, #60]	; (800a22c <ulTaskNotifyTake+0x88>)
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a1f2:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d00c      	beq.n	800a214 <ulTaskNotifyTake+0x70>
			{
				if( xClearCountOnExit != pdFALSE )
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d004      	beq.n	800a20a <ulTaskNotifyTake+0x66>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 800a200:	4b0a      	ldr	r3, [pc, #40]	; (800a22c <ulTaskNotifyTake+0x88>)
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	2200      	movs	r2, #0
 800a206:	64da      	str	r2, [r3, #76]	; 0x4c
 800a208:	e004      	b.n	800a214 <ulTaskNotifyTake+0x70>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 800a20a:	4b08      	ldr	r3, [pc, #32]	; (800a22c <ulTaskNotifyTake+0x88>)
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	68fa      	ldr	r2, [r7, #12]
 800a210:	3a01      	subs	r2, #1
 800a212:	64da      	str	r2, [r3, #76]	; 0x4c
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a214:	4b05      	ldr	r3, [pc, #20]	; (800a22c <ulTaskNotifyTake+0x88>)
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	2200      	movs	r2, #0
 800a21a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		}
		taskEXIT_CRITICAL();
 800a21e:	f000 fa81 	bl	800a724 <vPortExitCritical>

		return ulReturn;
 800a222:	68fb      	ldr	r3, [r7, #12]
	}
 800a224:	4618      	mov	r0, r3
 800a226:	3710      	adds	r7, #16
 800a228:	46bd      	mov	sp, r7
 800a22a:	bd80      	pop	{r7, pc}
 800a22c:	20002520 	.word	0x20002520
 800a230:	e000ed04 	.word	0xe000ed04

0800a234 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800a234:	b580      	push	{r7, lr}
 800a236:	b08a      	sub	sp, #40	; 0x28
 800a238:	af00      	add	r7, sp, #0
 800a23a:	60f8      	str	r0, [r7, #12]
 800a23c:	60b9      	str	r1, [r7, #8]
 800a23e:	603b      	str	r3, [r7, #0]
 800a240:	4613      	mov	r3, r2
 800a242:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800a244:	2301      	movs	r3, #1
 800a246:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d10a      	bne.n	800a264 <xTaskGenericNotify+0x30>
	__asm volatile
 800a24e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a252:	f383 8811 	msr	BASEPRI, r3
 800a256:	f3bf 8f6f 	isb	sy
 800a25a:	f3bf 8f4f 	dsb	sy
 800a25e:	61bb      	str	r3, [r7, #24]
}
 800a260:	bf00      	nop
 800a262:	e7fe      	b.n	800a262 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800a268:	f000 fa2c 	bl	800a6c4 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800a26c:	683b      	ldr	r3, [r7, #0]
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d003      	beq.n	800a27a <xTaskGenericNotify+0x46>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800a272:	6a3b      	ldr	r3, [r7, #32]
 800a274:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a276:	683b      	ldr	r3, [r7, #0]
 800a278:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800a27a:	6a3b      	ldr	r3, [r7, #32]
 800a27c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800a280:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800a282:	6a3b      	ldr	r3, [r7, #32]
 800a284:	2202      	movs	r2, #2
 800a286:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

			switch( eAction )
 800a28a:	79fb      	ldrb	r3, [r7, #7]
 800a28c:	2b04      	cmp	r3, #4
 800a28e:	d828      	bhi.n	800a2e2 <xTaskGenericNotify+0xae>
 800a290:	a201      	add	r2, pc, #4	; (adr r2, 800a298 <xTaskGenericNotify+0x64>)
 800a292:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a296:	bf00      	nop
 800a298:	0800a303 	.word	0x0800a303
 800a29c:	0800a2ad 	.word	0x0800a2ad
 800a2a0:	0800a2bb 	.word	0x0800a2bb
 800a2a4:	0800a2c7 	.word	0x0800a2c7
 800a2a8:	0800a2cf 	.word	0x0800a2cf
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800a2ac:	6a3b      	ldr	r3, [r7, #32]
 800a2ae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a2b0:	68bb      	ldr	r3, [r7, #8]
 800a2b2:	431a      	orrs	r2, r3
 800a2b4:	6a3b      	ldr	r3, [r7, #32]
 800a2b6:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 800a2b8:	e026      	b.n	800a308 <xTaskGenericNotify+0xd4>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800a2ba:	6a3b      	ldr	r3, [r7, #32]
 800a2bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a2be:	1c5a      	adds	r2, r3, #1
 800a2c0:	6a3b      	ldr	r3, [r7, #32]
 800a2c2:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 800a2c4:	e020      	b.n	800a308 <xTaskGenericNotify+0xd4>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800a2c6:	6a3b      	ldr	r3, [r7, #32]
 800a2c8:	68ba      	ldr	r2, [r7, #8]
 800a2ca:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 800a2cc:	e01c      	b.n	800a308 <xTaskGenericNotify+0xd4>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800a2ce:	7ffb      	ldrb	r3, [r7, #31]
 800a2d0:	2b02      	cmp	r3, #2
 800a2d2:	d003      	beq.n	800a2dc <xTaskGenericNotify+0xa8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800a2d4:	6a3b      	ldr	r3, [r7, #32]
 800a2d6:	68ba      	ldr	r2, [r7, #8]
 800a2d8:	64da      	str	r2, [r3, #76]	; 0x4c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800a2da:	e015      	b.n	800a308 <xTaskGenericNotify+0xd4>
						xReturn = pdFAIL;
 800a2dc:	2300      	movs	r3, #0
 800a2de:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 800a2e0:	e012      	b.n	800a308 <xTaskGenericNotify+0xd4>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800a2e2:	6a3b      	ldr	r3, [r7, #32]
 800a2e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a2e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2ea:	d00c      	beq.n	800a306 <xTaskGenericNotify+0xd2>
	__asm volatile
 800a2ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2f0:	f383 8811 	msr	BASEPRI, r3
 800a2f4:	f3bf 8f6f 	isb	sy
 800a2f8:	f3bf 8f4f 	dsb	sy
 800a2fc:	617b      	str	r3, [r7, #20]
}
 800a2fe:	bf00      	nop
 800a300:	e7fe      	b.n	800a300 <xTaskGenericNotify+0xcc>
					break;
 800a302:	bf00      	nop
 800a304:	e000      	b.n	800a308 <xTaskGenericNotify+0xd4>

					break;
 800a306:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800a308:	7ffb      	ldrb	r3, [r7, #31]
 800a30a:	2b01      	cmp	r3, #1
 800a30c:	d139      	bne.n	800a382 <xTaskGenericNotify+0x14e>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a30e:	6a3b      	ldr	r3, [r7, #32]
 800a310:	3304      	adds	r3, #4
 800a312:	4618      	mov	r0, r3
 800a314:	f7fd ff15 	bl	8008142 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800a318:	6a3b      	ldr	r3, [r7, #32]
 800a31a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a31c:	2201      	movs	r2, #1
 800a31e:	409a      	lsls	r2, r3
 800a320:	4b1b      	ldr	r3, [pc, #108]	; (800a390 <xTaskGenericNotify+0x15c>)
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	4313      	orrs	r3, r2
 800a326:	4a1a      	ldr	r2, [pc, #104]	; (800a390 <xTaskGenericNotify+0x15c>)
 800a328:	6013      	str	r3, [r2, #0]
 800a32a:	6a3b      	ldr	r3, [r7, #32]
 800a32c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a32e:	4613      	mov	r3, r2
 800a330:	009b      	lsls	r3, r3, #2
 800a332:	4413      	add	r3, r2
 800a334:	009b      	lsls	r3, r3, #2
 800a336:	4a17      	ldr	r2, [pc, #92]	; (800a394 <xTaskGenericNotify+0x160>)
 800a338:	441a      	add	r2, r3
 800a33a:	6a3b      	ldr	r3, [r7, #32]
 800a33c:	3304      	adds	r3, #4
 800a33e:	4619      	mov	r1, r3
 800a340:	4610      	mov	r0, r2
 800a342:	f7fd fea1 	bl	8008088 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800a346:	6a3b      	ldr	r3, [r7, #32]
 800a348:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d00a      	beq.n	800a364 <xTaskGenericNotify+0x130>
	__asm volatile
 800a34e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a352:	f383 8811 	msr	BASEPRI, r3
 800a356:	f3bf 8f6f 	isb	sy
 800a35a:	f3bf 8f4f 	dsb	sy
 800a35e:	613b      	str	r3, [r7, #16]
}
 800a360:	bf00      	nop
 800a362:	e7fe      	b.n	800a362 <xTaskGenericNotify+0x12e>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a364:	6a3b      	ldr	r3, [r7, #32]
 800a366:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a368:	4b0b      	ldr	r3, [pc, #44]	; (800a398 <xTaskGenericNotify+0x164>)
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a36e:	429a      	cmp	r2, r3
 800a370:	d907      	bls.n	800a382 <xTaskGenericNotify+0x14e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800a372:	4b0a      	ldr	r3, [pc, #40]	; (800a39c <xTaskGenericNotify+0x168>)
 800a374:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a378:	601a      	str	r2, [r3, #0]
 800a37a:	f3bf 8f4f 	dsb	sy
 800a37e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800a382:	f000 f9cf 	bl	800a724 <vPortExitCritical>

		return xReturn;
 800a386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800a388:	4618      	mov	r0, r3
 800a38a:	3728      	adds	r7, #40	; 0x28
 800a38c:	46bd      	mov	sp, r7
 800a38e:	bd80      	pop	{r7, pc}
 800a390:	20002628 	.word	0x20002628
 800a394:	20002524 	.word	0x20002524
 800a398:	20002520 	.word	0x20002520
 800a39c:	e000ed04 	.word	0xe000ed04

0800a3a0 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a3a0:	b580      	push	{r7, lr}
 800a3a2:	b084      	sub	sp, #16
 800a3a4:	af00      	add	r7, sp, #0
 800a3a6:	6078      	str	r0, [r7, #4]
 800a3a8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a3aa:	4b29      	ldr	r3, [pc, #164]	; (800a450 <prvAddCurrentTaskToDelayedList+0xb0>)
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a3b0:	4b28      	ldr	r3, [pc, #160]	; (800a454 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	3304      	adds	r3, #4
 800a3b6:	4618      	mov	r0, r3
 800a3b8:	f7fd fec3 	bl	8008142 <uxListRemove>
 800a3bc:	4603      	mov	r3, r0
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d10b      	bne.n	800a3da <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800a3c2:	4b24      	ldr	r3, [pc, #144]	; (800a454 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3c8:	2201      	movs	r2, #1
 800a3ca:	fa02 f303 	lsl.w	r3, r2, r3
 800a3ce:	43da      	mvns	r2, r3
 800a3d0:	4b21      	ldr	r3, [pc, #132]	; (800a458 <prvAddCurrentTaskToDelayedList+0xb8>)
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	4013      	ands	r3, r2
 800a3d6:	4a20      	ldr	r2, [pc, #128]	; (800a458 <prvAddCurrentTaskToDelayedList+0xb8>)
 800a3d8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3e0:	d10a      	bne.n	800a3f8 <prvAddCurrentTaskToDelayedList+0x58>
 800a3e2:	683b      	ldr	r3, [r7, #0]
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d007      	beq.n	800a3f8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a3e8:	4b1a      	ldr	r3, [pc, #104]	; (800a454 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	3304      	adds	r3, #4
 800a3ee:	4619      	mov	r1, r3
 800a3f0:	481a      	ldr	r0, [pc, #104]	; (800a45c <prvAddCurrentTaskToDelayedList+0xbc>)
 800a3f2:	f7fd fe49 	bl	8008088 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a3f6:	e026      	b.n	800a446 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a3f8:	68fa      	ldr	r2, [r7, #12]
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	4413      	add	r3, r2
 800a3fe:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a400:	4b14      	ldr	r3, [pc, #80]	; (800a454 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	68ba      	ldr	r2, [r7, #8]
 800a406:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a408:	68ba      	ldr	r2, [r7, #8]
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	429a      	cmp	r2, r3
 800a40e:	d209      	bcs.n	800a424 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a410:	4b13      	ldr	r3, [pc, #76]	; (800a460 <prvAddCurrentTaskToDelayedList+0xc0>)
 800a412:	681a      	ldr	r2, [r3, #0]
 800a414:	4b0f      	ldr	r3, [pc, #60]	; (800a454 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	3304      	adds	r3, #4
 800a41a:	4619      	mov	r1, r3
 800a41c:	4610      	mov	r0, r2
 800a41e:	f7fd fe57 	bl	80080d0 <vListInsert>
}
 800a422:	e010      	b.n	800a446 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a424:	4b0f      	ldr	r3, [pc, #60]	; (800a464 <prvAddCurrentTaskToDelayedList+0xc4>)
 800a426:	681a      	ldr	r2, [r3, #0]
 800a428:	4b0a      	ldr	r3, [pc, #40]	; (800a454 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	3304      	adds	r3, #4
 800a42e:	4619      	mov	r1, r3
 800a430:	4610      	mov	r0, r2
 800a432:	f7fd fe4d 	bl	80080d0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a436:	4b0c      	ldr	r3, [pc, #48]	; (800a468 <prvAddCurrentTaskToDelayedList+0xc8>)
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	68ba      	ldr	r2, [r7, #8]
 800a43c:	429a      	cmp	r2, r3
 800a43e:	d202      	bcs.n	800a446 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800a440:	4a09      	ldr	r2, [pc, #36]	; (800a468 <prvAddCurrentTaskToDelayedList+0xc8>)
 800a442:	68bb      	ldr	r3, [r7, #8]
 800a444:	6013      	str	r3, [r2, #0]
}
 800a446:	bf00      	nop
 800a448:	3710      	adds	r7, #16
 800a44a:	46bd      	mov	sp, r7
 800a44c:	bd80      	pop	{r7, pc}
 800a44e:	bf00      	nop
 800a450:	20002624 	.word	0x20002624
 800a454:	20002520 	.word	0x20002520
 800a458:	20002628 	.word	0x20002628
 800a45c:	2000260c 	.word	0x2000260c
 800a460:	200025dc 	.word	0x200025dc
 800a464:	200025d8 	.word	0x200025d8
 800a468:	20002640 	.word	0x20002640

0800a46c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a46c:	b480      	push	{r7}
 800a46e:	b085      	sub	sp, #20
 800a470:	af00      	add	r7, sp, #0
 800a472:	60f8      	str	r0, [r7, #12]
 800a474:	60b9      	str	r1, [r7, #8]
 800a476:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	3b04      	subs	r3, #4
 800a47c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a484:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	3b04      	subs	r3, #4
 800a48a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a48c:	68bb      	ldr	r3, [r7, #8]
 800a48e:	f023 0201 	bic.w	r2, r3, #1
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	3b04      	subs	r3, #4
 800a49a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a49c:	4a0c      	ldr	r2, [pc, #48]	; (800a4d0 <pxPortInitialiseStack+0x64>)
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	3b14      	subs	r3, #20
 800a4a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a4a8:	687a      	ldr	r2, [r7, #4]
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	3b04      	subs	r3, #4
 800a4b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	f06f 0202 	mvn.w	r2, #2
 800a4ba:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	3b20      	subs	r3, #32
 800a4c0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a4c2:	68fb      	ldr	r3, [r7, #12]
}
 800a4c4:	4618      	mov	r0, r3
 800a4c6:	3714      	adds	r7, #20
 800a4c8:	46bd      	mov	sp, r7
 800a4ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ce:	4770      	bx	lr
 800a4d0:	0800a4d5 	.word	0x0800a4d5

0800a4d4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a4d4:	b480      	push	{r7}
 800a4d6:	b085      	sub	sp, #20
 800a4d8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a4da:	2300      	movs	r3, #0
 800a4dc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a4de:	4b12      	ldr	r3, [pc, #72]	; (800a528 <prvTaskExitError+0x54>)
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4e6:	d00a      	beq.n	800a4fe <prvTaskExitError+0x2a>
	__asm volatile
 800a4e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4ec:	f383 8811 	msr	BASEPRI, r3
 800a4f0:	f3bf 8f6f 	isb	sy
 800a4f4:	f3bf 8f4f 	dsb	sy
 800a4f8:	60fb      	str	r3, [r7, #12]
}
 800a4fa:	bf00      	nop
 800a4fc:	e7fe      	b.n	800a4fc <prvTaskExitError+0x28>
	__asm volatile
 800a4fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a502:	f383 8811 	msr	BASEPRI, r3
 800a506:	f3bf 8f6f 	isb	sy
 800a50a:	f3bf 8f4f 	dsb	sy
 800a50e:	60bb      	str	r3, [r7, #8]
}
 800a510:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a512:	bf00      	nop
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	2b00      	cmp	r3, #0
 800a518:	d0fc      	beq.n	800a514 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a51a:	bf00      	nop
 800a51c:	bf00      	nop
 800a51e:	3714      	adds	r7, #20
 800a520:	46bd      	mov	sp, r7
 800a522:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a526:	4770      	bx	lr
 800a528:	20000010 	.word	0x20000010
 800a52c:	00000000 	.word	0x00000000

0800a530 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a530:	4b07      	ldr	r3, [pc, #28]	; (800a550 <pxCurrentTCBConst2>)
 800a532:	6819      	ldr	r1, [r3, #0]
 800a534:	6808      	ldr	r0, [r1, #0]
 800a536:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a53a:	f380 8809 	msr	PSP, r0
 800a53e:	f3bf 8f6f 	isb	sy
 800a542:	f04f 0000 	mov.w	r0, #0
 800a546:	f380 8811 	msr	BASEPRI, r0
 800a54a:	4770      	bx	lr
 800a54c:	f3af 8000 	nop.w

0800a550 <pxCurrentTCBConst2>:
 800a550:	20002520 	.word	0x20002520
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a554:	bf00      	nop
 800a556:	bf00      	nop

0800a558 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a558:	4808      	ldr	r0, [pc, #32]	; (800a57c <prvPortStartFirstTask+0x24>)
 800a55a:	6800      	ldr	r0, [r0, #0]
 800a55c:	6800      	ldr	r0, [r0, #0]
 800a55e:	f380 8808 	msr	MSP, r0
 800a562:	f04f 0000 	mov.w	r0, #0
 800a566:	f380 8814 	msr	CONTROL, r0
 800a56a:	b662      	cpsie	i
 800a56c:	b661      	cpsie	f
 800a56e:	f3bf 8f4f 	dsb	sy
 800a572:	f3bf 8f6f 	isb	sy
 800a576:	df00      	svc	0
 800a578:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a57a:	bf00      	nop
 800a57c:	e000ed08 	.word	0xe000ed08

0800a580 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a580:	b580      	push	{r7, lr}
 800a582:	b086      	sub	sp, #24
 800a584:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a586:	4b46      	ldr	r3, [pc, #280]	; (800a6a0 <xPortStartScheduler+0x120>)
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	4a46      	ldr	r2, [pc, #280]	; (800a6a4 <xPortStartScheduler+0x124>)
 800a58c:	4293      	cmp	r3, r2
 800a58e:	d10a      	bne.n	800a5a6 <xPortStartScheduler+0x26>
	__asm volatile
 800a590:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a594:	f383 8811 	msr	BASEPRI, r3
 800a598:	f3bf 8f6f 	isb	sy
 800a59c:	f3bf 8f4f 	dsb	sy
 800a5a0:	613b      	str	r3, [r7, #16]
}
 800a5a2:	bf00      	nop
 800a5a4:	e7fe      	b.n	800a5a4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a5a6:	4b3e      	ldr	r3, [pc, #248]	; (800a6a0 <xPortStartScheduler+0x120>)
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	4a3f      	ldr	r2, [pc, #252]	; (800a6a8 <xPortStartScheduler+0x128>)
 800a5ac:	4293      	cmp	r3, r2
 800a5ae:	d10a      	bne.n	800a5c6 <xPortStartScheduler+0x46>
	__asm volatile
 800a5b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5b4:	f383 8811 	msr	BASEPRI, r3
 800a5b8:	f3bf 8f6f 	isb	sy
 800a5bc:	f3bf 8f4f 	dsb	sy
 800a5c0:	60fb      	str	r3, [r7, #12]
}
 800a5c2:	bf00      	nop
 800a5c4:	e7fe      	b.n	800a5c4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a5c6:	4b39      	ldr	r3, [pc, #228]	; (800a6ac <xPortStartScheduler+0x12c>)
 800a5c8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a5ca:	697b      	ldr	r3, [r7, #20]
 800a5cc:	781b      	ldrb	r3, [r3, #0]
 800a5ce:	b2db      	uxtb	r3, r3
 800a5d0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a5d2:	697b      	ldr	r3, [r7, #20]
 800a5d4:	22ff      	movs	r2, #255	; 0xff
 800a5d6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a5d8:	697b      	ldr	r3, [r7, #20]
 800a5da:	781b      	ldrb	r3, [r3, #0]
 800a5dc:	b2db      	uxtb	r3, r3
 800a5de:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a5e0:	78fb      	ldrb	r3, [r7, #3]
 800a5e2:	b2db      	uxtb	r3, r3
 800a5e4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a5e8:	b2da      	uxtb	r2, r3
 800a5ea:	4b31      	ldr	r3, [pc, #196]	; (800a6b0 <xPortStartScheduler+0x130>)
 800a5ec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a5ee:	4b31      	ldr	r3, [pc, #196]	; (800a6b4 <xPortStartScheduler+0x134>)
 800a5f0:	2207      	movs	r2, #7
 800a5f2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a5f4:	e009      	b.n	800a60a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800a5f6:	4b2f      	ldr	r3, [pc, #188]	; (800a6b4 <xPortStartScheduler+0x134>)
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	3b01      	subs	r3, #1
 800a5fc:	4a2d      	ldr	r2, [pc, #180]	; (800a6b4 <xPortStartScheduler+0x134>)
 800a5fe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a600:	78fb      	ldrb	r3, [r7, #3]
 800a602:	b2db      	uxtb	r3, r3
 800a604:	005b      	lsls	r3, r3, #1
 800a606:	b2db      	uxtb	r3, r3
 800a608:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a60a:	78fb      	ldrb	r3, [r7, #3]
 800a60c:	b2db      	uxtb	r3, r3
 800a60e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a612:	2b80      	cmp	r3, #128	; 0x80
 800a614:	d0ef      	beq.n	800a5f6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a616:	4b27      	ldr	r3, [pc, #156]	; (800a6b4 <xPortStartScheduler+0x134>)
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	f1c3 0307 	rsb	r3, r3, #7
 800a61e:	2b04      	cmp	r3, #4
 800a620:	d00a      	beq.n	800a638 <xPortStartScheduler+0xb8>
	__asm volatile
 800a622:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a626:	f383 8811 	msr	BASEPRI, r3
 800a62a:	f3bf 8f6f 	isb	sy
 800a62e:	f3bf 8f4f 	dsb	sy
 800a632:	60bb      	str	r3, [r7, #8]
}
 800a634:	bf00      	nop
 800a636:	e7fe      	b.n	800a636 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a638:	4b1e      	ldr	r3, [pc, #120]	; (800a6b4 <xPortStartScheduler+0x134>)
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	021b      	lsls	r3, r3, #8
 800a63e:	4a1d      	ldr	r2, [pc, #116]	; (800a6b4 <xPortStartScheduler+0x134>)
 800a640:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a642:	4b1c      	ldr	r3, [pc, #112]	; (800a6b4 <xPortStartScheduler+0x134>)
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a64a:	4a1a      	ldr	r2, [pc, #104]	; (800a6b4 <xPortStartScheduler+0x134>)
 800a64c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	b2da      	uxtb	r2, r3
 800a652:	697b      	ldr	r3, [r7, #20]
 800a654:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a656:	4b18      	ldr	r3, [pc, #96]	; (800a6b8 <xPortStartScheduler+0x138>)
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	4a17      	ldr	r2, [pc, #92]	; (800a6b8 <xPortStartScheduler+0x138>)
 800a65c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a660:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a662:	4b15      	ldr	r3, [pc, #84]	; (800a6b8 <xPortStartScheduler+0x138>)
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	4a14      	ldr	r2, [pc, #80]	; (800a6b8 <xPortStartScheduler+0x138>)
 800a668:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a66c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a66e:	f000 f8dd 	bl	800a82c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a672:	4b12      	ldr	r3, [pc, #72]	; (800a6bc <xPortStartScheduler+0x13c>)
 800a674:	2200      	movs	r2, #0
 800a676:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a678:	f000 f8fc 	bl	800a874 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a67c:	4b10      	ldr	r3, [pc, #64]	; (800a6c0 <xPortStartScheduler+0x140>)
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	4a0f      	ldr	r2, [pc, #60]	; (800a6c0 <xPortStartScheduler+0x140>)
 800a682:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a686:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a688:	f7ff ff66 	bl	800a558 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a68c:	f7ff f97c 	bl	8009988 <vTaskSwitchContext>
	prvTaskExitError();
 800a690:	f7ff ff20 	bl	800a4d4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a694:	2300      	movs	r3, #0
}
 800a696:	4618      	mov	r0, r3
 800a698:	3718      	adds	r7, #24
 800a69a:	46bd      	mov	sp, r7
 800a69c:	bd80      	pop	{r7, pc}
 800a69e:	bf00      	nop
 800a6a0:	e000ed00 	.word	0xe000ed00
 800a6a4:	410fc271 	.word	0x410fc271
 800a6a8:	410fc270 	.word	0x410fc270
 800a6ac:	e000e400 	.word	0xe000e400
 800a6b0:	2000264c 	.word	0x2000264c
 800a6b4:	20002650 	.word	0x20002650
 800a6b8:	e000ed20 	.word	0xe000ed20
 800a6bc:	20000010 	.word	0x20000010
 800a6c0:	e000ef34 	.word	0xe000ef34

0800a6c4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a6c4:	b480      	push	{r7}
 800a6c6:	b083      	sub	sp, #12
 800a6c8:	af00      	add	r7, sp, #0
	__asm volatile
 800a6ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6ce:	f383 8811 	msr	BASEPRI, r3
 800a6d2:	f3bf 8f6f 	isb	sy
 800a6d6:	f3bf 8f4f 	dsb	sy
 800a6da:	607b      	str	r3, [r7, #4]
}
 800a6dc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a6de:	4b0f      	ldr	r3, [pc, #60]	; (800a71c <vPortEnterCritical+0x58>)
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	3301      	adds	r3, #1
 800a6e4:	4a0d      	ldr	r2, [pc, #52]	; (800a71c <vPortEnterCritical+0x58>)
 800a6e6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a6e8:	4b0c      	ldr	r3, [pc, #48]	; (800a71c <vPortEnterCritical+0x58>)
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	2b01      	cmp	r3, #1
 800a6ee:	d10f      	bne.n	800a710 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a6f0:	4b0b      	ldr	r3, [pc, #44]	; (800a720 <vPortEnterCritical+0x5c>)
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	b2db      	uxtb	r3, r3
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d00a      	beq.n	800a710 <vPortEnterCritical+0x4c>
	__asm volatile
 800a6fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6fe:	f383 8811 	msr	BASEPRI, r3
 800a702:	f3bf 8f6f 	isb	sy
 800a706:	f3bf 8f4f 	dsb	sy
 800a70a:	603b      	str	r3, [r7, #0]
}
 800a70c:	bf00      	nop
 800a70e:	e7fe      	b.n	800a70e <vPortEnterCritical+0x4a>
	}
}
 800a710:	bf00      	nop
 800a712:	370c      	adds	r7, #12
 800a714:	46bd      	mov	sp, r7
 800a716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a71a:	4770      	bx	lr
 800a71c:	20000010 	.word	0x20000010
 800a720:	e000ed04 	.word	0xe000ed04

0800a724 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a724:	b480      	push	{r7}
 800a726:	b083      	sub	sp, #12
 800a728:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a72a:	4b12      	ldr	r3, [pc, #72]	; (800a774 <vPortExitCritical+0x50>)
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d10a      	bne.n	800a748 <vPortExitCritical+0x24>
	__asm volatile
 800a732:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a736:	f383 8811 	msr	BASEPRI, r3
 800a73a:	f3bf 8f6f 	isb	sy
 800a73e:	f3bf 8f4f 	dsb	sy
 800a742:	607b      	str	r3, [r7, #4]
}
 800a744:	bf00      	nop
 800a746:	e7fe      	b.n	800a746 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a748:	4b0a      	ldr	r3, [pc, #40]	; (800a774 <vPortExitCritical+0x50>)
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	3b01      	subs	r3, #1
 800a74e:	4a09      	ldr	r2, [pc, #36]	; (800a774 <vPortExitCritical+0x50>)
 800a750:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a752:	4b08      	ldr	r3, [pc, #32]	; (800a774 <vPortExitCritical+0x50>)
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	2b00      	cmp	r3, #0
 800a758:	d105      	bne.n	800a766 <vPortExitCritical+0x42>
 800a75a:	2300      	movs	r3, #0
 800a75c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a75e:	683b      	ldr	r3, [r7, #0]
 800a760:	f383 8811 	msr	BASEPRI, r3
}
 800a764:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a766:	bf00      	nop
 800a768:	370c      	adds	r7, #12
 800a76a:	46bd      	mov	sp, r7
 800a76c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a770:	4770      	bx	lr
 800a772:	bf00      	nop
 800a774:	20000010 	.word	0x20000010
	...

0800a780 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a780:	f3ef 8009 	mrs	r0, PSP
 800a784:	f3bf 8f6f 	isb	sy
 800a788:	4b15      	ldr	r3, [pc, #84]	; (800a7e0 <pxCurrentTCBConst>)
 800a78a:	681a      	ldr	r2, [r3, #0]
 800a78c:	f01e 0f10 	tst.w	lr, #16
 800a790:	bf08      	it	eq
 800a792:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a796:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a79a:	6010      	str	r0, [r2, #0]
 800a79c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a7a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a7a4:	f380 8811 	msr	BASEPRI, r0
 800a7a8:	f3bf 8f4f 	dsb	sy
 800a7ac:	f3bf 8f6f 	isb	sy
 800a7b0:	f7ff f8ea 	bl	8009988 <vTaskSwitchContext>
 800a7b4:	f04f 0000 	mov.w	r0, #0
 800a7b8:	f380 8811 	msr	BASEPRI, r0
 800a7bc:	bc09      	pop	{r0, r3}
 800a7be:	6819      	ldr	r1, [r3, #0]
 800a7c0:	6808      	ldr	r0, [r1, #0]
 800a7c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7c6:	f01e 0f10 	tst.w	lr, #16
 800a7ca:	bf08      	it	eq
 800a7cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a7d0:	f380 8809 	msr	PSP, r0
 800a7d4:	f3bf 8f6f 	isb	sy
 800a7d8:	4770      	bx	lr
 800a7da:	bf00      	nop
 800a7dc:	f3af 8000 	nop.w

0800a7e0 <pxCurrentTCBConst>:
 800a7e0:	20002520 	.word	0x20002520
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a7e4:	bf00      	nop
 800a7e6:	bf00      	nop

0800a7e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a7e8:	b580      	push	{r7, lr}
 800a7ea:	b082      	sub	sp, #8
 800a7ec:	af00      	add	r7, sp, #0
	__asm volatile
 800a7ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7f2:	f383 8811 	msr	BASEPRI, r3
 800a7f6:	f3bf 8f6f 	isb	sy
 800a7fa:	f3bf 8f4f 	dsb	sy
 800a7fe:	607b      	str	r3, [r7, #4]
}
 800a800:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a802:	f7ff f809 	bl	8009818 <xTaskIncrementTick>
 800a806:	4603      	mov	r3, r0
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d003      	beq.n	800a814 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a80c:	4b06      	ldr	r3, [pc, #24]	; (800a828 <SysTick_Handler+0x40>)
 800a80e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a812:	601a      	str	r2, [r3, #0]
 800a814:	2300      	movs	r3, #0
 800a816:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a818:	683b      	ldr	r3, [r7, #0]
 800a81a:	f383 8811 	msr	BASEPRI, r3
}
 800a81e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a820:	bf00      	nop
 800a822:	3708      	adds	r7, #8
 800a824:	46bd      	mov	sp, r7
 800a826:	bd80      	pop	{r7, pc}
 800a828:	e000ed04 	.word	0xe000ed04

0800a82c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a82c:	b480      	push	{r7}
 800a82e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a830:	4b0b      	ldr	r3, [pc, #44]	; (800a860 <vPortSetupTimerInterrupt+0x34>)
 800a832:	2200      	movs	r2, #0
 800a834:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a836:	4b0b      	ldr	r3, [pc, #44]	; (800a864 <vPortSetupTimerInterrupt+0x38>)
 800a838:	2200      	movs	r2, #0
 800a83a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a83c:	4b0a      	ldr	r3, [pc, #40]	; (800a868 <vPortSetupTimerInterrupt+0x3c>)
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	4a0a      	ldr	r2, [pc, #40]	; (800a86c <vPortSetupTimerInterrupt+0x40>)
 800a842:	fba2 2303 	umull	r2, r3, r2, r3
 800a846:	099b      	lsrs	r3, r3, #6
 800a848:	4a09      	ldr	r2, [pc, #36]	; (800a870 <vPortSetupTimerInterrupt+0x44>)
 800a84a:	3b01      	subs	r3, #1
 800a84c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a84e:	4b04      	ldr	r3, [pc, #16]	; (800a860 <vPortSetupTimerInterrupt+0x34>)
 800a850:	2207      	movs	r2, #7
 800a852:	601a      	str	r2, [r3, #0]
}
 800a854:	bf00      	nop
 800a856:	46bd      	mov	sp, r7
 800a858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a85c:	4770      	bx	lr
 800a85e:	bf00      	nop
 800a860:	e000e010 	.word	0xe000e010
 800a864:	e000e018 	.word	0xe000e018
 800a868:	20000004 	.word	0x20000004
 800a86c:	10624dd3 	.word	0x10624dd3
 800a870:	e000e014 	.word	0xe000e014

0800a874 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a874:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a884 <vPortEnableVFP+0x10>
 800a878:	6801      	ldr	r1, [r0, #0]
 800a87a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a87e:	6001      	str	r1, [r0, #0]
 800a880:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a882:	bf00      	nop
 800a884:	e000ed88 	.word	0xe000ed88

0800a888 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a888:	b480      	push	{r7}
 800a88a:	b085      	sub	sp, #20
 800a88c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a88e:	f3ef 8305 	mrs	r3, IPSR
 800a892:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	2b0f      	cmp	r3, #15
 800a898:	d914      	bls.n	800a8c4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a89a:	4a17      	ldr	r2, [pc, #92]	; (800a8f8 <vPortValidateInterruptPriority+0x70>)
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	4413      	add	r3, r2
 800a8a0:	781b      	ldrb	r3, [r3, #0]
 800a8a2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a8a4:	4b15      	ldr	r3, [pc, #84]	; (800a8fc <vPortValidateInterruptPriority+0x74>)
 800a8a6:	781b      	ldrb	r3, [r3, #0]
 800a8a8:	7afa      	ldrb	r2, [r7, #11]
 800a8aa:	429a      	cmp	r2, r3
 800a8ac:	d20a      	bcs.n	800a8c4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800a8ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8b2:	f383 8811 	msr	BASEPRI, r3
 800a8b6:	f3bf 8f6f 	isb	sy
 800a8ba:	f3bf 8f4f 	dsb	sy
 800a8be:	607b      	str	r3, [r7, #4]
}
 800a8c0:	bf00      	nop
 800a8c2:	e7fe      	b.n	800a8c2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a8c4:	4b0e      	ldr	r3, [pc, #56]	; (800a900 <vPortValidateInterruptPriority+0x78>)
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a8cc:	4b0d      	ldr	r3, [pc, #52]	; (800a904 <vPortValidateInterruptPriority+0x7c>)
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	429a      	cmp	r2, r3
 800a8d2:	d90a      	bls.n	800a8ea <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800a8d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8d8:	f383 8811 	msr	BASEPRI, r3
 800a8dc:	f3bf 8f6f 	isb	sy
 800a8e0:	f3bf 8f4f 	dsb	sy
 800a8e4:	603b      	str	r3, [r7, #0]
}
 800a8e6:	bf00      	nop
 800a8e8:	e7fe      	b.n	800a8e8 <vPortValidateInterruptPriority+0x60>
	}
 800a8ea:	bf00      	nop
 800a8ec:	3714      	adds	r7, #20
 800a8ee:	46bd      	mov	sp, r7
 800a8f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8f4:	4770      	bx	lr
 800a8f6:	bf00      	nop
 800a8f8:	e000e3f0 	.word	0xe000e3f0
 800a8fc:	2000264c 	.word	0x2000264c
 800a900:	e000ed0c 	.word	0xe000ed0c
 800a904:	20002650 	.word	0x20002650

0800a908 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a908:	b580      	push	{r7, lr}
 800a90a:	b08a      	sub	sp, #40	; 0x28
 800a90c:	af00      	add	r7, sp, #0
 800a90e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a910:	2300      	movs	r3, #0
 800a912:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a914:	f7fe feb4 	bl	8009680 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a918:	4b58      	ldr	r3, [pc, #352]	; (800aa7c <pvPortMalloc+0x174>)
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d101      	bne.n	800a924 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a920:	f000 f910 	bl	800ab44 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a924:	4b56      	ldr	r3, [pc, #344]	; (800aa80 <pvPortMalloc+0x178>)
 800a926:	681a      	ldr	r2, [r3, #0]
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	4013      	ands	r3, r2
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	f040 808e 	bne.w	800aa4e <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	2b00      	cmp	r3, #0
 800a936:	d01d      	beq.n	800a974 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800a938:	2208      	movs	r2, #8
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	4413      	add	r3, r2
 800a93e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	f003 0307 	and.w	r3, r3, #7
 800a946:	2b00      	cmp	r3, #0
 800a948:	d014      	beq.n	800a974 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	f023 0307 	bic.w	r3, r3, #7
 800a950:	3308      	adds	r3, #8
 800a952:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	f003 0307 	and.w	r3, r3, #7
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d00a      	beq.n	800a974 <pvPortMalloc+0x6c>
	__asm volatile
 800a95e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a962:	f383 8811 	msr	BASEPRI, r3
 800a966:	f3bf 8f6f 	isb	sy
 800a96a:	f3bf 8f4f 	dsb	sy
 800a96e:	617b      	str	r3, [r7, #20]
}
 800a970:	bf00      	nop
 800a972:	e7fe      	b.n	800a972 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	2b00      	cmp	r3, #0
 800a978:	d069      	beq.n	800aa4e <pvPortMalloc+0x146>
 800a97a:	4b42      	ldr	r3, [pc, #264]	; (800aa84 <pvPortMalloc+0x17c>)
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	687a      	ldr	r2, [r7, #4]
 800a980:	429a      	cmp	r2, r3
 800a982:	d864      	bhi.n	800aa4e <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a984:	4b40      	ldr	r3, [pc, #256]	; (800aa88 <pvPortMalloc+0x180>)
 800a986:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a988:	4b3f      	ldr	r3, [pc, #252]	; (800aa88 <pvPortMalloc+0x180>)
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a98e:	e004      	b.n	800a99a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800a990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a992:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a99a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a99c:	685b      	ldr	r3, [r3, #4]
 800a99e:	687a      	ldr	r2, [r7, #4]
 800a9a0:	429a      	cmp	r2, r3
 800a9a2:	d903      	bls.n	800a9ac <pvPortMalloc+0xa4>
 800a9a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d1f1      	bne.n	800a990 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a9ac:	4b33      	ldr	r3, [pc, #204]	; (800aa7c <pvPortMalloc+0x174>)
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a9b2:	429a      	cmp	r2, r3
 800a9b4:	d04b      	beq.n	800aa4e <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a9b6:	6a3b      	ldr	r3, [r7, #32]
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	2208      	movs	r2, #8
 800a9bc:	4413      	add	r3, r2
 800a9be:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a9c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9c2:	681a      	ldr	r2, [r3, #0]
 800a9c4:	6a3b      	ldr	r3, [r7, #32]
 800a9c6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a9c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9ca:	685a      	ldr	r2, [r3, #4]
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	1ad2      	subs	r2, r2, r3
 800a9d0:	2308      	movs	r3, #8
 800a9d2:	005b      	lsls	r3, r3, #1
 800a9d4:	429a      	cmp	r2, r3
 800a9d6:	d91f      	bls.n	800aa18 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a9d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	4413      	add	r3, r2
 800a9de:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a9e0:	69bb      	ldr	r3, [r7, #24]
 800a9e2:	f003 0307 	and.w	r3, r3, #7
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d00a      	beq.n	800aa00 <pvPortMalloc+0xf8>
	__asm volatile
 800a9ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9ee:	f383 8811 	msr	BASEPRI, r3
 800a9f2:	f3bf 8f6f 	isb	sy
 800a9f6:	f3bf 8f4f 	dsb	sy
 800a9fa:	613b      	str	r3, [r7, #16]
}
 800a9fc:	bf00      	nop
 800a9fe:	e7fe      	b.n	800a9fe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800aa00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa02:	685a      	ldr	r2, [r3, #4]
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	1ad2      	subs	r2, r2, r3
 800aa08:	69bb      	ldr	r3, [r7, #24]
 800aa0a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800aa0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa0e:	687a      	ldr	r2, [r7, #4]
 800aa10:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800aa12:	69b8      	ldr	r0, [r7, #24]
 800aa14:	f000 f8f8 	bl	800ac08 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800aa18:	4b1a      	ldr	r3, [pc, #104]	; (800aa84 <pvPortMalloc+0x17c>)
 800aa1a:	681a      	ldr	r2, [r3, #0]
 800aa1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa1e:	685b      	ldr	r3, [r3, #4]
 800aa20:	1ad3      	subs	r3, r2, r3
 800aa22:	4a18      	ldr	r2, [pc, #96]	; (800aa84 <pvPortMalloc+0x17c>)
 800aa24:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800aa26:	4b17      	ldr	r3, [pc, #92]	; (800aa84 <pvPortMalloc+0x17c>)
 800aa28:	681a      	ldr	r2, [r3, #0]
 800aa2a:	4b18      	ldr	r3, [pc, #96]	; (800aa8c <pvPortMalloc+0x184>)
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	429a      	cmp	r2, r3
 800aa30:	d203      	bcs.n	800aa3a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800aa32:	4b14      	ldr	r3, [pc, #80]	; (800aa84 <pvPortMalloc+0x17c>)
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	4a15      	ldr	r2, [pc, #84]	; (800aa8c <pvPortMalloc+0x184>)
 800aa38:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800aa3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa3c:	685a      	ldr	r2, [r3, #4]
 800aa3e:	4b10      	ldr	r3, [pc, #64]	; (800aa80 <pvPortMalloc+0x178>)
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	431a      	orrs	r2, r3
 800aa44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa46:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800aa48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa4a:	2200      	movs	r2, #0
 800aa4c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800aa4e:	f7fe fe25 	bl	800969c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800aa52:	69fb      	ldr	r3, [r7, #28]
 800aa54:	f003 0307 	and.w	r3, r3, #7
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d00a      	beq.n	800aa72 <pvPortMalloc+0x16a>
	__asm volatile
 800aa5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa60:	f383 8811 	msr	BASEPRI, r3
 800aa64:	f3bf 8f6f 	isb	sy
 800aa68:	f3bf 8f4f 	dsb	sy
 800aa6c:	60fb      	str	r3, [r7, #12]
}
 800aa6e:	bf00      	nop
 800aa70:	e7fe      	b.n	800aa70 <pvPortMalloc+0x168>
	return pvReturn;
 800aa72:	69fb      	ldr	r3, [r7, #28]
}
 800aa74:	4618      	mov	r0, r3
 800aa76:	3728      	adds	r7, #40	; 0x28
 800aa78:	46bd      	mov	sp, r7
 800aa7a:	bd80      	pop	{r7, pc}
 800aa7c:	20009e5c 	.word	0x20009e5c
 800aa80:	20009e68 	.word	0x20009e68
 800aa84:	20009e60 	.word	0x20009e60
 800aa88:	20009e54 	.word	0x20009e54
 800aa8c:	20009e64 	.word	0x20009e64

0800aa90 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800aa90:	b580      	push	{r7, lr}
 800aa92:	b086      	sub	sp, #24
 800aa94:	af00      	add	r7, sp, #0
 800aa96:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d048      	beq.n	800ab34 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800aaa2:	2308      	movs	r3, #8
 800aaa4:	425b      	negs	r3, r3
 800aaa6:	697a      	ldr	r2, [r7, #20]
 800aaa8:	4413      	add	r3, r2
 800aaaa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800aaac:	697b      	ldr	r3, [r7, #20]
 800aaae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800aab0:	693b      	ldr	r3, [r7, #16]
 800aab2:	685a      	ldr	r2, [r3, #4]
 800aab4:	4b21      	ldr	r3, [pc, #132]	; (800ab3c <vPortFree+0xac>)
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	4013      	ands	r3, r2
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d10a      	bne.n	800aad4 <vPortFree+0x44>
	__asm volatile
 800aabe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aac2:	f383 8811 	msr	BASEPRI, r3
 800aac6:	f3bf 8f6f 	isb	sy
 800aaca:	f3bf 8f4f 	dsb	sy
 800aace:	60fb      	str	r3, [r7, #12]
}
 800aad0:	bf00      	nop
 800aad2:	e7fe      	b.n	800aad2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800aad4:	693b      	ldr	r3, [r7, #16]
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d00a      	beq.n	800aaf2 <vPortFree+0x62>
	__asm volatile
 800aadc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aae0:	f383 8811 	msr	BASEPRI, r3
 800aae4:	f3bf 8f6f 	isb	sy
 800aae8:	f3bf 8f4f 	dsb	sy
 800aaec:	60bb      	str	r3, [r7, #8]
}
 800aaee:	bf00      	nop
 800aaf0:	e7fe      	b.n	800aaf0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800aaf2:	693b      	ldr	r3, [r7, #16]
 800aaf4:	685a      	ldr	r2, [r3, #4]
 800aaf6:	4b11      	ldr	r3, [pc, #68]	; (800ab3c <vPortFree+0xac>)
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	4013      	ands	r3, r2
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d019      	beq.n	800ab34 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ab00:	693b      	ldr	r3, [r7, #16]
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d115      	bne.n	800ab34 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ab08:	693b      	ldr	r3, [r7, #16]
 800ab0a:	685a      	ldr	r2, [r3, #4]
 800ab0c:	4b0b      	ldr	r3, [pc, #44]	; (800ab3c <vPortFree+0xac>)
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	43db      	mvns	r3, r3
 800ab12:	401a      	ands	r2, r3
 800ab14:	693b      	ldr	r3, [r7, #16]
 800ab16:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ab18:	f7fe fdb2 	bl	8009680 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ab1c:	693b      	ldr	r3, [r7, #16]
 800ab1e:	685a      	ldr	r2, [r3, #4]
 800ab20:	4b07      	ldr	r3, [pc, #28]	; (800ab40 <vPortFree+0xb0>)
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	4413      	add	r3, r2
 800ab26:	4a06      	ldr	r2, [pc, #24]	; (800ab40 <vPortFree+0xb0>)
 800ab28:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ab2a:	6938      	ldr	r0, [r7, #16]
 800ab2c:	f000 f86c 	bl	800ac08 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800ab30:	f7fe fdb4 	bl	800969c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ab34:	bf00      	nop
 800ab36:	3718      	adds	r7, #24
 800ab38:	46bd      	mov	sp, r7
 800ab3a:	bd80      	pop	{r7, pc}
 800ab3c:	20009e68 	.word	0x20009e68
 800ab40:	20009e60 	.word	0x20009e60

0800ab44 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ab44:	b480      	push	{r7}
 800ab46:	b085      	sub	sp, #20
 800ab48:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ab4a:	f44f 43f0 	mov.w	r3, #30720	; 0x7800
 800ab4e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ab50:	4b27      	ldr	r3, [pc, #156]	; (800abf0 <prvHeapInit+0xac>)
 800ab52:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	f003 0307 	and.w	r3, r3, #7
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d00c      	beq.n	800ab78 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	3307      	adds	r3, #7
 800ab62:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	f023 0307 	bic.w	r3, r3, #7
 800ab6a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ab6c:	68ba      	ldr	r2, [r7, #8]
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	1ad3      	subs	r3, r2, r3
 800ab72:	4a1f      	ldr	r2, [pc, #124]	; (800abf0 <prvHeapInit+0xac>)
 800ab74:	4413      	add	r3, r2
 800ab76:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ab7c:	4a1d      	ldr	r2, [pc, #116]	; (800abf4 <prvHeapInit+0xb0>)
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ab82:	4b1c      	ldr	r3, [pc, #112]	; (800abf4 <prvHeapInit+0xb0>)
 800ab84:	2200      	movs	r2, #0
 800ab86:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	68ba      	ldr	r2, [r7, #8]
 800ab8c:	4413      	add	r3, r2
 800ab8e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ab90:	2208      	movs	r2, #8
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	1a9b      	subs	r3, r3, r2
 800ab96:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	f023 0307 	bic.w	r3, r3, #7
 800ab9e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	4a15      	ldr	r2, [pc, #84]	; (800abf8 <prvHeapInit+0xb4>)
 800aba4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800aba6:	4b14      	ldr	r3, [pc, #80]	; (800abf8 <prvHeapInit+0xb4>)
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	2200      	movs	r2, #0
 800abac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800abae:	4b12      	ldr	r3, [pc, #72]	; (800abf8 <prvHeapInit+0xb4>)
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	2200      	movs	r2, #0
 800abb4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800abba:	683b      	ldr	r3, [r7, #0]
 800abbc:	68fa      	ldr	r2, [r7, #12]
 800abbe:	1ad2      	subs	r2, r2, r3
 800abc0:	683b      	ldr	r3, [r7, #0]
 800abc2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800abc4:	4b0c      	ldr	r3, [pc, #48]	; (800abf8 <prvHeapInit+0xb4>)
 800abc6:	681a      	ldr	r2, [r3, #0]
 800abc8:	683b      	ldr	r3, [r7, #0]
 800abca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800abcc:	683b      	ldr	r3, [r7, #0]
 800abce:	685b      	ldr	r3, [r3, #4]
 800abd0:	4a0a      	ldr	r2, [pc, #40]	; (800abfc <prvHeapInit+0xb8>)
 800abd2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800abd4:	683b      	ldr	r3, [r7, #0]
 800abd6:	685b      	ldr	r3, [r3, #4]
 800abd8:	4a09      	ldr	r2, [pc, #36]	; (800ac00 <prvHeapInit+0xbc>)
 800abda:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800abdc:	4b09      	ldr	r3, [pc, #36]	; (800ac04 <prvHeapInit+0xc0>)
 800abde:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800abe2:	601a      	str	r2, [r3, #0]
}
 800abe4:	bf00      	nop
 800abe6:	3714      	adds	r7, #20
 800abe8:	46bd      	mov	sp, r7
 800abea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abee:	4770      	bx	lr
 800abf0:	20002654 	.word	0x20002654
 800abf4:	20009e54 	.word	0x20009e54
 800abf8:	20009e5c 	.word	0x20009e5c
 800abfc:	20009e64 	.word	0x20009e64
 800ac00:	20009e60 	.word	0x20009e60
 800ac04:	20009e68 	.word	0x20009e68

0800ac08 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ac08:	b480      	push	{r7}
 800ac0a:	b085      	sub	sp, #20
 800ac0c:	af00      	add	r7, sp, #0
 800ac0e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ac10:	4b28      	ldr	r3, [pc, #160]	; (800acb4 <prvInsertBlockIntoFreeList+0xac>)
 800ac12:	60fb      	str	r3, [r7, #12]
 800ac14:	e002      	b.n	800ac1c <prvInsertBlockIntoFreeList+0x14>
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	60fb      	str	r3, [r7, #12]
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	687a      	ldr	r2, [r7, #4]
 800ac22:	429a      	cmp	r2, r3
 800ac24:	d8f7      	bhi.n	800ac16 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	685b      	ldr	r3, [r3, #4]
 800ac2e:	68ba      	ldr	r2, [r7, #8]
 800ac30:	4413      	add	r3, r2
 800ac32:	687a      	ldr	r2, [r7, #4]
 800ac34:	429a      	cmp	r2, r3
 800ac36:	d108      	bne.n	800ac4a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	685a      	ldr	r2, [r3, #4]
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	685b      	ldr	r3, [r3, #4]
 800ac40:	441a      	add	r2, r3
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	685b      	ldr	r3, [r3, #4]
 800ac52:	68ba      	ldr	r2, [r7, #8]
 800ac54:	441a      	add	r2, r3
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	429a      	cmp	r2, r3
 800ac5c:	d118      	bne.n	800ac90 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	681a      	ldr	r2, [r3, #0]
 800ac62:	4b15      	ldr	r3, [pc, #84]	; (800acb8 <prvInsertBlockIntoFreeList+0xb0>)
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	429a      	cmp	r2, r3
 800ac68:	d00d      	beq.n	800ac86 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	685a      	ldr	r2, [r3, #4]
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	685b      	ldr	r3, [r3, #4]
 800ac74:	441a      	add	r2, r3
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	681a      	ldr	r2, [r3, #0]
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	601a      	str	r2, [r3, #0]
 800ac84:	e008      	b.n	800ac98 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ac86:	4b0c      	ldr	r3, [pc, #48]	; (800acb8 <prvInsertBlockIntoFreeList+0xb0>)
 800ac88:	681a      	ldr	r2, [r3, #0]
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	601a      	str	r2, [r3, #0]
 800ac8e:	e003      	b.n	800ac98 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	681a      	ldr	r2, [r3, #0]
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ac98:	68fa      	ldr	r2, [r7, #12]
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	429a      	cmp	r2, r3
 800ac9e:	d002      	beq.n	800aca6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	687a      	ldr	r2, [r7, #4]
 800aca4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800aca6:	bf00      	nop
 800aca8:	3714      	adds	r7, #20
 800acaa:	46bd      	mov	sp, r7
 800acac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acb0:	4770      	bx	lr
 800acb2:	bf00      	nop
 800acb4:	20009e54 	.word	0x20009e54
 800acb8:	20009e5c 	.word	0x20009e5c

0800acbc <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 800acbc:	b580      	push	{r7, lr}
 800acbe:	b084      	sub	sp, #16
 800acc0:	af00      	add	r7, sp, #0
 800acc2:	6078      	str	r0, [r7, #4]
 800acc4:	6039      	str	r1, [r7, #0]
  err_t err;

#ifdef LWIP_DEBUG
  /* catch functions that don't set err */
  apimsg->err = ERR_VAL;
 800acc6:	683b      	ldr	r3, [r7, #0]
 800acc8:	22fa      	movs	r2, #250	; 0xfa
 800acca:	711a      	strb	r2, [r3, #4]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 800accc:	683b      	ldr	r3, [r7, #0]
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	330c      	adds	r3, #12
 800acd2:	461a      	mov	r2, r3
 800acd4:	6839      	ldr	r1, [r7, #0]
 800acd6:	6878      	ldr	r0, [r7, #4]
 800acd8:	f001 ffca 	bl	800cc70 <tcpip_send_msg_wait_sem>
 800acdc:	4603      	mov	r3, r0
 800acde:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800ace0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d103      	bne.n	800acf0 <netconn_apimsg+0x34>
    return apimsg->err;
 800ace8:	683b      	ldr	r3, [r7, #0]
 800acea:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800acee:	e001      	b.n	800acf4 <netconn_apimsg+0x38>
  }
  return err;
 800acf0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800acf4:	4618      	mov	r0, r3
 800acf6:	3710      	adds	r7, #16
 800acf8:	46bd      	mov	sp, r7
 800acfa:	bd80      	pop	{r7, pc}

0800acfc <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 800acfc:	b580      	push	{r7, lr}
 800acfe:	b08c      	sub	sp, #48	; 0x30
 800ad00:	af00      	add	r7, sp, #0
 800ad02:	4603      	mov	r3, r0
 800ad04:	603a      	str	r2, [r7, #0]
 800ad06:	71fb      	strb	r3, [r7, #7]
 800ad08:	460b      	mov	r3, r1
 800ad0a:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 800ad0c:	79fb      	ldrb	r3, [r7, #7]
 800ad0e:	6839      	ldr	r1, [r7, #0]
 800ad10:	4618      	mov	r0, r3
 800ad12:	f000 ff3d 	bl	800bb90 <netconn_alloc>
 800ad16:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (conn != NULL) {
 800ad18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d064      	beq.n	800ade8 <netconn_new_with_proto_and_callback+0xec>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 800ad1e:	79bb      	ldrb	r3, [r7, #6]
 800ad20:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 800ad22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad24:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 800ad26:	f107 0308 	add.w	r3, r7, #8
 800ad2a:	4619      	mov	r1, r3
 800ad2c:	4831      	ldr	r0, [pc, #196]	; (800adf4 <netconn_new_with_proto_and_callback+0xf8>)
 800ad2e:	f7ff ffc5 	bl	800acbc <netconn_apimsg>
 800ad32:	4603      	mov	r3, r0
 800ad34:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (err != ERR_OK) {
 800ad38:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d053      	beq.n	800ade8 <netconn_new_with_proto_and_callback+0xec>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 800ad40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad42:	685b      	ldr	r3, [r3, #4]
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d009      	beq.n	800ad5c <netconn_new_with_proto_and_callback+0x60>
 800ad48:	22a3      	movs	r2, #163	; 0xa3
 800ad4a:	492b      	ldr	r1, [pc, #172]	; (800adf8 <netconn_new_with_proto_and_callback+0xfc>)
 800ad4c:	482b      	ldr	r0, [pc, #172]	; (800adfc <netconn_new_with_proto_and_callback+0x100>)
 800ad4e:	f010 f9e1 	bl	801b114 <trace_printf>
 800ad52:	492b      	ldr	r1, [pc, #172]	; (800ae00 <netconn_new_with_proto_and_callback+0x104>)
 800ad54:	482b      	ldr	r0, [pc, #172]	; (800ae04 <netconn_new_with_proto_and_callback+0x108>)
 800ad56:	f010 f9dd 	bl	801b114 <trace_printf>
 800ad5a:	e7fe      	b.n	800ad5a <netconn_new_with_proto_and_callback+0x5e>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 800ad5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad5e:	3310      	adds	r3, #16
 800ad60:	4618      	mov	r0, r3
 800ad62:	f010 f808 	bl	801ad76 <sys_mbox_valid>
 800ad66:	4603      	mov	r3, r0
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d109      	bne.n	800ad80 <netconn_new_with_proto_and_callback+0x84>
 800ad6c:	22a4      	movs	r2, #164	; 0xa4
 800ad6e:	4926      	ldr	r1, [pc, #152]	; (800ae08 <netconn_new_with_proto_and_callback+0x10c>)
 800ad70:	4822      	ldr	r0, [pc, #136]	; (800adfc <netconn_new_with_proto_and_callback+0x100>)
 800ad72:	f010 f9cf 	bl	801b114 <trace_printf>
 800ad76:	4922      	ldr	r1, [pc, #136]	; (800ae00 <netconn_new_with_proto_and_callback+0x104>)
 800ad78:	4822      	ldr	r0, [pc, #136]	; (800ae04 <netconn_new_with_proto_and_callback+0x108>)
 800ad7a:	f010 f9cb 	bl	801b114 <trace_printf>
 800ad7e:	e7fe      	b.n	800ad7e <netconn_new_with_proto_and_callback+0x82>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 800ad80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad82:	3314      	adds	r3, #20
 800ad84:	4618      	mov	r0, r3
 800ad86:	f00f fff6 	bl	801ad76 <sys_mbox_valid>
 800ad8a:	4603      	mov	r3, r0
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d009      	beq.n	800ada4 <netconn_new_with_proto_and_callback+0xa8>
 800ad90:	22a6      	movs	r2, #166	; 0xa6
 800ad92:	491e      	ldr	r1, [pc, #120]	; (800ae0c <netconn_new_with_proto_and_callback+0x110>)
 800ad94:	4819      	ldr	r0, [pc, #100]	; (800adfc <netconn_new_with_proto_and_callback+0x100>)
 800ad96:	f010 f9bd 	bl	801b114 <trace_printf>
 800ad9a:	4919      	ldr	r1, [pc, #100]	; (800ae00 <netconn_new_with_proto_and_callback+0x104>)
 800ad9c:	4819      	ldr	r0, [pc, #100]	; (800ae04 <netconn_new_with_proto_and_callback+0x108>)
 800ad9e:	f010 f9b9 	bl	801b114 <trace_printf>
 800ada2:	e7fe      	b.n	800ada2 <netconn_new_with_proto_and_callback+0xa6>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 800ada4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ada6:	330c      	adds	r3, #12
 800ada8:	4618      	mov	r0, r3
 800adaa:	f010 f8a1 	bl	801aef0 <sys_sem_valid>
 800adae:	4603      	mov	r3, r0
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d109      	bne.n	800adc8 <netconn_new_with_proto_and_callback+0xcc>
 800adb4:	22a9      	movs	r2, #169	; 0xa9
 800adb6:	4916      	ldr	r1, [pc, #88]	; (800ae10 <netconn_new_with_proto_and_callback+0x114>)
 800adb8:	4810      	ldr	r0, [pc, #64]	; (800adfc <netconn_new_with_proto_and_callback+0x100>)
 800adba:	f010 f9ab 	bl	801b114 <trace_printf>
 800adbe:	4910      	ldr	r1, [pc, #64]	; (800ae00 <netconn_new_with_proto_and_callback+0x104>)
 800adc0:	4810      	ldr	r0, [pc, #64]	; (800ae04 <netconn_new_with_proto_and_callback+0x108>)
 800adc2:	f010 f9a7 	bl	801b114 <trace_printf>
 800adc6:	e7fe      	b.n	800adc6 <netconn_new_with_proto_and_callback+0xca>
      sys_sem_free(&conn->op_completed);
 800adc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adca:	330c      	adds	r3, #12
 800adcc:	4618      	mov	r0, r3
 800adce:	f010 f877 	bl	801aec0 <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 800add2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800add4:	3310      	adds	r3, #16
 800add6:	4618      	mov	r0, r3
 800add8:	f00f ff26 	bl	801ac28 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 800addc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800adde:	2007      	movs	r0, #7
 800ade0:	f002 fdac 	bl	800d93c <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 800ade4:	2300      	movs	r3, #0
 800ade6:	e000      	b.n	800adea <netconn_new_with_proto_and_callback+0xee>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 800ade8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800adea:	4618      	mov	r0, r3
 800adec:	3730      	adds	r7, #48	; 0x30
 800adee:	46bd      	mov	sp, r7
 800adf0:	bd80      	pop	{r7, pc}
 800adf2:	bf00      	nop
 800adf4:	0800bb65 	.word	0x0800bb65
 800adf8:	0801cc58 	.word	0x0801cc58
 800adfc:	0801cc7c 	.word	0x0801cc7c
 800ae00:	0801cc9c 	.word	0x0801cc9c
 800ae04:	0801ccd0 	.word	0x0801ccd0
 800ae08:	0801ccd4 	.word	0x0801ccd4
 800ae0c:	0801ccec 	.word	0x0801ccec
 800ae10:	0801cd10 	.word	0x0801cd10

0800ae14 <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 800ae14:	b580      	push	{r7, lr}
 800ae16:	b08e      	sub	sp, #56	; 0x38
 800ae18:	af00      	add	r7, sp, #0
 800ae1a:	60f8      	str	r0, [r7, #12]
 800ae1c:	60b9      	str	r1, [r7, #8]
 800ae1e:	4613      	mov	r3, r2
 800ae20:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d10a      	bne.n	800ae3e <netconn_bind+0x2a>
 800ae28:	f44f 729c 	mov.w	r2, #312	; 0x138
 800ae2c:	4911      	ldr	r1, [pc, #68]	; (800ae74 <netconn_bind+0x60>)
 800ae2e:	4812      	ldr	r0, [pc, #72]	; (800ae78 <netconn_bind+0x64>)
 800ae30:	f010 f970 	bl	801b114 <trace_printf>
 800ae34:	4911      	ldr	r1, [pc, #68]	; (800ae7c <netconn_bind+0x68>)
 800ae36:	4812      	ldr	r0, [pc, #72]	; (800ae80 <netconn_bind+0x6c>)
 800ae38:	f010 f96c 	bl	801b114 <trace_printf>
 800ae3c:	e7fe      	b.n	800ae3c <netconn_bind+0x28>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 800ae3e:	68bb      	ldr	r3, [r7, #8]
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d101      	bne.n	800ae48 <netconn_bind+0x34>
    addr = IP4_ADDR_ANY;
 800ae44:	4b0f      	ldr	r3, [pc, #60]	; (800ae84 <netconn_bind+0x70>)
 800ae46:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 800ae4c:	68bb      	ldr	r3, [r7, #8]
 800ae4e:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 800ae50:	88fb      	ldrh	r3, [r7, #6]
 800ae52:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 800ae54:	f107 0314 	add.w	r3, r7, #20
 800ae58:	4619      	mov	r1, r3
 800ae5a:	480b      	ldr	r0, [pc, #44]	; (800ae88 <netconn_bind+0x74>)
 800ae5c:	f7ff ff2e 	bl	800acbc <netconn_apimsg>
 800ae60:	4603      	mov	r3, r0
 800ae62:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 800ae66:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800ae6a:	4618      	mov	r0, r3
 800ae6c:	3738      	adds	r7, #56	; 0x38
 800ae6e:	46bd      	mov	sp, r7
 800ae70:	bd80      	pop	{r7, pc}
 800ae72:	bf00      	nop
 800ae74:	0801cd8c 	.word	0x0801cd8c
 800ae78:	0801cc7c 	.word	0x0801cc7c
 800ae7c:	0801cc9c 	.word	0x0801cc9c
 800ae80:	0801ccd0 	.word	0x0801ccd0
 800ae84:	08020718 	.word	0x08020718
 800ae88:	0800c139 	.word	0x0800c139

0800ae8c <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 800ae8c:	b580      	push	{r7, lr}
 800ae8e:	b088      	sub	sp, #32
 800ae90:	af00      	add	r7, sp, #0
 800ae92:	60f8      	str	r0, [r7, #12]
 800ae94:	60b9      	str	r1, [r7, #8]
 800ae96:	4613      	mov	r3, r2
 800ae98:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 800ae9a:	2300      	movs	r3, #0
 800ae9c:	61bb      	str	r3, [r7, #24]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800ae9e:	68bb      	ldr	r3, [r7, #8]
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d10a      	bne.n	800aeba <netconn_recv_data+0x2e>
 800aea4:	f44f 7212 	mov.w	r2, #584	; 0x248
 800aea8:	495a      	ldr	r1, [pc, #360]	; (800b014 <netconn_recv_data+0x188>)
 800aeaa:	485b      	ldr	r0, [pc, #364]	; (800b018 <netconn_recv_data+0x18c>)
 800aeac:	f010 f932 	bl	801b114 <trace_printf>
 800aeb0:	495a      	ldr	r1, [pc, #360]	; (800b01c <netconn_recv_data+0x190>)
 800aeb2:	485b      	ldr	r0, [pc, #364]	; (800b020 <netconn_recv_data+0x194>)
 800aeb4:	f010 f92e 	bl	801b114 <trace_printf>
 800aeb8:	e7fe      	b.n	800aeb8 <netconn_recv_data+0x2c>
  *new_buf = NULL;
 800aeba:	68bb      	ldr	r3, [r7, #8]
 800aebc:	2200      	movs	r2, #0
 800aebe:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d10a      	bne.n	800aedc <netconn_recv_data+0x50>
 800aec6:	f240 224a 	movw	r2, #586	; 0x24a
 800aeca:	4956      	ldr	r1, [pc, #344]	; (800b024 <netconn_recv_data+0x198>)
 800aecc:	4852      	ldr	r0, [pc, #328]	; (800b018 <netconn_recv_data+0x18c>)
 800aece:	f010 f921 	bl	801b114 <trace_printf>
 800aed2:	4952      	ldr	r1, [pc, #328]	; (800b01c <netconn_recv_data+0x190>)
 800aed4:	4852      	ldr	r0, [pc, #328]	; (800b020 <netconn_recv_data+0x194>)
 800aed6:	f010 f91d 	bl	801b114 <trace_printf>
 800aeda:	e7fe      	b.n	800aeda <netconn_recv_data+0x4e>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	3310      	adds	r3, #16
 800aee0:	4618      	mov	r0, r3
 800aee2:	f00f ff48 	bl	801ad76 <sys_mbox_valid>
 800aee6:	4603      	mov	r3, r0
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d10e      	bne.n	800af0a <netconn_recv_data+0x7e>
    err_t err = netconn_err(conn);
 800aeec:	68f8      	ldr	r0, [r7, #12]
 800aeee:	f000 fa3b 	bl	800b368 <netconn_err>
 800aef2:	4603      	mov	r3, r0
 800aef4:	773b      	strb	r3, [r7, #28]
    if (err != ERR_OK) {
 800aef6:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	d002      	beq.n	800af04 <netconn_recv_data+0x78>
      /* return pending error */
      return err;
 800aefe:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800af02:	e082      	b.n	800b00a <netconn_recv_data+0x17e>
    }
    return ERR_CONN;
 800af04:	f06f 030a 	mvn.w	r3, #10
 800af08:	e07f      	b.n	800b00a <netconn_recv_data+0x17e>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	7f1b      	ldrb	r3, [r3, #28]
 800af0e:	f003 0302 	and.w	r3, r3, #2
 800af12:	2b00      	cmp	r3, #0
 800af14:	d10f      	bne.n	800af36 <netconn_recv_data+0xaa>
 800af16:	79fb      	ldrb	r3, [r7, #7]
 800af18:	f003 0304 	and.w	r3, r3, #4
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d10a      	bne.n	800af36 <netconn_recv_data+0xaa>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	7f1b      	ldrb	r3, [r3, #28]
 800af24:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d104      	bne.n	800af36 <netconn_recv_data+0xaa>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800af32:	2b00      	cmp	r3, #0
 800af34:	d023      	beq.n	800af7e <netconn_recv_data+0xf2>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	3310      	adds	r3, #16
 800af3a:	f107 0218 	add.w	r2, r7, #24
 800af3e:	4611      	mov	r1, r2
 800af40:	4618      	mov	r0, r3
 800af42:	f00f fefc 	bl	801ad3e <sys_arch_mbox_tryfetch>
 800af46:	4603      	mov	r3, r0
 800af48:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af4c:	d11f      	bne.n	800af8e <netconn_recv_data+0x102>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 800af4e:	68f8      	ldr	r0, [r7, #12]
 800af50:	f000 fa0a 	bl	800b368 <netconn_err>
 800af54:	4603      	mov	r3, r0
 800af56:	777b      	strb	r3, [r7, #29]
      if (err != ERR_OK) {
 800af58:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d002      	beq.n	800af66 <netconn_recv_data+0xda>
        /* return pending error */
        return err;
 800af60:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800af64:	e051      	b.n	800b00a <netconn_recv_data+0x17e>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	7f1b      	ldrb	r3, [r3, #28]
 800af6a:	f003 0301 	and.w	r3, r3, #1
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d002      	beq.n	800af78 <netconn_recv_data+0xec>
        return ERR_CONN;
 800af72:	f06f 030a 	mvn.w	r3, #10
 800af76:	e048      	b.n	800b00a <netconn_recv_data+0x17e>
      }
      return ERR_WOULDBLOCK;
 800af78:	f06f 0306 	mvn.w	r3, #6
 800af7c:	e045      	b.n	800b00a <netconn_recv_data+0x17e>
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	3310      	adds	r3, #16
 800af82:	f107 0118 	add.w	r1, r7, #24
 800af86:	2200      	movs	r2, #0
 800af88:	4618      	mov	r0, r3
 800af8a:	f00f fe99 	bl	801acc0 <sys_arch_mbox_fetch>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	781b      	ldrb	r3, [r3, #0]
 800af92:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800af96:	2b10      	cmp	r3, #16
 800af98:	d117      	bne.n	800afca <netconn_recv_data+0x13e>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 800af9a:	69bb      	ldr	r3, [r7, #24]
 800af9c:	f107 0217 	add.w	r2, r7, #23
 800afa0:	4611      	mov	r1, r2
 800afa2:	4618      	mov	r0, r3
 800afa4:	f000 fa38 	bl	800b418 <lwip_netconn_is_err_msg>
 800afa8:	4603      	mov	r3, r0
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d009      	beq.n	800afc2 <netconn_recv_data+0x136>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 800afae:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800afb2:	f113 0f0f 	cmn.w	r3, #15
 800afb6:	d101      	bne.n	800afbc <netconn_recv_data+0x130>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 800afb8:	2300      	movs	r3, #0
 800afba:	e026      	b.n	800b00a <netconn_recv_data+0x17e>
      }
      return err;
 800afbc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800afc0:	e023      	b.n	800b00a <netconn_recv_data+0x17e>
    }
    len = ((struct pbuf *)buf)->tot_len;
 800afc2:	69bb      	ldr	r3, [r7, #24]
 800afc4:	891b      	ldrh	r3, [r3, #8]
 800afc6:	83fb      	strh	r3, [r7, #30]
 800afc8:	e011      	b.n	800afee <netconn_recv_data+0x162>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 800afca:	69bb      	ldr	r3, [r7, #24]
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d10a      	bne.n	800afe6 <netconn_recv_data+0x15a>
 800afd0:	f240 2291 	movw	r2, #657	; 0x291
 800afd4:	4914      	ldr	r1, [pc, #80]	; (800b028 <netconn_recv_data+0x19c>)
 800afd6:	4810      	ldr	r0, [pc, #64]	; (800b018 <netconn_recv_data+0x18c>)
 800afd8:	f010 f89c 	bl	801b114 <trace_printf>
 800afdc:	490f      	ldr	r1, [pc, #60]	; (800b01c <netconn_recv_data+0x190>)
 800afde:	4810      	ldr	r0, [pc, #64]	; (800b020 <netconn_recv_data+0x194>)
 800afe0:	f010 f898 	bl	801b114 <trace_printf>
 800afe4:	e7fe      	b.n	800afe4 <netconn_recv_data+0x158>
    len = netbuf_len((struct netbuf *)buf);
 800afe6:	69bb      	ldr	r3, [r7, #24]
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	891b      	ldrh	r3, [r3, #8]
 800afec:	83fb      	strh	r3, [r7, #30]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d005      	beq.n	800b002 <netconn_recv_data+0x176>
 800aff6:	68fb      	ldr	r3, [r7, #12]
 800aff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800affa:	8bfa      	ldrh	r2, [r7, #30]
 800affc:	2101      	movs	r1, #1
 800affe:	68f8      	ldr	r0, [r7, #12]
 800b000:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 800b002:	69ba      	ldr	r2, [r7, #24]
 800b004:	68bb      	ldr	r3, [r7, #8]
 800b006:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 800b008:	2300      	movs	r3, #0
}
 800b00a:	4618      	mov	r0, r3
 800b00c:	3720      	adds	r7, #32
 800b00e:	46bd      	mov	sp, r7
 800b010:	bd80      	pop	{r7, pc}
 800b012:	bf00      	nop
 800b014:	0801ce6c 	.word	0x0801ce6c
 800b018:	0801cc7c 	.word	0x0801cc7c
 800b01c:	0801cc9c 	.word	0x0801cc9c
 800b020:	0801ccd0 	.word	0x0801ccd0
 800b024:	0801ce8c 	.word	0x0801ce8c
 800b028:	0801cea8 	.word	0x0801cea8

0800b02c <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 800b02c:	b580      	push	{r7, lr}
 800b02e:	b084      	sub	sp, #16
 800b030:	af00      	add	r7, sp, #0
 800b032:	60f8      	str	r0, [r7, #12]
 800b034:	60b9      	str	r1, [r7, #8]
 800b036:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d005      	beq.n	800b04a <netconn_tcp_recvd_msg+0x1e>
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	781b      	ldrb	r3, [r3, #0]
 800b042:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b046:	2b10      	cmp	r3, #16
 800b048:	d00a      	beq.n	800b060 <netconn_tcp_recvd_msg+0x34>
 800b04a:	f240 22a7 	movw	r2, #679	; 0x2a7
 800b04e:	490c      	ldr	r1, [pc, #48]	; (800b080 <netconn_tcp_recvd_msg+0x54>)
 800b050:	480c      	ldr	r0, [pc, #48]	; (800b084 <netconn_tcp_recvd_msg+0x58>)
 800b052:	f010 f85f 	bl	801b114 <trace_printf>
 800b056:	490c      	ldr	r1, [pc, #48]	; (800b088 <netconn_tcp_recvd_msg+0x5c>)
 800b058:	480c      	ldr	r0, [pc, #48]	; (800b08c <netconn_tcp_recvd_msg+0x60>)
 800b05a:	f010 f85b 	bl	801b114 <trace_printf>
 800b05e:	e7fe      	b.n	800b05e <netconn_tcp_recvd_msg+0x32>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	68fa      	ldr	r2, [r7, #12]
 800b064:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	68ba      	ldr	r2, [r7, #8]
 800b06a:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 800b06c:	6879      	ldr	r1, [r7, #4]
 800b06e:	4808      	ldr	r0, [pc, #32]	; (800b090 <netconn_tcp_recvd_msg+0x64>)
 800b070:	f7ff fe24 	bl	800acbc <netconn_apimsg>
 800b074:	4603      	mov	r3, r0
}
 800b076:	4618      	mov	r0, r3
 800b078:	3710      	adds	r7, #16
 800b07a:	46bd      	mov	sp, r7
 800b07c:	bd80      	pop	{r7, pc}
 800b07e:	bf00      	nop
 800b080:	0801ceb4 	.word	0x0801ceb4
 800b084:	0801cc7c 	.word	0x0801cc7c
 800b088:	0801cc9c 	.word	0x0801cc9c
 800b08c:	0801ccd0 	.word	0x0801ccd0
 800b090:	0800c247 	.word	0x0800c247

0800b094 <netconn_recv_data_tcp>:
  return err;
}

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 800b094:	b580      	push	{r7, lr}
 800b096:	b090      	sub	sp, #64	; 0x40
 800b098:	af00      	add	r7, sp, #0
 800b09a:	60f8      	str	r0, [r7, #12]
 800b09c:	60b9      	str	r1, [r7, #8]
 800b09e:	4613      	mov	r3, r2
 800b0a0:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	3310      	adds	r3, #16
 800b0a6:	4618      	mov	r0, r3
 800b0a8:	f00f fe65 	bl	801ad76 <sys_mbox_valid>
 800b0ac:	4603      	mov	r3, r0
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d102      	bne.n	800b0b8 <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 800b0b2:	f06f 030a 	mvn.w	r3, #10
 800b0b6:	e06d      	b.n	800b194 <netconn_recv_data_tcp+0x100>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	7f1b      	ldrb	r3, [r3, #28]
 800b0bc:	b25b      	sxtb	r3, r3
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	da07      	bge.n	800b0d2 <netconn_recv_data_tcp+0x3e>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 800b0c2:	68fb      	ldr	r3, [r7, #12]
 800b0c4:	7f1b      	ldrb	r3, [r3, #28]
 800b0c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b0ca:	b2da      	uxtb	r2, r3
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	771a      	strb	r2, [r3, #28]
    goto handle_fin;
 800b0d0:	e039      	b.n	800b146 <netconn_recv_data_tcp+0xb2>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 800b0d2:	79fb      	ldrb	r3, [r7, #7]
 800b0d4:	461a      	mov	r2, r3
 800b0d6:	68b9      	ldr	r1, [r7, #8]
 800b0d8:	68f8      	ldr	r0, [r7, #12]
 800b0da:	f7ff fed7 	bl	800ae8c <netconn_recv_data>
 800b0de:	4603      	mov	r3, r0
 800b0e0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (err != ERR_OK) {
 800b0e4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d002      	beq.n	800b0f2 <netconn_recv_data_tcp+0x5e>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 800b0ec:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b0f0:	e050      	b.n	800b194 <netconn_recv_data_tcp+0x100>
  }
  buf = *new_buf;
 800b0f2:	68bb      	ldr	r3, [r7, #8]
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	63bb      	str	r3, [r7, #56]	; 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 800b0f8:	79fb      	ldrb	r3, [r7, #7]
 800b0fa:	f003 0308 	and.w	r3, r3, #8
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d10e      	bne.n	800b120 <netconn_recv_data_tcp+0x8c>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 800b102:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b104:	2b00      	cmp	r3, #0
 800b106:	d002      	beq.n	800b10e <netconn_recv_data_tcp+0x7a>
 800b108:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b10a:	891b      	ldrh	r3, [r3, #8]
 800b10c:	e000      	b.n	800b110 <netconn_recv_data_tcp+0x7c>
 800b10e:	2301      	movs	r3, #1
 800b110:	86fb      	strh	r3, [r7, #54]	; 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 800b112:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800b114:	f107 0214 	add.w	r2, r7, #20
 800b118:	4619      	mov	r1, r3
 800b11a:	68f8      	ldr	r0, [r7, #12]
 800b11c:	f7ff ff86 	bl	800b02c <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 800b120:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b122:	2b00      	cmp	r3, #0
 800b124:	d134      	bne.n	800b190 <netconn_recv_data_tcp+0xfc>
    if (apiflags & NETCONN_NOFIN) {
 800b126:	79fb      	ldrb	r3, [r7, #7]
 800b128:	f003 0310 	and.w	r3, r3, #16
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d009      	beq.n	800b144 <netconn_recv_data_tcp+0xb0>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 800b130:	68fb      	ldr	r3, [r7, #12]
 800b132:	7f1b      	ldrb	r3, [r3, #28]
 800b134:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b138:	b2da      	uxtb	r2, r3
 800b13a:	68fb      	ldr	r3, [r7, #12]
 800b13c:	771a      	strb	r2, [r3, #28]
      return ERR_WOULDBLOCK;
 800b13e:	f06f 0306 	mvn.w	r3, #6
 800b142:	e027      	b.n	800b194 <netconn_recv_data_tcp+0x100>
    } else {
handle_fin:
 800b144:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d005      	beq.n	800b15a <netconn_recv_data_tcp+0xc6>
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b152:	2200      	movs	r2, #0
 800b154:	2101      	movs	r1, #1
 800b156:	68f8      	ldr	r0, [r7, #12]
 800b158:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 800b15a:	68fb      	ldr	r3, [r7, #12]
 800b15c:	685b      	ldr	r3, [r3, #4]
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d10f      	bne.n	800b182 <netconn_recv_data_tcp+0xee>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 800b162:	68f8      	ldr	r0, [r7, #12]
 800b164:	f000 f900 	bl	800b368 <netconn_err>
 800b168:	4603      	mov	r3, r0
 800b16a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        if (err != ERR_OK) {
 800b16e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b172:	2b00      	cmp	r3, #0
 800b174:	d002      	beq.n	800b17c <netconn_recv_data_tcp+0xe8>
          return err;
 800b176:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b17a:	e00b      	b.n	800b194 <netconn_recv_data_tcp+0x100>
        }
        return ERR_RST;
 800b17c:	f06f 030d 	mvn.w	r3, #13
 800b180:	e008      	b.n	800b194 <netconn_recv_data_tcp+0x100>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 800b182:	2101      	movs	r1, #1
 800b184:	68f8      	ldr	r0, [r7, #12]
 800b186:	f000 f8bb 	bl	800b300 <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 800b18a:	f06f 030e 	mvn.w	r3, #14
 800b18e:	e001      	b.n	800b194 <netconn_recv_data_tcp+0x100>
    }
  }
  return err;
 800b190:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800b194:	4618      	mov	r0, r3
 800b196:	3740      	adds	r7, #64	; 0x40
 800b198:	46bd      	mov	sp, r7
 800b19a:	bd80      	pop	{r7, pc}

0800b19c <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
 800b19c:	b580      	push	{r7, lr}
 800b19e:	b086      	sub	sp, #24
 800b1a0:	af00      	add	r7, sp, #0
 800b1a2:	6078      	str	r0, [r7, #4]
 800b1a4:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  struct netbuf *buf = NULL;
 800b1a6:	2300      	movs	r3, #0
 800b1a8:	617b      	str	r3, [r7, #20]
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800b1aa:	683b      	ldr	r3, [r7, #0]
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d10a      	bne.n	800b1c6 <netconn_recv+0x2a>
 800b1b0:	f240 3263 	movw	r2, #867	; 0x363
 800b1b4:	4934      	ldr	r1, [pc, #208]	; (800b288 <netconn_recv+0xec>)
 800b1b6:	4835      	ldr	r0, [pc, #212]	; (800b28c <netconn_recv+0xf0>)
 800b1b8:	f00f ffac 	bl	801b114 <trace_printf>
 800b1bc:	4934      	ldr	r1, [pc, #208]	; (800b290 <netconn_recv+0xf4>)
 800b1be:	4835      	ldr	r0, [pc, #212]	; (800b294 <netconn_recv+0xf8>)
 800b1c0:	f00f ffa8 	bl	801b114 <trace_printf>
 800b1c4:	e7fe      	b.n	800b1c4 <netconn_recv+0x28>
  *new_buf = NULL;
 800b1c6:	683b      	ldr	r3, [r7, #0]
 800b1c8:	2200      	movs	r2, #0
 800b1ca:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d10a      	bne.n	800b1e8 <netconn_recv+0x4c>
 800b1d2:	f240 3265 	movw	r2, #869	; 0x365
 800b1d6:	4930      	ldr	r1, [pc, #192]	; (800b298 <netconn_recv+0xfc>)
 800b1d8:	482c      	ldr	r0, [pc, #176]	; (800b28c <netconn_recv+0xf0>)
 800b1da:	f00f ff9b 	bl	801b114 <trace_printf>
 800b1de:	492c      	ldr	r1, [pc, #176]	; (800b290 <netconn_recv+0xf4>)
 800b1e0:	482c      	ldr	r0, [pc, #176]	; (800b294 <netconn_recv+0xf8>)
 800b1e2:	f00f ff97 	bl	801b114 <trace_printf>
 800b1e6:	e7fe      	b.n	800b1e6 <netconn_recv+0x4a>

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	781b      	ldrb	r3, [r3, #0]
 800b1ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b1f0:	2b10      	cmp	r3, #16
 800b1f2:	d13e      	bne.n	800b272 <netconn_recv+0xd6>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
 800b1f4:	2300      	movs	r3, #0
 800b1f6:	60fb      	str	r3, [r7, #12]
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800b1f8:	2006      	movs	r0, #6
 800b1fa:	f002 fb3d 	bl	800d878 <memp_malloc>
 800b1fe:	6178      	str	r0, [r7, #20]
    if (buf == NULL) {
 800b200:	697b      	ldr	r3, [r7, #20]
 800b202:	2b00      	cmp	r3, #0
 800b204:	d102      	bne.n	800b20c <netconn_recv+0x70>
      return ERR_MEM;
 800b206:	f04f 33ff 	mov.w	r3, #4294967295
 800b20a:	e038      	b.n	800b27e <netconn_recv+0xe2>
    }

    err = netconn_recv_data_tcp(conn, &p, 0);
 800b20c:	f107 030c 	add.w	r3, r7, #12
 800b210:	2200      	movs	r2, #0
 800b212:	4619      	mov	r1, r3
 800b214:	6878      	ldr	r0, [r7, #4]
 800b216:	f7ff ff3d 	bl	800b094 <netconn_recv_data_tcp>
 800b21a:	4603      	mov	r3, r0
 800b21c:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 800b21e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b222:	2b00      	cmp	r3, #0
 800b224:	d006      	beq.n	800b234 <netconn_recv+0x98>
      memp_free(MEMP_NETBUF, buf);
 800b226:	6979      	ldr	r1, [r7, #20]
 800b228:	2006      	movs	r0, #6
 800b22a:	f002 fb87 	bl	800d93c <memp_free>
      return err;
 800b22e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b232:	e024      	b.n	800b27e <netconn_recv+0xe2>
    }
    LWIP_ASSERT("p != NULL", p != NULL);
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	2b00      	cmp	r3, #0
 800b238:	d10a      	bne.n	800b250 <netconn_recv+0xb4>
 800b23a:	f240 3279 	movw	r2, #889	; 0x379
 800b23e:	4917      	ldr	r1, [pc, #92]	; (800b29c <netconn_recv+0x100>)
 800b240:	4812      	ldr	r0, [pc, #72]	; (800b28c <netconn_recv+0xf0>)
 800b242:	f00f ff67 	bl	801b114 <trace_printf>
 800b246:	4912      	ldr	r1, [pc, #72]	; (800b290 <netconn_recv+0xf4>)
 800b248:	4812      	ldr	r0, [pc, #72]	; (800b294 <netconn_recv+0xf8>)
 800b24a:	f00f ff63 	bl	801b114 <trace_printf>
 800b24e:	e7fe      	b.n	800b24e <netconn_recv+0xb2>

    buf->p = p;
 800b250:	68fa      	ldr	r2, [r7, #12]
 800b252:	697b      	ldr	r3, [r7, #20]
 800b254:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 800b256:	68fa      	ldr	r2, [r7, #12]
 800b258:	697b      	ldr	r3, [r7, #20]
 800b25a:	605a      	str	r2, [r3, #4]
    buf->port = 0;
 800b25c:	697b      	ldr	r3, [r7, #20]
 800b25e:	2200      	movs	r2, #0
 800b260:	819a      	strh	r2, [r3, #12]
    ip_addr_set_zero(&buf->addr);
 800b262:	697b      	ldr	r3, [r7, #20]
 800b264:	2200      	movs	r2, #0
 800b266:	609a      	str	r2, [r3, #8]
    *new_buf = buf;
 800b268:	683b      	ldr	r3, [r7, #0]
 800b26a:	697a      	ldr	r2, [r7, #20]
 800b26c:	601a      	str	r2, [r3, #0]
    /* don't set conn->last_err: it's only ERR_OK, anyway */
    return ERR_OK;
 800b26e:	2300      	movs	r3, #0
 800b270:	e005      	b.n	800b27e <netconn_recv+0xe2>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf, 0);
 800b272:	2200      	movs	r2, #0
 800b274:	6839      	ldr	r1, [r7, #0]
 800b276:	6878      	ldr	r0, [r7, #4]
 800b278:	f7ff fe08 	bl	800ae8c <netconn_recv_data>
 800b27c:	4603      	mov	r3, r0
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
 800b27e:	4618      	mov	r0, r3
 800b280:	3718      	adds	r7, #24
 800b282:	46bd      	mov	sp, r7
 800b284:	bd80      	pop	{r7, pc}
 800b286:	bf00      	nop
 800b288:	0801ce6c 	.word	0x0801ce6c
 800b28c:	0801cc7c 	.word	0x0801cc7c
 800b290:	0801cc9c 	.word	0x0801cc9c
 800b294:	0801ccd0 	.word	0x0801ccd0
 800b298:	0801ce8c 	.word	0x0801ce8c
 800b29c:	0801cf04 	.word	0x0801cf04

0800b2a0 <netconn_send>:
 * @param buf a netbuf containing the data to send
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_send(struct netconn *conn, struct netbuf *buf)
{
 800b2a0:	b580      	push	{r7, lr}
 800b2a2:	b08c      	sub	sp, #48	; 0x30
 800b2a4:	af00      	add	r7, sp, #0
 800b2a6:	6078      	str	r0, [r7, #4]
 800b2a8:	6039      	str	r1, [r7, #0]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_send: invalid conn",  (conn != NULL), return ERR_ARG;);
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	d10a      	bne.n	800b2c6 <netconn_send+0x26>
 800b2b0:	f240 32b2 	movw	r2, #946	; 0x3b2
 800b2b4:	490d      	ldr	r1, [pc, #52]	; (800b2ec <netconn_send+0x4c>)
 800b2b6:	480e      	ldr	r0, [pc, #56]	; (800b2f0 <netconn_send+0x50>)
 800b2b8:	f00f ff2c 	bl	801b114 <trace_printf>
 800b2bc:	490d      	ldr	r1, [pc, #52]	; (800b2f4 <netconn_send+0x54>)
 800b2be:	480e      	ldr	r0, [pc, #56]	; (800b2f8 <netconn_send+0x58>)
 800b2c0:	f00f ff28 	bl	801b114 <trace_printf>
 800b2c4:	e7fe      	b.n	800b2c4 <netconn_send+0x24>

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_send: sending %"U16_F" bytes\n", buf->p->tot_len));

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	60fb      	str	r3, [r7, #12]
  API_MSG_VAR_REF(msg).msg.b = buf;
 800b2ca:	683b      	ldr	r3, [r7, #0]
 800b2cc:	617b      	str	r3, [r7, #20]
  err = netconn_apimsg(lwip_netconn_do_send, &API_MSG_VAR_REF(msg));
 800b2ce:	f107 030c 	add.w	r3, r7, #12
 800b2d2:	4619      	mov	r1, r3
 800b2d4:	4809      	ldr	r0, [pc, #36]	; (800b2fc <netconn_send+0x5c>)
 800b2d6:	f7ff fcf1 	bl	800acbc <netconn_apimsg>
 800b2da:	4603      	mov	r3, r0
 800b2dc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800b2e0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800b2e4:	4618      	mov	r0, r3
 800b2e6:	3730      	adds	r7, #48	; 0x30
 800b2e8:	46bd      	mov	sp, r7
 800b2ea:	bd80      	pop	{r7, pc}
 800b2ec:	0801cf10 	.word	0x0801cf10
 800b2f0:	0801cc7c 	.word	0x0801cc7c
 800b2f4:	0801cc9c 	.word	0x0801cc9c
 800b2f8:	0801ccd0 	.word	0x0801ccd0
 800b2fc:	0800c1ad 	.word	0x0800c1ad

0800b300 <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 800b300:	b580      	push	{r7, lr}
 800b302:	b08c      	sub	sp, #48	; 0x30
 800b304:	af00      	add	r7, sp, #0
 800b306:	6078      	str	r0, [r7, #4]
 800b308:	460b      	mov	r3, r1
 800b30a:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	2b00      	cmp	r3, #0
 800b310:	d10a      	bne.n	800b328 <netconn_close_shutdown+0x28>
 800b312:	f240 4247 	movw	r2, #1095	; 0x447
 800b316:	490f      	ldr	r1, [pc, #60]	; (800b354 <netconn_close_shutdown+0x54>)
 800b318:	480f      	ldr	r0, [pc, #60]	; (800b358 <netconn_close_shutdown+0x58>)
 800b31a:	f00f fefb 	bl	801b114 <trace_printf>
 800b31e:	490f      	ldr	r1, [pc, #60]	; (800b35c <netconn_close_shutdown+0x5c>)
 800b320:	480f      	ldr	r0, [pc, #60]	; (800b360 <netconn_close_shutdown+0x60>)
 800b322:	f00f fef7 	bl	801b114 <trace_printf>
 800b326:	e7fe      	b.n	800b326 <netconn_close_shutdown+0x26>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 800b32c:	78fb      	ldrb	r3, [r7, #3]
 800b32e:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800b330:	2329      	movs	r3, #41	; 0x29
 800b332:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 800b334:	f107 030c 	add.w	r3, r7, #12
 800b338:	4619      	mov	r1, r3
 800b33a:	480a      	ldr	r0, [pc, #40]	; (800b364 <netconn_close_shutdown+0x64>)
 800b33c:	f7ff fcbe 	bl	800acbc <netconn_apimsg>
 800b340:	4603      	mov	r3, r0
 800b342:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800b346:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800b34a:	4618      	mov	r0, r3
 800b34c:	3730      	adds	r7, #48	; 0x30
 800b34e:	46bd      	mov	sp, r7
 800b350:	bd80      	pop	{r7, pc}
 800b352:	bf00      	nop
 800b354:	0801cf90 	.word	0x0801cf90
 800b358:	0801cc7c 	.word	0x0801cc7c
 800b35c:	0801cc9c 	.word	0x0801cc9c
 800b360:	0801ccd0 	.word	0x0801ccd0
 800b364:	0800c689 	.word	0x0800c689

0800b368 <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 800b368:	b580      	push	{r7, lr}
 800b36a:	b084      	sub	sp, #16
 800b36c:	af00      	add	r7, sp, #0
 800b36e:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	2b00      	cmp	r3, #0
 800b374:	d101      	bne.n	800b37a <netconn_err+0x12>
    return ERR_OK;
 800b376:	2300      	movs	r3, #0
 800b378:	e00d      	b.n	800b396 <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 800b37a:	f00f fe63 	bl	801b044 <sys_arch_protect>
 800b37e:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	7a1b      	ldrb	r3, [r3, #8]
 800b384:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	2200      	movs	r2, #0
 800b38a:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 800b38c:	68f8      	ldr	r0, [r7, #12]
 800b38e:	f00f fe67 	bl	801b060 <sys_arch_unprotect>
  return err;
 800b392:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800b396:	4618      	mov	r0, r3
 800b398:	3710      	adds	r7, #16
 800b39a:	46bd      	mov	sp, r7
 800b39c:	bd80      	pop	{r7, pc}
	...

0800b3a0 <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 800b3a0:	b580      	push	{r7, lr}
 800b3a2:	b082      	sub	sp, #8
 800b3a4:	af00      	add	r7, sp, #0
 800b3a6:	4603      	mov	r3, r0
 800b3a8:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 800b3aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b3ae:	f113 0f0d 	cmn.w	r3, #13
 800b3b2:	d009      	beq.n	800b3c8 <lwip_netconn_err_to_msg+0x28>
 800b3b4:	f113 0f0d 	cmn.w	r3, #13
 800b3b8:	dc0c      	bgt.n	800b3d4 <lwip_netconn_err_to_msg+0x34>
 800b3ba:	f113 0f0f 	cmn.w	r3, #15
 800b3be:	d007      	beq.n	800b3d0 <lwip_netconn_err_to_msg+0x30>
 800b3c0:	f113 0f0e 	cmn.w	r3, #14
 800b3c4:	d002      	beq.n	800b3cc <lwip_netconn_err_to_msg+0x2c>
 800b3c6:	e005      	b.n	800b3d4 <lwip_netconn_err_to_msg+0x34>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 800b3c8:	4b0c      	ldr	r3, [pc, #48]	; (800b3fc <lwip_netconn_err_to_msg+0x5c>)
 800b3ca:	e012      	b.n	800b3f2 <lwip_netconn_err_to_msg+0x52>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 800b3cc:	4b0c      	ldr	r3, [pc, #48]	; (800b400 <lwip_netconn_err_to_msg+0x60>)
 800b3ce:	e010      	b.n	800b3f2 <lwip_netconn_err_to_msg+0x52>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 800b3d0:	4b0c      	ldr	r3, [pc, #48]	; (800b404 <lwip_netconn_err_to_msg+0x64>)
 800b3d2:	e00e      	b.n	800b3f2 <lwip_netconn_err_to_msg+0x52>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 800b3d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d009      	beq.n	800b3f0 <lwip_netconn_err_to_msg+0x50>
 800b3dc:	227d      	movs	r2, #125	; 0x7d
 800b3de:	490a      	ldr	r1, [pc, #40]	; (800b408 <lwip_netconn_err_to_msg+0x68>)
 800b3e0:	480a      	ldr	r0, [pc, #40]	; (800b40c <lwip_netconn_err_to_msg+0x6c>)
 800b3e2:	f00f fe97 	bl	801b114 <trace_printf>
 800b3e6:	490a      	ldr	r1, [pc, #40]	; (800b410 <lwip_netconn_err_to_msg+0x70>)
 800b3e8:	480a      	ldr	r0, [pc, #40]	; (800b414 <lwip_netconn_err_to_msg+0x74>)
 800b3ea:	f00f fe93 	bl	801b114 <trace_printf>
 800b3ee:	e7fe      	b.n	800b3ee <lwip_netconn_err_to_msg+0x4e>
      return NULL;
 800b3f0:	2300      	movs	r3, #0
  }
}
 800b3f2:	4618      	mov	r0, r3
 800b3f4:	3708      	adds	r7, #8
 800b3f6:	46bd      	mov	sp, r7
 800b3f8:	bd80      	pop	{r7, pc}
 800b3fa:	bf00      	nop
 800b3fc:	0802058c 	.word	0x0802058c
 800b400:	0802058d 	.word	0x0802058d
 800b404:	0802058e 	.word	0x0802058e
 800b408:	0801cfac 	.word	0x0801cfac
 800b40c:	0801cfbc 	.word	0x0801cfbc
 800b410:	0801cfdc 	.word	0x0801cfdc
 800b414:	0801d010 	.word	0x0801d010

0800b418 <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 800b418:	b580      	push	{r7, lr}
 800b41a:	b082      	sub	sp, #8
 800b41c:	af00      	add	r7, sp, #0
 800b41e:	6078      	str	r0, [r7, #4]
 800b420:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 800b422:	683b      	ldr	r3, [r7, #0]
 800b424:	2b00      	cmp	r3, #0
 800b426:	d109      	bne.n	800b43c <lwip_netconn_is_err_msg+0x24>
 800b428:	2285      	movs	r2, #133	; 0x85
 800b42a:	4914      	ldr	r1, [pc, #80]	; (800b47c <lwip_netconn_is_err_msg+0x64>)
 800b42c:	4814      	ldr	r0, [pc, #80]	; (800b480 <lwip_netconn_is_err_msg+0x68>)
 800b42e:	f00f fe71 	bl	801b114 <trace_printf>
 800b432:	4914      	ldr	r1, [pc, #80]	; (800b484 <lwip_netconn_is_err_msg+0x6c>)
 800b434:	4814      	ldr	r0, [pc, #80]	; (800b488 <lwip_netconn_is_err_msg+0x70>)
 800b436:	f00f fe6d 	bl	801b114 <trace_printf>
 800b43a:	e7fe      	b.n	800b43a <lwip_netconn_is_err_msg+0x22>

  if (msg == &netconn_aborted) {
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	4a13      	ldr	r2, [pc, #76]	; (800b48c <lwip_netconn_is_err_msg+0x74>)
 800b440:	4293      	cmp	r3, r2
 800b442:	d104      	bne.n	800b44e <lwip_netconn_is_err_msg+0x36>
    *err = ERR_ABRT;
 800b444:	683b      	ldr	r3, [r7, #0]
 800b446:	22f3      	movs	r2, #243	; 0xf3
 800b448:	701a      	strb	r2, [r3, #0]
    return 1;
 800b44a:	2301      	movs	r3, #1
 800b44c:	e012      	b.n	800b474 <lwip_netconn_is_err_msg+0x5c>
  } else if (msg == &netconn_reset) {
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	4a0f      	ldr	r2, [pc, #60]	; (800b490 <lwip_netconn_is_err_msg+0x78>)
 800b452:	4293      	cmp	r3, r2
 800b454:	d104      	bne.n	800b460 <lwip_netconn_is_err_msg+0x48>
    *err = ERR_RST;
 800b456:	683b      	ldr	r3, [r7, #0]
 800b458:	22f2      	movs	r2, #242	; 0xf2
 800b45a:	701a      	strb	r2, [r3, #0]
    return 1;
 800b45c:	2301      	movs	r3, #1
 800b45e:	e009      	b.n	800b474 <lwip_netconn_is_err_msg+0x5c>
  } else if (msg == &netconn_closed) {
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	4a0c      	ldr	r2, [pc, #48]	; (800b494 <lwip_netconn_is_err_msg+0x7c>)
 800b464:	4293      	cmp	r3, r2
 800b466:	d104      	bne.n	800b472 <lwip_netconn_is_err_msg+0x5a>
    *err = ERR_CLSD;
 800b468:	683b      	ldr	r3, [r7, #0]
 800b46a:	22f1      	movs	r2, #241	; 0xf1
 800b46c:	701a      	strb	r2, [r3, #0]
    return 1;
 800b46e:	2301      	movs	r3, #1
 800b470:	e000      	b.n	800b474 <lwip_netconn_is_err_msg+0x5c>
  }
  return 0;
 800b472:	2300      	movs	r3, #0
}
 800b474:	4618      	mov	r0, r3
 800b476:	3708      	adds	r7, #8
 800b478:	46bd      	mov	sp, r7
 800b47a:	bd80      	pop	{r7, pc}
 800b47c:	0801d014 	.word	0x0801d014
 800b480:	0801cfbc 	.word	0x0801cfbc
 800b484:	0801cfdc 	.word	0x0801cfdc
 800b488:	0801d010 	.word	0x0801d010
 800b48c:	0802058c 	.word	0x0802058c
 800b490:	0802058d 	.word	0x0802058d
 800b494:	0802058e 	.word	0x0802058e

0800b498 <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 800b498:	b580      	push	{r7, lr}
 800b49a:	b088      	sub	sp, #32
 800b49c:	af00      	add	r7, sp, #0
 800b49e:	60f8      	str	r0, [r7, #12]
 800b4a0:	60b9      	str	r1, [r7, #8]
 800b4a2:	607a      	str	r2, [r7, #4]
 800b4a4:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 800b4a6:	68bb      	ldr	r3, [r7, #8]
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	d109      	bne.n	800b4c0 <recv_udp+0x28>
 800b4ac:	22e5      	movs	r2, #229	; 0xe5
 800b4ae:	493a      	ldr	r1, [pc, #232]	; (800b598 <recv_udp+0x100>)
 800b4b0:	483a      	ldr	r0, [pc, #232]	; (800b59c <recv_udp+0x104>)
 800b4b2:	f00f fe2f 	bl	801b114 <trace_printf>
 800b4b6:	493a      	ldr	r1, [pc, #232]	; (800b5a0 <recv_udp+0x108>)
 800b4b8:	483a      	ldr	r0, [pc, #232]	; (800b5a4 <recv_udp+0x10c>)
 800b4ba:	f00f fe2b 	bl	801b114 <trace_printf>
 800b4be:	e7fe      	b.n	800b4be <recv_udp+0x26>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 800b4c0:	68fb      	ldr	r3, [r7, #12]
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	d109      	bne.n	800b4da <recv_udp+0x42>
 800b4c6:	22e6      	movs	r2, #230	; 0xe6
 800b4c8:	4937      	ldr	r1, [pc, #220]	; (800b5a8 <recv_udp+0x110>)
 800b4ca:	4834      	ldr	r0, [pc, #208]	; (800b59c <recv_udp+0x104>)
 800b4cc:	f00f fe22 	bl	801b114 <trace_printf>
 800b4d0:	4933      	ldr	r1, [pc, #204]	; (800b5a0 <recv_udp+0x108>)
 800b4d2:	4834      	ldr	r0, [pc, #208]	; (800b5a4 <recv_udp+0x10c>)
 800b4d4:	f00f fe1e 	bl	801b114 <trace_printf>
 800b4d8:	e7fe      	b.n	800b4d8 <recv_udp+0x40>
  conn = (struct netconn *)arg;
 800b4da:	68fb      	ldr	r3, [r7, #12]
 800b4dc:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 800b4de:	69fb      	ldr	r3, [r7, #28]
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	d103      	bne.n	800b4ec <recv_udp+0x54>
    pbuf_free(p);
 800b4e4:	6878      	ldr	r0, [r7, #4]
 800b4e6:	f003 f943 	bl	800e770 <pbuf_free>
    return;
 800b4ea:	e051      	b.n	800b590 <recv_udp+0xf8>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 800b4ec:	69fb      	ldr	r3, [r7, #28]
 800b4ee:	685b      	ldr	r3, [r3, #4]
 800b4f0:	68ba      	ldr	r2, [r7, #8]
 800b4f2:	429a      	cmp	r2, r3
 800b4f4:	d009      	beq.n	800b50a <recv_udp+0x72>
 800b4f6:	22ee      	movs	r2, #238	; 0xee
 800b4f8:	492c      	ldr	r1, [pc, #176]	; (800b5ac <recv_udp+0x114>)
 800b4fa:	4828      	ldr	r0, [pc, #160]	; (800b59c <recv_udp+0x104>)
 800b4fc:	f00f fe0a 	bl	801b114 <trace_printf>
 800b500:	4927      	ldr	r1, [pc, #156]	; (800b5a0 <recv_udp+0x108>)
 800b502:	4828      	ldr	r0, [pc, #160]	; (800b5a4 <recv_udp+0x10c>)
 800b504:	f00f fe06 	bl	801b114 <trace_printf>
 800b508:	e7fe      	b.n	800b508 <recv_udp+0x70>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800b50a:	69fb      	ldr	r3, [r7, #28]
 800b50c:	3310      	adds	r3, #16
 800b50e:	4618      	mov	r0, r3
 800b510:	f00f fc31 	bl	801ad76 <sys_mbox_valid>
 800b514:	4603      	mov	r3, r0
 800b516:	2b00      	cmp	r3, #0
 800b518:	d103      	bne.n	800b522 <recv_udp+0x8a>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 800b51a:	6878      	ldr	r0, [r7, #4]
 800b51c:	f003 f928 	bl	800e770 <pbuf_free>
    return;
 800b520:	e036      	b.n	800b590 <recv_udp+0xf8>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800b522:	2006      	movs	r0, #6
 800b524:	f002 f9a8 	bl	800d878 <memp_malloc>
 800b528:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 800b52a:	69bb      	ldr	r3, [r7, #24]
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d103      	bne.n	800b538 <recv_udp+0xa0>
    pbuf_free(p);
 800b530:	6878      	ldr	r0, [r7, #4]
 800b532:	f003 f91d 	bl	800e770 <pbuf_free>
    return;
 800b536:	e02b      	b.n	800b590 <recv_udp+0xf8>
  } else {
    buf->p = p;
 800b538:	69bb      	ldr	r3, [r7, #24]
 800b53a:	687a      	ldr	r2, [r7, #4]
 800b53c:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 800b53e:	69bb      	ldr	r3, [r7, #24]
 800b540:	687a      	ldr	r2, [r7, #4]
 800b542:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 800b544:	683b      	ldr	r3, [r7, #0]
 800b546:	2b00      	cmp	r3, #0
 800b548:	d002      	beq.n	800b550 <recv_udp+0xb8>
 800b54a:	683b      	ldr	r3, [r7, #0]
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	e000      	b.n	800b552 <recv_udp+0xba>
 800b550:	2300      	movs	r3, #0
 800b552:	69ba      	ldr	r2, [r7, #24]
 800b554:	6093      	str	r3, [r2, #8]
    buf->port = port;
 800b556:	69bb      	ldr	r3, [r7, #24]
 800b558:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800b55a:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	891b      	ldrh	r3, [r3, #8]
 800b560:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 800b562:	69fb      	ldr	r3, [r7, #28]
 800b564:	3310      	adds	r3, #16
 800b566:	69b9      	ldr	r1, [r7, #24]
 800b568:	4618      	mov	r0, r3
 800b56a:	f00f fb85 	bl	801ac78 <sys_mbox_trypost>
 800b56e:	4603      	mov	r3, r0
 800b570:	2b00      	cmp	r3, #0
 800b572:	d003      	beq.n	800b57c <recv_udp+0xe4>
    netbuf_delete(buf);
 800b574:	69b8      	ldr	r0, [r7, #24]
 800b576:	f001 f91f 	bl	800c7b8 <netbuf_delete>
    return;
 800b57a:	e009      	b.n	800b590 <recv_udp+0xf8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800b57c:	69fb      	ldr	r3, [r7, #28]
 800b57e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b580:	2b00      	cmp	r3, #0
 800b582:	d005      	beq.n	800b590 <recv_udp+0xf8>
 800b584:	69fb      	ldr	r3, [r7, #28]
 800b586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b588:	8afa      	ldrh	r2, [r7, #22]
 800b58a:	2100      	movs	r1, #0
 800b58c:	69f8      	ldr	r0, [r7, #28]
 800b58e:	4798      	blx	r3
  }
}
 800b590:	3720      	adds	r7, #32
 800b592:	46bd      	mov	sp, r7
 800b594:	bd80      	pop	{r7, pc}
 800b596:	bf00      	nop
 800b598:	0801d020 	.word	0x0801d020
 800b59c:	0801cfbc 	.word	0x0801cfbc
 800b5a0:	0801cfdc 	.word	0x0801cfdc
 800b5a4:	0801d010 	.word	0x0801d010
 800b5a8:	0801d044 	.word	0x0801d044
 800b5ac:	0801d064 	.word	0x0801d064

0800b5b0 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800b5b0:	b580      	push	{r7, lr}
 800b5b2:	b088      	sub	sp, #32
 800b5b4:	af00      	add	r7, sp, #0
 800b5b6:	60f8      	str	r0, [r7, #12]
 800b5b8:	60b9      	str	r1, [r7, #8]
 800b5ba:	607a      	str	r2, [r7, #4]
 800b5bc:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 800b5be:	68bb      	ldr	r3, [r7, #8]
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d10a      	bne.n	800b5da <recv_tcp+0x2a>
 800b5c4:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800b5c8:	493d      	ldr	r1, [pc, #244]	; (800b6c0 <recv_tcp+0x110>)
 800b5ca:	483e      	ldr	r0, [pc, #248]	; (800b6c4 <recv_tcp+0x114>)
 800b5cc:	f00f fda2 	bl	801b114 <trace_printf>
 800b5d0:	493d      	ldr	r1, [pc, #244]	; (800b6c8 <recv_tcp+0x118>)
 800b5d2:	483e      	ldr	r0, [pc, #248]	; (800b6cc <recv_tcp+0x11c>)
 800b5d4:	f00f fd9e 	bl	801b114 <trace_printf>
 800b5d8:	e7fe      	b.n	800b5d8 <recv_tcp+0x28>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 800b5da:	68fb      	ldr	r3, [r7, #12]
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d10a      	bne.n	800b5f6 <recv_tcp+0x46>
 800b5e0:	f240 122d 	movw	r2, #301	; 0x12d
 800b5e4:	493a      	ldr	r1, [pc, #232]	; (800b6d0 <recv_tcp+0x120>)
 800b5e6:	4837      	ldr	r0, [pc, #220]	; (800b6c4 <recv_tcp+0x114>)
 800b5e8:	f00f fd94 	bl	801b114 <trace_printf>
 800b5ec:	4936      	ldr	r1, [pc, #216]	; (800b6c8 <recv_tcp+0x118>)
 800b5ee:	4837      	ldr	r0, [pc, #220]	; (800b6cc <recv_tcp+0x11c>)
 800b5f0:	f00f fd90 	bl	801b114 <trace_printf>
 800b5f4:	e7fe      	b.n	800b5f4 <recv_tcp+0x44>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 800b5f6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d00a      	beq.n	800b614 <recv_tcp+0x64>
 800b5fe:	f44f 7297 	mov.w	r2, #302	; 0x12e
 800b602:	4934      	ldr	r1, [pc, #208]	; (800b6d4 <recv_tcp+0x124>)
 800b604:	482f      	ldr	r0, [pc, #188]	; (800b6c4 <recv_tcp+0x114>)
 800b606:	f00f fd85 	bl	801b114 <trace_printf>
 800b60a:	492f      	ldr	r1, [pc, #188]	; (800b6c8 <recv_tcp+0x118>)
 800b60c:	482f      	ldr	r0, [pc, #188]	; (800b6cc <recv_tcp+0x11c>)
 800b60e:	f00f fd81 	bl	801b114 <trace_printf>
 800b612:	e7fe      	b.n	800b612 <recv_tcp+0x62>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 800b614:	68fb      	ldr	r3, [r7, #12]
 800b616:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 800b618:	697b      	ldr	r3, [r7, #20]
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	d102      	bne.n	800b624 <recv_tcp+0x74>
    return ERR_VAL;
 800b61e:	f06f 0305 	mvn.w	r3, #5
 800b622:	e049      	b.n	800b6b8 <recv_tcp+0x108>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 800b624:	697b      	ldr	r3, [r7, #20]
 800b626:	685b      	ldr	r3, [r3, #4]
 800b628:	68ba      	ldr	r2, [r7, #8]
 800b62a:	429a      	cmp	r2, r3
 800b62c:	d00a      	beq.n	800b644 <recv_tcp+0x94>
 800b62e:	f240 1235 	movw	r2, #309	; 0x135
 800b632:	4929      	ldr	r1, [pc, #164]	; (800b6d8 <recv_tcp+0x128>)
 800b634:	4823      	ldr	r0, [pc, #140]	; (800b6c4 <recv_tcp+0x114>)
 800b636:	f00f fd6d 	bl	801b114 <trace_printf>
 800b63a:	4923      	ldr	r1, [pc, #140]	; (800b6c8 <recv_tcp+0x118>)
 800b63c:	4823      	ldr	r0, [pc, #140]	; (800b6cc <recv_tcp+0x11c>)
 800b63e:	f00f fd69 	bl	801b114 <trace_printf>
 800b642:	e7fe      	b.n	800b642 <recv_tcp+0x92>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800b644:	697b      	ldr	r3, [r7, #20]
 800b646:	3310      	adds	r3, #16
 800b648:	4618      	mov	r0, r3
 800b64a:	f00f fb94 	bl	801ad76 <sys_mbox_valid>
 800b64e:	4603      	mov	r3, r0
 800b650:	2b00      	cmp	r3, #0
 800b652:	d10d      	bne.n	800b670 <recv_tcp+0xc0>
    /* recvmbox already deleted */
    if (p != NULL) {
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	2b00      	cmp	r3, #0
 800b658:	d008      	beq.n	800b66c <recv_tcp+0xbc>
      tcp_recved(pcb, p->tot_len);
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	891b      	ldrh	r3, [r3, #8]
 800b65e:	4619      	mov	r1, r3
 800b660:	68b8      	ldr	r0, [r7, #8]
 800b662:	f004 f817 	bl	800f694 <tcp_recved>
      pbuf_free(p);
 800b666:	6878      	ldr	r0, [r7, #4]
 800b668:	f003 f882 	bl	800e770 <pbuf_free>
    }
    return ERR_OK;
 800b66c:	2300      	movs	r3, #0
 800b66e:	e023      	b.n	800b6b8 <recv_tcp+0x108>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	2b00      	cmp	r3, #0
 800b674:	d005      	beq.n	800b682 <recv_tcp+0xd2>
    msg = p;
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	891b      	ldrh	r3, [r3, #8]
 800b67e:	83fb      	strh	r3, [r7, #30]
 800b680:	e003      	b.n	800b68a <recv_tcp+0xda>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 800b682:	4b16      	ldr	r3, [pc, #88]	; (800b6dc <recv_tcp+0x12c>)
 800b684:	61bb      	str	r3, [r7, #24]
    len = 0;
 800b686:	2300      	movs	r3, #0
 800b688:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 800b68a:	697b      	ldr	r3, [r7, #20]
 800b68c:	3310      	adds	r3, #16
 800b68e:	69b9      	ldr	r1, [r7, #24]
 800b690:	4618      	mov	r0, r3
 800b692:	f00f faf1 	bl	801ac78 <sys_mbox_trypost>
 800b696:	4603      	mov	r3, r0
 800b698:	2b00      	cmp	r3, #0
 800b69a:	d002      	beq.n	800b6a2 <recv_tcp+0xf2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 800b69c:	f04f 33ff 	mov.w	r3, #4294967295
 800b6a0:	e00a      	b.n	800b6b8 <recv_tcp+0x108>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800b6a2:	697b      	ldr	r3, [r7, #20]
 800b6a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d005      	beq.n	800b6b6 <recv_tcp+0x106>
 800b6aa:	697b      	ldr	r3, [r7, #20]
 800b6ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6ae:	8bfa      	ldrh	r2, [r7, #30]
 800b6b0:	2100      	movs	r1, #0
 800b6b2:	6978      	ldr	r0, [r7, #20]
 800b6b4:	4798      	blx	r3
  }

  return ERR_OK;
 800b6b6:	2300      	movs	r3, #0
}
 800b6b8:	4618      	mov	r0, r3
 800b6ba:	3720      	adds	r7, #32
 800b6bc:	46bd      	mov	sp, r7
 800b6be:	bd80      	pop	{r7, pc}
 800b6c0:	0801d084 	.word	0x0801d084
 800b6c4:	0801cfbc 	.word	0x0801cfbc
 800b6c8:	0801cfdc 	.word	0x0801cfdc
 800b6cc:	0801d010 	.word	0x0801d010
 800b6d0:	0801d0a8 	.word	0x0801d0a8
 800b6d4:	0801d0c8 	.word	0x0801d0c8
 800b6d8:	0801d0e0 	.word	0x0801d0e0
 800b6dc:	0802058e 	.word	0x0802058e

0800b6e0 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 800b6e0:	b580      	push	{r7, lr}
 800b6e2:	b084      	sub	sp, #16
 800b6e4:	af00      	add	r7, sp, #0
 800b6e6:	6078      	str	r0, [r7, #4]
 800b6e8:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800b6ee:	68fb      	ldr	r3, [r7, #12]
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d10a      	bne.n	800b70a <poll_tcp+0x2a>
 800b6f4:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 800b6f8:	492a      	ldr	r1, [pc, #168]	; (800b7a4 <poll_tcp+0xc4>)
 800b6fa:	482b      	ldr	r0, [pc, #172]	; (800b7a8 <poll_tcp+0xc8>)
 800b6fc:	f00f fd0a 	bl	801b114 <trace_printf>
 800b700:	492a      	ldr	r1, [pc, #168]	; (800b7ac <poll_tcp+0xcc>)
 800b702:	482b      	ldr	r0, [pc, #172]	; (800b7b0 <poll_tcp+0xd0>)
 800b704:	f00f fd06 	bl	801b114 <trace_printf>
 800b708:	e7fe      	b.n	800b708 <poll_tcp+0x28>

  if (conn->state == NETCONN_WRITE) {
 800b70a:	68fb      	ldr	r3, [r7, #12]
 800b70c:	785b      	ldrb	r3, [r3, #1]
 800b70e:	2b01      	cmp	r3, #1
 800b710:	d104      	bne.n	800b71c <poll_tcp+0x3c>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800b712:	2101      	movs	r1, #1
 800b714:	68f8      	ldr	r0, [r7, #12]
 800b716:	f000 fdcb 	bl	800c2b0 <lwip_netconn_do_writemore>
 800b71a:	e016      	b.n	800b74a <poll_tcp+0x6a>
  } else if (conn->state == NETCONN_CLOSE) {
 800b71c:	68fb      	ldr	r3, [r7, #12]
 800b71e:	785b      	ldrb	r3, [r3, #1]
 800b720:	2b04      	cmp	r3, #4
 800b722:	d112      	bne.n	800b74a <poll_tcp+0x6a>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 800b724:	68fb      	ldr	r3, [r7, #12]
 800b726:	6a1b      	ldr	r3, [r3, #32]
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d00a      	beq.n	800b742 <poll_tcp+0x62>
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	6a1b      	ldr	r3, [r3, #32]
 800b730:	7a5b      	ldrb	r3, [r3, #9]
 800b732:	2b00      	cmp	r3, #0
 800b734:	d005      	beq.n	800b742 <poll_tcp+0x62>
      conn->current_msg->msg.sd.polls_left--;
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	6a1b      	ldr	r3, [r3, #32]
 800b73a:	7a5a      	ldrb	r2, [r3, #9]
 800b73c:	3a01      	subs	r2, #1
 800b73e:	b2d2      	uxtb	r2, r2
 800b740:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800b742:	2101      	movs	r1, #1
 800b744:	68f8      	ldr	r0, [r7, #12]
 800b746:	f000 fb6d 	bl	800be24 <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	7f1b      	ldrb	r3, [r3, #28]
 800b74e:	f003 0310 	and.w	r3, r3, #16
 800b752:	2b00      	cmp	r3, #0
 800b754:	d021      	beq.n	800b79a <poll_tcp+0xba>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	685b      	ldr	r3, [r3, #4]
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d01d      	beq.n	800b79a <poll_tcp+0xba>
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	685b      	ldr	r3, [r3, #4]
 800b762:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800b766:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800b76a:	d316      	bcc.n	800b79a <poll_tcp+0xba>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	685b      	ldr	r3, [r3, #4]
 800b770:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800b774:	2b04      	cmp	r3, #4
 800b776:	d810      	bhi.n	800b79a <poll_tcp+0xba>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	7f1b      	ldrb	r3, [r3, #28]
 800b77c:	f023 0310 	bic.w	r3, r3, #16
 800b780:	b2da      	uxtb	r2, r3
 800b782:	68fb      	ldr	r3, [r7, #12]
 800b784:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800b786:	68fb      	ldr	r3, [r7, #12]
 800b788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	d005      	beq.n	800b79a <poll_tcp+0xba>
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b792:	2200      	movs	r2, #0
 800b794:	2102      	movs	r1, #2
 800b796:	68f8      	ldr	r0, [r7, #12]
 800b798:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800b79a:	2300      	movs	r3, #0
}
 800b79c:	4618      	mov	r0, r3
 800b79e:	3710      	adds	r7, #16
 800b7a0:	46bd      	mov	sp, r7
 800b7a2:	bd80      	pop	{r7, pc}
 800b7a4:	0801d100 	.word	0x0801d100
 800b7a8:	0801cfbc 	.word	0x0801cfbc
 800b7ac:	0801cfdc 	.word	0x0801cfdc
 800b7b0:	0801d010 	.word	0x0801d010

0800b7b4 <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 800b7b4:	b580      	push	{r7, lr}
 800b7b6:	b086      	sub	sp, #24
 800b7b8:	af00      	add	r7, sp, #0
 800b7ba:	60f8      	str	r0, [r7, #12]
 800b7bc:	60b9      	str	r1, [r7, #8]
 800b7be:	4613      	mov	r3, r2
 800b7c0:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 800b7c2:	68fb      	ldr	r3, [r7, #12]
 800b7c4:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800b7c6:	697b      	ldr	r3, [r7, #20]
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	d10a      	bne.n	800b7e2 <sent_tcp+0x2e>
 800b7cc:	f240 1293 	movw	r2, #403	; 0x193
 800b7d0:	4921      	ldr	r1, [pc, #132]	; (800b858 <sent_tcp+0xa4>)
 800b7d2:	4822      	ldr	r0, [pc, #136]	; (800b85c <sent_tcp+0xa8>)
 800b7d4:	f00f fc9e 	bl	801b114 <trace_printf>
 800b7d8:	4921      	ldr	r1, [pc, #132]	; (800b860 <sent_tcp+0xac>)
 800b7da:	4822      	ldr	r0, [pc, #136]	; (800b864 <sent_tcp+0xb0>)
 800b7dc:	f00f fc9a 	bl	801b114 <trace_printf>
 800b7e0:	e7fe      	b.n	800b7e0 <sent_tcp+0x2c>

  if (conn) {
 800b7e2:	697b      	ldr	r3, [r7, #20]
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d032      	beq.n	800b84e <sent_tcp+0x9a>
    if (conn->state == NETCONN_WRITE) {
 800b7e8:	697b      	ldr	r3, [r7, #20]
 800b7ea:	785b      	ldrb	r3, [r3, #1]
 800b7ec:	2b01      	cmp	r3, #1
 800b7ee:	d104      	bne.n	800b7fa <sent_tcp+0x46>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800b7f0:	2101      	movs	r1, #1
 800b7f2:	6978      	ldr	r0, [r7, #20]
 800b7f4:	f000 fd5c 	bl	800c2b0 <lwip_netconn_do_writemore>
 800b7f8:	e007      	b.n	800b80a <sent_tcp+0x56>
    } else if (conn->state == NETCONN_CLOSE) {
 800b7fa:	697b      	ldr	r3, [r7, #20]
 800b7fc:	785b      	ldrb	r3, [r3, #1]
 800b7fe:	2b04      	cmp	r3, #4
 800b800:	d103      	bne.n	800b80a <sent_tcp+0x56>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800b802:	2101      	movs	r1, #1
 800b804:	6978      	ldr	r0, [r7, #20]
 800b806:	f000 fb0d 	bl	800be24 <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800b80a:	697b      	ldr	r3, [r7, #20]
 800b80c:	685b      	ldr	r3, [r3, #4]
 800b80e:	2b00      	cmp	r3, #0
 800b810:	d01d      	beq.n	800b84e <sent_tcp+0x9a>
 800b812:	697b      	ldr	r3, [r7, #20]
 800b814:	685b      	ldr	r3, [r3, #4]
 800b816:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800b81a:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800b81e:	d316      	bcc.n	800b84e <sent_tcp+0x9a>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800b820:	697b      	ldr	r3, [r7, #20]
 800b822:	685b      	ldr	r3, [r3, #4]
 800b824:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800b828:	2b04      	cmp	r3, #4
 800b82a:	d810      	bhi.n	800b84e <sent_tcp+0x9a>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800b82c:	697b      	ldr	r3, [r7, #20]
 800b82e:	7f1b      	ldrb	r3, [r3, #28]
 800b830:	f023 0310 	bic.w	r3, r3, #16
 800b834:	b2da      	uxtb	r2, r3
 800b836:	697b      	ldr	r3, [r7, #20]
 800b838:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 800b83a:	697b      	ldr	r3, [r7, #20]
 800b83c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b83e:	2b00      	cmp	r3, #0
 800b840:	d005      	beq.n	800b84e <sent_tcp+0x9a>
 800b842:	697b      	ldr	r3, [r7, #20]
 800b844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b846:	88fa      	ldrh	r2, [r7, #6]
 800b848:	2102      	movs	r1, #2
 800b84a:	6978      	ldr	r0, [r7, #20]
 800b84c:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800b84e:	2300      	movs	r3, #0
}
 800b850:	4618      	mov	r0, r3
 800b852:	3718      	adds	r7, #24
 800b854:	46bd      	mov	sp, r7
 800b856:	bd80      	pop	{r7, pc}
 800b858:	0801d100 	.word	0x0801d100
 800b85c:	0801cfbc 	.word	0x0801cfbc
 800b860:	0801cfdc 	.word	0x0801cfdc
 800b864:	0801d010 	.word	0x0801d010

0800b868 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 800b868:	b580      	push	{r7, lr}
 800b86a:	b088      	sub	sp, #32
 800b86c:	af00      	add	r7, sp, #0
 800b86e:	6078      	str	r0, [r7, #4]
 800b870:	460b      	mov	r3, r1
 800b872:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800b878:	69fb      	ldr	r3, [r7, #28]
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d10a      	bne.n	800b894 <err_tcp+0x2c>
 800b87e:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 800b882:	4965      	ldr	r1, [pc, #404]	; (800ba18 <err_tcp+0x1b0>)
 800b884:	4865      	ldr	r0, [pc, #404]	; (800ba1c <err_tcp+0x1b4>)
 800b886:	f00f fc45 	bl	801b114 <trace_printf>
 800b88a:	4965      	ldr	r1, [pc, #404]	; (800ba20 <err_tcp+0x1b8>)
 800b88c:	4865      	ldr	r0, [pc, #404]	; (800ba24 <err_tcp+0x1bc>)
 800b88e:	f00f fc41 	bl	801b114 <trace_printf>
 800b892:	e7fe      	b.n	800b892 <err_tcp+0x2a>

  SYS_ARCH_PROTECT(lev);
 800b894:	f00f fbd6 	bl	801b044 <sys_arch_protect>
 800b898:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 800b89a:	69fb      	ldr	r3, [r7, #28]
 800b89c:	2200      	movs	r2, #0
 800b89e:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 800b8a0:	69fb      	ldr	r3, [r7, #28]
 800b8a2:	78fa      	ldrb	r2, [r7, #3]
 800b8a4:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 800b8a6:	69fb      	ldr	r3, [r7, #28]
 800b8a8:	7f1b      	ldrb	r3, [r3, #28]
 800b8aa:	f043 0301 	orr.w	r3, r3, #1
 800b8ae:	b2da      	uxtb	r2, r3
 800b8b0:	69fb      	ldr	r3, [r7, #28]
 800b8b2:	771a      	strb	r2, [r3, #28]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 800b8b4:	69fb      	ldr	r3, [r7, #28]
 800b8b6:	785b      	ldrb	r3, [r3, #1]
 800b8b8:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 800b8ba:	69fb      	ldr	r3, [r7, #28]
 800b8bc:	2200      	movs	r2, #0
 800b8be:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 800b8c0:	69b8      	ldr	r0, [r7, #24]
 800b8c2:	f00f fbcd 	bl	801b060 <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800b8c6:	69fb      	ldr	r3, [r7, #28]
 800b8c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d005      	beq.n	800b8da <err_tcp+0x72>
 800b8ce:	69fb      	ldr	r3, [r7, #28]
 800b8d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8d2:	2200      	movs	r2, #0
 800b8d4:	2104      	movs	r1, #4
 800b8d6:	69f8      	ldr	r0, [r7, #28]
 800b8d8:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800b8da:	69fb      	ldr	r3, [r7, #28]
 800b8dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d005      	beq.n	800b8ee <err_tcp+0x86>
 800b8e2:	69fb      	ldr	r3, [r7, #28]
 800b8e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8e6:	2200      	movs	r2, #0
 800b8e8:	2100      	movs	r1, #0
 800b8ea:	69f8      	ldr	r0, [r7, #28]
 800b8ec:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800b8ee:	69fb      	ldr	r3, [r7, #28]
 800b8f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	d005      	beq.n	800b902 <err_tcp+0x9a>
 800b8f6:	69fb      	ldr	r3, [r7, #28]
 800b8f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8fa:	2200      	movs	r2, #0
 800b8fc:	2102      	movs	r1, #2
 800b8fe:	69f8      	ldr	r0, [r7, #28]
 800b900:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 800b902:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b906:	4618      	mov	r0, r3
 800b908:	f7ff fd4a 	bl	800b3a0 <lwip_netconn_err_to_msg>
 800b90c:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800b90e:	69fb      	ldr	r3, [r7, #28]
 800b910:	3310      	adds	r3, #16
 800b912:	4618      	mov	r0, r3
 800b914:	f00f fa2f 	bl	801ad76 <sys_mbox_valid>
 800b918:	4603      	mov	r3, r0
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	d005      	beq.n	800b92a <err_tcp+0xc2>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 800b91e:	69fb      	ldr	r3, [r7, #28]
 800b920:	3310      	adds	r3, #16
 800b922:	6939      	ldr	r1, [r7, #16]
 800b924:	4618      	mov	r0, r3
 800b926:	f00f f9a7 	bl	801ac78 <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800b92a:	69fb      	ldr	r3, [r7, #28]
 800b92c:	3314      	adds	r3, #20
 800b92e:	4618      	mov	r0, r3
 800b930:	f00f fa21 	bl	801ad76 <sys_mbox_valid>
 800b934:	4603      	mov	r3, r0
 800b936:	2b00      	cmp	r3, #0
 800b938:	d005      	beq.n	800b946 <err_tcp+0xde>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 800b93a:	69fb      	ldr	r3, [r7, #28]
 800b93c:	3314      	adds	r3, #20
 800b93e:	6939      	ldr	r1, [r7, #16]
 800b940:	4618      	mov	r0, r3
 800b942:	f00f f999 	bl	801ac78 <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 800b946:	7dfb      	ldrb	r3, [r7, #23]
 800b948:	2b01      	cmp	r3, #1
 800b94a:	d005      	beq.n	800b958 <err_tcp+0xf0>
 800b94c:	7dfb      	ldrb	r3, [r7, #23]
 800b94e:	2b04      	cmp	r3, #4
 800b950:	d002      	beq.n	800b958 <err_tcp+0xf0>
 800b952:	7dfb      	ldrb	r3, [r7, #23]
 800b954:	2b03      	cmp	r3, #3
 800b956:	d14b      	bne.n	800b9f0 <err_tcp+0x188>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 800b958:	69fb      	ldr	r3, [r7, #28]
 800b95a:	7f1b      	ldrb	r3, [r3, #28]
 800b95c:	f003 0304 	and.w	r3, r3, #4
 800b960:	2b00      	cmp	r3, #0
 800b962:	bf14      	ite	ne
 800b964:	2301      	movne	r3, #1
 800b966:	2300      	moveq	r3, #0
 800b968:	b2db      	uxtb	r3, r3
 800b96a:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 800b96c:	69fb      	ldr	r3, [r7, #28]
 800b96e:	7f1b      	ldrb	r3, [r3, #28]
 800b970:	f023 0304 	bic.w	r3, r3, #4
 800b974:	b2da      	uxtb	r2, r3
 800b976:	69fb      	ldr	r3, [r7, #28]
 800b978:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 800b97a:	68fb      	ldr	r3, [r7, #12]
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d146      	bne.n	800ba0e <err_tcp+0x1a6>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800b980:	69fb      	ldr	r3, [r7, #28]
 800b982:	6a1b      	ldr	r3, [r3, #32]
 800b984:	2b00      	cmp	r3, #0
 800b986:	d10a      	bne.n	800b99e <err_tcp+0x136>
 800b988:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800b98c:	4926      	ldr	r1, [pc, #152]	; (800ba28 <err_tcp+0x1c0>)
 800b98e:	4823      	ldr	r0, [pc, #140]	; (800ba1c <err_tcp+0x1b4>)
 800b990:	f00f fbc0 	bl	801b114 <trace_printf>
 800b994:	4922      	ldr	r1, [pc, #136]	; (800ba20 <err_tcp+0x1b8>)
 800b996:	4823      	ldr	r0, [pc, #140]	; (800ba24 <err_tcp+0x1bc>)
 800b998:	f00f fbbc 	bl	801b114 <trace_printf>
 800b99c:	e7fe      	b.n	800b99c <err_tcp+0x134>
      if (old_state == NETCONN_CLOSE) {
 800b99e:	7dfb      	ldrb	r3, [r7, #23]
 800b9a0:	2b04      	cmp	r3, #4
 800b9a2:	d104      	bne.n	800b9ae <err_tcp+0x146>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 800b9a4:	69fb      	ldr	r3, [r7, #28]
 800b9a6:	6a1b      	ldr	r3, [r3, #32]
 800b9a8:	2200      	movs	r2, #0
 800b9aa:	711a      	strb	r2, [r3, #4]
 800b9ac:	e003      	b.n	800b9b6 <err_tcp+0x14e>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 800b9ae:	69fb      	ldr	r3, [r7, #28]
 800b9b0:	6a1b      	ldr	r3, [r3, #32]
 800b9b2:	78fa      	ldrb	r2, [r7, #3]
 800b9b4:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800b9b6:	69fb      	ldr	r3, [r7, #28]
 800b9b8:	6a1b      	ldr	r3, [r3, #32]
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	330c      	adds	r3, #12
 800b9be:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 800b9c0:	68b8      	ldr	r0, [r7, #8]
 800b9c2:	f00f fa95 	bl	801aef0 <sys_sem_valid>
 800b9c6:	4603      	mov	r3, r0
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d10a      	bne.n	800b9e2 <err_tcp+0x17a>
 800b9cc:	f240 12ef 	movw	r2, #495	; 0x1ef
 800b9d0:	4916      	ldr	r1, [pc, #88]	; (800ba2c <err_tcp+0x1c4>)
 800b9d2:	4812      	ldr	r0, [pc, #72]	; (800ba1c <err_tcp+0x1b4>)
 800b9d4:	f00f fb9e 	bl	801b114 <trace_printf>
 800b9d8:	4911      	ldr	r1, [pc, #68]	; (800ba20 <err_tcp+0x1b8>)
 800b9da:	4812      	ldr	r0, [pc, #72]	; (800ba24 <err_tcp+0x1bc>)
 800b9dc:	f00f fb9a 	bl	801b114 <trace_printf>
 800b9e0:	e7fe      	b.n	800b9e0 <err_tcp+0x178>
      conn->current_msg = NULL;
 800b9e2:	69fb      	ldr	r3, [r7, #28]
 800b9e4:	2200      	movs	r2, #0
 800b9e6:	621a      	str	r2, [r3, #32]
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 800b9e8:	68b8      	ldr	r0, [r7, #8]
 800b9ea:	f00f fa5c 	bl	801aea6 <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 800b9ee:	e00e      	b.n	800ba0e <err_tcp+0x1a6>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 800b9f0:	69fb      	ldr	r3, [r7, #28]
 800b9f2:	6a1b      	ldr	r3, [r3, #32]
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d00b      	beq.n	800ba10 <err_tcp+0x1a8>
 800b9f8:	f240 12f7 	movw	r2, #503	; 0x1f7
 800b9fc:	490c      	ldr	r1, [pc, #48]	; (800ba30 <err_tcp+0x1c8>)
 800b9fe:	4807      	ldr	r0, [pc, #28]	; (800ba1c <err_tcp+0x1b4>)
 800ba00:	f00f fb88 	bl	801b114 <trace_printf>
 800ba04:	4906      	ldr	r1, [pc, #24]	; (800ba20 <err_tcp+0x1b8>)
 800ba06:	4807      	ldr	r0, [pc, #28]	; (800ba24 <err_tcp+0x1bc>)
 800ba08:	f00f fb84 	bl	801b114 <trace_printf>
 800ba0c:	e7fe      	b.n	800ba0c <err_tcp+0x1a4>
      (old_state == NETCONN_CONNECT)) {
 800ba0e:	bf00      	nop
  }
}
 800ba10:	bf00      	nop
 800ba12:	3720      	adds	r7, #32
 800ba14:	46bd      	mov	sp, r7
 800ba16:	bd80      	pop	{r7, pc}
 800ba18:	0801d100 	.word	0x0801d100
 800ba1c:	0801cfbc 	.word	0x0801cfbc
 800ba20:	0801cfdc 	.word	0x0801cfdc
 800ba24:	0801d010 	.word	0x0801d010
 800ba28:	0801d110 	.word	0x0801d110
 800ba2c:	0801d12c 	.word	0x0801d12c
 800ba30:	0801d148 	.word	0x0801d148

0800ba34 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 800ba34:	b580      	push	{r7, lr}
 800ba36:	b084      	sub	sp, #16
 800ba38:	af00      	add	r7, sp, #0
 800ba3a:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	685b      	ldr	r3, [r3, #4]
 800ba40:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 800ba42:	6879      	ldr	r1, [r7, #4]
 800ba44:	68f8      	ldr	r0, [r7, #12]
 800ba46:	f004 fd5d 	bl	8010504 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 800ba4a:	490a      	ldr	r1, [pc, #40]	; (800ba74 <setup_tcp+0x40>)
 800ba4c:	68f8      	ldr	r0, [r7, #12]
 800ba4e:	f004 fd6b 	bl	8010528 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 800ba52:	4909      	ldr	r1, [pc, #36]	; (800ba78 <setup_tcp+0x44>)
 800ba54:	68f8      	ldr	r0, [r7, #12]
 800ba56:	f004 fd8f 	bl	8010578 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 800ba5a:	2202      	movs	r2, #2
 800ba5c:	4907      	ldr	r1, [pc, #28]	; (800ba7c <setup_tcp+0x48>)
 800ba5e:	68f8      	ldr	r0, [r7, #12]
 800ba60:	f004 fdf2 	bl	8010648 <tcp_poll>
  tcp_err(pcb, err_tcp);
 800ba64:	4906      	ldr	r1, [pc, #24]	; (800ba80 <setup_tcp+0x4c>)
 800ba66:	68f8      	ldr	r0, [r7, #12]
 800ba68:	f004 fdae 	bl	80105c8 <tcp_err>
}
 800ba6c:	bf00      	nop
 800ba6e:	3710      	adds	r7, #16
 800ba70:	46bd      	mov	sp, r7
 800ba72:	bd80      	pop	{r7, pc}
 800ba74:	0800b5b1 	.word	0x0800b5b1
 800ba78:	0800b7b5 	.word	0x0800b7b5
 800ba7c:	0800b6e1 	.word	0x0800b6e1
 800ba80:	0800b869 	.word	0x0800b869

0800ba84 <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 800ba84:	b590      	push	{r4, r7, lr}
 800ba86:	b085      	sub	sp, #20
 800ba88:	af00      	add	r7, sp, #0
 800ba8a:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 800ba8c:	2300      	movs	r3, #0
 800ba8e:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	685b      	ldr	r3, [r3, #4]
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d00a      	beq.n	800bab0 <pcb_new+0x2c>
 800ba9a:	f240 2265 	movw	r2, #613	; 0x265
 800ba9e:	492c      	ldr	r1, [pc, #176]	; (800bb50 <pcb_new+0xcc>)
 800baa0:	482c      	ldr	r0, [pc, #176]	; (800bb54 <pcb_new+0xd0>)
 800baa2:	f00f fb37 	bl	801b114 <trace_printf>
 800baa6:	492c      	ldr	r1, [pc, #176]	; (800bb58 <pcb_new+0xd4>)
 800baa8:	482c      	ldr	r0, [pc, #176]	; (800bb5c <pcb_new+0xd8>)
 800baaa:	f00f fb33 	bl	801b114 <trace_printf>
 800baae:	e7fe      	b.n	800baae <pcb_new+0x2a>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	781b      	ldrb	r3, [r3, #0]
 800bab6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800baba:	2b10      	cmp	r3, #16
 800babc:	d022      	beq.n	800bb04 <pcb_new+0x80>
 800babe:	2b20      	cmp	r3, #32
 800bac0:	d133      	bne.n	800bb2a <pcb_new+0xa6>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	681c      	ldr	r4, [r3, #0]
 800bac6:	7bfb      	ldrb	r3, [r7, #15]
 800bac8:	4618      	mov	r0, r3
 800baca:	f00a fc0a 	bl	80162e2 <udp_new_ip_type>
 800bace:	4603      	mov	r3, r0
 800bad0:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	685b      	ldr	r3, [r3, #4]
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d02a      	beq.n	800bb32 <pcb_new+0xae>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	781b      	ldrb	r3, [r3, #0]
 800bae2:	2b22      	cmp	r3, #34	; 0x22
 800bae4:	d104      	bne.n	800baf0 <pcb_new+0x6c>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	685b      	ldr	r3, [r3, #4]
 800baec:	2201      	movs	r2, #1
 800baee:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	6858      	ldr	r0, [r3, #4]
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	461a      	mov	r2, r3
 800bafc:	4918      	ldr	r1, [pc, #96]	; (800bb60 <pcb_new+0xdc>)
 800bafe:	f00a fb6d 	bl	80161dc <udp_recv>
      }
      break;
 800bb02:	e016      	b.n	800bb32 <pcb_new+0xae>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	681c      	ldr	r4, [r3, #0]
 800bb08:	7bfb      	ldrb	r3, [r7, #15]
 800bb0a:	4618      	mov	r0, r3
 800bb0c:	f004 fcec 	bl	80104e8 <tcp_new_ip_type>
 800bb10:	4603      	mov	r3, r0
 800bb12:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	685b      	ldr	r3, [r3, #4]
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	d00b      	beq.n	800bb36 <pcb_new+0xb2>
        setup_tcp(msg->conn);
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	681b      	ldr	r3, [r3, #0]
 800bb22:	4618      	mov	r0, r3
 800bb24:	f7ff ff86 	bl	800ba34 <setup_tcp>
      }
      break;
 800bb28:	e005      	b.n	800bb36 <pcb_new+0xb2>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	22fa      	movs	r2, #250	; 0xfa
 800bb2e:	711a      	strb	r2, [r3, #4]
      return;
 800bb30:	e00a      	b.n	800bb48 <pcb_new+0xc4>
      break;
 800bb32:	bf00      	nop
 800bb34:	e000      	b.n	800bb38 <pcb_new+0xb4>
      break;
 800bb36:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	685b      	ldr	r3, [r3, #4]
 800bb3e:	2b00      	cmp	r3, #0
 800bb40:	d102      	bne.n	800bb48 <pcb_new+0xc4>
    msg->err = ERR_MEM;
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	22ff      	movs	r2, #255	; 0xff
 800bb46:	711a      	strb	r2, [r3, #4]
  }
}
 800bb48:	3714      	adds	r7, #20
 800bb4a:	46bd      	mov	sp, r7
 800bb4c:	bd90      	pop	{r4, r7, pc}
 800bb4e:	bf00      	nop
 800bb50:	0801d18c 	.word	0x0801d18c
 800bb54:	0801cfbc 	.word	0x0801cfbc
 800bb58:	0801cfdc 	.word	0x0801cfdc
 800bb5c:	0801d010 	.word	0x0801d010
 800bb60:	0800b499 	.word	0x0800b499

0800bb64 <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 800bb64:	b580      	push	{r7, lr}
 800bb66:	b084      	sub	sp, #16
 800bb68:	af00      	add	r7, sp, #0
 800bb6a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	2200      	movs	r2, #0
 800bb74:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 800bb76:	68fb      	ldr	r3, [r7, #12]
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	685b      	ldr	r3, [r3, #4]
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d102      	bne.n	800bb86 <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 800bb80:	68f8      	ldr	r0, [r7, #12]
 800bb82:	f7ff ff7f 	bl	800ba84 <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 800bb86:	bf00      	nop
 800bb88:	3710      	adds	r7, #16
 800bb8a:	46bd      	mov	sp, r7
 800bb8c:	bd80      	pop	{r7, pc}
	...

0800bb90 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 800bb90:	b580      	push	{r7, lr}
 800bb92:	b086      	sub	sp, #24
 800bb94:	af00      	add	r7, sp, #0
 800bb96:	4603      	mov	r3, r0
 800bb98:	6039      	str	r1, [r7, #0]
 800bb9a:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 800bb9c:	2300      	movs	r3, #0
 800bb9e:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 800bba0:	2007      	movs	r0, #7
 800bba2:	f001 fe69 	bl	800d878 <memp_malloc>
 800bba6:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 800bba8:	68fb      	ldr	r3, [r7, #12]
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	d101      	bne.n	800bbb2 <netconn_alloc+0x22>
    return NULL;
 800bbae:	2300      	movs	r3, #0
 800bbb0:	e055      	b.n	800bc5e <netconn_alloc+0xce>
  }

  conn->pending_err = ERR_OK;
 800bbb2:	68fb      	ldr	r3, [r7, #12]
 800bbb4:	2200      	movs	r2, #0
 800bbb6:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	79fa      	ldrb	r2, [r7, #7]
 800bbbc:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 800bbbe:	68fb      	ldr	r3, [r7, #12]
 800bbc0:	2200      	movs	r2, #0
 800bbc2:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 800bbc4:	79fb      	ldrb	r3, [r7, #7]
 800bbc6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bbca:	2b10      	cmp	r3, #16
 800bbcc:	d004      	beq.n	800bbd8 <netconn_alloc+0x48>
 800bbce:	2b20      	cmp	r3, #32
 800bbd0:	d105      	bne.n	800bbde <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 800bbd2:	2306      	movs	r3, #6
 800bbd4:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 800bbd6:	e00d      	b.n	800bbf4 <netconn_alloc+0x64>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 800bbd8:	2306      	movs	r3, #6
 800bbda:	617b      	str	r3, [r7, #20]
      break;
 800bbdc:	e00a      	b.n	800bbf4 <netconn_alloc+0x64>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 800bbde:	f240 22e5 	movw	r2, #741	; 0x2e5
 800bbe2:	4921      	ldr	r1, [pc, #132]	; (800bc68 <netconn_alloc+0xd8>)
 800bbe4:	4821      	ldr	r0, [pc, #132]	; (800bc6c <netconn_alloc+0xdc>)
 800bbe6:	f00f fa95 	bl	801b114 <trace_printf>
 800bbea:	4921      	ldr	r1, [pc, #132]	; (800bc70 <netconn_alloc+0xe0>)
 800bbec:	4821      	ldr	r0, [pc, #132]	; (800bc74 <netconn_alloc+0xe4>)
 800bbee:	f00f fa91 	bl	801b114 <trace_printf>
 800bbf2:	e7fe      	b.n	800bbf2 <netconn_alloc+0x62>
      goto free_and_return;
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 800bbf4:	68fb      	ldr	r3, [r7, #12]
 800bbf6:	3310      	adds	r3, #16
 800bbf8:	6979      	ldr	r1, [r7, #20]
 800bbfa:	4618      	mov	r0, r3
 800bbfc:	f00e ffda 	bl	801abb4 <sys_mbox_new>
 800bc00:	4603      	mov	r3, r0
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	d125      	bne.n	800bc52 <netconn_alloc+0xc2>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 800bc06:	68fb      	ldr	r3, [r7, #12]
 800bc08:	330c      	adds	r3, #12
 800bc0a:	2100      	movs	r1, #0
 800bc0c:	4618      	mov	r0, r3
 800bc0e:	f00f f8d1 	bl	801adb4 <sys_sem_new>
 800bc12:	4603      	mov	r3, r0
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	d005      	beq.n	800bc24 <netconn_alloc+0x94>
    sys_mbox_free(&conn->recvmbox);
 800bc18:	68fb      	ldr	r3, [r7, #12]
 800bc1a:	3310      	adds	r3, #16
 800bc1c:	4618      	mov	r0, r3
 800bc1e:	f00f f803 	bl	801ac28 <sys_mbox_free>
    goto free_and_return;
 800bc22:	e017      	b.n	800bc54 <netconn_alloc+0xc4>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 800bc24:	68fb      	ldr	r3, [r7, #12]
 800bc26:	3314      	adds	r3, #20
 800bc28:	4618      	mov	r0, r3
 800bc2a:	f00f f8b5 	bl	801ad98 <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 800bc2e:	68fb      	ldr	r3, [r7, #12]
 800bc30:	2200      	movs	r2, #0
 800bc32:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 800bc34:	68fb      	ldr	r3, [r7, #12]
 800bc36:	f04f 32ff 	mov.w	r2, #4294967295
 800bc3a:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 800bc3c:	68fb      	ldr	r3, [r7, #12]
 800bc3e:	683a      	ldr	r2, [r7, #0]
 800bc40:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCP
  conn->current_msg  = NULL;
 800bc42:	68fb      	ldr	r3, [r7, #12]
 800bc44:	2200      	movs	r2, #0
 800bc46:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	7cfa      	ldrb	r2, [r7, #19]
 800bc4c:	771a      	strb	r2, [r3, #28]
  return conn;
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	e005      	b.n	800bc5e <netconn_alloc+0xce>
    goto free_and_return;
 800bc52:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 800bc54:	68f9      	ldr	r1, [r7, #12]
 800bc56:	2007      	movs	r0, #7
 800bc58:	f001 fe70 	bl	800d93c <memp_free>
  return NULL;
 800bc5c:	2300      	movs	r3, #0
}
 800bc5e:	4618      	mov	r0, r3
 800bc60:	3718      	adds	r7, #24
 800bc62:	46bd      	mov	sp, r7
 800bc64:	bd80      	pop	{r7, pc}
 800bc66:	bf00      	nop
 800bc68:	0801d1ac 	.word	0x0801d1ac
 800bc6c:	0801cfbc 	.word	0x0801cfbc
 800bc70:	0801cfdc 	.word	0x0801cfdc
 800bc74:	0801d010 	.word	0x0801d010

0800bc78 <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 800bc78:	b580      	push	{r7, lr}
 800bc7a:	b082      	sub	sp, #8
 800bc7c:	af00      	add	r7, sp, #0
 800bc7e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	685b      	ldr	r3, [r3, #4]
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	d00a      	beq.n	800bc9e <netconn_free+0x26>
 800bc88:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800bc8c:	4920      	ldr	r1, [pc, #128]	; (800bd10 <netconn_free+0x98>)
 800bc8e:	4821      	ldr	r0, [pc, #132]	; (800bd14 <netconn_free+0x9c>)
 800bc90:	f00f fa40 	bl	801b114 <trace_printf>
 800bc94:	4920      	ldr	r1, [pc, #128]	; (800bd18 <netconn_free+0xa0>)
 800bc96:	4821      	ldr	r0, [pc, #132]	; (800bd1c <netconn_free+0xa4>)
 800bc98:	f00f fa3c 	bl	801b114 <trace_printf>
 800bc9c:	e7fe      	b.n	800bc9c <netconn_free+0x24>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	3310      	adds	r3, #16
 800bca2:	4618      	mov	r0, r3
 800bca4:	f00f f867 	bl	801ad76 <sys_mbox_valid>
 800bca8:	4603      	mov	r3, r0
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	d00a      	beq.n	800bcc4 <netconn_free+0x4c>
 800bcae:	f240 3223 	movw	r2, #803	; 0x323
 800bcb2:	491b      	ldr	r1, [pc, #108]	; (800bd20 <netconn_free+0xa8>)
 800bcb4:	4817      	ldr	r0, [pc, #92]	; (800bd14 <netconn_free+0x9c>)
 800bcb6:	f00f fa2d 	bl	801b114 <trace_printf>
 800bcba:	4917      	ldr	r1, [pc, #92]	; (800bd18 <netconn_free+0xa0>)
 800bcbc:	4817      	ldr	r0, [pc, #92]	; (800bd1c <netconn_free+0xa4>)
 800bcbe:	f00f fa29 	bl	801b114 <trace_printf>
 800bcc2:	e7fe      	b.n	800bcc2 <netconn_free+0x4a>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	3314      	adds	r3, #20
 800bcc8:	4618      	mov	r0, r3
 800bcca:	f00f f854 	bl	801ad76 <sys_mbox_valid>
 800bcce:	4603      	mov	r3, r0
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	d00a      	beq.n	800bcea <netconn_free+0x72>
 800bcd4:	f240 3226 	movw	r2, #806	; 0x326
 800bcd8:	4912      	ldr	r1, [pc, #72]	; (800bd24 <netconn_free+0xac>)
 800bcda:	480e      	ldr	r0, [pc, #56]	; (800bd14 <netconn_free+0x9c>)
 800bcdc:	f00f fa1a 	bl	801b114 <trace_printf>
 800bce0:	490d      	ldr	r1, [pc, #52]	; (800bd18 <netconn_free+0xa0>)
 800bce2:	480e      	ldr	r0, [pc, #56]	; (800bd1c <netconn_free+0xa4>)
 800bce4:	f00f fa16 	bl	801b114 <trace_printf>
 800bce8:	e7fe      	b.n	800bce8 <netconn_free+0x70>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	330c      	adds	r3, #12
 800bcee:	4618      	mov	r0, r3
 800bcf0:	f00f f8e6 	bl	801aec0 <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	330c      	adds	r3, #12
 800bcf8:	4618      	mov	r0, r3
 800bcfa:	f00f f90a 	bl	801af12 <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 800bcfe:	6879      	ldr	r1, [r7, #4]
 800bd00:	2007      	movs	r0, #7
 800bd02:	f001 fe1b 	bl	800d93c <memp_free>
}
 800bd06:	bf00      	nop
 800bd08:	3708      	adds	r7, #8
 800bd0a:	46bd      	mov	sp, r7
 800bd0c:	bd80      	pop	{r7, pc}
 800bd0e:	bf00      	nop
 800bd10:	0801d1d4 	.word	0x0801d1d4
 800bd14:	0801cfbc 	.word	0x0801cfbc
 800bd18:	0801cfdc 	.word	0x0801cfdc
 800bd1c:	0801d010 	.word	0x0801d010
 800bd20:	0801d204 	.word	0x0801d204
 800bd24:	0801d240 	.word	0x0801d240

0800bd28 <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 800bd28:	b580      	push	{r7, lr}
 800bd2a:	b086      	sub	sp, #24
 800bd2c:	af00      	add	r7, sp, #0
 800bd2e:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	3310      	adds	r3, #16
 800bd34:	4618      	mov	r0, r3
 800bd36:	f00f f81e 	bl	801ad76 <sys_mbox_valid>
 800bd3a:	4603      	mov	r3, r0
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	d02f      	beq.n	800bda0 <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800bd40:	e018      	b.n	800bd74 <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	781b      	ldrb	r3, [r3, #0]
 800bd46:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bd4a:	2b10      	cmp	r3, #16
 800bd4c:	d10e      	bne.n	800bd6c <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 800bd4e:	693b      	ldr	r3, [r7, #16]
 800bd50:	f107 020f 	add.w	r2, r7, #15
 800bd54:	4611      	mov	r1, r2
 800bd56:	4618      	mov	r0, r3
 800bd58:	f7ff fb5e 	bl	800b418 <lwip_netconn_is_err_msg>
 800bd5c:	4603      	mov	r3, r0
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	d108      	bne.n	800bd74 <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 800bd62:	693b      	ldr	r3, [r7, #16]
 800bd64:	4618      	mov	r0, r3
 800bd66:	f002 fd03 	bl	800e770 <pbuf_free>
 800bd6a:	e003      	b.n	800bd74 <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 800bd6c:	693b      	ldr	r3, [r7, #16]
 800bd6e:	4618      	mov	r0, r3
 800bd70:	f000 fd22 	bl	800c7b8 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	3310      	adds	r3, #16
 800bd78:	f107 0210 	add.w	r2, r7, #16
 800bd7c:	4611      	mov	r1, r2
 800bd7e:	4618      	mov	r0, r3
 800bd80:	f00e ffdd 	bl	801ad3e <sys_arch_mbox_tryfetch>
 800bd84:	4603      	mov	r3, r0
 800bd86:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd8a:	d1da      	bne.n	800bd42 <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	3310      	adds	r3, #16
 800bd90:	4618      	mov	r0, r3
 800bd92:	f00e ff49 	bl	801ac28 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	3310      	adds	r3, #16
 800bd9a:	4618      	mov	r0, r3
 800bd9c:	f00e fffc 	bl	801ad98 <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	3314      	adds	r3, #20
 800bda4:	4618      	mov	r0, r3
 800bda6:	f00e ffe6 	bl	801ad76 <sys_mbox_valid>
 800bdaa:	4603      	mov	r3, r0
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	d034      	beq.n	800be1a <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800bdb0:	e01d      	b.n	800bdee <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 800bdb2:	693b      	ldr	r3, [r7, #16]
 800bdb4:	f107 020e 	add.w	r2, r7, #14
 800bdb8:	4611      	mov	r1, r2
 800bdba:	4618      	mov	r0, r3
 800bdbc:	f7ff fb2c 	bl	800b418 <lwip_netconn_is_err_msg>
 800bdc0:	4603      	mov	r3, r0
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	d113      	bne.n	800bdee <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 800bdc6:	693b      	ldr	r3, [r7, #16]
 800bdc8:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 800bdca:	6978      	ldr	r0, [r7, #20]
 800bdcc:	f7ff ffac 	bl	800bd28 <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 800bdd0:	697b      	ldr	r3, [r7, #20]
 800bdd2:	685b      	ldr	r3, [r3, #4]
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	d007      	beq.n	800bde8 <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 800bdd8:	697b      	ldr	r3, [r7, #20]
 800bdda:	685b      	ldr	r3, [r3, #4]
 800bddc:	4618      	mov	r0, r3
 800bdde:	f003 fb4d 	bl	800f47c <tcp_abort>
            newconn->pcb.tcp = NULL;
 800bde2:	697b      	ldr	r3, [r7, #20]
 800bde4:	2200      	movs	r2, #0
 800bde6:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 800bde8:	6978      	ldr	r0, [r7, #20]
 800bdea:	f7ff ff45 	bl	800bc78 <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	3314      	adds	r3, #20
 800bdf2:	f107 0210 	add.w	r2, r7, #16
 800bdf6:	4611      	mov	r1, r2
 800bdf8:	4618      	mov	r0, r3
 800bdfa:	f00e ffa0 	bl	801ad3e <sys_arch_mbox_tryfetch>
 800bdfe:	4603      	mov	r3, r0
 800be00:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be04:	d1d5      	bne.n	800bdb2 <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	3314      	adds	r3, #20
 800be0a:	4618      	mov	r0, r3
 800be0c:	f00e ff0c 	bl	801ac28 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	3314      	adds	r3, #20
 800be14:	4618      	mov	r0, r3
 800be16:	f00e ffbf 	bl	801ad98 <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 800be1a:	bf00      	nop
 800be1c:	3718      	adds	r7, #24
 800be1e:	46bd      	mov	sp, r7
 800be20:	bd80      	pop	{r7, pc}
	...

0800be24 <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800be24:	b580      	push	{r7, lr}
 800be26:	b086      	sub	sp, #24
 800be28:	af00      	add	r7, sp, #0
 800be2a:	6078      	str	r0, [r7, #4]
 800be2c:	460b      	mov	r3, r1
 800be2e:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 800be30:	2300      	movs	r3, #0
 800be32:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	2b00      	cmp	r3, #0
 800be38:	d10a      	bne.n	800be50 <lwip_netconn_do_close_internal+0x2c>
 800be3a:	f240 32a2 	movw	r2, #930	; 0x3a2
 800be3e:	4999      	ldr	r1, [pc, #612]	; (800c0a4 <lwip_netconn_do_close_internal+0x280>)
 800be40:	4899      	ldr	r0, [pc, #612]	; (800c0a8 <lwip_netconn_do_close_internal+0x284>)
 800be42:	f00f f967 	bl	801b114 <trace_printf>
 800be46:	4999      	ldr	r1, [pc, #612]	; (800c0ac <lwip_netconn_do_close_internal+0x288>)
 800be48:	4899      	ldr	r0, [pc, #612]	; (800c0b0 <lwip_netconn_do_close_internal+0x28c>)
 800be4a:	f00f f963 	bl	801b114 <trace_printf>
 800be4e:	e7fe      	b.n	800be4e <lwip_netconn_do_close_internal+0x2a>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	781b      	ldrb	r3, [r3, #0]
 800be54:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800be58:	2b10      	cmp	r3, #16
 800be5a:	d00a      	beq.n	800be72 <lwip_netconn_do_close_internal+0x4e>
 800be5c:	f240 32a3 	movw	r2, #931	; 0x3a3
 800be60:	4994      	ldr	r1, [pc, #592]	; (800c0b4 <lwip_netconn_do_close_internal+0x290>)
 800be62:	4891      	ldr	r0, [pc, #580]	; (800c0a8 <lwip_netconn_do_close_internal+0x284>)
 800be64:	f00f f956 	bl	801b114 <trace_printf>
 800be68:	4990      	ldr	r1, [pc, #576]	; (800c0ac <lwip_netconn_do_close_internal+0x288>)
 800be6a:	4891      	ldr	r0, [pc, #580]	; (800c0b0 <lwip_netconn_do_close_internal+0x28c>)
 800be6c:	f00f f952 	bl	801b114 <trace_printf>
 800be70:	e7fe      	b.n	800be70 <lwip_netconn_do_close_internal+0x4c>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	785b      	ldrb	r3, [r3, #1]
 800be76:	2b04      	cmp	r3, #4
 800be78:	d00a      	beq.n	800be90 <lwip_netconn_do_close_internal+0x6c>
 800be7a:	f44f 7269 	mov.w	r2, #932	; 0x3a4
 800be7e:	498e      	ldr	r1, [pc, #568]	; (800c0b8 <lwip_netconn_do_close_internal+0x294>)
 800be80:	4889      	ldr	r0, [pc, #548]	; (800c0a8 <lwip_netconn_do_close_internal+0x284>)
 800be82:	f00f f947 	bl	801b114 <trace_printf>
 800be86:	4989      	ldr	r1, [pc, #548]	; (800c0ac <lwip_netconn_do_close_internal+0x288>)
 800be88:	4889      	ldr	r0, [pc, #548]	; (800c0b0 <lwip_netconn_do_close_internal+0x28c>)
 800be8a:	f00f f943 	bl	801b114 <trace_printf>
 800be8e:	e7fe      	b.n	800be8e <lwip_netconn_do_close_internal+0x6a>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	685b      	ldr	r3, [r3, #4]
 800be94:	2b00      	cmp	r3, #0
 800be96:	d10a      	bne.n	800beae <lwip_netconn_do_close_internal+0x8a>
 800be98:	f240 32a5 	movw	r2, #933	; 0x3a5
 800be9c:	4987      	ldr	r1, [pc, #540]	; (800c0bc <lwip_netconn_do_close_internal+0x298>)
 800be9e:	4882      	ldr	r0, [pc, #520]	; (800c0a8 <lwip_netconn_do_close_internal+0x284>)
 800bea0:	f00f f938 	bl	801b114 <trace_printf>
 800bea4:	4981      	ldr	r1, [pc, #516]	; (800c0ac <lwip_netconn_do_close_internal+0x288>)
 800bea6:	4882      	ldr	r0, [pc, #520]	; (800c0b0 <lwip_netconn_do_close_internal+0x28c>)
 800bea8:	f00f f934 	bl	801b114 <trace_printf>
 800beac:	e7fe      	b.n	800beac <lwip_netconn_do_close_internal+0x88>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	6a1b      	ldr	r3, [r3, #32]
 800beb2:	2b00      	cmp	r3, #0
 800beb4:	d10a      	bne.n	800becc <lwip_netconn_do_close_internal+0xa8>
 800beb6:	f240 32a6 	movw	r2, #934	; 0x3a6
 800beba:	4981      	ldr	r1, [pc, #516]	; (800c0c0 <lwip_netconn_do_close_internal+0x29c>)
 800bebc:	487a      	ldr	r0, [pc, #488]	; (800c0a8 <lwip_netconn_do_close_internal+0x284>)
 800bebe:	f00f f929 	bl	801b114 <trace_printf>
 800bec2:	497a      	ldr	r1, [pc, #488]	; (800c0ac <lwip_netconn_do_close_internal+0x288>)
 800bec4:	487a      	ldr	r0, [pc, #488]	; (800c0b0 <lwip_netconn_do_close_internal+0x28c>)
 800bec6:	f00f f925 	bl	801b114 <trace_printf>
 800beca:	e7fe      	b.n	800beca <lwip_netconn_do_close_internal+0xa6>

  tpcb = conn->pcb.tcp;
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	685b      	ldr	r3, [r3, #4]
 800bed0:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	6a1b      	ldr	r3, [r3, #32]
 800bed6:	7a1b      	ldrb	r3, [r3, #8]
 800bed8:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 800beda:	7bfb      	ldrb	r3, [r7, #15]
 800bedc:	f003 0301 	and.w	r3, r3, #1
 800bee0:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 800bee2:	7bfb      	ldrb	r3, [r7, #15]
 800bee4:	f003 0302 	and.w	r3, r3, #2
 800bee8:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 800beea:	7bfb      	ldrb	r3, [r7, #15]
 800beec:	2b03      	cmp	r3, #3
 800beee:	d102      	bne.n	800bef6 <lwip_netconn_do_close_internal+0xd2>
    shut_close = 1;
 800bef0:	2301      	movs	r3, #1
 800bef2:	75bb      	strb	r3, [r7, #22]
 800bef4:	e01f      	b.n	800bf36 <lwip_netconn_do_close_internal+0x112>
  } else if (shut_rx &&
 800bef6:	7bbb      	ldrb	r3, [r7, #14]
 800bef8:	2b00      	cmp	r3, #0
 800befa:	d00e      	beq.n	800bf1a <lwip_netconn_do_close_internal+0xf6>
             ((tpcb->state == FIN_WAIT_1) ||
 800befc:	693b      	ldr	r3, [r7, #16]
 800befe:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 800bf00:	2b05      	cmp	r3, #5
 800bf02:	d007      	beq.n	800bf14 <lwip_netconn_do_close_internal+0xf0>
              (tpcb->state == FIN_WAIT_2) ||
 800bf04:	693b      	ldr	r3, [r7, #16]
 800bf06:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 800bf08:	2b06      	cmp	r3, #6
 800bf0a:	d003      	beq.n	800bf14 <lwip_netconn_do_close_internal+0xf0>
              (tpcb->state == CLOSING))) {
 800bf0c:	693b      	ldr	r3, [r7, #16]
 800bf0e:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 800bf10:	2b08      	cmp	r3, #8
 800bf12:	d102      	bne.n	800bf1a <lwip_netconn_do_close_internal+0xf6>
    shut_close = 1;
 800bf14:	2301      	movs	r3, #1
 800bf16:	75bb      	strb	r3, [r7, #22]
 800bf18:	e00d      	b.n	800bf36 <lwip_netconn_do_close_internal+0x112>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 800bf1a:	7b7b      	ldrb	r3, [r7, #13]
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	d008      	beq.n	800bf32 <lwip_netconn_do_close_internal+0x10e>
 800bf20:	693b      	ldr	r3, [r7, #16]
 800bf22:	8b5b      	ldrh	r3, [r3, #26]
 800bf24:	f003 0310 	and.w	r3, r3, #16
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	d002      	beq.n	800bf32 <lwip_netconn_do_close_internal+0x10e>
    shut_close = 1;
 800bf2c:	2301      	movs	r3, #1
 800bf2e:	75bb      	strb	r3, [r7, #22]
 800bf30:	e001      	b.n	800bf36 <lwip_netconn_do_close_internal+0x112>
  } else {
    shut_close = 0;
 800bf32:	2300      	movs	r3, #0
 800bf34:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 800bf36:	7dbb      	ldrb	r3, [r7, #22]
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	d003      	beq.n	800bf44 <lwip_netconn_do_close_internal+0x120>
    tcp_arg(tpcb, NULL);
 800bf3c:	2100      	movs	r1, #0
 800bf3e:	6938      	ldr	r0, [r7, #16]
 800bf40:	f004 fae0 	bl	8010504 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 800bf44:	693b      	ldr	r3, [r7, #16]
 800bf46:	7d1b      	ldrb	r3, [r3, #20]
 800bf48:	2b01      	cmp	r3, #1
 800bf4a:	d104      	bne.n	800bf56 <lwip_netconn_do_close_internal+0x132>
    tcp_accept(tpcb, NULL);
 800bf4c:	2100      	movs	r1, #0
 800bf4e:	6938      	ldr	r0, [r7, #16]
 800bf50:	f004 fb62 	bl	8010618 <tcp_accept>
 800bf54:	e01d      	b.n	800bf92 <lwip_netconn_do_close_internal+0x16e>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 800bf56:	7bbb      	ldrb	r3, [r7, #14]
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	d007      	beq.n	800bf6c <lwip_netconn_do_close_internal+0x148>
      tcp_recv(tpcb, NULL);
 800bf5c:	2100      	movs	r1, #0
 800bf5e:	6938      	ldr	r0, [r7, #16]
 800bf60:	f004 fae2 	bl	8010528 <tcp_recv>
      tcp_accept(tpcb, NULL);
 800bf64:	2100      	movs	r1, #0
 800bf66:	6938      	ldr	r0, [r7, #16]
 800bf68:	f004 fb56 	bl	8010618 <tcp_accept>
    }
    if (shut_tx) {
 800bf6c:	7b7b      	ldrb	r3, [r7, #13]
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	d003      	beq.n	800bf7a <lwip_netconn_do_close_internal+0x156>
      tcp_sent(tpcb, NULL);
 800bf72:	2100      	movs	r1, #0
 800bf74:	6938      	ldr	r0, [r7, #16]
 800bf76:	f004 faff 	bl	8010578 <tcp_sent>
    }
    if (shut_close) {
 800bf7a:	7dbb      	ldrb	r3, [r7, #22]
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	d008      	beq.n	800bf92 <lwip_netconn_do_close_internal+0x16e>
      tcp_poll(tpcb, NULL, 0);
 800bf80:	2200      	movs	r2, #0
 800bf82:	2100      	movs	r1, #0
 800bf84:	6938      	ldr	r0, [r7, #16]
 800bf86:	f004 fb5f 	bl	8010648 <tcp_poll>
      tcp_err(tpcb, NULL);
 800bf8a:	2100      	movs	r1, #0
 800bf8c:	6938      	ldr	r0, [r7, #16]
 800bf8e:	f004 fb1b 	bl	80105c8 <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 800bf92:	7dbb      	ldrb	r3, [r7, #22]
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d005      	beq.n	800bfa4 <lwip_netconn_do_close_internal+0x180>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 800bf98:	6938      	ldr	r0, [r7, #16]
 800bf9a:	f003 f91d 	bl	800f1d8 <tcp_close>
 800bf9e:	4603      	mov	r3, r0
 800bfa0:	75fb      	strb	r3, [r7, #23]
 800bfa2:	e007      	b.n	800bfb4 <lwip_netconn_do_close_internal+0x190>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 800bfa4:	7bbb      	ldrb	r3, [r7, #14]
 800bfa6:	7b7a      	ldrb	r2, [r7, #13]
 800bfa8:	4619      	mov	r1, r3
 800bfaa:	6938      	ldr	r0, [r7, #16]
 800bfac:	f003 f942 	bl	800f234 <tcp_shutdown>
 800bfb0:	4603      	mov	r3, r0
 800bfb2:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 800bfb4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d102      	bne.n	800bfc2 <lwip_netconn_do_close_internal+0x19e>
    close_finished = 1;
 800bfbc:	2301      	movs	r3, #1
 800bfbe:	757b      	strb	r3, [r7, #21]
 800bfc0:	e016      	b.n	800bff0 <lwip_netconn_do_close_internal+0x1cc>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 800bfc2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bfc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bfca:	d10f      	bne.n	800bfec <lwip_netconn_do_close_internal+0x1c8>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	6a1b      	ldr	r3, [r3, #32]
 800bfd0:	7a5b      	ldrb	r3, [r3, #9]
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	d10c      	bne.n	800bff0 <lwip_netconn_do_close_internal+0x1cc>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 800bfd6:	2301      	movs	r3, #1
 800bfd8:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 800bfda:	7dbb      	ldrb	r3, [r7, #22]
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	d007      	beq.n	800bff0 <lwip_netconn_do_close_internal+0x1cc>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 800bfe0:	6938      	ldr	r0, [r7, #16]
 800bfe2:	f003 fa4b 	bl	800f47c <tcp_abort>
          err = ERR_OK;
 800bfe6:	2300      	movs	r3, #0
 800bfe8:	75fb      	strb	r3, [r7, #23]
 800bfea:	e001      	b.n	800bff0 <lwip_netconn_do_close_internal+0x1cc>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 800bfec:	2301      	movs	r3, #1
 800bfee:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 800bff0:	7d7b      	ldrb	r3, [r7, #21]
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	d044      	beq.n	800c080 <lwip_netconn_do_close_internal+0x25c>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	6a1b      	ldr	r3, [r3, #32]
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	330c      	adds	r3, #12
 800bffe:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	6a1b      	ldr	r3, [r3, #32]
 800c004:	7dfa      	ldrb	r2, [r7, #23]
 800c006:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	2200      	movs	r2, #0
 800c00c:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	2200      	movs	r2, #0
 800c012:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 800c014:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c018:	2b00      	cmp	r3, #0
 800c01a:	d129      	bne.n	800c070 <lwip_netconn_do_close_internal+0x24c>
      if (shut_close) {
 800c01c:	7dbb      	ldrb	r3, [r7, #22]
 800c01e:	2b00      	cmp	r3, #0
 800c020:	d00c      	beq.n	800c03c <lwip_netconn_do_close_internal+0x218>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	2200      	movs	r2, #0
 800c026:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	d005      	beq.n	800c03c <lwip_netconn_do_close_internal+0x218>
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c034:	2200      	movs	r2, #0
 800c036:	2104      	movs	r1, #4
 800c038:	6878      	ldr	r0, [r7, #4]
 800c03a:	4798      	blx	r3
      }
      if (shut_rx) {
 800c03c:	7bbb      	ldrb	r3, [r7, #14]
 800c03e:	2b00      	cmp	r3, #0
 800c040:	d009      	beq.n	800c056 <lwip_netconn_do_close_internal+0x232>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c046:	2b00      	cmp	r3, #0
 800c048:	d005      	beq.n	800c056 <lwip_netconn_do_close_internal+0x232>
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c04e:	2200      	movs	r2, #0
 800c050:	2100      	movs	r1, #0
 800c052:	6878      	ldr	r0, [r7, #4]
 800c054:	4798      	blx	r3
      }
      if (shut_tx) {
 800c056:	7b7b      	ldrb	r3, [r7, #13]
 800c058:	2b00      	cmp	r3, #0
 800c05a:	d009      	beq.n	800c070 <lwip_netconn_do_close_internal+0x24c>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c060:	2b00      	cmp	r3, #0
 800c062:	d005      	beq.n	800c070 <lwip_netconn_do_close_internal+0x24c>
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c068:	2200      	movs	r2, #0
 800c06a:	2102      	movs	r1, #2
 800c06c:	6878      	ldr	r0, [r7, #4]
 800c06e:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800c070:	78fb      	ldrb	r3, [r7, #3]
 800c072:	2b00      	cmp	r3, #0
 800c074:	d002      	beq.n	800c07c <lwip_netconn_do_close_internal+0x258>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 800c076:	68b8      	ldr	r0, [r7, #8]
 800c078:	f00e ff15 	bl	801aea6 <sys_sem_signal>
    }
    return ERR_OK;
 800c07c:	2300      	movs	r3, #0
 800c07e:	e048      	b.n	800c112 <lwip_netconn_do_close_internal+0x2ee>
  }
  if (!close_finished) {
 800c080:	7d7b      	ldrb	r3, [r7, #21]
 800c082:	2b00      	cmp	r3, #0
 800c084:	d134      	bne.n	800c0f0 <lwip_netconn_do_close_internal+0x2cc>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 800c086:	693b      	ldr	r3, [r7, #16]
 800c088:	7d1b      	ldrb	r3, [r3, #20]
 800c08a:	2b01      	cmp	r3, #1
 800c08c:	d11c      	bne.n	800c0c8 <lwip_netconn_do_close_internal+0x2a4>
 800c08e:	f240 4241 	movw	r2, #1089	; 0x441
 800c092:	490c      	ldr	r1, [pc, #48]	; (800c0c4 <lwip_netconn_do_close_internal+0x2a0>)
 800c094:	4804      	ldr	r0, [pc, #16]	; (800c0a8 <lwip_netconn_do_close_internal+0x284>)
 800c096:	f00f f83d 	bl	801b114 <trace_printf>
 800c09a:	4904      	ldr	r1, [pc, #16]	; (800c0ac <lwip_netconn_do_close_internal+0x288>)
 800c09c:	4804      	ldr	r0, [pc, #16]	; (800c0b0 <lwip_netconn_do_close_internal+0x28c>)
 800c09e:	f00f f839 	bl	801b114 <trace_printf>
 800c0a2:	e7fe      	b.n	800c0a2 <lwip_netconn_do_close_internal+0x27e>
 800c0a4:	0801d27c 	.word	0x0801d27c
 800c0a8:	0801cfbc 	.word	0x0801cfbc
 800c0ac:	0801cfdc 	.word	0x0801cfdc
 800c0b0:	0801d010 	.word	0x0801d010
 800c0b4:	0801d28c 	.word	0x0801d28c
 800c0b8:	0801d2ac 	.word	0x0801d2ac
 800c0bc:	0801d2d0 	.word	0x0801d2d0
 800c0c0:	0801d110 	.word	0x0801d110
 800c0c4:	0801d2e4 	.word	0x0801d2e4
    if (shut_tx) {
 800c0c8:	7b7b      	ldrb	r3, [r7, #13]
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	d003      	beq.n	800c0d6 <lwip_netconn_do_close_internal+0x2b2>
      tcp_sent(tpcb, sent_tcp);
 800c0ce:	4913      	ldr	r1, [pc, #76]	; (800c11c <lwip_netconn_do_close_internal+0x2f8>)
 800c0d0:	6938      	ldr	r0, [r7, #16]
 800c0d2:	f004 fa51 	bl	8010578 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 800c0d6:	2201      	movs	r2, #1
 800c0d8:	4911      	ldr	r1, [pc, #68]	; (800c120 <lwip_netconn_do_close_internal+0x2fc>)
 800c0da:	6938      	ldr	r0, [r7, #16]
 800c0dc:	f004 fab4 	bl	8010648 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 800c0e0:	4910      	ldr	r1, [pc, #64]	; (800c124 <lwip_netconn_do_close_internal+0x300>)
 800c0e2:	6938      	ldr	r0, [r7, #16]
 800c0e4:	f004 fa70 	bl	80105c8 <tcp_err>
    tcp_arg(tpcb, conn);
 800c0e8:	6879      	ldr	r1, [r7, #4]
 800c0ea:	6938      	ldr	r0, [r7, #16]
 800c0ec:	f004 fa0a 	bl	8010504 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 800c0f0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	d10a      	bne.n	800c10e <lwip_netconn_do_close_internal+0x2ea>
 800c0f8:	f240 424d 	movw	r2, #1101	; 0x44d
 800c0fc:	490a      	ldr	r1, [pc, #40]	; (800c128 <lwip_netconn_do_close_internal+0x304>)
 800c0fe:	480b      	ldr	r0, [pc, #44]	; (800c12c <lwip_netconn_do_close_internal+0x308>)
 800c100:	f00f f808 	bl	801b114 <trace_printf>
 800c104:	490a      	ldr	r1, [pc, #40]	; (800c130 <lwip_netconn_do_close_internal+0x30c>)
 800c106:	480b      	ldr	r0, [pc, #44]	; (800c134 <lwip_netconn_do_close_internal+0x310>)
 800c108:	f00f f804 	bl	801b114 <trace_printf>
 800c10c:	e7fe      	b.n	800c10c <lwip_netconn_do_close_internal+0x2e8>
  return err;
 800c10e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c112:	4618      	mov	r0, r3
 800c114:	3718      	adds	r7, #24
 800c116:	46bd      	mov	sp, r7
 800c118:	bd80      	pop	{r7, pc}
 800c11a:	bf00      	nop
 800c11c:	0800b7b5 	.word	0x0800b7b5
 800c120:	0800b6e1 	.word	0x0800b6e1
 800c124:	0800b869 	.word	0x0800b869
 800c128:	0801d308 	.word	0x0801d308
 800c12c:	0801cfbc 	.word	0x0801cfbc
 800c130:	0801cfdc 	.word	0x0801cfdc
 800c134:	0801d010 	.word	0x0801d010

0800c138 <lwip_netconn_do_bind>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 800c138:	b580      	push	{r7, lr}
 800c13a:	b084      	sub	sp, #16
 800c13c:	af00      	add	r7, sp, #0
 800c13e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	60bb      	str	r3, [r7, #8]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 800c144:	68bb      	ldr	r3, [r7, #8]
 800c146:	681b      	ldr	r3, [r3, #0]
 800c148:	685b      	ldr	r3, [r3, #4]
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	d025      	beq.n	800c19a <lwip_netconn_do_bind+0x62>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800c14e:	68bb      	ldr	r3, [r7, #8]
 800c150:	681b      	ldr	r3, [r3, #0]
 800c152:	781b      	ldrb	r3, [r3, #0]
 800c154:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c158:	2b10      	cmp	r3, #16
 800c15a:	d00e      	beq.n	800c17a <lwip_netconn_do_bind+0x42>
 800c15c:	2b20      	cmp	r3, #32
 800c15e:	d119      	bne.n	800c194 <lwip_netconn_do_bind+0x5c>
        err = raw_bind(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800c160:	68bb      	ldr	r3, [r7, #8]
 800c162:	681b      	ldr	r3, [r3, #0]
 800c164:	6858      	ldr	r0, [r3, #4]
 800c166:	68bb      	ldr	r3, [r7, #8]
 800c168:	6899      	ldr	r1, [r3, #8]
 800c16a:	68bb      	ldr	r3, [r7, #8]
 800c16c:	899b      	ldrh	r3, [r3, #12]
 800c16e:	461a      	mov	r2, r3
 800c170:	f009 ff36 	bl	8015fe0 <udp_bind>
 800c174:	4603      	mov	r3, r0
 800c176:	73fb      	strb	r3, [r7, #15]
        break;
 800c178:	e011      	b.n	800c19e <lwip_netconn_do_bind+0x66>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800c17a:	68bb      	ldr	r3, [r7, #8]
 800c17c:	681b      	ldr	r3, [r3, #0]
 800c17e:	6858      	ldr	r0, [r3, #4]
 800c180:	68bb      	ldr	r3, [r7, #8]
 800c182:	6899      	ldr	r1, [r3, #8]
 800c184:	68bb      	ldr	r3, [r7, #8]
 800c186:	899b      	ldrh	r3, [r3, #12]
 800c188:	461a      	mov	r2, r3
 800c18a:	f003 f983 	bl	800f494 <tcp_bind>
 800c18e:	4603      	mov	r3, r0
 800c190:	73fb      	strb	r3, [r7, #15]
        break;
 800c192:	e004      	b.n	800c19e <lwip_netconn_do_bind+0x66>
#endif /* LWIP_TCP */
      default:
        err = ERR_VAL;
 800c194:	23fa      	movs	r3, #250	; 0xfa
 800c196:	73fb      	strb	r3, [r7, #15]
        break;
 800c198:	e001      	b.n	800c19e <lwip_netconn_do_bind+0x66>
    }
  } else {
    err = ERR_VAL;
 800c19a:	23fa      	movs	r3, #250	; 0xfa
 800c19c:	73fb      	strb	r3, [r7, #15]
  }
  msg->err = err;
 800c19e:	68bb      	ldr	r3, [r7, #8]
 800c1a0:	7bfa      	ldrb	r2, [r7, #15]
 800c1a2:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800c1a4:	bf00      	nop
 800c1a6:	3710      	adds	r7, #16
 800c1a8:	46bd      	mov	sp, r7
 800c1aa:	bd80      	pop	{r7, pc}

0800c1ac <lwip_netconn_do_send>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_send(void *m)
{
 800c1ac:	b580      	push	{r7, lr}
 800c1ae:	b084      	sub	sp, #16
 800c1b0:	af00      	add	r7, sp, #0
 800c1b2:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 800c1b8:	68bb      	ldr	r3, [r7, #8]
 800c1ba:	681b      	ldr	r3, [r3, #0]
 800c1bc:	4618      	mov	r0, r3
 800c1be:	f7ff f8d3 	bl	800b368 <netconn_err>
 800c1c2:	4603      	mov	r3, r0
 800c1c4:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800c1c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	d134      	bne.n	800c238 <lwip_netconn_do_send+0x8c>
    if (msg->conn->pcb.tcp != NULL) {
 800c1ce:	68bb      	ldr	r3, [r7, #8]
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	685b      	ldr	r3, [r3, #4]
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	d02d      	beq.n	800c234 <lwip_netconn_do_send+0x88>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800c1d8:	68bb      	ldr	r3, [r7, #8]
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	781b      	ldrb	r3, [r3, #0]
 800c1de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c1e2:	2b20      	cmp	r3, #32
 800c1e4:	d123      	bne.n	800c22e <lwip_netconn_do_send+0x82>
            err = udp_sendto_chksum(msg->conn->pcb.udp, msg->msg.b->p,
                                    &msg->msg.b->addr, msg->msg.b->port,
                                    msg->msg.b->flags & NETBUF_FLAG_CHKSUM, msg->msg.b->toport_chksum);
          }
#else /* LWIP_CHECKSUM_ON_COPY */
          if (ip_addr_isany_val(msg->msg.b->addr) || IP_IS_ANY_TYPE_VAL(msg->msg.b->addr)) {
 800c1e6:	68bb      	ldr	r3, [r7, #8]
 800c1e8:	689b      	ldr	r3, [r3, #8]
 800c1ea:	689b      	ldr	r3, [r3, #8]
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	d10c      	bne.n	800c20a <lwip_netconn_do_send+0x5e>
            err = udp_send(msg->conn->pcb.udp, msg->msg.b->p);
 800c1f0:	68bb      	ldr	r3, [r7, #8]
 800c1f2:	681b      	ldr	r3, [r3, #0]
 800c1f4:	685a      	ldr	r2, [r3, #4]
 800c1f6:	68bb      	ldr	r3, [r7, #8]
 800c1f8:	689b      	ldr	r3, [r3, #8]
 800c1fa:	681b      	ldr	r3, [r3, #0]
 800c1fc:	4619      	mov	r1, r3
 800c1fe:	4610      	mov	r0, r2
 800c200:	f009 fcd8 	bl	8015bb4 <udp_send>
 800c204:	4603      	mov	r3, r0
 800c206:	73fb      	strb	r3, [r7, #15]
          } else {
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
          }
#endif /* LWIP_CHECKSUM_ON_COPY */
          break;
 800c208:	e016      	b.n	800c238 <lwip_netconn_do_send+0x8c>
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
 800c20a:	68bb      	ldr	r3, [r7, #8]
 800c20c:	681b      	ldr	r3, [r3, #0]
 800c20e:	6858      	ldr	r0, [r3, #4]
 800c210:	68bb      	ldr	r3, [r7, #8]
 800c212:	689b      	ldr	r3, [r3, #8]
 800c214:	6819      	ldr	r1, [r3, #0]
 800c216:	68bb      	ldr	r3, [r7, #8]
 800c218:	689b      	ldr	r3, [r3, #8]
 800c21a:	f103 0208 	add.w	r2, r3, #8
 800c21e:	68bb      	ldr	r3, [r7, #8]
 800c220:	689b      	ldr	r3, [r3, #8]
 800c222:	899b      	ldrh	r3, [r3, #12]
 800c224:	f009 fcfe 	bl	8015c24 <udp_sendto>
 800c228:	4603      	mov	r3, r0
 800c22a:	73fb      	strb	r3, [r7, #15]
          break;
 800c22c:	e004      	b.n	800c238 <lwip_netconn_do_send+0x8c>
#endif /* LWIP_UDP */
        default:
          err = ERR_CONN;
 800c22e:	23f5      	movs	r3, #245	; 0xf5
 800c230:	73fb      	strb	r3, [r7, #15]
          break;
 800c232:	e001      	b.n	800c238 <lwip_netconn_do_send+0x8c>
      }
    } else {
      err = ERR_CONN;
 800c234:	23f5      	movs	r3, #245	; 0xf5
 800c236:	73fb      	strb	r3, [r7, #15]
    }
  }
  msg->err = err;
 800c238:	68bb      	ldr	r3, [r7, #8]
 800c23a:	7bfa      	ldrb	r2, [r7, #15]
 800c23c:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800c23e:	bf00      	nop
 800c240:	3710      	adds	r7, #16
 800c242:	46bd      	mov	sp, r7
 800c244:	bd80      	pop	{r7, pc}

0800c246 <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 800c246:	b580      	push	{r7, lr}
 800c248:	b086      	sub	sp, #24
 800c24a:	af00      	add	r7, sp, #0
 800c24c:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 800c252:	693b      	ldr	r3, [r7, #16]
 800c254:	2200      	movs	r2, #0
 800c256:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 800c258:	693b      	ldr	r3, [r7, #16]
 800c25a:	681b      	ldr	r3, [r3, #0]
 800c25c:	685b      	ldr	r3, [r3, #4]
 800c25e:	2b00      	cmp	r3, #0
 800c260:	d022      	beq.n	800c2a8 <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800c262:	693b      	ldr	r3, [r7, #16]
 800c264:	681b      	ldr	r3, [r3, #0]
 800c266:	781b      	ldrb	r3, [r3, #0]
 800c268:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c26c:	2b10      	cmp	r3, #16
 800c26e:	d11b      	bne.n	800c2a8 <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 800c270:	693b      	ldr	r3, [r7, #16]
 800c272:	689b      	ldr	r3, [r3, #8]
 800c274:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 800c276:	697b      	ldr	r3, [r7, #20]
 800c278:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c27c:	d202      	bcs.n	800c284 <lwip_netconn_do_recv+0x3e>
 800c27e:	697b      	ldr	r3, [r7, #20]
 800c280:	b29b      	uxth	r3, r3
 800c282:	e001      	b.n	800c288 <lwip_netconn_do_recv+0x42>
 800c284:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c288:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 800c28a:	693b      	ldr	r3, [r7, #16]
 800c28c:	681b      	ldr	r3, [r3, #0]
 800c28e:	685b      	ldr	r3, [r3, #4]
 800c290:	89fa      	ldrh	r2, [r7, #14]
 800c292:	4611      	mov	r1, r2
 800c294:	4618      	mov	r0, r3
 800c296:	f003 f9fd 	bl	800f694 <tcp_recved>
        remaining -= recved;
 800c29a:	89fb      	ldrh	r3, [r7, #14]
 800c29c:	697a      	ldr	r2, [r7, #20]
 800c29e:	1ad3      	subs	r3, r2, r3
 800c2a0:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 800c2a2:	697b      	ldr	r3, [r7, #20]
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	d1e6      	bne.n	800c276 <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 800c2a8:	bf00      	nop
 800c2aa:	3718      	adds	r7, #24
 800c2ac:	46bd      	mov	sp, r7
 800c2ae:	bd80      	pop	{r7, pc}

0800c2b0 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800c2b0:	b580      	push	{r7, lr}
 800c2b2:	b088      	sub	sp, #32
 800c2b4:	af00      	add	r7, sp, #0
 800c2b6:	6078      	str	r0, [r7, #4]
 800c2b8:	460b      	mov	r3, r1
 800c2ba:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 800c2bc:	2300      	movs	r3, #0
 800c2be:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	d10a      	bne.n	800c2dc <lwip_netconn_do_writemore+0x2c>
 800c2c6:	f240 6273 	movw	r2, #1651	; 0x673
 800c2ca:	496e      	ldr	r1, [pc, #440]	; (800c484 <lwip_netconn_do_writemore+0x1d4>)
 800c2cc:	486e      	ldr	r0, [pc, #440]	; (800c488 <lwip_netconn_do_writemore+0x1d8>)
 800c2ce:	f00e ff21 	bl	801b114 <trace_printf>
 800c2d2:	496e      	ldr	r1, [pc, #440]	; (800c48c <lwip_netconn_do_writemore+0x1dc>)
 800c2d4:	486e      	ldr	r0, [pc, #440]	; (800c490 <lwip_netconn_do_writemore+0x1e0>)
 800c2d6:	f00e ff1d 	bl	801b114 <trace_printf>
 800c2da:	e7fe      	b.n	800c2da <lwip_netconn_do_writemore+0x2a>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	785b      	ldrb	r3, [r3, #1]
 800c2e0:	2b01      	cmp	r3, #1
 800c2e2:	d00a      	beq.n	800c2fa <lwip_netconn_do_writemore+0x4a>
 800c2e4:	f240 6274 	movw	r2, #1652	; 0x674
 800c2e8:	496a      	ldr	r1, [pc, #424]	; (800c494 <lwip_netconn_do_writemore+0x1e4>)
 800c2ea:	4867      	ldr	r0, [pc, #412]	; (800c488 <lwip_netconn_do_writemore+0x1d8>)
 800c2ec:	f00e ff12 	bl	801b114 <trace_printf>
 800c2f0:	4966      	ldr	r1, [pc, #408]	; (800c48c <lwip_netconn_do_writemore+0x1dc>)
 800c2f2:	4867      	ldr	r0, [pc, #412]	; (800c490 <lwip_netconn_do_writemore+0x1e0>)
 800c2f4:	f00e ff0e 	bl	801b114 <trace_printf>
 800c2f8:	e7fe      	b.n	800c2f8 <lwip_netconn_do_writemore+0x48>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	6a1b      	ldr	r3, [r3, #32]
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	d10a      	bne.n	800c318 <lwip_netconn_do_writemore+0x68>
 800c302:	f240 6275 	movw	r2, #1653	; 0x675
 800c306:	4964      	ldr	r1, [pc, #400]	; (800c498 <lwip_netconn_do_writemore+0x1e8>)
 800c308:	485f      	ldr	r0, [pc, #380]	; (800c488 <lwip_netconn_do_writemore+0x1d8>)
 800c30a:	f00e ff03 	bl	801b114 <trace_printf>
 800c30e:	495f      	ldr	r1, [pc, #380]	; (800c48c <lwip_netconn_do_writemore+0x1dc>)
 800c310:	485f      	ldr	r0, [pc, #380]	; (800c490 <lwip_netconn_do_writemore+0x1e0>)
 800c312:	f00e feff 	bl	801b114 <trace_printf>
 800c316:	e7fe      	b.n	800c316 <lwip_netconn_do_writemore+0x66>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	685b      	ldr	r3, [r3, #4]
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	d10a      	bne.n	800c336 <lwip_netconn_do_writemore+0x86>
 800c320:	f240 6276 	movw	r2, #1654	; 0x676
 800c324:	495d      	ldr	r1, [pc, #372]	; (800c49c <lwip_netconn_do_writemore+0x1ec>)
 800c326:	4858      	ldr	r0, [pc, #352]	; (800c488 <lwip_netconn_do_writemore+0x1d8>)
 800c328:	f00e fef4 	bl	801b114 <trace_printf>
 800c32c:	4957      	ldr	r1, [pc, #348]	; (800c48c <lwip_netconn_do_writemore+0x1dc>)
 800c32e:	4858      	ldr	r0, [pc, #352]	; (800c490 <lwip_netconn_do_writemore+0x1e0>)
 800c330:	f00e fef0 	bl	801b114 <trace_printf>
 800c334:	e7fe      	b.n	800c334 <lwip_netconn_do_writemore+0x84>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	6a1b      	ldr	r3, [r3, #32]
 800c33a:	699a      	ldr	r2, [r3, #24]
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	6a1b      	ldr	r3, [r3, #32]
 800c340:	695b      	ldr	r3, [r3, #20]
 800c342:	429a      	cmp	r2, r3
 800c344:	d30a      	bcc.n	800c35c <lwip_netconn_do_writemore+0xac>
 800c346:	f240 6277 	movw	r2, #1655	; 0x677
 800c34a:	4955      	ldr	r1, [pc, #340]	; (800c4a0 <lwip_netconn_do_writemore+0x1f0>)
 800c34c:	484e      	ldr	r0, [pc, #312]	; (800c488 <lwip_netconn_do_writemore+0x1d8>)
 800c34e:	f00e fee1 	bl	801b114 <trace_printf>
 800c352:	494e      	ldr	r1, [pc, #312]	; (800c48c <lwip_netconn_do_writemore+0x1dc>)
 800c354:	484e      	ldr	r0, [pc, #312]	; (800c490 <lwip_netconn_do_writemore+0x1e0>)
 800c356:	f00e fedd 	bl	801b114 <trace_printf>
 800c35a:	e7fe      	b.n	800c35a <lwip_netconn_do_writemore+0xaa>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	6a1b      	ldr	r3, [r3, #32]
 800c360:	899b      	ldrh	r3, [r3, #12]
 800c362:	2b00      	cmp	r3, #0
 800c364:	d10a      	bne.n	800c37c <lwip_netconn_do_writemore+0xcc>
 800c366:	f240 6279 	movw	r2, #1657	; 0x679
 800c36a:	494e      	ldr	r1, [pc, #312]	; (800c4a4 <lwip_netconn_do_writemore+0x1f4>)
 800c36c:	4846      	ldr	r0, [pc, #280]	; (800c488 <lwip_netconn_do_writemore+0x1d8>)
 800c36e:	f00e fed1 	bl	801b114 <trace_printf>
 800c372:	4946      	ldr	r1, [pc, #280]	; (800c48c <lwip_netconn_do_writemore+0x1dc>)
 800c374:	4846      	ldr	r0, [pc, #280]	; (800c490 <lwip_netconn_do_writemore+0x1e0>)
 800c376:	f00e fecd 	bl	801b114 <trace_printf>
 800c37a:	e7fe      	b.n	800c37a <lwip_netconn_do_writemore+0xca>

  apiflags = conn->current_msg->msg.w.apiflags;
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	6a1b      	ldr	r3, [r3, #32]
 800c380:	7f1b      	ldrb	r3, [r3, #28]
 800c382:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	7f1b      	ldrb	r3, [r3, #28]
 800c388:	f003 0302 	and.w	r3, r3, #2
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	d104      	bne.n	800c39a <lwip_netconn_do_writemore+0xea>
 800c390:	7ebb      	ldrb	r3, [r7, #26]
 800c392:	f003 0304 	and.w	r3, r3, #4
 800c396:	2b00      	cmp	r3, #0
 800c398:	d001      	beq.n	800c39e <lwip_netconn_do_writemore+0xee>
 800c39a:	2301      	movs	r3, #1
 800c39c:	e000      	b.n	800c3a0 <lwip_netconn_do_writemore+0xf0>
 800c39e:	2300      	movs	r3, #0
 800c3a0:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	6a1b      	ldr	r3, [r3, #32]
 800c3a6:	689b      	ldr	r3, [r3, #8]
 800c3a8:	681a      	ldr	r2, [r3, #0]
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	6a1b      	ldr	r3, [r3, #32]
 800c3ae:	691b      	ldr	r3, [r3, #16]
 800c3b0:	4413      	add	r3, r2
 800c3b2:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	6a1b      	ldr	r3, [r3, #32]
 800c3b8:	689b      	ldr	r3, [r3, #8]
 800c3ba:	685a      	ldr	r2, [r3, #4]
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	6a1b      	ldr	r3, [r3, #32]
 800c3c0:	691b      	ldr	r3, [r3, #16]
 800c3c2:	1ad3      	subs	r3, r2, r3
 800c3c4:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 800c3c6:	693b      	ldr	r3, [r7, #16]
 800c3c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c3cc:	d307      	bcc.n	800c3de <lwip_netconn_do_writemore+0x12e>
        len = 0xffff;
 800c3ce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c3d2:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800c3d4:	7ebb      	ldrb	r3, [r7, #26]
 800c3d6:	f043 0302 	orr.w	r3, r3, #2
 800c3da:	76bb      	strb	r3, [r7, #26]
 800c3dc:	e001      	b.n	800c3e2 <lwip_netconn_do_writemore+0x132>
      } else {
        len = (u16_t)diff;
 800c3de:	693b      	ldr	r3, [r7, #16]
 800c3e0:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	685b      	ldr	r3, [r3, #4]
 800c3e6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800c3ea:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 800c3ec:	89fa      	ldrh	r2, [r7, #14]
 800c3ee:	8bbb      	ldrh	r3, [r7, #28]
 800c3f0:	429a      	cmp	r2, r3
 800c3f2:	d216      	bcs.n	800c422 <lwip_netconn_do_writemore+0x172>
        /* don't try to write more than sendbuf */
        len = available;
 800c3f4:	89fb      	ldrh	r3, [r7, #14]
 800c3f6:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 800c3f8:	7e3b      	ldrb	r3, [r7, #24]
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	d00d      	beq.n	800c41a <lwip_netconn_do_writemore+0x16a>
          if (!len) {
 800c3fe:	8bbb      	ldrh	r3, [r7, #28]
 800c400:	2b00      	cmp	r3, #0
 800c402:	d10e      	bne.n	800c422 <lwip_netconn_do_writemore+0x172>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	6a1b      	ldr	r3, [r3, #32]
 800c408:	699b      	ldr	r3, [r3, #24]
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	d102      	bne.n	800c414 <lwip_netconn_do_writemore+0x164>
 800c40e:	f06f 0306 	mvn.w	r3, #6
 800c412:	e000      	b.n	800c416 <lwip_netconn_do_writemore+0x166>
 800c414:	2300      	movs	r3, #0
 800c416:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 800c418:	e096      	b.n	800c548 <lwip_netconn_do_writemore+0x298>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 800c41a:	7ebb      	ldrb	r3, [r7, #26]
 800c41c:	f043 0302 	orr.w	r3, r3, #2
 800c420:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	6a1b      	ldr	r3, [r3, #32]
 800c426:	691a      	ldr	r2, [r3, #16]
 800c428:	8bbb      	ldrh	r3, [r7, #28]
 800c42a:	441a      	add	r2, r3
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	6a1b      	ldr	r3, [r3, #32]
 800c430:	689b      	ldr	r3, [r3, #8]
 800c432:	685b      	ldr	r3, [r3, #4]
 800c434:	429a      	cmp	r2, r3
 800c436:	d90a      	bls.n	800c44e <lwip_netconn_do_writemore+0x19e>
 800c438:	f240 62a3 	movw	r2, #1699	; 0x6a3
 800c43c:	491a      	ldr	r1, [pc, #104]	; (800c4a8 <lwip_netconn_do_writemore+0x1f8>)
 800c43e:	4812      	ldr	r0, [pc, #72]	; (800c488 <lwip_netconn_do_writemore+0x1d8>)
 800c440:	f00e fe68 	bl	801b114 <trace_printf>
 800c444:	4911      	ldr	r1, [pc, #68]	; (800c48c <lwip_netconn_do_writemore+0x1dc>)
 800c446:	4812      	ldr	r0, [pc, #72]	; (800c490 <lwip_netconn_do_writemore+0x1e0>)
 800c448:	f00e fe64 	bl	801b114 <trace_printf>
 800c44c:	e7fe      	b.n	800c44c <lwip_netconn_do_writemore+0x19c>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 800c44e:	8bbb      	ldrh	r3, [r7, #28]
 800c450:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c454:	4293      	cmp	r3, r2
 800c456:	d103      	bne.n	800c460 <lwip_netconn_do_writemore+0x1b0>
 800c458:	693b      	ldr	r3, [r7, #16]
 800c45a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c45e:	d209      	bcs.n	800c474 <lwip_netconn_do_writemore+0x1c4>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800c460:	693b      	ldr	r3, [r7, #16]
 800c462:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 800c464:	8bba      	ldrh	r2, [r7, #28]
 800c466:	429a      	cmp	r2, r3
 800c468:	d120      	bne.n	800c4ac <lwip_netconn_do_writemore+0x1fc>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	6a1b      	ldr	r3, [r3, #32]
 800c46e:	899b      	ldrh	r3, [r3, #12]
 800c470:	2b01      	cmp	r3, #1
 800c472:	d91b      	bls.n	800c4ac <lwip_netconn_do_writemore+0x1fc>
        write_more = 1;
 800c474:	2301      	movs	r3, #1
 800c476:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800c478:	7ebb      	ldrb	r3, [r7, #26]
 800c47a:	f043 0302 	orr.w	r3, r3, #2
 800c47e:	76bb      	strb	r3, [r7, #26]
 800c480:	e016      	b.n	800c4b0 <lwip_netconn_do_writemore+0x200>
 800c482:	bf00      	nop
 800c484:	0801d100 	.word	0x0801d100
 800c488:	0801cfbc 	.word	0x0801cfbc
 800c48c:	0801cfdc 	.word	0x0801cfdc
 800c490:	0801d010 	.word	0x0801d010
 800c494:	0801d408 	.word	0x0801d408
 800c498:	0801d110 	.word	0x0801d110
 800c49c:	0801d428 	.word	0x0801d428
 800c4a0:	0801d440 	.word	0x0801d440
 800c4a4:	0801d480 	.word	0x0801d480
 800c4a8:	0801d4a8 	.word	0x0801d4a8
      } else {
        write_more = 0;
 800c4ac:	2300      	movs	r3, #0
 800c4ae:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	6858      	ldr	r0, [r3, #4]
 800c4b4:	7ebb      	ldrb	r3, [r7, #26]
 800c4b6:	8bba      	ldrh	r2, [r7, #28]
 800c4b8:	6979      	ldr	r1, [r7, #20]
 800c4ba:	f007 f8f3 	bl	80136a4 <tcp_write>
 800c4be:	4603      	mov	r3, r0
 800c4c0:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 800c4c2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800c4c6:	2b00      	cmp	r3, #0
 800c4c8:	d12c      	bne.n	800c524 <lwip_netconn_do_writemore+0x274>
        conn->current_msg->msg.w.offset += len;
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	6a1b      	ldr	r3, [r3, #32]
 800c4ce:	6999      	ldr	r1, [r3, #24]
 800c4d0:	8bba      	ldrh	r2, [r7, #28]
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	6a1b      	ldr	r3, [r3, #32]
 800c4d6:	440a      	add	r2, r1
 800c4d8:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	6a1b      	ldr	r3, [r3, #32]
 800c4de:	6919      	ldr	r1, [r3, #16]
 800c4e0:	8bba      	ldrh	r2, [r7, #28]
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	6a1b      	ldr	r3, [r3, #32]
 800c4e6:	440a      	add	r2, r1
 800c4e8:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	6a1b      	ldr	r3, [r3, #32]
 800c4ee:	691a      	ldr	r2, [r3, #16]
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	6a1b      	ldr	r3, [r3, #32]
 800c4f4:	689b      	ldr	r3, [r3, #8]
 800c4f6:	685b      	ldr	r3, [r3, #4]
 800c4f8:	429a      	cmp	r2, r3
 800c4fa:	d113      	bne.n	800c524 <lwip_netconn_do_writemore+0x274>
          conn->current_msg->msg.w.vector_cnt--;
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	6a1b      	ldr	r3, [r3, #32]
 800c500:	899a      	ldrh	r2, [r3, #12]
 800c502:	3a01      	subs	r2, #1
 800c504:	b292      	uxth	r2, r2
 800c506:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	6a1b      	ldr	r3, [r3, #32]
 800c50c:	899b      	ldrh	r3, [r3, #12]
 800c50e:	2b00      	cmp	r3, #0
 800c510:	d008      	beq.n	800c524 <lwip_netconn_do_writemore+0x274>
            conn->current_msg->msg.w.vector++;
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	6a1b      	ldr	r3, [r3, #32]
 800c516:	689a      	ldr	r2, [r3, #8]
 800c518:	3208      	adds	r2, #8
 800c51a:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	6a1b      	ldr	r3, [r3, #32]
 800c520:	2200      	movs	r2, #0
 800c522:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 800c524:	7e7b      	ldrb	r3, [r7, #25]
 800c526:	2b00      	cmp	r3, #0
 800c528:	d004      	beq.n	800c534 <lwip_netconn_do_writemore+0x284>
 800c52a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800c52e:	2b00      	cmp	r3, #0
 800c530:	f43f af37 	beq.w	800c3a2 <lwip_netconn_do_writemore+0xf2>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 800c534:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800c538:	2b00      	cmp	r3, #0
 800c53a:	d004      	beq.n	800c546 <lwip_netconn_do_writemore+0x296>
 800c53c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800c540:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c544:	d134      	bne.n	800c5b0 <lwip_netconn_do_writemore+0x300>
err_mem:
 800c546:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 800c548:	7e3b      	ldrb	r3, [r7, #24]
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	d019      	beq.n	800c582 <lwip_netconn_do_writemore+0x2d2>
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	6a1b      	ldr	r3, [r3, #32]
 800c552:	699a      	ldr	r2, [r3, #24]
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	6a1b      	ldr	r3, [r3, #32]
 800c558:	695b      	ldr	r3, [r3, #20]
 800c55a:	429a      	cmp	r2, r3
 800c55c:	d211      	bcs.n	800c582 <lwip_netconn_do_writemore+0x2d2>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c562:	2b00      	cmp	r3, #0
 800c564:	d005      	beq.n	800c572 <lwip_netconn_do_writemore+0x2c2>
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c56a:	2200      	movs	r2, #0
 800c56c:	2103      	movs	r1, #3
 800c56e:	6878      	ldr	r0, [r7, #4]
 800c570:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	7f1b      	ldrb	r3, [r3, #28]
 800c576:	f043 0310 	orr.w	r3, r3, #16
 800c57a:	b2da      	uxtb	r2, r3
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	771a      	strb	r2, [r3, #28]
 800c580:	e016      	b.n	800c5b0 <lwip_netconn_do_writemore+0x300>
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	685b      	ldr	r3, [r3, #4]
 800c586:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800c58a:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800c58e:	d305      	bcc.n	800c59c <lwip_netconn_do_writemore+0x2ec>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	685b      	ldr	r3, [r3, #4]
 800c594:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800c598:	2b04      	cmp	r3, #4
 800c59a:	d909      	bls.n	800c5b0 <lwip_netconn_do_writemore+0x300>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	d005      	beq.n	800c5b0 <lwip_netconn_do_writemore+0x300>
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5a8:	2200      	movs	r2, #0
 800c5aa:	2103      	movs	r1, #3
 800c5ac:	6878      	ldr	r0, [r7, #4]
 800c5ae:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 800c5b0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	d11d      	bne.n	800c5f4 <lwip_netconn_do_writemore+0x344>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	6a1b      	ldr	r3, [r3, #32]
 800c5bc:	699a      	ldr	r2, [r3, #24]
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	6a1b      	ldr	r3, [r3, #32]
 800c5c2:	695b      	ldr	r3, [r3, #20]
 800c5c4:	429a      	cmp	r2, r3
 800c5c6:	d002      	beq.n	800c5ce <lwip_netconn_do_writemore+0x31e>
 800c5c8:	7e3b      	ldrb	r3, [r7, #24]
 800c5ca:	2b00      	cmp	r3, #0
 800c5cc:	d001      	beq.n	800c5d2 <lwip_netconn_do_writemore+0x322>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 800c5ce:	2301      	movs	r3, #1
 800c5d0:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	685b      	ldr	r3, [r3, #4]
 800c5d6:	4618      	mov	r0, r3
 800c5d8:	f007 ff42 	bl	8014460 <tcp_output>
 800c5dc:	4603      	mov	r3, r0
 800c5de:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 800c5e0:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800c5e4:	f113 0f04 	cmn.w	r3, #4
 800c5e8:	d12c      	bne.n	800c644 <lwip_netconn_do_writemore+0x394>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800c5ea:	7b3b      	ldrb	r3, [r7, #12]
 800c5ec:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800c5ee:	2301      	movs	r3, #1
 800c5f0:	76fb      	strb	r3, [r7, #27]
 800c5f2:	e027      	b.n	800c644 <lwip_netconn_do_writemore+0x394>
      }
    } else if (err == ERR_MEM) {
 800c5f4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800c5f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c5fc:	d120      	bne.n	800c640 <lwip_netconn_do_writemore+0x390>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	685b      	ldr	r3, [r3, #4]
 800c602:	4618      	mov	r0, r3
 800c604:	f007 ff2c 	bl	8014460 <tcp_output>
 800c608:	4603      	mov	r3, r0
 800c60a:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 800c60c:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800c610:	f113 0f04 	cmn.w	r3, #4
 800c614:	d104      	bne.n	800c620 <lwip_netconn_do_writemore+0x370>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800c616:	7b7b      	ldrb	r3, [r7, #13]
 800c618:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800c61a:	2301      	movs	r3, #1
 800c61c:	76fb      	strb	r3, [r7, #27]
 800c61e:	e011      	b.n	800c644 <lwip_netconn_do_writemore+0x394>
      } else if (dontblock) {
 800c620:	7e3b      	ldrb	r3, [r7, #24]
 800c622:	2b00      	cmp	r3, #0
 800c624:	d00e      	beq.n	800c644 <lwip_netconn_do_writemore+0x394>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	6a1b      	ldr	r3, [r3, #32]
 800c62a:	699b      	ldr	r3, [r3, #24]
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	d102      	bne.n	800c636 <lwip_netconn_do_writemore+0x386>
 800c630:	f06f 0306 	mvn.w	r3, #6
 800c634:	e000      	b.n	800c638 <lwip_netconn_do_writemore+0x388>
 800c636:	2300      	movs	r3, #0
 800c638:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800c63a:	2301      	movs	r3, #1
 800c63c:	76fb      	strb	r3, [r7, #27]
 800c63e:	e001      	b.n	800c644 <lwip_netconn_do_writemore+0x394>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 800c640:	2301      	movs	r3, #1
 800c642:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 800c644:	7efb      	ldrb	r3, [r7, #27]
 800c646:	2b00      	cmp	r3, #0
 800c648:	d015      	beq.n	800c676 <lwip_netconn_do_writemore+0x3c6>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	6a1b      	ldr	r3, [r3, #32]
 800c64e:	681b      	ldr	r3, [r3, #0]
 800c650:	330c      	adds	r3, #12
 800c652:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	6a1b      	ldr	r3, [r3, #32]
 800c658:	7ffa      	ldrb	r2, [r7, #31]
 800c65a:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	2200      	movs	r2, #0
 800c660:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	2200      	movs	r2, #0
 800c666:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800c668:	78fb      	ldrb	r3, [r7, #3]
 800c66a:	2b00      	cmp	r3, #0
 800c66c:	d006      	beq.n	800c67c <lwip_netconn_do_writemore+0x3cc>
#endif
    {
      sys_sem_signal(op_completed_sem);
 800c66e:	68b8      	ldr	r0, [r7, #8]
 800c670:	f00e fc19 	bl	801aea6 <sys_sem_signal>
 800c674:	e002      	b.n	800c67c <lwip_netconn_do_writemore+0x3cc>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 800c676:	f04f 33ff 	mov.w	r3, #4294967295
 800c67a:	e000      	b.n	800c67e <lwip_netconn_do_writemore+0x3ce>
  }
#endif
  return ERR_OK;
 800c67c:	2300      	movs	r3, #0
}
 800c67e:	4618      	mov	r0, r3
 800c680:	3720      	adds	r7, #32
 800c682:	46bd      	mov	sp, r7
 800c684:	bd80      	pop	{r7, pc}
 800c686:	bf00      	nop

0800c688 <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 800c688:	b580      	push	{r7, lr}
 800c68a:	b084      	sub	sp, #16
 800c68c:	af00      	add	r7, sp, #0
 800c68e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 800c694:	68fb      	ldr	r3, [r7, #12]
 800c696:	681b      	ldr	r3, [r3, #0]
 800c698:	785b      	ldrb	r3, [r3, #1]
 800c69a:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 800c69c:	68fb      	ldr	r3, [r7, #12]
 800c69e:	681b      	ldr	r3, [r3, #0]
 800c6a0:	685b      	ldr	r3, [r3, #4]
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	d074      	beq.n	800c790 <lwip_netconn_do_close+0x108>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800c6a6:	68fb      	ldr	r3, [r7, #12]
 800c6a8:	681b      	ldr	r3, [r3, #0]
 800c6aa:	781b      	ldrb	r3, [r3, #0]
 800c6ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 800c6b0:	2b10      	cmp	r3, #16
 800c6b2:	d16d      	bne.n	800c790 <lwip_netconn_do_close+0x108>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800c6b4:	68fb      	ldr	r3, [r7, #12]
 800c6b6:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800c6b8:	2b03      	cmp	r3, #3
 800c6ba:	d002      	beq.n	800c6c2 <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800c6bc:	7afb      	ldrb	r3, [r7, #11]
 800c6be:	2b02      	cmp	r3, #2
 800c6c0:	d066      	beq.n	800c790 <lwip_netconn_do_close+0x108>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 800c6c2:	7afb      	ldrb	r3, [r7, #11]
 800c6c4:	2b03      	cmp	r3, #3
 800c6c6:	d103      	bne.n	800c6d0 <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 800c6c8:	68fb      	ldr	r3, [r7, #12]
 800c6ca:	22f5      	movs	r2, #245	; 0xf5
 800c6cc:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800c6ce:	e064      	b.n	800c79a <lwip_netconn_do_close+0x112>
    } else if (state == NETCONN_WRITE) {
 800c6d0:	7afb      	ldrb	r3, [r7, #11]
 800c6d2:	2b01      	cmp	r3, #1
 800c6d4:	d103      	bne.n	800c6de <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 800c6d6:	68fb      	ldr	r3, [r7, #12]
 800c6d8:	22fb      	movs	r2, #251	; 0xfb
 800c6da:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800c6dc:	e05d      	b.n	800c79a <lwip_netconn_do_close+0x112>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 800c6de:	68fb      	ldr	r3, [r7, #12]
 800c6e0:	7a1b      	ldrb	r3, [r3, #8]
 800c6e2:	f003 0301 	and.w	r3, r3, #1
 800c6e6:	2b00      	cmp	r3, #0
 800c6e8:	d004      	beq.n	800c6f4 <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 800c6ea:	68fb      	ldr	r3, [r7, #12]
 800c6ec:	681b      	ldr	r3, [r3, #0]
 800c6ee:	4618      	mov	r0, r3
 800c6f0:	f7ff fb1a 	bl	800bd28 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800c6f4:	68fb      	ldr	r3, [r7, #12]
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	6a1b      	ldr	r3, [r3, #32]
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	d00a      	beq.n	800c714 <lwip_netconn_do_close+0x8c>
 800c6fe:	f240 72bd 	movw	r2, #1981	; 0x7bd
 800c702:	4927      	ldr	r1, [pc, #156]	; (800c7a0 <lwip_netconn_do_close+0x118>)
 800c704:	4827      	ldr	r0, [pc, #156]	; (800c7a4 <lwip_netconn_do_close+0x11c>)
 800c706:	f00e fd05 	bl	801b114 <trace_printf>
 800c70a:	4927      	ldr	r1, [pc, #156]	; (800c7a8 <lwip_netconn_do_close+0x120>)
 800c70c:	4827      	ldr	r0, [pc, #156]	; (800c7ac <lwip_netconn_do_close+0x124>)
 800c70e:	f00e fd01 	bl	801b114 <trace_printf>
 800c712:	e7fe      	b.n	800c712 <lwip_netconn_do_close+0x8a>
      msg->conn->state = NETCONN_CLOSE;
 800c714:	68fb      	ldr	r3, [r7, #12]
 800c716:	681b      	ldr	r3, [r3, #0]
 800c718:	2204      	movs	r2, #4
 800c71a:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 800c71c:	68fb      	ldr	r3, [r7, #12]
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	68fa      	ldr	r2, [r7, #12]
 800c722:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800c724:	68fb      	ldr	r3, [r7, #12]
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	2100      	movs	r1, #0
 800c72a:	4618      	mov	r0, r3
 800c72c:	f7ff fb7a 	bl	800be24 <lwip_netconn_do_close_internal>
 800c730:	4603      	mov	r3, r0
 800c732:	2b00      	cmp	r3, #0
 800c734:	d030      	beq.n	800c798 <lwip_netconn_do_close+0x110>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800c736:	68fb      	ldr	r3, [r7, #12]
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	785b      	ldrb	r3, [r3, #1]
 800c73c:	2b04      	cmp	r3, #4
 800c73e:	d00a      	beq.n	800c756 <lwip_netconn_do_close+0xce>
 800c740:	f240 72c2 	movw	r2, #1986	; 0x7c2
 800c744:	491a      	ldr	r1, [pc, #104]	; (800c7b0 <lwip_netconn_do_close+0x128>)
 800c746:	4817      	ldr	r0, [pc, #92]	; (800c7a4 <lwip_netconn_do_close+0x11c>)
 800c748:	f00e fce4 	bl	801b114 <trace_printf>
 800c74c:	4916      	ldr	r1, [pc, #88]	; (800c7a8 <lwip_netconn_do_close+0x120>)
 800c74e:	4817      	ldr	r0, [pc, #92]	; (800c7ac <lwip_netconn_do_close+0x124>)
 800c750:	f00e fce0 	bl	801b114 <trace_printf>
 800c754:	e7fe      	b.n	800c754 <lwip_netconn_do_close+0xcc>
        UNLOCK_TCPIP_CORE();
 800c756:	4817      	ldr	r0, [pc, #92]	; (800c7b4 <lwip_netconn_do_close+0x12c>)
 800c758:	f00e fc41 	bl	801afde <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800c75c:	68fb      	ldr	r3, [r7, #12]
 800c75e:	681b      	ldr	r3, [r3, #0]
 800c760:	330c      	adds	r3, #12
 800c762:	2100      	movs	r1, #0
 800c764:	4618      	mov	r0, r3
 800c766:	f00e fb6d 	bl	801ae44 <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 800c76a:	4812      	ldr	r0, [pc, #72]	; (800c7b4 <lwip_netconn_do_close+0x12c>)
 800c76c:	f00e fc28 	bl	801afc0 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800c770:	68fb      	ldr	r3, [r7, #12]
 800c772:	681b      	ldr	r3, [r3, #0]
 800c774:	785b      	ldrb	r3, [r3, #1]
 800c776:	2b00      	cmp	r3, #0
 800c778:	d00e      	beq.n	800c798 <lwip_netconn_do_close+0x110>
 800c77a:	f240 72c6 	movw	r2, #1990	; 0x7c6
 800c77e:	490c      	ldr	r1, [pc, #48]	; (800c7b0 <lwip_netconn_do_close+0x128>)
 800c780:	4808      	ldr	r0, [pc, #32]	; (800c7a4 <lwip_netconn_do_close+0x11c>)
 800c782:	f00e fcc7 	bl	801b114 <trace_printf>
 800c786:	4908      	ldr	r1, [pc, #32]	; (800c7a8 <lwip_netconn_do_close+0x120>)
 800c788:	4808      	ldr	r0, [pc, #32]	; (800c7ac <lwip_netconn_do_close+0x124>)
 800c78a:	f00e fcc3 	bl	801b114 <trace_printf>
 800c78e:	e7fe      	b.n	800c78e <lwip_netconn_do_close+0x106>
      return;
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 800c790:	68fb      	ldr	r3, [r7, #12]
 800c792:	22f5      	movs	r2, #245	; 0xf5
 800c794:	711a      	strb	r2, [r3, #4]
 800c796:	e000      	b.n	800c79a <lwip_netconn_do_close+0x112>
      return;
 800c798:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 800c79a:	3710      	adds	r7, #16
 800c79c:	46bd      	mov	sp, r7
 800c79e:	bd80      	pop	{r7, pc}
 800c7a0:	0801d34c 	.word	0x0801d34c
 800c7a4:	0801cfbc 	.word	0x0801cfbc
 800c7a8:	0801cfdc 	.word	0x0801cfdc
 800c7ac:	0801d010 	.word	0x0801d010
 800c7b0:	0801d368 	.word	0x0801d368
 800c7b4:	2000d408 	.word	0x2000d408

0800c7b8 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 800c7b8:	b580      	push	{r7, lr}
 800c7ba:	b082      	sub	sp, #8
 800c7bc:	af00      	add	r7, sp, #0
 800c7be:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	2b00      	cmp	r3, #0
 800c7c4:	d013      	beq.n	800c7ee <netbuf_delete+0x36>
    if (buf->p != NULL) {
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	681b      	ldr	r3, [r3, #0]
 800c7ca:	2b00      	cmp	r3, #0
 800c7cc:	d00b      	beq.n	800c7e6 <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	681b      	ldr	r3, [r3, #0]
 800c7d2:	4618      	mov	r0, r3
 800c7d4:	f001 ffcc 	bl	800e770 <pbuf_free>
      buf->p = buf->ptr = NULL;
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	2200      	movs	r2, #0
 800c7dc:	605a      	str	r2, [r3, #4]
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	685a      	ldr	r2, [r3, #4]
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 800c7e6:	6879      	ldr	r1, [r7, #4]
 800c7e8:	2006      	movs	r0, #6
 800c7ea:	f001 f8a7 	bl	800d93c <memp_free>
  }
}
 800c7ee:	bf00      	nop
 800c7f0:	3708      	adds	r7, #8
 800c7f2:	46bd      	mov	sp, r7
 800c7f4:	bd80      	pop	{r7, pc}
	...

0800c7f8 <netbuf_alloc>:
 * @return pointer to the allocated memory
 *         NULL if no memory could be allocated
 */
void *
netbuf_alloc(struct netbuf *buf, u16_t size)
{
 800c7f8:	b580      	push	{r7, lr}
 800c7fa:	b082      	sub	sp, #8
 800c7fc:	af00      	add	r7, sp, #0
 800c7fe:	6078      	str	r0, [r7, #4]
 800c800:	460b      	mov	r3, r1
 800c802:	807b      	strh	r3, [r7, #2]
  LWIP_ERROR("netbuf_alloc: invalid buf", (buf != NULL), return NULL;);
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	2b00      	cmp	r3, #0
 800c808:	d109      	bne.n	800c81e <netbuf_alloc+0x26>
 800c80a:	2268      	movs	r2, #104	; 0x68
 800c80c:	491e      	ldr	r1, [pc, #120]	; (800c888 <netbuf_alloc+0x90>)
 800c80e:	481f      	ldr	r0, [pc, #124]	; (800c88c <netbuf_alloc+0x94>)
 800c810:	f00e fc80 	bl	801b114 <trace_printf>
 800c814:	491e      	ldr	r1, [pc, #120]	; (800c890 <netbuf_alloc+0x98>)
 800c816:	481f      	ldr	r0, [pc, #124]	; (800c894 <netbuf_alloc+0x9c>)
 800c818:	f00e fc7c 	bl	801b114 <trace_printf>
 800c81c:	e7fe      	b.n	800c81c <netbuf_alloc+0x24>

  /* Deallocate any previously allocated memory. */
  if (buf->p != NULL) {
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	681b      	ldr	r3, [r3, #0]
 800c822:	2b00      	cmp	r3, #0
 800c824:	d004      	beq.n	800c830 <netbuf_alloc+0x38>
    pbuf_free(buf->p);
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	681b      	ldr	r3, [r3, #0]
 800c82a:	4618      	mov	r0, r3
 800c82c:	f001 ffa0 	bl	800e770 <pbuf_free>
  }
  buf->p = pbuf_alloc(PBUF_TRANSPORT, size, PBUF_RAM);
 800c830:	887b      	ldrh	r3, [r7, #2]
 800c832:	f44f 7220 	mov.w	r2, #640	; 0x280
 800c836:	4619      	mov	r1, r3
 800c838:	2036      	movs	r0, #54	; 0x36
 800c83a:	f001 fc83 	bl	800e144 <pbuf_alloc>
 800c83e:	4602      	mov	r2, r0
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	601a      	str	r2, [r3, #0]
  if (buf->p == NULL) {
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	681b      	ldr	r3, [r3, #0]
 800c848:	2b00      	cmp	r3, #0
 800c84a:	d101      	bne.n	800c850 <netbuf_alloc+0x58>
    return NULL;
 800c84c:	2300      	movs	r3, #0
 800c84e:	e016      	b.n	800c87e <netbuf_alloc+0x86>
  }
  LWIP_ASSERT("check that first pbuf can hold size",
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	681b      	ldr	r3, [r3, #0]
 800c854:	895b      	ldrh	r3, [r3, #10]
 800c856:	887a      	ldrh	r2, [r7, #2]
 800c858:	429a      	cmp	r2, r3
 800c85a:	d909      	bls.n	800c870 <netbuf_alloc+0x78>
 800c85c:	2272      	movs	r2, #114	; 0x72
 800c85e:	490e      	ldr	r1, [pc, #56]	; (800c898 <netbuf_alloc+0xa0>)
 800c860:	480a      	ldr	r0, [pc, #40]	; (800c88c <netbuf_alloc+0x94>)
 800c862:	f00e fc57 	bl	801b114 <trace_printf>
 800c866:	490a      	ldr	r1, [pc, #40]	; (800c890 <netbuf_alloc+0x98>)
 800c868:	480a      	ldr	r0, [pc, #40]	; (800c894 <netbuf_alloc+0x9c>)
 800c86a:	f00e fc53 	bl	801b114 <trace_printf>
 800c86e:	e7fe      	b.n	800c86e <netbuf_alloc+0x76>
              (buf->p->len >= size));
  buf->ptr = buf->p;
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	681a      	ldr	r2, [r3, #0]
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	605a      	str	r2, [r3, #4]
  return buf->p->payload;
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	681b      	ldr	r3, [r3, #0]
 800c87c:	685b      	ldr	r3, [r3, #4]
}
 800c87e:	4618      	mov	r0, r3
 800c880:	3708      	adds	r7, #8
 800c882:	46bd      	mov	sp, r7
 800c884:	bd80      	pop	{r7, pc}
 800c886:	bf00      	nop
 800c888:	0801d500 	.word	0x0801d500
 800c88c:	0801d51c 	.word	0x0801d51c
 800c890:	0801d53c 	.word	0x0801d53c
 800c894:	0801d570 	.word	0x0801d570
 800c898:	0801d574 	.word	0x0801d574

0800c89c <netbuf_free>:
 *
 * @param buf pointer to the netbuf which contains the packet buffer to free
 */
void
netbuf_free(struct netbuf *buf)
{
 800c89c:	b580      	push	{r7, lr}
 800c89e:	b082      	sub	sp, #8
 800c8a0:	af00      	add	r7, sp, #0
 800c8a2:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("netbuf_free: invalid buf", (buf != NULL), return;);
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	d109      	bne.n	800c8be <netbuf_free+0x22>
 800c8aa:	2281      	movs	r2, #129	; 0x81
 800c8ac:	490d      	ldr	r1, [pc, #52]	; (800c8e4 <netbuf_free+0x48>)
 800c8ae:	480e      	ldr	r0, [pc, #56]	; (800c8e8 <netbuf_free+0x4c>)
 800c8b0:	f00e fc30 	bl	801b114 <trace_printf>
 800c8b4:	490d      	ldr	r1, [pc, #52]	; (800c8ec <netbuf_free+0x50>)
 800c8b6:	480e      	ldr	r0, [pc, #56]	; (800c8f0 <netbuf_free+0x54>)
 800c8b8:	f00e fc2c 	bl	801b114 <trace_printf>
 800c8bc:	e7fe      	b.n	800c8bc <netbuf_free+0x20>
  if (buf->p != NULL) {
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	2b00      	cmp	r3, #0
 800c8c4:	d004      	beq.n	800c8d0 <netbuf_free+0x34>
    pbuf_free(buf->p);
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	681b      	ldr	r3, [r3, #0]
 800c8ca:	4618      	mov	r0, r3
 800c8cc:	f001 ff50 	bl	800e770 <pbuf_free>
  }
  buf->p = buf->ptr = NULL;
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	2200      	movs	r2, #0
 800c8d4:	605a      	str	r2, [r3, #4]
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	685a      	ldr	r2, [r3, #4]
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	601a      	str	r2, [r3, #0]
#if LWIP_CHECKSUM_ON_COPY
  buf->flags = 0;
  buf->toport_chksum = 0;
#endif /* LWIP_CHECKSUM_ON_COPY */
}
 800c8de:	3708      	adds	r7, #8
 800c8e0:	46bd      	mov	sp, r7
 800c8e2:	bd80      	pop	{r7, pc}
 800c8e4:	0801d598 	.word	0x0801d598
 800c8e8:	0801d51c 	.word	0x0801d51c
 800c8ec:	0801d53c 	.word	0x0801d53c
 800c8f0:	0801d570 	.word	0x0801d570

0800c8f4 <netbuf_data>:
 * @return ERR_OK if the information was retrieved,
 *         ERR_BUF on error.
 */
err_t
netbuf_data(struct netbuf *buf, void **dataptr, u16_t *len)
{
 800c8f4:	b580      	push	{r7, lr}
 800c8f6:	b084      	sub	sp, #16
 800c8f8:	af00      	add	r7, sp, #0
 800c8fa:	60f8      	str	r0, [r7, #12]
 800c8fc:	60b9      	str	r1, [r7, #8]
 800c8fe:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netbuf_data: invalid buf", (buf != NULL), return ERR_ARG;);
 800c900:	68fb      	ldr	r3, [r7, #12]
 800c902:	2b00      	cmp	r3, #0
 800c904:	d109      	bne.n	800c91a <netbuf_data+0x26>
 800c906:	22c6      	movs	r2, #198	; 0xc6
 800c908:	491c      	ldr	r1, [pc, #112]	; (800c97c <netbuf_data+0x88>)
 800c90a:	481d      	ldr	r0, [pc, #116]	; (800c980 <netbuf_data+0x8c>)
 800c90c:	f00e fc02 	bl	801b114 <trace_printf>
 800c910:	491c      	ldr	r1, [pc, #112]	; (800c984 <netbuf_data+0x90>)
 800c912:	481d      	ldr	r0, [pc, #116]	; (800c988 <netbuf_data+0x94>)
 800c914:	f00e fbfe 	bl	801b114 <trace_printf>
 800c918:	e7fe      	b.n	800c918 <netbuf_data+0x24>
  LWIP_ERROR("netbuf_data: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 800c91a:	68bb      	ldr	r3, [r7, #8]
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	d109      	bne.n	800c934 <netbuf_data+0x40>
 800c920:	22c7      	movs	r2, #199	; 0xc7
 800c922:	491a      	ldr	r1, [pc, #104]	; (800c98c <netbuf_data+0x98>)
 800c924:	4816      	ldr	r0, [pc, #88]	; (800c980 <netbuf_data+0x8c>)
 800c926:	f00e fbf5 	bl	801b114 <trace_printf>
 800c92a:	4916      	ldr	r1, [pc, #88]	; (800c984 <netbuf_data+0x90>)
 800c92c:	4816      	ldr	r0, [pc, #88]	; (800c988 <netbuf_data+0x94>)
 800c92e:	f00e fbf1 	bl	801b114 <trace_printf>
 800c932:	e7fe      	b.n	800c932 <netbuf_data+0x3e>
  LWIP_ERROR("netbuf_data: invalid len", (len != NULL), return ERR_ARG;);
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	2b00      	cmp	r3, #0
 800c938:	d109      	bne.n	800c94e <netbuf_data+0x5a>
 800c93a:	22c8      	movs	r2, #200	; 0xc8
 800c93c:	4914      	ldr	r1, [pc, #80]	; (800c990 <netbuf_data+0x9c>)
 800c93e:	4810      	ldr	r0, [pc, #64]	; (800c980 <netbuf_data+0x8c>)
 800c940:	f00e fbe8 	bl	801b114 <trace_printf>
 800c944:	490f      	ldr	r1, [pc, #60]	; (800c984 <netbuf_data+0x90>)
 800c946:	4810      	ldr	r0, [pc, #64]	; (800c988 <netbuf_data+0x94>)
 800c948:	f00e fbe4 	bl	801b114 <trace_printf>
 800c94c:	e7fe      	b.n	800c94c <netbuf_data+0x58>

  if (buf->ptr == NULL) {
 800c94e:	68fb      	ldr	r3, [r7, #12]
 800c950:	685b      	ldr	r3, [r3, #4]
 800c952:	2b00      	cmp	r3, #0
 800c954:	d102      	bne.n	800c95c <netbuf_data+0x68>
    return ERR_BUF;
 800c956:	f06f 0301 	mvn.w	r3, #1
 800c95a:	e00a      	b.n	800c972 <netbuf_data+0x7e>
  }
  *dataptr = buf->ptr->payload;
 800c95c:	68fb      	ldr	r3, [r7, #12]
 800c95e:	685b      	ldr	r3, [r3, #4]
 800c960:	685a      	ldr	r2, [r3, #4]
 800c962:	68bb      	ldr	r3, [r7, #8]
 800c964:	601a      	str	r2, [r3, #0]
  *len = buf->ptr->len;
 800c966:	68fb      	ldr	r3, [r7, #12]
 800c968:	685b      	ldr	r3, [r3, #4]
 800c96a:	895a      	ldrh	r2, [r3, #10]
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	801a      	strh	r2, [r3, #0]
  return ERR_OK;
 800c970:	2300      	movs	r3, #0
}
 800c972:	4618      	mov	r0, r3
 800c974:	3710      	adds	r7, #16
 800c976:	46bd      	mov	sp, r7
 800c978:	bd80      	pop	{r7, pc}
 800c97a:	bf00      	nop
 800c97c:	0801d604 	.word	0x0801d604
 800c980:	0801d51c 	.word	0x0801d51c
 800c984:	0801d53c 	.word	0x0801d53c
 800c988:	0801d570 	.word	0x0801d570
 800c98c:	0801d620 	.word	0x0801d620
 800c990:	0801d640 	.word	0x0801d640

0800c994 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800c994:	b580      	push	{r7, lr}
 800c996:	b084      	sub	sp, #16
 800c998:	af00      	add	r7, sp, #0
 800c99a:	6078      	str	r0, [r7, #4]
 800c99c:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800c99e:	f008 febf 	bl	8015720 <sys_timeouts_sleeptime>
 800c9a2:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800c9a4:	68fb      	ldr	r3, [r7, #12]
 800c9a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c9aa:	d10b      	bne.n	800c9c4 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800c9ac:	4813      	ldr	r0, [pc, #76]	; (800c9fc <tcpip_timeouts_mbox_fetch+0x68>)
 800c9ae:	f00e fb16 	bl	801afde <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800c9b2:	2200      	movs	r2, #0
 800c9b4:	6839      	ldr	r1, [r7, #0]
 800c9b6:	6878      	ldr	r0, [r7, #4]
 800c9b8:	f00e f982 	bl	801acc0 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800c9bc:	480f      	ldr	r0, [pc, #60]	; (800c9fc <tcpip_timeouts_mbox_fetch+0x68>)
 800c9be:	f00e faff 	bl	801afc0 <sys_mutex_lock>
    return;
 800c9c2:	e018      	b.n	800c9f6 <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800c9c4:	68fb      	ldr	r3, [r7, #12]
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	d102      	bne.n	800c9d0 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800c9ca:	f008 fe6f 	bl	80156ac <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800c9ce:	e7e6      	b.n	800c99e <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800c9d0:	480a      	ldr	r0, [pc, #40]	; (800c9fc <tcpip_timeouts_mbox_fetch+0x68>)
 800c9d2:	f00e fb04 	bl	801afde <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800c9d6:	68fa      	ldr	r2, [r7, #12]
 800c9d8:	6839      	ldr	r1, [r7, #0]
 800c9da:	6878      	ldr	r0, [r7, #4]
 800c9dc:	f00e f970 	bl	801acc0 <sys_arch_mbox_fetch>
 800c9e0:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800c9e2:	4806      	ldr	r0, [pc, #24]	; (800c9fc <tcpip_timeouts_mbox_fetch+0x68>)
 800c9e4:	f00e faec 	bl	801afc0 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800c9e8:	68bb      	ldr	r3, [r7, #8]
 800c9ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c9ee:	d102      	bne.n	800c9f6 <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800c9f0:	f008 fe5c 	bl	80156ac <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800c9f4:	e7d3      	b.n	800c99e <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800c9f6:	3710      	adds	r7, #16
 800c9f8:	46bd      	mov	sp, r7
 800c9fa:	bd80      	pop	{r7, pc}
 800c9fc:	2000d408 	.word	0x2000d408

0800ca00 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800ca00:	b580      	push	{r7, lr}
 800ca02:	b084      	sub	sp, #16
 800ca04:	af00      	add	r7, sp, #0
 800ca06:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800ca08:	4812      	ldr	r0, [pc, #72]	; (800ca54 <tcpip_thread+0x54>)
 800ca0a:	f00e fad9 	bl	801afc0 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800ca0e:	4b12      	ldr	r3, [pc, #72]	; (800ca58 <tcpip_thread+0x58>)
 800ca10:	681b      	ldr	r3, [r3, #0]
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	d005      	beq.n	800ca22 <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800ca16:	4b10      	ldr	r3, [pc, #64]	; (800ca58 <tcpip_thread+0x58>)
 800ca18:	681b      	ldr	r3, [r3, #0]
 800ca1a:	4a10      	ldr	r2, [pc, #64]	; (800ca5c <tcpip_thread+0x5c>)
 800ca1c:	6812      	ldr	r2, [r2, #0]
 800ca1e:	4610      	mov	r0, r2
 800ca20:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800ca22:	f107 030c 	add.w	r3, r7, #12
 800ca26:	4619      	mov	r1, r3
 800ca28:	480d      	ldr	r0, [pc, #52]	; (800ca60 <tcpip_thread+0x60>)
 800ca2a:	f7ff ffb3 	bl	800c994 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800ca2e:	68fb      	ldr	r3, [r7, #12]
 800ca30:	2b00      	cmp	r3, #0
 800ca32:	d109      	bne.n	800ca48 <tcpip_thread+0x48>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800ca34:	2291      	movs	r2, #145	; 0x91
 800ca36:	490b      	ldr	r1, [pc, #44]	; (800ca64 <tcpip_thread+0x64>)
 800ca38:	480b      	ldr	r0, [pc, #44]	; (800ca68 <tcpip_thread+0x68>)
 800ca3a:	f00e fb6b 	bl	801b114 <trace_printf>
 800ca3e:	490b      	ldr	r1, [pc, #44]	; (800ca6c <tcpip_thread+0x6c>)
 800ca40:	480b      	ldr	r0, [pc, #44]	; (800ca70 <tcpip_thread+0x70>)
 800ca42:	f00e fb67 	bl	801b114 <trace_printf>
 800ca46:	e7fe      	b.n	800ca46 <tcpip_thread+0x46>
      continue;
    }
    tcpip_thread_handle_msg(msg);
 800ca48:	68fb      	ldr	r3, [r7, #12]
 800ca4a:	4618      	mov	r0, r3
 800ca4c:	f000 f812 	bl	800ca74 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800ca50:	e7e7      	b.n	800ca22 <tcpip_thread+0x22>
 800ca52:	bf00      	nop
 800ca54:	2000d408 	.word	0x2000d408
 800ca58:	20009e6c 	.word	0x20009e6c
 800ca5c:	20009e70 	.word	0x20009e70
 800ca60:	20009e74 	.word	0x20009e74
 800ca64:	0801d694 	.word	0x0801d694
 800ca68:	0801d6b4 	.word	0x0801d6b4
 800ca6c:	0801d6d4 	.word	0x0801d6d4
 800ca70:	0801d704 	.word	0x0801d704

0800ca74 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800ca74:	b580      	push	{r7, lr}
 800ca76:	b082      	sub	sp, #8
 800ca78:	af00      	add	r7, sp, #0
 800ca7a:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	781b      	ldrb	r3, [r3, #0]
 800ca80:	2b02      	cmp	r3, #2
 800ca82:	d026      	beq.n	800cad2 <tcpip_thread_handle_msg+0x5e>
 800ca84:	2b02      	cmp	r3, #2
 800ca86:	dc2b      	bgt.n	800cae0 <tcpip_thread_handle_msg+0x6c>
 800ca88:	2b00      	cmp	r3, #0
 800ca8a:	d002      	beq.n	800ca92 <tcpip_thread_handle_msg+0x1e>
 800ca8c:	2b01      	cmp	r3, #1
 800ca8e:	d015      	beq.n	800cabc <tcpip_thread_handle_msg+0x48>
 800ca90:	e026      	b.n	800cae0 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	68db      	ldr	r3, [r3, #12]
 800ca96:	687a      	ldr	r2, [r7, #4]
 800ca98:	6850      	ldr	r0, [r2, #4]
 800ca9a:	687a      	ldr	r2, [r7, #4]
 800ca9c:	6892      	ldr	r2, [r2, #8]
 800ca9e:	4611      	mov	r1, r2
 800caa0:	4798      	blx	r3
 800caa2:	4603      	mov	r3, r0
 800caa4:	2b00      	cmp	r3, #0
 800caa6:	d004      	beq.n	800cab2 <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	685b      	ldr	r3, [r3, #4]
 800caac:	4618      	mov	r0, r3
 800caae:	f001 fe5f 	bl	800e770 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800cab2:	6879      	ldr	r1, [r7, #4]
 800cab4:	2009      	movs	r0, #9
 800cab6:	f000 ff41 	bl	800d93c <memp_free>
      break;
 800caba:	e01b      	b.n	800caf4 <tcpip_thread_handle_msg+0x80>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	685b      	ldr	r3, [r3, #4]
 800cac0:	687a      	ldr	r2, [r7, #4]
 800cac2:	6892      	ldr	r2, [r2, #8]
 800cac4:	4610      	mov	r0, r2
 800cac6:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800cac8:	6879      	ldr	r1, [r7, #4]
 800caca:	2008      	movs	r0, #8
 800cacc:	f000 ff36 	bl	800d93c <memp_free>
      break;
 800cad0:	e010      	b.n	800caf4 <tcpip_thread_handle_msg+0x80>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	685b      	ldr	r3, [r3, #4]
 800cad6:	687a      	ldr	r2, [r7, #4]
 800cad8:	6892      	ldr	r2, [r2, #8]
 800cada:	4610      	mov	r0, r2
 800cadc:	4798      	blx	r3
      break;
 800cade:	e009      	b.n	800caf4 <tcpip_thread_handle_msg+0x80>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800cae0:	22cf      	movs	r2, #207	; 0xcf
 800cae2:	4906      	ldr	r1, [pc, #24]	; (800cafc <tcpip_thread_handle_msg+0x88>)
 800cae4:	4806      	ldr	r0, [pc, #24]	; (800cb00 <tcpip_thread_handle_msg+0x8c>)
 800cae6:	f00e fb15 	bl	801b114 <trace_printf>
 800caea:	4906      	ldr	r1, [pc, #24]	; (800cb04 <tcpip_thread_handle_msg+0x90>)
 800caec:	4806      	ldr	r0, [pc, #24]	; (800cb08 <tcpip_thread_handle_msg+0x94>)
 800caee:	f00e fb11 	bl	801b114 <trace_printf>
 800caf2:	e7fe      	b.n	800caf2 <tcpip_thread_handle_msg+0x7e>
      break;
  }
}
 800caf4:	bf00      	nop
 800caf6:	3708      	adds	r7, #8
 800caf8:	46bd      	mov	sp, r7
 800cafa:	bd80      	pop	{r7, pc}
 800cafc:	0801d694 	.word	0x0801d694
 800cb00:	0801d6b4 	.word	0x0801d6b4
 800cb04:	0801d6d4 	.word	0x0801d6d4
 800cb08:	0801d704 	.word	0x0801d704

0800cb0c <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800cb0c:	b580      	push	{r7, lr}
 800cb0e:	b086      	sub	sp, #24
 800cb10:	af00      	add	r7, sp, #0
 800cb12:	60f8      	str	r0, [r7, #12]
 800cb14:	60b9      	str	r1, [r7, #8]
 800cb16:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800cb18:	481c      	ldr	r0, [pc, #112]	; (800cb8c <tcpip_inpkt+0x80>)
 800cb1a:	f00e f92c 	bl	801ad76 <sys_mbox_valid>
 800cb1e:	4603      	mov	r3, r0
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	d109      	bne.n	800cb38 <tcpip_inpkt+0x2c>
 800cb24:	22fc      	movs	r2, #252	; 0xfc
 800cb26:	491a      	ldr	r1, [pc, #104]	; (800cb90 <tcpip_inpkt+0x84>)
 800cb28:	481a      	ldr	r0, [pc, #104]	; (800cb94 <tcpip_inpkt+0x88>)
 800cb2a:	f00e faf3 	bl	801b114 <trace_printf>
 800cb2e:	491a      	ldr	r1, [pc, #104]	; (800cb98 <tcpip_inpkt+0x8c>)
 800cb30:	481a      	ldr	r0, [pc, #104]	; (800cb9c <tcpip_inpkt+0x90>)
 800cb32:	f00e faef 	bl	801b114 <trace_printf>
 800cb36:	e7fe      	b.n	800cb36 <tcpip_inpkt+0x2a>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800cb38:	2009      	movs	r0, #9
 800cb3a:	f000 fe9d 	bl	800d878 <memp_malloc>
 800cb3e:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800cb40:	697b      	ldr	r3, [r7, #20]
 800cb42:	2b00      	cmp	r3, #0
 800cb44:	d102      	bne.n	800cb4c <tcpip_inpkt+0x40>
    return ERR_MEM;
 800cb46:	f04f 33ff 	mov.w	r3, #4294967295
 800cb4a:	e01a      	b.n	800cb82 <tcpip_inpkt+0x76>
  }

  msg->type = TCPIP_MSG_INPKT;
 800cb4c:	697b      	ldr	r3, [r7, #20]
 800cb4e:	2200      	movs	r2, #0
 800cb50:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800cb52:	697b      	ldr	r3, [r7, #20]
 800cb54:	68fa      	ldr	r2, [r7, #12]
 800cb56:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800cb58:	697b      	ldr	r3, [r7, #20]
 800cb5a:	68ba      	ldr	r2, [r7, #8]
 800cb5c:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800cb5e:	697b      	ldr	r3, [r7, #20]
 800cb60:	687a      	ldr	r2, [r7, #4]
 800cb62:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800cb64:	6979      	ldr	r1, [r7, #20]
 800cb66:	4809      	ldr	r0, [pc, #36]	; (800cb8c <tcpip_inpkt+0x80>)
 800cb68:	f00e f886 	bl	801ac78 <sys_mbox_trypost>
 800cb6c:	4603      	mov	r3, r0
 800cb6e:	2b00      	cmp	r3, #0
 800cb70:	d006      	beq.n	800cb80 <tcpip_inpkt+0x74>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800cb72:	6979      	ldr	r1, [r7, #20]
 800cb74:	2009      	movs	r0, #9
 800cb76:	f000 fee1 	bl	800d93c <memp_free>
    return ERR_MEM;
 800cb7a:	f04f 33ff 	mov.w	r3, #4294967295
 800cb7e:	e000      	b.n	800cb82 <tcpip_inpkt+0x76>
  }
  return ERR_OK;
 800cb80:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800cb82:	4618      	mov	r0, r3
 800cb84:	3718      	adds	r7, #24
 800cb86:	46bd      	mov	sp, r7
 800cb88:	bd80      	pop	{r7, pc}
 800cb8a:	bf00      	nop
 800cb8c:	20009e74 	.word	0x20009e74
 800cb90:	0801d708 	.word	0x0801d708
 800cb94:	0801d6b4 	.word	0x0801d6b4
 800cb98:	0801d6d4 	.word	0x0801d6d4
 800cb9c:	0801d704 	.word	0x0801d704

0800cba0 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800cba0:	b580      	push	{r7, lr}
 800cba2:	b082      	sub	sp, #8
 800cba4:	af00      	add	r7, sp, #0
 800cba6:	6078      	str	r0, [r7, #4]
 800cba8:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800cbaa:	683b      	ldr	r3, [r7, #0]
 800cbac:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800cbb0:	f003 0318 	and.w	r3, r3, #24
 800cbb4:	2b00      	cmp	r3, #0
 800cbb6:	d006      	beq.n	800cbc6 <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800cbb8:	4a08      	ldr	r2, [pc, #32]	; (800cbdc <tcpip_input+0x3c>)
 800cbba:	6839      	ldr	r1, [r7, #0]
 800cbbc:	6878      	ldr	r0, [r7, #4]
 800cbbe:	f7ff ffa5 	bl	800cb0c <tcpip_inpkt>
 800cbc2:	4603      	mov	r3, r0
 800cbc4:	e005      	b.n	800cbd2 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800cbc6:	4a06      	ldr	r2, [pc, #24]	; (800cbe0 <tcpip_input+0x40>)
 800cbc8:	6839      	ldr	r1, [r7, #0]
 800cbca:	6878      	ldr	r0, [r7, #4]
 800cbcc:	f7ff ff9e 	bl	800cb0c <tcpip_inpkt>
 800cbd0:	4603      	mov	r3, r0
}
 800cbd2:	4618      	mov	r0, r3
 800cbd4:	3708      	adds	r7, #8
 800cbd6:	46bd      	mov	sp, r7
 800cbd8:	bd80      	pop	{r7, pc}
 800cbda:	bf00      	nop
 800cbdc:	0801a9a5 	.word	0x0801a9a5
 800cbe0:	0801967d 	.word	0x0801967d

0800cbe4 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800cbe4:	b580      	push	{r7, lr}
 800cbe6:	b084      	sub	sp, #16
 800cbe8:	af00      	add	r7, sp, #0
 800cbea:	6078      	str	r0, [r7, #4]
 800cbec:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800cbee:	481b      	ldr	r0, [pc, #108]	; (800cc5c <tcpip_try_callback+0x78>)
 800cbf0:	f00e f8c1 	bl	801ad76 <sys_mbox_valid>
 800cbf4:	4603      	mov	r3, r0
 800cbf6:	2b00      	cmp	r3, #0
 800cbf8:	d10a      	bne.n	800cc10 <tcpip_try_callback+0x2c>
 800cbfa:	f240 125d 	movw	r2, #349	; 0x15d
 800cbfe:	4918      	ldr	r1, [pc, #96]	; (800cc60 <tcpip_try_callback+0x7c>)
 800cc00:	4818      	ldr	r0, [pc, #96]	; (800cc64 <tcpip_try_callback+0x80>)
 800cc02:	f00e fa87 	bl	801b114 <trace_printf>
 800cc06:	4918      	ldr	r1, [pc, #96]	; (800cc68 <tcpip_try_callback+0x84>)
 800cc08:	4818      	ldr	r0, [pc, #96]	; (800cc6c <tcpip_try_callback+0x88>)
 800cc0a:	f00e fa83 	bl	801b114 <trace_printf>
 800cc0e:	e7fe      	b.n	800cc0e <tcpip_try_callback+0x2a>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800cc10:	2008      	movs	r0, #8
 800cc12:	f000 fe31 	bl	800d878 <memp_malloc>
 800cc16:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800cc18:	68fb      	ldr	r3, [r7, #12]
 800cc1a:	2b00      	cmp	r3, #0
 800cc1c:	d102      	bne.n	800cc24 <tcpip_try_callback+0x40>
    return ERR_MEM;
 800cc1e:	f04f 33ff 	mov.w	r3, #4294967295
 800cc22:	e017      	b.n	800cc54 <tcpip_try_callback+0x70>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800cc24:	68fb      	ldr	r3, [r7, #12]
 800cc26:	2201      	movs	r2, #1
 800cc28:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800cc2a:	68fb      	ldr	r3, [r7, #12]
 800cc2c:	687a      	ldr	r2, [r7, #4]
 800cc2e:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800cc30:	68fb      	ldr	r3, [r7, #12]
 800cc32:	683a      	ldr	r2, [r7, #0]
 800cc34:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800cc36:	68f9      	ldr	r1, [r7, #12]
 800cc38:	4808      	ldr	r0, [pc, #32]	; (800cc5c <tcpip_try_callback+0x78>)
 800cc3a:	f00e f81d 	bl	801ac78 <sys_mbox_trypost>
 800cc3e:	4603      	mov	r3, r0
 800cc40:	2b00      	cmp	r3, #0
 800cc42:	d006      	beq.n	800cc52 <tcpip_try_callback+0x6e>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800cc44:	68f9      	ldr	r1, [r7, #12]
 800cc46:	2008      	movs	r0, #8
 800cc48:	f000 fe78 	bl	800d93c <memp_free>
    return ERR_MEM;
 800cc4c:	f04f 33ff 	mov.w	r3, #4294967295
 800cc50:	e000      	b.n	800cc54 <tcpip_try_callback+0x70>
  }
  return ERR_OK;
 800cc52:	2300      	movs	r3, #0
}
 800cc54:	4618      	mov	r0, r3
 800cc56:	3710      	adds	r7, #16
 800cc58:	46bd      	mov	sp, r7
 800cc5a:	bd80      	pop	{r7, pc}
 800cc5c:	20009e74 	.word	0x20009e74
 800cc60:	0801d708 	.word	0x0801d708
 800cc64:	0801d6b4 	.word	0x0801d6b4
 800cc68:	0801d6d4 	.word	0x0801d6d4
 800cc6c:	0801d704 	.word	0x0801d704

0800cc70 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 800cc70:	b580      	push	{r7, lr}
 800cc72:	b084      	sub	sp, #16
 800cc74:	af00      	add	r7, sp, #0
 800cc76:	60f8      	str	r0, [r7, #12]
 800cc78:	60b9      	str	r1, [r7, #8]
 800cc7a:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 800cc7c:	4806      	ldr	r0, [pc, #24]	; (800cc98 <tcpip_send_msg_wait_sem+0x28>)
 800cc7e:	f00e f99f 	bl	801afc0 <sys_mutex_lock>
  fn(apimsg);
 800cc82:	68fb      	ldr	r3, [r7, #12]
 800cc84:	68b8      	ldr	r0, [r7, #8]
 800cc86:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 800cc88:	4803      	ldr	r0, [pc, #12]	; (800cc98 <tcpip_send_msg_wait_sem+0x28>)
 800cc8a:	f00e f9a8 	bl	801afde <sys_mutex_unlock>
  return ERR_OK;
 800cc8e:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 800cc90:	4618      	mov	r0, r3
 800cc92:	3710      	adds	r7, #16
 800cc94:	46bd      	mov	sp, r7
 800cc96:	bd80      	pop	{r7, pc}
 800cc98:	2000d408 	.word	0x2000d408

0800cc9c <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800cc9c:	b580      	push	{r7, lr}
 800cc9e:	b084      	sub	sp, #16
 800cca0:	af02      	add	r7, sp, #8
 800cca2:	6078      	str	r0, [r7, #4]
 800cca4:	6039      	str	r1, [r7, #0]
  lwip_init();
 800cca6:	f000 f87b 	bl	800cda0 <lwip_init>

  tcpip_init_done = initfunc;
 800ccaa:	4a1b      	ldr	r2, [pc, #108]	; (800cd18 <tcpip_init+0x7c>)
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800ccb0:	4a1a      	ldr	r2, [pc, #104]	; (800cd1c <tcpip_init+0x80>)
 800ccb2:	683b      	ldr	r3, [r7, #0]
 800ccb4:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800ccb6:	2106      	movs	r1, #6
 800ccb8:	4819      	ldr	r0, [pc, #100]	; (800cd20 <tcpip_init+0x84>)
 800ccba:	f00d ff7b 	bl	801abb4 <sys_mbox_new>
 800ccbe:	4603      	mov	r3, r0
 800ccc0:	2b00      	cmp	r3, #0
 800ccc2:	d00a      	beq.n	800ccda <tcpip_init+0x3e>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800ccc4:	f240 2261 	movw	r2, #609	; 0x261
 800ccc8:	4916      	ldr	r1, [pc, #88]	; (800cd24 <tcpip_init+0x88>)
 800ccca:	4817      	ldr	r0, [pc, #92]	; (800cd28 <tcpip_init+0x8c>)
 800cccc:	f00e fa22 	bl	801b114 <trace_printf>
 800ccd0:	4916      	ldr	r1, [pc, #88]	; (800cd2c <tcpip_init+0x90>)
 800ccd2:	4817      	ldr	r0, [pc, #92]	; (800cd30 <tcpip_init+0x94>)
 800ccd4:	f00e fa1e 	bl	801b114 <trace_printf>
 800ccd8:	e7fe      	b.n	800ccd8 <tcpip_init+0x3c>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800ccda:	4816      	ldr	r0, [pc, #88]	; (800cd34 <tcpip_init+0x98>)
 800ccdc:	f00e f934 	bl	801af48 <sys_mutex_new>
 800cce0:	4603      	mov	r3, r0
 800cce2:	2b00      	cmp	r3, #0
 800cce4:	d00a      	beq.n	800ccfc <tcpip_init+0x60>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800cce6:	f240 2265 	movw	r2, #613	; 0x265
 800ccea:	4913      	ldr	r1, [pc, #76]	; (800cd38 <tcpip_init+0x9c>)
 800ccec:	480e      	ldr	r0, [pc, #56]	; (800cd28 <tcpip_init+0x8c>)
 800ccee:	f00e fa11 	bl	801b114 <trace_printf>
 800ccf2:	490e      	ldr	r1, [pc, #56]	; (800cd2c <tcpip_init+0x90>)
 800ccf4:	480e      	ldr	r0, [pc, #56]	; (800cd30 <tcpip_init+0x94>)
 800ccf6:	f00e fa0d 	bl	801b114 <trace_printf>
 800ccfa:	e7fe      	b.n	800ccfa <tcpip_init+0x5e>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800ccfc:	2300      	movs	r3, #0
 800ccfe:	9300      	str	r3, [sp, #0]
 800cd00:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cd04:	2200      	movs	r2, #0
 800cd06:	490d      	ldr	r1, [pc, #52]	; (800cd3c <tcpip_init+0xa0>)
 800cd08:	480d      	ldr	r0, [pc, #52]	; (800cd40 <tcpip_init+0xa4>)
 800cd0a:	f00e f975 	bl	801aff8 <sys_thread_new>
}
 800cd0e:	bf00      	nop
 800cd10:	3708      	adds	r7, #8
 800cd12:	46bd      	mov	sp, r7
 800cd14:	bd80      	pop	{r7, pc}
 800cd16:	bf00      	nop
 800cd18:	20009e6c 	.word	0x20009e6c
 800cd1c:	20009e70 	.word	0x20009e70
 800cd20:	20009e74 	.word	0x20009e74
 800cd24:	0801d718 	.word	0x0801d718
 800cd28:	0801d6b4 	.word	0x0801d6b4
 800cd2c:	0801d6d4 	.word	0x0801d6d4
 800cd30:	0801d704 	.word	0x0801d704
 800cd34:	2000d408 	.word	0x2000d408
 800cd38:	0801d73c 	.word	0x0801d73c
 800cd3c:	0800ca01 	.word	0x0800ca01
 800cd40:	0801d760 	.word	0x0801d760

0800cd44 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800cd44:	b480      	push	{r7}
 800cd46:	b083      	sub	sp, #12
 800cd48:	af00      	add	r7, sp, #0
 800cd4a:	4603      	mov	r3, r0
 800cd4c:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800cd4e:	88fb      	ldrh	r3, [r7, #6]
 800cd50:	021b      	lsls	r3, r3, #8
 800cd52:	b21a      	sxth	r2, r3
 800cd54:	88fb      	ldrh	r3, [r7, #6]
 800cd56:	0a1b      	lsrs	r3, r3, #8
 800cd58:	b29b      	uxth	r3, r3
 800cd5a:	b21b      	sxth	r3, r3
 800cd5c:	4313      	orrs	r3, r2
 800cd5e:	b21b      	sxth	r3, r3
 800cd60:	b29b      	uxth	r3, r3
}
 800cd62:	4618      	mov	r0, r3
 800cd64:	370c      	adds	r7, #12
 800cd66:	46bd      	mov	sp, r7
 800cd68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd6c:	4770      	bx	lr

0800cd6e <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800cd6e:	b480      	push	{r7}
 800cd70:	b083      	sub	sp, #12
 800cd72:	af00      	add	r7, sp, #0
 800cd74:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	061a      	lsls	r2, r3, #24
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	021b      	lsls	r3, r3, #8
 800cd7e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800cd82:	431a      	orrs	r2, r3
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	0a1b      	lsrs	r3, r3, #8
 800cd88:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800cd8c:	431a      	orrs	r2, r3
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	0e1b      	lsrs	r3, r3, #24
 800cd92:	4313      	orrs	r3, r2
}
 800cd94:	4618      	mov	r0, r3
 800cd96:	370c      	adds	r7, #12
 800cd98:	46bd      	mov	sp, r7
 800cd9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd9e:	4770      	bx	lr

0800cda0 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800cda0:	b580      	push	{r7, lr}
 800cda2:	b082      	sub	sp, #8
 800cda4:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800cda6:	2300      	movs	r3, #0
 800cda8:	607b      	str	r3, [r7, #4]
#ifndef LWIP_SKIP_PACKING_CHECK
  LWIP_ASSERT("Struct packing not implemented correctly. Check your lwIP port.", sizeof(struct packed_struct_test) == PACKED_STRUCT_TEST_EXPECTED_SIZE);
#endif

  /* Modules initialization */
  stats_init();
 800cdaa:	f001 ffc9 	bl	800ed40 <stats_init>
#if !NO_SYS
  sys_init();
 800cdae:	f00e f8bd 	bl	801af2c <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800cdb2:	f000 f8e7 	bl	800cf84 <mem_init>
  memp_init();
 800cdb6:	f000 fce7 	bl	800d788 <memp_init>
  pbuf_init();
  netif_init();
 800cdba:	f000 fded 	bl	800d998 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800cdbe:	f008 fced 	bl	801579c <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800cdc2:	f001 ffcd 	bl	800ed60 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800cdc6:	f008 fc23 	bl	8015610 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800cdca:	bf00      	nop
 800cdcc:	3708      	adds	r7, #8
 800cdce:	46bd      	mov	sp, r7
 800cdd0:	bd80      	pop	{r7, pc}
	...

0800cdd4 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800cdd4:	b480      	push	{r7}
 800cdd6:	b083      	sub	sp, #12
 800cdd8:	af00      	add	r7, sp, #0
 800cdda:	4603      	mov	r3, r0
 800cddc:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800cdde:	4b05      	ldr	r3, [pc, #20]	; (800cdf4 <ptr_to_mem+0x20>)
 800cde0:	681a      	ldr	r2, [r3, #0]
 800cde2:	88fb      	ldrh	r3, [r7, #6]
 800cde4:	4413      	add	r3, r2
}
 800cde6:	4618      	mov	r0, r3
 800cde8:	370c      	adds	r7, #12
 800cdea:	46bd      	mov	sp, r7
 800cdec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdf0:	4770      	bx	lr
 800cdf2:	bf00      	nop
 800cdf4:	20009e78 	.word	0x20009e78

0800cdf8 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800cdf8:	b480      	push	{r7}
 800cdfa:	b083      	sub	sp, #12
 800cdfc:	af00      	add	r7, sp, #0
 800cdfe:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800ce00:	4b05      	ldr	r3, [pc, #20]	; (800ce18 <mem_to_ptr+0x20>)
 800ce02:	681b      	ldr	r3, [r3, #0]
 800ce04:	687a      	ldr	r2, [r7, #4]
 800ce06:	1ad3      	subs	r3, r2, r3
 800ce08:	b29b      	uxth	r3, r3
}
 800ce0a:	4618      	mov	r0, r3
 800ce0c:	370c      	adds	r7, #12
 800ce0e:	46bd      	mov	sp, r7
 800ce10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce14:	4770      	bx	lr
 800ce16:	bf00      	nop
 800ce18:	20009e78 	.word	0x20009e78

0800ce1c <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800ce1c:	b590      	push	{r4, r7, lr}
 800ce1e:	b085      	sub	sp, #20
 800ce20:	af00      	add	r7, sp, #0
 800ce22:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800ce24:	4b4d      	ldr	r3, [pc, #308]	; (800cf5c <plug_holes+0x140>)
 800ce26:	681b      	ldr	r3, [r3, #0]
 800ce28:	687a      	ldr	r2, [r7, #4]
 800ce2a:	429a      	cmp	r2, r3
 800ce2c:	d20a      	bcs.n	800ce44 <plug_holes+0x28>
 800ce2e:	f240 12df 	movw	r2, #479	; 0x1df
 800ce32:	494b      	ldr	r1, [pc, #300]	; (800cf60 <plug_holes+0x144>)
 800ce34:	484b      	ldr	r0, [pc, #300]	; (800cf64 <plug_holes+0x148>)
 800ce36:	f00e f96d 	bl	801b114 <trace_printf>
 800ce3a:	494b      	ldr	r1, [pc, #300]	; (800cf68 <plug_holes+0x14c>)
 800ce3c:	484b      	ldr	r0, [pc, #300]	; (800cf6c <plug_holes+0x150>)
 800ce3e:	f00e f969 	bl	801b114 <trace_printf>
 800ce42:	e7fe      	b.n	800ce42 <plug_holes+0x26>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800ce44:	4b4a      	ldr	r3, [pc, #296]	; (800cf70 <plug_holes+0x154>)
 800ce46:	681b      	ldr	r3, [r3, #0]
 800ce48:	687a      	ldr	r2, [r7, #4]
 800ce4a:	429a      	cmp	r2, r3
 800ce4c:	d30a      	bcc.n	800ce64 <plug_holes+0x48>
 800ce4e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800ce52:	4948      	ldr	r1, [pc, #288]	; (800cf74 <plug_holes+0x158>)
 800ce54:	4843      	ldr	r0, [pc, #268]	; (800cf64 <plug_holes+0x148>)
 800ce56:	f00e f95d 	bl	801b114 <trace_printf>
 800ce5a:	4943      	ldr	r1, [pc, #268]	; (800cf68 <plug_holes+0x14c>)
 800ce5c:	4843      	ldr	r0, [pc, #268]	; (800cf6c <plug_holes+0x150>)
 800ce5e:	f00e f959 	bl	801b114 <trace_printf>
 800ce62:	e7fe      	b.n	800ce62 <plug_holes+0x46>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	791b      	ldrb	r3, [r3, #4]
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	d00a      	beq.n	800ce82 <plug_holes+0x66>
 800ce6c:	f240 12e1 	movw	r2, #481	; 0x1e1
 800ce70:	4941      	ldr	r1, [pc, #260]	; (800cf78 <plug_holes+0x15c>)
 800ce72:	483c      	ldr	r0, [pc, #240]	; (800cf64 <plug_holes+0x148>)
 800ce74:	f00e f94e 	bl	801b114 <trace_printf>
 800ce78:	493b      	ldr	r1, [pc, #236]	; (800cf68 <plug_holes+0x14c>)
 800ce7a:	483c      	ldr	r0, [pc, #240]	; (800cf6c <plug_holes+0x150>)
 800ce7c:	f00e f94a 	bl	801b114 <trace_printf>
 800ce80:	e7fe      	b.n	800ce80 <plug_holes+0x64>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	881b      	ldrh	r3, [r3, #0]
 800ce86:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ce8a:	d90a      	bls.n	800cea2 <plug_holes+0x86>
 800ce8c:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800ce90:	493a      	ldr	r1, [pc, #232]	; (800cf7c <plug_holes+0x160>)
 800ce92:	4834      	ldr	r0, [pc, #208]	; (800cf64 <plug_holes+0x148>)
 800ce94:	f00e f93e 	bl	801b114 <trace_printf>
 800ce98:	4933      	ldr	r1, [pc, #204]	; (800cf68 <plug_holes+0x14c>)
 800ce9a:	4834      	ldr	r0, [pc, #208]	; (800cf6c <plug_holes+0x150>)
 800ce9c:	f00e f93a 	bl	801b114 <trace_printf>
 800cea0:	e7fe      	b.n	800cea0 <plug_holes+0x84>

  nmem = ptr_to_mem(mem->next);
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	881b      	ldrh	r3, [r3, #0]
 800cea6:	4618      	mov	r0, r3
 800cea8:	f7ff ff94 	bl	800cdd4 <ptr_to_mem>
 800ceac:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800ceae:	687a      	ldr	r2, [r7, #4]
 800ceb0:	68fb      	ldr	r3, [r7, #12]
 800ceb2:	429a      	cmp	r2, r3
 800ceb4:	d024      	beq.n	800cf00 <plug_holes+0xe4>
 800ceb6:	68fb      	ldr	r3, [r7, #12]
 800ceb8:	791b      	ldrb	r3, [r3, #4]
 800ceba:	2b00      	cmp	r3, #0
 800cebc:	d120      	bne.n	800cf00 <plug_holes+0xe4>
 800cebe:	4b2c      	ldr	r3, [pc, #176]	; (800cf70 <plug_holes+0x154>)
 800cec0:	681b      	ldr	r3, [r3, #0]
 800cec2:	68fa      	ldr	r2, [r7, #12]
 800cec4:	429a      	cmp	r2, r3
 800cec6:	d01b      	beq.n	800cf00 <plug_holes+0xe4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800cec8:	4b2d      	ldr	r3, [pc, #180]	; (800cf80 <plug_holes+0x164>)
 800ceca:	681b      	ldr	r3, [r3, #0]
 800cecc:	68fa      	ldr	r2, [r7, #12]
 800cece:	429a      	cmp	r2, r3
 800ced0:	d102      	bne.n	800ced8 <plug_holes+0xbc>
      lfree = mem;
 800ced2:	4a2b      	ldr	r2, [pc, #172]	; (800cf80 <plug_holes+0x164>)
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800ced8:	68fb      	ldr	r3, [r7, #12]
 800ceda:	881a      	ldrh	r2, [r3, #0]
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800cee0:	68fb      	ldr	r3, [r7, #12]
 800cee2:	881b      	ldrh	r3, [r3, #0]
 800cee4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800cee8:	d00a      	beq.n	800cf00 <plug_holes+0xe4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800ceea:	68fb      	ldr	r3, [r7, #12]
 800ceec:	881b      	ldrh	r3, [r3, #0]
 800ceee:	4618      	mov	r0, r3
 800cef0:	f7ff ff70 	bl	800cdd4 <ptr_to_mem>
 800cef4:	4604      	mov	r4, r0
 800cef6:	6878      	ldr	r0, [r7, #4]
 800cef8:	f7ff ff7e 	bl	800cdf8 <mem_to_ptr>
 800cefc:	4603      	mov	r3, r0
 800cefe:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	885b      	ldrh	r3, [r3, #2]
 800cf04:	4618      	mov	r0, r3
 800cf06:	f7ff ff65 	bl	800cdd4 <ptr_to_mem>
 800cf0a:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800cf0c:	68ba      	ldr	r2, [r7, #8]
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	429a      	cmp	r2, r3
 800cf12:	d01f      	beq.n	800cf54 <plug_holes+0x138>
 800cf14:	68bb      	ldr	r3, [r7, #8]
 800cf16:	791b      	ldrb	r3, [r3, #4]
 800cf18:	2b00      	cmp	r3, #0
 800cf1a:	d11b      	bne.n	800cf54 <plug_holes+0x138>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800cf1c:	4b18      	ldr	r3, [pc, #96]	; (800cf80 <plug_holes+0x164>)
 800cf1e:	681b      	ldr	r3, [r3, #0]
 800cf20:	687a      	ldr	r2, [r7, #4]
 800cf22:	429a      	cmp	r2, r3
 800cf24:	d102      	bne.n	800cf2c <plug_holes+0x110>
      lfree = pmem;
 800cf26:	4a16      	ldr	r2, [pc, #88]	; (800cf80 <plug_holes+0x164>)
 800cf28:	68bb      	ldr	r3, [r7, #8]
 800cf2a:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	881a      	ldrh	r2, [r3, #0]
 800cf30:	68bb      	ldr	r3, [r7, #8]
 800cf32:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	881b      	ldrh	r3, [r3, #0]
 800cf38:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800cf3c:	d00a      	beq.n	800cf54 <plug_holes+0x138>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	881b      	ldrh	r3, [r3, #0]
 800cf42:	4618      	mov	r0, r3
 800cf44:	f7ff ff46 	bl	800cdd4 <ptr_to_mem>
 800cf48:	4604      	mov	r4, r0
 800cf4a:	68b8      	ldr	r0, [r7, #8]
 800cf4c:	f7ff ff54 	bl	800cdf8 <mem_to_ptr>
 800cf50:	4603      	mov	r3, r0
 800cf52:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800cf54:	bf00      	nop
 800cf56:	3714      	adds	r7, #20
 800cf58:	46bd      	mov	sp, r7
 800cf5a:	bd90      	pop	{r4, r7, pc}
 800cf5c:	20009e78 	.word	0x20009e78
 800cf60:	0801d770 	.word	0x0801d770
 800cf64:	0801d788 	.word	0x0801d788
 800cf68:	0801d7a8 	.word	0x0801d7a8
 800cf6c:	0801d7d8 	.word	0x0801d7d8
 800cf70:	20009e7c 	.word	0x20009e7c
 800cf74:	0801d7dc 	.word	0x0801d7dc
 800cf78:	0801d7f8 	.word	0x0801d7f8
 800cf7c:	0801d814 	.word	0x0801d814
 800cf80:	20009e84 	.word	0x20009e84

0800cf84 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800cf84:	b580      	push	{r7, lr}
 800cf86:	b082      	sub	sp, #8
 800cf88:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800cf8a:	4b23      	ldr	r3, [pc, #140]	; (800d018 <mem_init+0x94>)
 800cf8c:	3303      	adds	r3, #3
 800cf8e:	f023 0303 	bic.w	r3, r3, #3
 800cf92:	461a      	mov	r2, r3
 800cf94:	4b21      	ldr	r3, [pc, #132]	; (800d01c <mem_init+0x98>)
 800cf96:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800cf98:	4b20      	ldr	r3, [pc, #128]	; (800d01c <mem_init+0x98>)
 800cf9a:	681b      	ldr	r3, [r3, #0]
 800cf9c:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800cfa4:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	2200      	movs	r2, #0
 800cfaa:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	2200      	movs	r2, #0
 800cfb0:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800cfb2:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 800cfb6:	f7ff ff0d 	bl	800cdd4 <ptr_to_mem>
 800cfba:	4603      	mov	r3, r0
 800cfbc:	4a18      	ldr	r2, [pc, #96]	; (800d020 <mem_init+0x9c>)
 800cfbe:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800cfc0:	4b17      	ldr	r3, [pc, #92]	; (800d020 <mem_init+0x9c>)
 800cfc2:	681b      	ldr	r3, [r3, #0]
 800cfc4:	2201      	movs	r2, #1
 800cfc6:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800cfc8:	4b15      	ldr	r3, [pc, #84]	; (800d020 <mem_init+0x9c>)
 800cfca:	681b      	ldr	r3, [r3, #0]
 800cfcc:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800cfd0:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800cfd2:	4b13      	ldr	r3, [pc, #76]	; (800d020 <mem_init+0x9c>)
 800cfd4:	681b      	ldr	r3, [r3, #0]
 800cfd6:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800cfda:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800cfdc:	4b0f      	ldr	r3, [pc, #60]	; (800d01c <mem_init+0x98>)
 800cfde:	681b      	ldr	r3, [r3, #0]
 800cfe0:	4a10      	ldr	r2, [pc, #64]	; (800d024 <mem_init+0xa0>)
 800cfe2:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);
 800cfe4:	4b10      	ldr	r3, [pc, #64]	; (800d028 <mem_init+0xa4>)
 800cfe6:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800cfea:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800cfee:	480f      	ldr	r0, [pc, #60]	; (800d02c <mem_init+0xa8>)
 800cff0:	f00d ffaa 	bl	801af48 <sys_mutex_new>
 800cff4:	4603      	mov	r3, r0
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	d00a      	beq.n	800d010 <mem_init+0x8c>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800cffa:	f240 221f 	movw	r2, #543	; 0x21f
 800cffe:	490c      	ldr	r1, [pc, #48]	; (800d030 <mem_init+0xac>)
 800d000:	480c      	ldr	r0, [pc, #48]	; (800d034 <mem_init+0xb0>)
 800d002:	f00e f887 	bl	801b114 <trace_printf>
 800d006:	490c      	ldr	r1, [pc, #48]	; (800d038 <mem_init+0xb4>)
 800d008:	480c      	ldr	r0, [pc, #48]	; (800d03c <mem_init+0xb8>)
 800d00a:	f00e f883 	bl	801b114 <trace_printf>
 800d00e:	e7fe      	b.n	800d00e <mem_init+0x8a>
  }
}
 800d010:	bf00      	nop
 800d012:	3708      	adds	r7, #8
 800d014:	46bd      	mov	sp, r7
 800d016:	bd80      	pop	{r7, pc}
 800d018:	2000d424 	.word	0x2000d424
 800d01c:	20009e78 	.word	0x20009e78
 800d020:	20009e7c 	.word	0x20009e7c
 800d024:	20009e84 	.word	0x20009e84
 800d028:	20010b7c 	.word	0x20010b7c
 800d02c:	20009e80 	.word	0x20009e80
 800d030:	0801d840 	.word	0x0801d840
 800d034:	0801d788 	.word	0x0801d788
 800d038:	0801d7a8 	.word	0x0801d7a8
 800d03c:	0801d7d8 	.word	0x0801d7d8

0800d040 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800d040:	b580      	push	{r7, lr}
 800d042:	b086      	sub	sp, #24
 800d044:	af00      	add	r7, sp, #0
 800d046:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800d048:	6878      	ldr	r0, [r7, #4]
 800d04a:	f7ff fed5 	bl	800cdf8 <mem_to_ptr>
 800d04e:	4603      	mov	r3, r0
 800d050:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	881b      	ldrh	r3, [r3, #0]
 800d056:	4618      	mov	r0, r3
 800d058:	f7ff febc 	bl	800cdd4 <ptr_to_mem>
 800d05c:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	885b      	ldrh	r3, [r3, #2]
 800d062:	4618      	mov	r0, r3
 800d064:	f7ff feb6 	bl	800cdd4 <ptr_to_mem>
 800d068:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	881b      	ldrh	r3, [r3, #0]
 800d06e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d072:	d818      	bhi.n	800d0a6 <mem_link_valid+0x66>
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	885b      	ldrh	r3, [r3, #2]
 800d078:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d07c:	d813      	bhi.n	800d0a6 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800d082:	8afa      	ldrh	r2, [r7, #22]
 800d084:	429a      	cmp	r2, r3
 800d086:	d004      	beq.n	800d092 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800d088:	68fb      	ldr	r3, [r7, #12]
 800d08a:	881b      	ldrh	r3, [r3, #0]
 800d08c:	8afa      	ldrh	r2, [r7, #22]
 800d08e:	429a      	cmp	r2, r3
 800d090:	d109      	bne.n	800d0a6 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800d092:	4b08      	ldr	r3, [pc, #32]	; (800d0b4 <mem_link_valid+0x74>)
 800d094:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800d096:	693a      	ldr	r2, [r7, #16]
 800d098:	429a      	cmp	r2, r3
 800d09a:	d006      	beq.n	800d0aa <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800d09c:	693b      	ldr	r3, [r7, #16]
 800d09e:	885b      	ldrh	r3, [r3, #2]
 800d0a0:	8afa      	ldrh	r2, [r7, #22]
 800d0a2:	429a      	cmp	r2, r3
 800d0a4:	d001      	beq.n	800d0aa <mem_link_valid+0x6a>
    return 0;
 800d0a6:	2300      	movs	r3, #0
 800d0a8:	e000      	b.n	800d0ac <mem_link_valid+0x6c>
  }
  return 1;
 800d0aa:	2301      	movs	r3, #1
}
 800d0ac:	4618      	mov	r0, r3
 800d0ae:	3718      	adds	r7, #24
 800d0b0:	46bd      	mov	sp, r7
 800d0b2:	bd80      	pop	{r7, pc}
 800d0b4:	20009e7c 	.word	0x20009e7c

0800d0b8 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800d0b8:	b580      	push	{r7, lr}
 800d0ba:	b084      	sub	sp, #16
 800d0bc:	af00      	add	r7, sp, #0
 800d0be:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	2b00      	cmp	r3, #0
 800d0c4:	d06f      	beq.n	800d1a6 <mem_free+0xee>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	f003 0303 	and.w	r3, r3, #3
 800d0cc:	2b00      	cmp	r3, #0
 800d0ce:	d00a      	beq.n	800d0e6 <mem_free+0x2e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800d0d0:	f240 2273 	movw	r2, #627	; 0x273
 800d0d4:	4936      	ldr	r1, [pc, #216]	; (800d1b0 <mem_free+0xf8>)
 800d0d6:	4837      	ldr	r0, [pc, #220]	; (800d1b4 <mem_free+0xfc>)
 800d0d8:	f00e f81c 	bl	801b114 <trace_printf>
 800d0dc:	4936      	ldr	r1, [pc, #216]	; (800d1b8 <mem_free+0x100>)
 800d0de:	4837      	ldr	r0, [pc, #220]	; (800d1bc <mem_free+0x104>)
 800d0e0:	f00e f818 	bl	801b114 <trace_printf>
 800d0e4:	e7fe      	b.n	800d0e4 <mem_free+0x2c>
    return;
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	3b08      	subs	r3, #8
 800d0ea:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800d0ec:	4b34      	ldr	r3, [pc, #208]	; (800d1c0 <mem_free+0x108>)
 800d0ee:	681b      	ldr	r3, [r3, #0]
 800d0f0:	68fa      	ldr	r2, [r7, #12]
 800d0f2:	429a      	cmp	r2, r3
 800d0f4:	d306      	bcc.n	800d104 <mem_free+0x4c>
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	f103 020c 	add.w	r2, r3, #12
 800d0fc:	4b31      	ldr	r3, [pc, #196]	; (800d1c4 <mem_free+0x10c>)
 800d0fe:	681b      	ldr	r3, [r3, #0]
 800d100:	429a      	cmp	r2, r3
 800d102:	d90a      	bls.n	800d11a <mem_free+0x62>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800d104:	f240 227f 	movw	r2, #639	; 0x27f
 800d108:	492f      	ldr	r1, [pc, #188]	; (800d1c8 <mem_free+0x110>)
 800d10a:	482a      	ldr	r0, [pc, #168]	; (800d1b4 <mem_free+0xfc>)
 800d10c:	f00e f802 	bl	801b114 <trace_printf>
 800d110:	4929      	ldr	r1, [pc, #164]	; (800d1b8 <mem_free+0x100>)
 800d112:	482a      	ldr	r0, [pc, #168]	; (800d1bc <mem_free+0x104>)
 800d114:	f00d fffe 	bl	801b114 <trace_printf>
 800d118:	e7fe      	b.n	800d118 <mem_free+0x60>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800d11a:	482c      	ldr	r0, [pc, #176]	; (800d1cc <mem_free+0x114>)
 800d11c:	f00d ff50 	bl	801afc0 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800d120:	68fb      	ldr	r3, [r7, #12]
 800d122:	791b      	ldrb	r3, [r3, #4]
 800d124:	2b00      	cmp	r3, #0
 800d126:	d10a      	bne.n	800d13e <mem_free+0x86>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800d128:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800d12c:	4928      	ldr	r1, [pc, #160]	; (800d1d0 <mem_free+0x118>)
 800d12e:	4821      	ldr	r0, [pc, #132]	; (800d1b4 <mem_free+0xfc>)
 800d130:	f00d fff0 	bl	801b114 <trace_printf>
 800d134:	4920      	ldr	r1, [pc, #128]	; (800d1b8 <mem_free+0x100>)
 800d136:	4821      	ldr	r0, [pc, #132]	; (800d1bc <mem_free+0x104>)
 800d138:	f00d ffec 	bl	801b114 <trace_printf>
 800d13c:	e7fe      	b.n	800d13c <mem_free+0x84>
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
  }

  if (!mem_link_valid(mem)) {
 800d13e:	68f8      	ldr	r0, [r7, #12]
 800d140:	f7ff ff7e 	bl	800d040 <mem_link_valid>
 800d144:	4603      	mov	r3, r0
 800d146:	2b00      	cmp	r3, #0
 800d148:	d10a      	bne.n	800d160 <mem_free+0xa8>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800d14a:	f240 2295 	movw	r2, #661	; 0x295
 800d14e:	4921      	ldr	r1, [pc, #132]	; (800d1d4 <mem_free+0x11c>)
 800d150:	4818      	ldr	r0, [pc, #96]	; (800d1b4 <mem_free+0xfc>)
 800d152:	f00d ffdf 	bl	801b114 <trace_printf>
 800d156:	4918      	ldr	r1, [pc, #96]	; (800d1b8 <mem_free+0x100>)
 800d158:	4818      	ldr	r0, [pc, #96]	; (800d1bc <mem_free+0x104>)
 800d15a:	f00d ffdb 	bl	801b114 <trace_printf>
 800d15e:	e7fe      	b.n	800d15e <mem_free+0xa6>
    MEM_STATS_INC_LOCKED(illegal);
    return;
  }

  /* mem is now unused. */
  mem->used = 0;
 800d160:	68fb      	ldr	r3, [r7, #12]
 800d162:	2200      	movs	r2, #0
 800d164:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800d166:	4b1c      	ldr	r3, [pc, #112]	; (800d1d8 <mem_free+0x120>)
 800d168:	681b      	ldr	r3, [r3, #0]
 800d16a:	68fa      	ldr	r2, [r7, #12]
 800d16c:	429a      	cmp	r2, r3
 800d16e:	d202      	bcs.n	800d176 <mem_free+0xbe>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800d170:	4a19      	ldr	r2, [pc, #100]	; (800d1d8 <mem_free+0x120>)
 800d172:	68fb      	ldr	r3, [r7, #12]
 800d174:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));
 800d176:	4b19      	ldr	r3, [pc, #100]	; (800d1dc <mem_free+0x124>)
 800d178:	f8b3 20b0 	ldrh.w	r2, [r3, #176]	; 0xb0
 800d17c:	4b10      	ldr	r3, [pc, #64]	; (800d1c0 <mem_free+0x108>)
 800d17e:	681b      	ldr	r3, [r3, #0]
 800d180:	68f9      	ldr	r1, [r7, #12]
 800d182:	1acb      	subs	r3, r1, r3
 800d184:	b299      	uxth	r1, r3
 800d186:	68fb      	ldr	r3, [r7, #12]
 800d188:	881b      	ldrh	r3, [r3, #0]
 800d18a:	1acb      	subs	r3, r1, r3
 800d18c:	b29b      	uxth	r3, r3
 800d18e:	4413      	add	r3, r2
 800d190:	b29a      	uxth	r2, r3
 800d192:	4b12      	ldr	r3, [pc, #72]	; (800d1dc <mem_free+0x124>)
 800d194:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800d198:	68f8      	ldr	r0, [r7, #12]
 800d19a:	f7ff fe3f 	bl	800ce1c <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800d19e:	480b      	ldr	r0, [pc, #44]	; (800d1cc <mem_free+0x114>)
 800d1a0:	f00d ff1d 	bl	801afde <sys_mutex_unlock>
 800d1a4:	e000      	b.n	800d1a8 <mem_free+0xf0>
    return;
 800d1a6:	bf00      	nop
}
 800d1a8:	3710      	adds	r7, #16
 800d1aa:	46bd      	mov	sp, r7
 800d1ac:	bd80      	pop	{r7, pc}
 800d1ae:	bf00      	nop
 800d1b0:	0801d85c 	.word	0x0801d85c
 800d1b4:	0801d788 	.word	0x0801d788
 800d1b8:	0801d7a8 	.word	0x0801d7a8
 800d1bc:	0801d7d8 	.word	0x0801d7d8
 800d1c0:	20009e78 	.word	0x20009e78
 800d1c4:	20009e7c 	.word	0x20009e7c
 800d1c8:	0801d880 	.word	0x0801d880
 800d1cc:	20009e80 	.word	0x20009e80
 800d1d0:	0801d89c 	.word	0x0801d89c
 800d1d4:	0801d8c4 	.word	0x0801d8c4
 800d1d8:	20009e84 	.word	0x20009e84
 800d1dc:	20010b7c 	.word	0x20010b7c

0800d1e0 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800d1e0:	b580      	push	{r7, lr}
 800d1e2:	b088      	sub	sp, #32
 800d1e4:	af00      	add	r7, sp, #0
 800d1e6:	6078      	str	r0, [r7, #4]
 800d1e8:	460b      	mov	r3, r1
 800d1ea:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800d1ec:	887b      	ldrh	r3, [r7, #2]
 800d1ee:	3303      	adds	r3, #3
 800d1f0:	b29b      	uxth	r3, r3
 800d1f2:	f023 0303 	bic.w	r3, r3, #3
 800d1f6:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800d1f8:	8bfb      	ldrh	r3, [r7, #30]
 800d1fa:	2b0b      	cmp	r3, #11
 800d1fc:	d801      	bhi.n	800d202 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800d1fe:	230c      	movs	r3, #12
 800d200:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800d202:	8bfb      	ldrh	r3, [r7, #30]
 800d204:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d208:	d803      	bhi.n	800d212 <mem_trim+0x32>
 800d20a:	8bfa      	ldrh	r2, [r7, #30]
 800d20c:	887b      	ldrh	r3, [r7, #2]
 800d20e:	429a      	cmp	r2, r3
 800d210:	d201      	bcs.n	800d216 <mem_trim+0x36>
    return NULL;
 800d212:	2300      	movs	r3, #0
 800d214:	e108      	b.n	800d428 <mem_trim+0x248>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800d216:	4b86      	ldr	r3, [pc, #536]	; (800d430 <mem_trim+0x250>)
 800d218:	681b      	ldr	r3, [r3, #0]
 800d21a:	687a      	ldr	r2, [r7, #4]
 800d21c:	429a      	cmp	r2, r3
 800d21e:	d304      	bcc.n	800d22a <mem_trim+0x4a>
 800d220:	4b84      	ldr	r3, [pc, #528]	; (800d434 <mem_trim+0x254>)
 800d222:	681b      	ldr	r3, [r3, #0]
 800d224:	687a      	ldr	r2, [r7, #4]
 800d226:	429a      	cmp	r2, r3
 800d228:	d30a      	bcc.n	800d240 <mem_trim+0x60>
 800d22a:	f240 22d1 	movw	r2, #721	; 0x2d1
 800d22e:	4982      	ldr	r1, [pc, #520]	; (800d438 <mem_trim+0x258>)
 800d230:	4882      	ldr	r0, [pc, #520]	; (800d43c <mem_trim+0x25c>)
 800d232:	f00d ff6f 	bl	801b114 <trace_printf>
 800d236:	4982      	ldr	r1, [pc, #520]	; (800d440 <mem_trim+0x260>)
 800d238:	4882      	ldr	r0, [pc, #520]	; (800d444 <mem_trim+0x264>)
 800d23a:	f00d ff6b 	bl	801b114 <trace_printf>
 800d23e:	e7fe      	b.n	800d23e <mem_trim+0x5e>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800d240:	4b7b      	ldr	r3, [pc, #492]	; (800d430 <mem_trim+0x250>)
 800d242:	681b      	ldr	r3, [r3, #0]
 800d244:	687a      	ldr	r2, [r7, #4]
 800d246:	429a      	cmp	r2, r3
 800d248:	d304      	bcc.n	800d254 <mem_trim+0x74>
 800d24a:	4b7a      	ldr	r3, [pc, #488]	; (800d434 <mem_trim+0x254>)
 800d24c:	681b      	ldr	r3, [r3, #0]
 800d24e:	687a      	ldr	r2, [r7, #4]
 800d250:	429a      	cmp	r2, r3
 800d252:	d30f      	bcc.n	800d274 <mem_trim+0x94>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800d254:	f00d fef6 	bl	801b044 <sys_arch_protect>
 800d258:	60b8      	str	r0, [r7, #8]
 800d25a:	4b7b      	ldr	r3, [pc, #492]	; (800d448 <mem_trim+0x268>)
 800d25c:	f8b3 30b4 	ldrh.w	r3, [r3, #180]	; 0xb4
 800d260:	3301      	adds	r3, #1
 800d262:	b29a      	uxth	r2, r3
 800d264:	4b78      	ldr	r3, [pc, #480]	; (800d448 <mem_trim+0x268>)
 800d266:	f8a3 20b4 	strh.w	r2, [r3, #180]	; 0xb4
 800d26a:	68b8      	ldr	r0, [r7, #8]
 800d26c:	f00d fef8 	bl	801b060 <sys_arch_unprotect>
    return rmem;
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	e0d9      	b.n	800d428 <mem_trim+0x248>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	3b08      	subs	r3, #8
 800d278:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800d27a:	69b8      	ldr	r0, [r7, #24]
 800d27c:	f7ff fdbc 	bl	800cdf8 <mem_to_ptr>
 800d280:	4603      	mov	r3, r0
 800d282:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800d284:	69bb      	ldr	r3, [r7, #24]
 800d286:	881a      	ldrh	r2, [r3, #0]
 800d288:	8afb      	ldrh	r3, [r7, #22]
 800d28a:	1ad3      	subs	r3, r2, r3
 800d28c:	b29b      	uxth	r3, r3
 800d28e:	3b08      	subs	r3, #8
 800d290:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800d292:	8bfa      	ldrh	r2, [r7, #30]
 800d294:	8abb      	ldrh	r3, [r7, #20]
 800d296:	429a      	cmp	r2, r3
 800d298:	d90a      	bls.n	800d2b0 <mem_trim+0xd0>
 800d29a:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800d29e:	496b      	ldr	r1, [pc, #428]	; (800d44c <mem_trim+0x26c>)
 800d2a0:	4866      	ldr	r0, [pc, #408]	; (800d43c <mem_trim+0x25c>)
 800d2a2:	f00d ff37 	bl	801b114 <trace_printf>
 800d2a6:	4966      	ldr	r1, [pc, #408]	; (800d440 <mem_trim+0x260>)
 800d2a8:	4866      	ldr	r0, [pc, #408]	; (800d444 <mem_trim+0x264>)
 800d2aa:	f00d ff33 	bl	801b114 <trace_printf>
 800d2ae:	e7fe      	b.n	800d2ae <mem_trim+0xce>
  if (newsize > size) {
 800d2b0:	8bfa      	ldrh	r2, [r7, #30]
 800d2b2:	8abb      	ldrh	r3, [r7, #20]
 800d2b4:	429a      	cmp	r2, r3
 800d2b6:	d901      	bls.n	800d2bc <mem_trim+0xdc>
    /* not supported */
    return NULL;
 800d2b8:	2300      	movs	r3, #0
 800d2ba:	e0b5      	b.n	800d428 <mem_trim+0x248>
  }
  if (newsize == size) {
 800d2bc:	8bfa      	ldrh	r2, [r7, #30]
 800d2be:	8abb      	ldrh	r3, [r7, #20]
 800d2c0:	429a      	cmp	r2, r3
 800d2c2:	d101      	bne.n	800d2c8 <mem_trim+0xe8>
    /* No change in size, simply return */
    return rmem;
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	e0af      	b.n	800d428 <mem_trim+0x248>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800d2c8:	4861      	ldr	r0, [pc, #388]	; (800d450 <mem_trim+0x270>)
 800d2ca:	f00d fe79 	bl	801afc0 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800d2ce:	69bb      	ldr	r3, [r7, #24]
 800d2d0:	881b      	ldrh	r3, [r3, #0]
 800d2d2:	4618      	mov	r0, r3
 800d2d4:	f7ff fd7e 	bl	800cdd4 <ptr_to_mem>
 800d2d8:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800d2da:	693b      	ldr	r3, [r7, #16]
 800d2dc:	791b      	ldrb	r3, [r3, #4]
 800d2de:	2b00      	cmp	r3, #0
 800d2e0:	d14f      	bne.n	800d382 <mem_trim+0x1a2>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800d2e2:	69bb      	ldr	r3, [r7, #24]
 800d2e4:	881b      	ldrh	r3, [r3, #0]
 800d2e6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d2ea:	d10a      	bne.n	800d302 <mem_trim+0x122>
 800d2ec:	f240 22f5 	movw	r2, #757	; 0x2f5
 800d2f0:	4958      	ldr	r1, [pc, #352]	; (800d454 <mem_trim+0x274>)
 800d2f2:	4852      	ldr	r0, [pc, #328]	; (800d43c <mem_trim+0x25c>)
 800d2f4:	f00d ff0e 	bl	801b114 <trace_printf>
 800d2f8:	4951      	ldr	r1, [pc, #324]	; (800d440 <mem_trim+0x260>)
 800d2fa:	4852      	ldr	r0, [pc, #328]	; (800d444 <mem_trim+0x264>)
 800d2fc:	f00d ff0a 	bl	801b114 <trace_printf>
 800d300:	e7fe      	b.n	800d300 <mem_trim+0x120>
    /* remember the old next pointer */
    next = mem2->next;
 800d302:	693b      	ldr	r3, [r7, #16]
 800d304:	881b      	ldrh	r3, [r3, #0]
 800d306:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800d308:	8afa      	ldrh	r2, [r7, #22]
 800d30a:	8bfb      	ldrh	r3, [r7, #30]
 800d30c:	4413      	add	r3, r2
 800d30e:	b29b      	uxth	r3, r3
 800d310:	3308      	adds	r3, #8
 800d312:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800d314:	4b50      	ldr	r3, [pc, #320]	; (800d458 <mem_trim+0x278>)
 800d316:	681b      	ldr	r3, [r3, #0]
 800d318:	693a      	ldr	r2, [r7, #16]
 800d31a:	429a      	cmp	r2, r3
 800d31c:	d106      	bne.n	800d32c <mem_trim+0x14c>
      lfree = ptr_to_mem(ptr2);
 800d31e:	89fb      	ldrh	r3, [r7, #14]
 800d320:	4618      	mov	r0, r3
 800d322:	f7ff fd57 	bl	800cdd4 <ptr_to_mem>
 800d326:	4603      	mov	r3, r0
 800d328:	4a4b      	ldr	r2, [pc, #300]	; (800d458 <mem_trim+0x278>)
 800d32a:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800d32c:	89fb      	ldrh	r3, [r7, #14]
 800d32e:	4618      	mov	r0, r3
 800d330:	f7ff fd50 	bl	800cdd4 <ptr_to_mem>
 800d334:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800d336:	693b      	ldr	r3, [r7, #16]
 800d338:	2200      	movs	r2, #0
 800d33a:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800d33c:	693b      	ldr	r3, [r7, #16]
 800d33e:	89ba      	ldrh	r2, [r7, #12]
 800d340:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800d342:	693b      	ldr	r3, [r7, #16]
 800d344:	8afa      	ldrh	r2, [r7, #22]
 800d346:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800d348:	69bb      	ldr	r3, [r7, #24]
 800d34a:	89fa      	ldrh	r2, [r7, #14]
 800d34c:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800d34e:	693b      	ldr	r3, [r7, #16]
 800d350:	881b      	ldrh	r3, [r3, #0]
 800d352:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d356:	d007      	beq.n	800d368 <mem_trim+0x188>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800d358:	693b      	ldr	r3, [r7, #16]
 800d35a:	881b      	ldrh	r3, [r3, #0]
 800d35c:	4618      	mov	r0, r3
 800d35e:	f7ff fd39 	bl	800cdd4 <ptr_to_mem>
 800d362:	4602      	mov	r2, r0
 800d364:	89fb      	ldrh	r3, [r7, #14]
 800d366:	8053      	strh	r3, [r2, #2]
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
 800d368:	4b37      	ldr	r3, [pc, #220]	; (800d448 <mem_trim+0x268>)
 800d36a:	f8b3 20b0 	ldrh.w	r2, [r3, #176]	; 0xb0
 800d36e:	8bf9      	ldrh	r1, [r7, #30]
 800d370:	8abb      	ldrh	r3, [r7, #20]
 800d372:	1acb      	subs	r3, r1, r3
 800d374:	b29b      	uxth	r3, r3
 800d376:	4413      	add	r3, r2
 800d378:	b29a      	uxth	r2, r3
 800d37a:	4b33      	ldr	r3, [pc, #204]	; (800d448 <mem_trim+0x268>)
 800d37c:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
 800d380:	e04e      	b.n	800d420 <mem_trim+0x240>
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800d382:	8bfb      	ldrh	r3, [r7, #30]
 800d384:	f103 0214 	add.w	r2, r3, #20
 800d388:	8abb      	ldrh	r3, [r7, #20]
 800d38a:	429a      	cmp	r2, r3
 800d38c:	d848      	bhi.n	800d420 <mem_trim+0x240>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800d38e:	8afa      	ldrh	r2, [r7, #22]
 800d390:	8bfb      	ldrh	r3, [r7, #30]
 800d392:	4413      	add	r3, r2
 800d394:	b29b      	uxth	r3, r3
 800d396:	3308      	adds	r3, #8
 800d398:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800d39a:	69bb      	ldr	r3, [r7, #24]
 800d39c:	881b      	ldrh	r3, [r3, #0]
 800d39e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d3a2:	d10a      	bne.n	800d3ba <mem_trim+0x1da>
 800d3a4:	f240 3216 	movw	r2, #790	; 0x316
 800d3a8:	492a      	ldr	r1, [pc, #168]	; (800d454 <mem_trim+0x274>)
 800d3aa:	4824      	ldr	r0, [pc, #144]	; (800d43c <mem_trim+0x25c>)
 800d3ac:	f00d feb2 	bl	801b114 <trace_printf>
 800d3b0:	4923      	ldr	r1, [pc, #140]	; (800d440 <mem_trim+0x260>)
 800d3b2:	4824      	ldr	r0, [pc, #144]	; (800d444 <mem_trim+0x264>)
 800d3b4:	f00d feae 	bl	801b114 <trace_printf>
 800d3b8:	e7fe      	b.n	800d3b8 <mem_trim+0x1d8>
    mem2 = ptr_to_mem(ptr2);
 800d3ba:	89fb      	ldrh	r3, [r7, #14]
 800d3bc:	4618      	mov	r0, r3
 800d3be:	f7ff fd09 	bl	800cdd4 <ptr_to_mem>
 800d3c2:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800d3c4:	4b24      	ldr	r3, [pc, #144]	; (800d458 <mem_trim+0x278>)
 800d3c6:	681b      	ldr	r3, [r3, #0]
 800d3c8:	693a      	ldr	r2, [r7, #16]
 800d3ca:	429a      	cmp	r2, r3
 800d3cc:	d202      	bcs.n	800d3d4 <mem_trim+0x1f4>
      lfree = mem2;
 800d3ce:	4a22      	ldr	r2, [pc, #136]	; (800d458 <mem_trim+0x278>)
 800d3d0:	693b      	ldr	r3, [r7, #16]
 800d3d2:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800d3d4:	693b      	ldr	r3, [r7, #16]
 800d3d6:	2200      	movs	r2, #0
 800d3d8:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800d3da:	69bb      	ldr	r3, [r7, #24]
 800d3dc:	881a      	ldrh	r2, [r3, #0]
 800d3de:	693b      	ldr	r3, [r7, #16]
 800d3e0:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800d3e2:	693b      	ldr	r3, [r7, #16]
 800d3e4:	8afa      	ldrh	r2, [r7, #22]
 800d3e6:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800d3e8:	69bb      	ldr	r3, [r7, #24]
 800d3ea:	89fa      	ldrh	r2, [r7, #14]
 800d3ec:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800d3ee:	693b      	ldr	r3, [r7, #16]
 800d3f0:	881b      	ldrh	r3, [r3, #0]
 800d3f2:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d3f6:	d007      	beq.n	800d408 <mem_trim+0x228>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800d3f8:	693b      	ldr	r3, [r7, #16]
 800d3fa:	881b      	ldrh	r3, [r3, #0]
 800d3fc:	4618      	mov	r0, r3
 800d3fe:	f7ff fce9 	bl	800cdd4 <ptr_to_mem>
 800d402:	4602      	mov	r2, r0
 800d404:	89fb      	ldrh	r3, [r7, #14]
 800d406:	8053      	strh	r3, [r2, #2]
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
 800d408:	4b0f      	ldr	r3, [pc, #60]	; (800d448 <mem_trim+0x268>)
 800d40a:	f8b3 20b0 	ldrh.w	r2, [r3, #176]	; 0xb0
 800d40e:	8bf9      	ldrh	r1, [r7, #30]
 800d410:	8abb      	ldrh	r3, [r7, #20]
 800d412:	1acb      	subs	r3, r1, r3
 800d414:	b29b      	uxth	r3, r3
 800d416:	4413      	add	r3, r2
 800d418:	b29a      	uxth	r2, r3
 800d41a:	4b0b      	ldr	r3, [pc, #44]	; (800d448 <mem_trim+0x268>)
 800d41c:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800d420:	480b      	ldr	r0, [pc, #44]	; (800d450 <mem_trim+0x270>)
 800d422:	f00d fddc 	bl	801afde <sys_mutex_unlock>
  return rmem;
 800d426:	687b      	ldr	r3, [r7, #4]
}
 800d428:	4618      	mov	r0, r3
 800d42a:	3720      	adds	r7, #32
 800d42c:	46bd      	mov	sp, r7
 800d42e:	bd80      	pop	{r7, pc}
 800d430:	20009e78 	.word	0x20009e78
 800d434:	20009e7c 	.word	0x20009e7c
 800d438:	0801d8f8 	.word	0x0801d8f8
 800d43c:	0801d788 	.word	0x0801d788
 800d440:	0801d7a8 	.word	0x0801d7a8
 800d444:	0801d7d8 	.word	0x0801d7d8
 800d448:	20010b7c 	.word	0x20010b7c
 800d44c:	0801d910 	.word	0x0801d910
 800d450:	20009e80 	.word	0x20009e80
 800d454:	0801d930 	.word	0x0801d930
 800d458:	20009e84 	.word	0x20009e84

0800d45c <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800d45c:	b590      	push	{r4, r7, lr}
 800d45e:	b089      	sub	sp, #36	; 0x24
 800d460:	af00      	add	r7, sp, #0
 800d462:	4603      	mov	r3, r0
 800d464:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800d466:	88fb      	ldrh	r3, [r7, #6]
 800d468:	2b00      	cmp	r3, #0
 800d46a:	d101      	bne.n	800d470 <mem_malloc+0x14>
    return NULL;
 800d46c:	2300      	movs	r3, #0
 800d46e:	e135      	b.n	800d6dc <mem_malloc+0x280>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800d470:	88fb      	ldrh	r3, [r7, #6]
 800d472:	3303      	adds	r3, #3
 800d474:	b29b      	uxth	r3, r3
 800d476:	f023 0303 	bic.w	r3, r3, #3
 800d47a:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800d47c:	8bbb      	ldrh	r3, [r7, #28]
 800d47e:	2b0b      	cmp	r3, #11
 800d480:	d801      	bhi.n	800d486 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800d482:	230c      	movs	r3, #12
 800d484:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800d486:	8bbb      	ldrh	r3, [r7, #28]
 800d488:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d48c:	d803      	bhi.n	800d496 <mem_malloc+0x3a>
 800d48e:	8bba      	ldrh	r2, [r7, #28]
 800d490:	88fb      	ldrh	r3, [r7, #6]
 800d492:	429a      	cmp	r2, r3
 800d494:	d201      	bcs.n	800d49a <mem_malloc+0x3e>
    return NULL;
 800d496:	2300      	movs	r3, #0
 800d498:	e120      	b.n	800d6dc <mem_malloc+0x280>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800d49a:	4892      	ldr	r0, [pc, #584]	; (800d6e4 <mem_malloc+0x288>)
 800d49c:	f00d fd90 	bl	801afc0 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800d4a0:	4b91      	ldr	r3, [pc, #580]	; (800d6e8 <mem_malloc+0x28c>)
 800d4a2:	681b      	ldr	r3, [r3, #0]
 800d4a4:	4618      	mov	r0, r3
 800d4a6:	f7ff fca7 	bl	800cdf8 <mem_to_ptr>
 800d4aa:	4603      	mov	r3, r0
 800d4ac:	83fb      	strh	r3, [r7, #30]
 800d4ae:	e102      	b.n	800d6b6 <mem_malloc+0x25a>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800d4b0:	8bfb      	ldrh	r3, [r7, #30]
 800d4b2:	4618      	mov	r0, r3
 800d4b4:	f7ff fc8e 	bl	800cdd4 <ptr_to_mem>
 800d4b8:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800d4ba:	697b      	ldr	r3, [r7, #20]
 800d4bc:	791b      	ldrb	r3, [r3, #4]
 800d4be:	2b00      	cmp	r3, #0
 800d4c0:	f040 80f2 	bne.w	800d6a8 <mem_malloc+0x24c>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800d4c4:	697b      	ldr	r3, [r7, #20]
 800d4c6:	881b      	ldrh	r3, [r3, #0]
 800d4c8:	461a      	mov	r2, r3
 800d4ca:	8bfb      	ldrh	r3, [r7, #30]
 800d4cc:	1ad3      	subs	r3, r2, r3
 800d4ce:	f1a3 0208 	sub.w	r2, r3, #8
 800d4d2:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800d4d4:	429a      	cmp	r2, r3
 800d4d6:	f0c0 80e7 	bcc.w	800d6a8 <mem_malloc+0x24c>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800d4da:	697b      	ldr	r3, [r7, #20]
 800d4dc:	881b      	ldrh	r3, [r3, #0]
 800d4de:	461a      	mov	r2, r3
 800d4e0:	8bfb      	ldrh	r3, [r7, #30]
 800d4e2:	1ad3      	subs	r3, r2, r3
 800d4e4:	f1a3 0208 	sub.w	r2, r3, #8
 800d4e8:	8bbb      	ldrh	r3, [r7, #28]
 800d4ea:	3314      	adds	r3, #20
 800d4ec:	429a      	cmp	r2, r3
 800d4ee:	d350      	bcc.n	800d592 <mem_malloc+0x136>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800d4f0:	8bfa      	ldrh	r2, [r7, #30]
 800d4f2:	8bbb      	ldrh	r3, [r7, #28]
 800d4f4:	4413      	add	r3, r2
 800d4f6:	b29b      	uxth	r3, r3
 800d4f8:	3308      	adds	r3, #8
 800d4fa:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800d4fc:	8a7b      	ldrh	r3, [r7, #18]
 800d4fe:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d502:	d10a      	bne.n	800d51a <mem_malloc+0xbe>
 800d504:	f240 3287 	movw	r2, #903	; 0x387
 800d508:	4978      	ldr	r1, [pc, #480]	; (800d6ec <mem_malloc+0x290>)
 800d50a:	4879      	ldr	r0, [pc, #484]	; (800d6f0 <mem_malloc+0x294>)
 800d50c:	f00d fe02 	bl	801b114 <trace_printf>
 800d510:	4978      	ldr	r1, [pc, #480]	; (800d6f4 <mem_malloc+0x298>)
 800d512:	4879      	ldr	r0, [pc, #484]	; (800d6f8 <mem_malloc+0x29c>)
 800d514:	f00d fdfe 	bl	801b114 <trace_printf>
 800d518:	e7fe      	b.n	800d518 <mem_malloc+0xbc>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800d51a:	8a7b      	ldrh	r3, [r7, #18]
 800d51c:	4618      	mov	r0, r3
 800d51e:	f7ff fc59 	bl	800cdd4 <ptr_to_mem>
 800d522:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800d524:	68fb      	ldr	r3, [r7, #12]
 800d526:	2200      	movs	r2, #0
 800d528:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800d52a:	697b      	ldr	r3, [r7, #20]
 800d52c:	881a      	ldrh	r2, [r3, #0]
 800d52e:	68fb      	ldr	r3, [r7, #12]
 800d530:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800d532:	68fb      	ldr	r3, [r7, #12]
 800d534:	8bfa      	ldrh	r2, [r7, #30]
 800d536:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800d538:	697b      	ldr	r3, [r7, #20]
 800d53a:	8a7a      	ldrh	r2, [r7, #18]
 800d53c:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800d53e:	697b      	ldr	r3, [r7, #20]
 800d540:	2201      	movs	r2, #1
 800d542:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800d544:	68fb      	ldr	r3, [r7, #12]
 800d546:	881b      	ldrh	r3, [r3, #0]
 800d548:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d54c:	d007      	beq.n	800d55e <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800d54e:	68fb      	ldr	r3, [r7, #12]
 800d550:	881b      	ldrh	r3, [r3, #0]
 800d552:	4618      	mov	r0, r3
 800d554:	f7ff fc3e 	bl	800cdd4 <ptr_to_mem>
 800d558:	4602      	mov	r2, r0
 800d55a:	8a7b      	ldrh	r3, [r7, #18]
 800d55c:	8053      	strh	r3, [r2, #2]
          }
          MEM_STATS_INC_USED(used, (size + SIZEOF_STRUCT_MEM));
 800d55e:	4b67      	ldr	r3, [pc, #412]	; (800d6fc <mem_malloc+0x2a0>)
 800d560:	f8b3 20b0 	ldrh.w	r2, [r3, #176]	; 0xb0
 800d564:	8bbb      	ldrh	r3, [r7, #28]
 800d566:	4413      	add	r3, r2
 800d568:	b29b      	uxth	r3, r3
 800d56a:	3308      	adds	r3, #8
 800d56c:	b29a      	uxth	r2, r3
 800d56e:	4b63      	ldr	r3, [pc, #396]	; (800d6fc <mem_malloc+0x2a0>)
 800d570:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
 800d574:	4b61      	ldr	r3, [pc, #388]	; (800d6fc <mem_malloc+0x2a0>)
 800d576:	f8b3 20b2 	ldrh.w	r2, [r3, #178]	; 0xb2
 800d57a:	4b60      	ldr	r3, [pc, #384]	; (800d6fc <mem_malloc+0x2a0>)
 800d57c:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	; 0xb0
 800d580:	429a      	cmp	r2, r3
 800d582:	d227      	bcs.n	800d5d4 <mem_malloc+0x178>
 800d584:	4b5d      	ldr	r3, [pc, #372]	; (800d6fc <mem_malloc+0x2a0>)
 800d586:	f8b3 20b0 	ldrh.w	r2, [r3, #176]	; 0xb0
 800d58a:	4b5c      	ldr	r3, [pc, #368]	; (800d6fc <mem_malloc+0x2a0>)
 800d58c:	f8a3 20b2 	strh.w	r2, [r3, #178]	; 0xb2
 800d590:	e020      	b.n	800d5d4 <mem_malloc+0x178>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800d592:	697b      	ldr	r3, [r7, #20]
 800d594:	2201      	movs	r2, #1
 800d596:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
 800d598:	4b58      	ldr	r3, [pc, #352]	; (800d6fc <mem_malloc+0x2a0>)
 800d59a:	f8b3 20b0 	ldrh.w	r2, [r3, #176]	; 0xb0
 800d59e:	697b      	ldr	r3, [r7, #20]
 800d5a0:	881b      	ldrh	r3, [r3, #0]
 800d5a2:	4413      	add	r3, r2
 800d5a4:	b29c      	uxth	r4, r3
 800d5a6:	6978      	ldr	r0, [r7, #20]
 800d5a8:	f7ff fc26 	bl	800cdf8 <mem_to_ptr>
 800d5ac:	4603      	mov	r3, r0
 800d5ae:	1ae3      	subs	r3, r4, r3
 800d5b0:	b29a      	uxth	r2, r3
 800d5b2:	4b52      	ldr	r3, [pc, #328]	; (800d6fc <mem_malloc+0x2a0>)
 800d5b4:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
 800d5b8:	4b50      	ldr	r3, [pc, #320]	; (800d6fc <mem_malloc+0x2a0>)
 800d5ba:	f8b3 20b2 	ldrh.w	r2, [r3, #178]	; 0xb2
 800d5be:	4b4f      	ldr	r3, [pc, #316]	; (800d6fc <mem_malloc+0x2a0>)
 800d5c0:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	; 0xb0
 800d5c4:	429a      	cmp	r2, r3
 800d5c6:	d205      	bcs.n	800d5d4 <mem_malloc+0x178>
 800d5c8:	4b4c      	ldr	r3, [pc, #304]	; (800d6fc <mem_malloc+0x2a0>)
 800d5ca:	f8b3 20b0 	ldrh.w	r2, [r3, #176]	; 0xb0
 800d5ce:	4b4b      	ldr	r3, [pc, #300]	; (800d6fc <mem_malloc+0x2a0>)
 800d5d0:	f8a3 20b2 	strh.w	r2, [r3, #178]	; 0xb2
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800d5d4:	4b44      	ldr	r3, [pc, #272]	; (800d6e8 <mem_malloc+0x28c>)
 800d5d6:	681b      	ldr	r3, [r3, #0]
 800d5d8:	697a      	ldr	r2, [r7, #20]
 800d5da:	429a      	cmp	r2, r3
 800d5dc:	d12b      	bne.n	800d636 <mem_malloc+0x1da>
          struct mem *cur = lfree;
 800d5de:	4b42      	ldr	r3, [pc, #264]	; (800d6e8 <mem_malloc+0x28c>)
 800d5e0:	681b      	ldr	r3, [r3, #0]
 800d5e2:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800d5e4:	e005      	b.n	800d5f2 <mem_malloc+0x196>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800d5e6:	69bb      	ldr	r3, [r7, #24]
 800d5e8:	881b      	ldrh	r3, [r3, #0]
 800d5ea:	4618      	mov	r0, r3
 800d5ec:	f7ff fbf2 	bl	800cdd4 <ptr_to_mem>
 800d5f0:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800d5f2:	69bb      	ldr	r3, [r7, #24]
 800d5f4:	791b      	ldrb	r3, [r3, #4]
 800d5f6:	2b00      	cmp	r3, #0
 800d5f8:	d004      	beq.n	800d604 <mem_malloc+0x1a8>
 800d5fa:	4b41      	ldr	r3, [pc, #260]	; (800d700 <mem_malloc+0x2a4>)
 800d5fc:	681b      	ldr	r3, [r3, #0]
 800d5fe:	69ba      	ldr	r2, [r7, #24]
 800d600:	429a      	cmp	r2, r3
 800d602:	d1f0      	bne.n	800d5e6 <mem_malloc+0x18a>
          }
          lfree = cur;
 800d604:	4a38      	ldr	r2, [pc, #224]	; (800d6e8 <mem_malloc+0x28c>)
 800d606:	69bb      	ldr	r3, [r7, #24]
 800d608:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800d60a:	4b37      	ldr	r3, [pc, #220]	; (800d6e8 <mem_malloc+0x28c>)
 800d60c:	681a      	ldr	r2, [r3, #0]
 800d60e:	4b3c      	ldr	r3, [pc, #240]	; (800d700 <mem_malloc+0x2a4>)
 800d610:	681b      	ldr	r3, [r3, #0]
 800d612:	429a      	cmp	r2, r3
 800d614:	d00f      	beq.n	800d636 <mem_malloc+0x1da>
 800d616:	4b34      	ldr	r3, [pc, #208]	; (800d6e8 <mem_malloc+0x28c>)
 800d618:	681b      	ldr	r3, [r3, #0]
 800d61a:	791b      	ldrb	r3, [r3, #4]
 800d61c:	2b00      	cmp	r3, #0
 800d61e:	d00a      	beq.n	800d636 <mem_malloc+0x1da>
 800d620:	f240 32b5 	movw	r2, #949	; 0x3b5
 800d624:	4937      	ldr	r1, [pc, #220]	; (800d704 <mem_malloc+0x2a8>)
 800d626:	4832      	ldr	r0, [pc, #200]	; (800d6f0 <mem_malloc+0x294>)
 800d628:	f00d fd74 	bl	801b114 <trace_printf>
 800d62c:	4931      	ldr	r1, [pc, #196]	; (800d6f4 <mem_malloc+0x298>)
 800d62e:	4832      	ldr	r0, [pc, #200]	; (800d6f8 <mem_malloc+0x29c>)
 800d630:	f00d fd70 	bl	801b114 <trace_printf>
 800d634:	e7fe      	b.n	800d634 <mem_malloc+0x1d8>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800d636:	482b      	ldr	r0, [pc, #172]	; (800d6e4 <mem_malloc+0x288>)
 800d638:	f00d fcd1 	bl	801afde <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800d63c:	8bba      	ldrh	r2, [r7, #28]
 800d63e:	697b      	ldr	r3, [r7, #20]
 800d640:	4413      	add	r3, r2
 800d642:	3308      	adds	r3, #8
 800d644:	4a2e      	ldr	r2, [pc, #184]	; (800d700 <mem_malloc+0x2a4>)
 800d646:	6812      	ldr	r2, [r2, #0]
 800d648:	4293      	cmp	r3, r2
 800d64a:	d90a      	bls.n	800d662 <mem_malloc+0x206>
 800d64c:	f240 32b9 	movw	r2, #953	; 0x3b9
 800d650:	492d      	ldr	r1, [pc, #180]	; (800d708 <mem_malloc+0x2ac>)
 800d652:	4827      	ldr	r0, [pc, #156]	; (800d6f0 <mem_malloc+0x294>)
 800d654:	f00d fd5e 	bl	801b114 <trace_printf>
 800d658:	4926      	ldr	r1, [pc, #152]	; (800d6f4 <mem_malloc+0x298>)
 800d65a:	4827      	ldr	r0, [pc, #156]	; (800d6f8 <mem_malloc+0x29c>)
 800d65c:	f00d fd5a 	bl	801b114 <trace_printf>
 800d660:	e7fe      	b.n	800d660 <mem_malloc+0x204>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800d662:	697b      	ldr	r3, [r7, #20]
 800d664:	f003 0303 	and.w	r3, r3, #3
 800d668:	2b00      	cmp	r3, #0
 800d66a:	d00a      	beq.n	800d682 <mem_malloc+0x226>
 800d66c:	f240 32bb 	movw	r2, #955	; 0x3bb
 800d670:	4926      	ldr	r1, [pc, #152]	; (800d70c <mem_malloc+0x2b0>)
 800d672:	481f      	ldr	r0, [pc, #124]	; (800d6f0 <mem_malloc+0x294>)
 800d674:	f00d fd4e 	bl	801b114 <trace_printf>
 800d678:	491e      	ldr	r1, [pc, #120]	; (800d6f4 <mem_malloc+0x298>)
 800d67a:	481f      	ldr	r0, [pc, #124]	; (800d6f8 <mem_malloc+0x29c>)
 800d67c:	f00d fd4a 	bl	801b114 <trace_printf>
 800d680:	e7fe      	b.n	800d680 <mem_malloc+0x224>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800d682:	697b      	ldr	r3, [r7, #20]
 800d684:	f003 0303 	and.w	r3, r3, #3
 800d688:	2b00      	cmp	r3, #0
 800d68a:	d00a      	beq.n	800d6a2 <mem_malloc+0x246>
 800d68c:	f240 32bd 	movw	r2, #957	; 0x3bd
 800d690:	491f      	ldr	r1, [pc, #124]	; (800d710 <mem_malloc+0x2b4>)
 800d692:	4817      	ldr	r0, [pc, #92]	; (800d6f0 <mem_malloc+0x294>)
 800d694:	f00d fd3e 	bl	801b114 <trace_printf>
 800d698:	4916      	ldr	r1, [pc, #88]	; (800d6f4 <mem_malloc+0x298>)
 800d69a:	4817      	ldr	r0, [pc, #92]	; (800d6f8 <mem_malloc+0x29c>)
 800d69c:	f00d fd3a 	bl	801b114 <trace_printf>
 800d6a0:	e7fe      	b.n	800d6a0 <mem_malloc+0x244>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800d6a2:	697b      	ldr	r3, [r7, #20]
 800d6a4:	3308      	adds	r3, #8
 800d6a6:	e019      	b.n	800d6dc <mem_malloc+0x280>
         ptr = ptr_to_mem(ptr)->next) {
 800d6a8:	8bfb      	ldrh	r3, [r7, #30]
 800d6aa:	4618      	mov	r0, r3
 800d6ac:	f7ff fb92 	bl	800cdd4 <ptr_to_mem>
 800d6b0:	4603      	mov	r3, r0
 800d6b2:	881b      	ldrh	r3, [r3, #0]
 800d6b4:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800d6b6:	8bfa      	ldrh	r2, [r7, #30]
 800d6b8:	8bbb      	ldrh	r3, [r7, #28]
 800d6ba:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800d6be:	429a      	cmp	r2, r3
 800d6c0:	f4ff aef6 	bcc.w	800d4b0 <mem_malloc+0x54>
    }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
 800d6c4:	4b0d      	ldr	r3, [pc, #52]	; (800d6fc <mem_malloc+0x2a0>)
 800d6c6:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 800d6ca:	3301      	adds	r3, #1
 800d6cc:	b29a      	uxth	r2, r3
 800d6ce:	4b0b      	ldr	r3, [pc, #44]	; (800d6fc <mem_malloc+0x2a0>)
 800d6d0:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800d6d4:	4803      	ldr	r0, [pc, #12]	; (800d6e4 <mem_malloc+0x288>)
 800d6d6:	f00d fc82 	bl	801afde <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800d6da:	2300      	movs	r3, #0
}
 800d6dc:	4618      	mov	r0, r3
 800d6de:	3724      	adds	r7, #36	; 0x24
 800d6e0:	46bd      	mov	sp, r7
 800d6e2:	bd90      	pop	{r4, r7, pc}
 800d6e4:	20009e80 	.word	0x20009e80
 800d6e8:	20009e84 	.word	0x20009e84
 800d6ec:	0801d930 	.word	0x0801d930
 800d6f0:	0801d788 	.word	0x0801d788
 800d6f4:	0801d7a8 	.word	0x0801d7a8
 800d6f8:	0801d7d8 	.word	0x0801d7d8
 800d6fc:	20010b7c 	.word	0x20010b7c
 800d700:	20009e7c 	.word	0x20009e7c
 800d704:	0801d944 	.word	0x0801d944
 800d708:	0801d960 	.word	0x0801d960
 800d70c:	0801d990 	.word	0x0801d990
 800d710:	0801d9c0 	.word	0x0801d9c0

0800d714 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800d714:	b480      	push	{r7}
 800d716:	b085      	sub	sp, #20
 800d718:	af00      	add	r7, sp, #0
 800d71a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	691b      	ldr	r3, [r3, #16]
 800d720:	2200      	movs	r2, #0
 800d722:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	68db      	ldr	r3, [r3, #12]
 800d728:	3303      	adds	r3, #3
 800d72a:	f023 0303 	bic.w	r3, r3, #3
 800d72e:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800d730:	2300      	movs	r3, #0
 800d732:	60fb      	str	r3, [r7, #12]
 800d734:	e011      	b.n	800d75a <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	691b      	ldr	r3, [r3, #16]
 800d73a:	681a      	ldr	r2, [r3, #0]
 800d73c:	68bb      	ldr	r3, [r7, #8]
 800d73e:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	691b      	ldr	r3, [r3, #16]
 800d744:	68ba      	ldr	r2, [r7, #8]
 800d746:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	891b      	ldrh	r3, [r3, #8]
 800d74c:	461a      	mov	r2, r3
 800d74e:	68bb      	ldr	r3, [r7, #8]
 800d750:	4413      	add	r3, r2
 800d752:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800d754:	68fb      	ldr	r3, [r7, #12]
 800d756:	3301      	adds	r3, #1
 800d758:	60fb      	str	r3, [r7, #12]
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	895b      	ldrh	r3, [r3, #10]
 800d75e:	461a      	mov	r2, r3
 800d760:	68fb      	ldr	r3, [r7, #12]
 800d762:	4293      	cmp	r3, r2
 800d764:	dbe7      	blt.n	800d736 <memp_init_pool+0x22>
                                   + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                  );
  }
#if MEMP_STATS
  desc->stats->avail = desc->num;
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	685b      	ldr	r3, [r3, #4]
 800d76a:	687a      	ldr	r2, [r7, #4]
 800d76c:	8952      	ldrh	r2, [r2, #10]
 800d76e:	80da      	strh	r2, [r3, #6]
#endif /* MEMP_STATS */
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	685b      	ldr	r3, [r3, #4]
 800d774:	687a      	ldr	r2, [r7, #4]
 800d776:	6812      	ldr	r2, [r2, #0]
 800d778:	601a      	str	r2, [r3, #0]
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800d77a:	bf00      	nop
 800d77c:	3714      	adds	r7, #20
 800d77e:	46bd      	mov	sp, r7
 800d780:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d784:	4770      	bx	lr
	...

0800d788 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800d788:	b580      	push	{r7, lr}
 800d78a:	b082      	sub	sp, #8
 800d78c:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800d78e:	2300      	movs	r3, #0
 800d790:	80fb      	strh	r3, [r7, #6]
 800d792:	e013      	b.n	800d7bc <memp_init+0x34>
    memp_init_pool(memp_pools[i]);
 800d794:	88fb      	ldrh	r3, [r7, #6]
 800d796:	4a0d      	ldr	r2, [pc, #52]	; (800d7cc <memp_init+0x44>)
 800d798:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d79c:	4618      	mov	r0, r3
 800d79e:	f7ff ffb9 	bl	800d714 <memp_init_pool>

#if LWIP_STATS && MEMP_STATS
    lwip_stats.memp[i] = memp_pools[i]->stats;
 800d7a2:	88fb      	ldrh	r3, [r7, #6]
 800d7a4:	4a09      	ldr	r2, [pc, #36]	; (800d7cc <memp_init+0x44>)
 800d7a6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800d7aa:	88fb      	ldrh	r3, [r7, #6]
 800d7ac:	6852      	ldr	r2, [r2, #4]
 800d7ae:	4908      	ldr	r1, [pc, #32]	; (800d7d0 <memp_init+0x48>)
 800d7b0:	332e      	adds	r3, #46	; 0x2e
 800d7b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800d7b6:	88fb      	ldrh	r3, [r7, #6]
 800d7b8:	3301      	adds	r3, #1
 800d7ba:	80fb      	strh	r3, [r7, #6]
 800d7bc:	88fb      	ldrh	r3, [r7, #6]
 800d7be:	2b0c      	cmp	r3, #12
 800d7c0:	d9e8      	bls.n	800d794 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800d7c2:	bf00      	nop
 800d7c4:	bf00      	nop
 800d7c6:	3708      	adds	r7, #8
 800d7c8:	46bd      	mov	sp, r7
 800d7ca:	bd80      	pop	{r7, pc}
 800d7cc:	08020694 	.word	0x08020694
 800d7d0:	20010b7c 	.word	0x20010b7c

0800d7d4 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800d7d4:	b580      	push	{r7, lr}
 800d7d6:	b084      	sub	sp, #16
 800d7d8:	af00      	add	r7, sp, #0
 800d7da:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800d7dc:	f00d fc32 	bl	801b044 <sys_arch_protect>
 800d7e0:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	691b      	ldr	r3, [r3, #16]
 800d7e6:	681b      	ldr	r3, [r3, #0]
 800d7e8:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800d7ea:	68bb      	ldr	r3, [r7, #8]
 800d7ec:	2b00      	cmp	r3, #0
 800d7ee:	d02d      	beq.n	800d84c <do_memp_malloc_pool+0x78>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	691b      	ldr	r3, [r3, #16]
 800d7f4:	68ba      	ldr	r2, [r7, #8]
 800d7f6:	6812      	ldr	r2, [r2, #0]
 800d7f8:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800d7fa:	68bb      	ldr	r3, [r7, #8]
 800d7fc:	f003 0303 	and.w	r3, r3, #3
 800d800:	2b00      	cmp	r3, #0
 800d802:	d00a      	beq.n	800d81a <do_memp_malloc_pool+0x46>
 800d804:	f44f 728c 	mov.w	r2, #280	; 0x118
 800d808:	4917      	ldr	r1, [pc, #92]	; (800d868 <do_memp_malloc_pool+0x94>)
 800d80a:	4818      	ldr	r0, [pc, #96]	; (800d86c <do_memp_malloc_pool+0x98>)
 800d80c:	f00d fc82 	bl	801b114 <trace_printf>
 800d810:	4917      	ldr	r1, [pc, #92]	; (800d870 <do_memp_malloc_pool+0x9c>)
 800d812:	4818      	ldr	r0, [pc, #96]	; (800d874 <do_memp_malloc_pool+0xa0>)
 800d814:	f00d fc7e 	bl	801b114 <trace_printf>
 800d818:	e7fe      	b.n	800d818 <do_memp_malloc_pool+0x44>
                ((mem_ptr_t)memp % MEM_ALIGNMENT) == 0);
#if MEMP_STATS
    desc->stats->used++;
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	685b      	ldr	r3, [r3, #4]
 800d81e:	891a      	ldrh	r2, [r3, #8]
 800d820:	3201      	adds	r2, #1
 800d822:	b292      	uxth	r2, r2
 800d824:	811a      	strh	r2, [r3, #8]
    if (desc->stats->used > desc->stats->max) {
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	685b      	ldr	r3, [r3, #4]
 800d82a:	891a      	ldrh	r2, [r3, #8]
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	685b      	ldr	r3, [r3, #4]
 800d830:	895b      	ldrh	r3, [r3, #10]
 800d832:	429a      	cmp	r2, r3
 800d834:	d905      	bls.n	800d842 <do_memp_malloc_pool+0x6e>
      desc->stats->max = desc->stats->used;
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	685a      	ldr	r2, [r3, #4]
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	685b      	ldr	r3, [r3, #4]
 800d83e:	8912      	ldrh	r2, [r2, #8]
 800d840:	815a      	strh	r2, [r3, #10]
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800d842:	68f8      	ldr	r0, [r7, #12]
 800d844:	f00d fc0c 	bl	801b060 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800d848:	68bb      	ldr	r3, [r7, #8]
 800d84a:	e009      	b.n	800d860 <do_memp_malloc_pool+0x8c>
  } else {
#if MEMP_STATS
    desc->stats->err++;
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	685b      	ldr	r3, [r3, #4]
 800d850:	889a      	ldrh	r2, [r3, #4]
 800d852:	3201      	adds	r2, #1
 800d854:	b292      	uxth	r2, r2
 800d856:	809a      	strh	r2, [r3, #4]
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800d858:	68f8      	ldr	r0, [r7, #12]
 800d85a:	f00d fc01 	bl	801b060 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800d85e:	2300      	movs	r3, #0
}
 800d860:	4618      	mov	r0, r3
 800d862:	3710      	adds	r7, #16
 800d864:	46bd      	mov	sp, r7
 800d866:	bd80      	pop	{r7, pc}
 800d868:	0801da7c 	.word	0x0801da7c
 800d86c:	0801daa0 	.word	0x0801daa0
 800d870:	0801dac0 	.word	0x0801dac0
 800d874:	0801daf0 	.word	0x0801daf0

0800d878 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800d878:	b580      	push	{r7, lr}
 800d87a:	b084      	sub	sp, #16
 800d87c:	af00      	add	r7, sp, #0
 800d87e:	4603      	mov	r3, r0
 800d880:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800d882:	79fb      	ldrb	r3, [r7, #7]
 800d884:	2b0c      	cmp	r3, #12
 800d886:	d90a      	bls.n	800d89e <memp_malloc+0x26>
 800d888:	f240 1257 	movw	r2, #343	; 0x157
 800d88c:	490a      	ldr	r1, [pc, #40]	; (800d8b8 <memp_malloc+0x40>)
 800d88e:	480b      	ldr	r0, [pc, #44]	; (800d8bc <memp_malloc+0x44>)
 800d890:	f00d fc40 	bl	801b114 <trace_printf>
 800d894:	490a      	ldr	r1, [pc, #40]	; (800d8c0 <memp_malloc+0x48>)
 800d896:	480b      	ldr	r0, [pc, #44]	; (800d8c4 <memp_malloc+0x4c>)
 800d898:	f00d fc3c 	bl	801b114 <trace_printf>
 800d89c:	e7fe      	b.n	800d89c <memp_malloc+0x24>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800d89e:	79fb      	ldrb	r3, [r7, #7]
 800d8a0:	4a09      	ldr	r2, [pc, #36]	; (800d8c8 <memp_malloc+0x50>)
 800d8a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d8a6:	4618      	mov	r0, r3
 800d8a8:	f7ff ff94 	bl	800d7d4 <do_memp_malloc_pool>
 800d8ac:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800d8ae:	68fb      	ldr	r3, [r7, #12]
}
 800d8b0:	4618      	mov	r0, r3
 800d8b2:	3710      	adds	r7, #16
 800d8b4:	46bd      	mov	sp, r7
 800d8b6:	bd80      	pop	{r7, pc}
 800d8b8:	0801db08 	.word	0x0801db08
 800d8bc:	0801daa0 	.word	0x0801daa0
 800d8c0:	0801dac0 	.word	0x0801dac0
 800d8c4:	0801daf0 	.word	0x0801daf0
 800d8c8:	08020694 	.word	0x08020694

0800d8cc <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800d8cc:	b580      	push	{r7, lr}
 800d8ce:	b084      	sub	sp, #16
 800d8d0:	af00      	add	r7, sp, #0
 800d8d2:	6078      	str	r0, [r7, #4]
 800d8d4:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800d8d6:	683b      	ldr	r3, [r7, #0]
 800d8d8:	f003 0303 	and.w	r3, r3, #3
 800d8dc:	2b00      	cmp	r3, #0
 800d8de:	d00a      	beq.n	800d8f6 <do_memp_free_pool+0x2a>
 800d8e0:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800d8e4:	4911      	ldr	r1, [pc, #68]	; (800d92c <do_memp_free_pool+0x60>)
 800d8e6:	4812      	ldr	r0, [pc, #72]	; (800d930 <do_memp_free_pool+0x64>)
 800d8e8:	f00d fc14 	bl	801b114 <trace_printf>
 800d8ec:	4911      	ldr	r1, [pc, #68]	; (800d934 <do_memp_free_pool+0x68>)
 800d8ee:	4812      	ldr	r0, [pc, #72]	; (800d938 <do_memp_free_pool+0x6c>)
 800d8f0:	f00d fc10 	bl	801b114 <trace_printf>
 800d8f4:	e7fe      	b.n	800d8f4 <do_memp_free_pool+0x28>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800d8f6:	683b      	ldr	r3, [r7, #0]
 800d8f8:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800d8fa:	f00d fba3 	bl	801b044 <sys_arch_protect>
 800d8fe:	60b8      	str	r0, [r7, #8]
#if MEMP_OVERFLOW_CHECK == 1
  memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

#if MEMP_STATS
  desc->stats->used--;
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	685b      	ldr	r3, [r3, #4]
 800d904:	891a      	ldrh	r2, [r3, #8]
 800d906:	3a01      	subs	r2, #1
 800d908:	b292      	uxth	r2, r2
 800d90a:	811a      	strh	r2, [r3, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	691b      	ldr	r3, [r3, #16]
 800d910:	681a      	ldr	r2, [r3, #0]
 800d912:	68fb      	ldr	r3, [r7, #12]
 800d914:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	691b      	ldr	r3, [r3, #16]
 800d91a:	68fa      	ldr	r2, [r7, #12]
 800d91c:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800d91e:	68b8      	ldr	r0, [r7, #8]
 800d920:	f00d fb9e 	bl	801b060 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800d924:	bf00      	nop
 800d926:	3710      	adds	r7, #16
 800d928:	46bd      	mov	sp, r7
 800d92a:	bd80      	pop	{r7, pc}
 800d92c:	0801db28 	.word	0x0801db28
 800d930:	0801daa0 	.word	0x0801daa0
 800d934:	0801dac0 	.word	0x0801dac0
 800d938:	0801daf0 	.word	0x0801daf0

0800d93c <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800d93c:	b580      	push	{r7, lr}
 800d93e:	b082      	sub	sp, #8
 800d940:	af00      	add	r7, sp, #0
 800d942:	4603      	mov	r3, r0
 800d944:	6039      	str	r1, [r7, #0]
 800d946:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800d948:	79fb      	ldrb	r3, [r7, #7]
 800d94a:	2b0c      	cmp	r3, #12
 800d94c:	d90a      	bls.n	800d964 <memp_free+0x28>
 800d94e:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800d952:	490c      	ldr	r1, [pc, #48]	; (800d984 <memp_free+0x48>)
 800d954:	480c      	ldr	r0, [pc, #48]	; (800d988 <memp_free+0x4c>)
 800d956:	f00d fbdd 	bl	801b114 <trace_printf>
 800d95a:	490c      	ldr	r1, [pc, #48]	; (800d98c <memp_free+0x50>)
 800d95c:	480c      	ldr	r0, [pc, #48]	; (800d990 <memp_free+0x54>)
 800d95e:	f00d fbd9 	bl	801b114 <trace_printf>
 800d962:	e7fe      	b.n	800d962 <memp_free+0x26>

  if (mem == NULL) {
 800d964:	683b      	ldr	r3, [r7, #0]
 800d966:	2b00      	cmp	r3, #0
 800d968:	d008      	beq.n	800d97c <memp_free+0x40>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800d96a:	79fb      	ldrb	r3, [r7, #7]
 800d96c:	4a09      	ldr	r2, [pc, #36]	; (800d994 <memp_free+0x58>)
 800d96e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d972:	6839      	ldr	r1, [r7, #0]
 800d974:	4618      	mov	r0, r3
 800d976:	f7ff ffa9 	bl	800d8cc <do_memp_free_pool>
 800d97a:	e000      	b.n	800d97e <memp_free+0x42>
    return;
 800d97c:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800d97e:	3708      	adds	r7, #8
 800d980:	46bd      	mov	sp, r7
 800d982:	bd80      	pop	{r7, pc}
 800d984:	0801db48 	.word	0x0801db48
 800d988:	0801daa0 	.word	0x0801daa0
 800d98c:	0801dac0 	.word	0x0801dac0
 800d990:	0801daf0 	.word	0x0801daf0
 800d994:	08020694 	.word	0x08020694

0800d998 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800d998:	b480      	push	{r7}
 800d99a:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800d99c:	bf00      	nop
 800d99e:	46bd      	mov	sp, r7
 800d9a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9a4:	4770      	bx	lr
	...

0800d9a8 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800d9a8:	b580      	push	{r7, lr}
 800d9aa:	b086      	sub	sp, #24
 800d9ac:	af00      	add	r7, sp, #0
 800d9ae:	60f8      	str	r0, [r7, #12]
 800d9b0:	60b9      	str	r1, [r7, #8]
 800d9b2:	607a      	str	r2, [r7, #4]
 800d9b4:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800d9b6:	68fb      	ldr	r3, [r7, #12]
 800d9b8:	2b00      	cmp	r3, #0
 800d9ba:	d10a      	bne.n	800d9d2 <netif_add+0x2a>
 800d9bc:	f240 1227 	movw	r2, #295	; 0x127
 800d9c0:	4960      	ldr	r1, [pc, #384]	; (800db44 <netif_add+0x19c>)
 800d9c2:	4861      	ldr	r0, [pc, #388]	; (800db48 <netif_add+0x1a0>)
 800d9c4:	f00d fba6 	bl	801b114 <trace_printf>
 800d9c8:	4960      	ldr	r1, [pc, #384]	; (800db4c <netif_add+0x1a4>)
 800d9ca:	4861      	ldr	r0, [pc, #388]	; (800db50 <netif_add+0x1a8>)
 800d9cc:	f00d fba2 	bl	801b114 <trace_printf>
 800d9d0:	e7fe      	b.n	800d9d0 <netif_add+0x28>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800d9d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9d4:	2b00      	cmp	r3, #0
 800d9d6:	d10a      	bne.n	800d9ee <netif_add+0x46>
 800d9d8:	f44f 7294 	mov.w	r2, #296	; 0x128
 800d9dc:	495d      	ldr	r1, [pc, #372]	; (800db54 <netif_add+0x1ac>)
 800d9de:	485a      	ldr	r0, [pc, #360]	; (800db48 <netif_add+0x1a0>)
 800d9e0:	f00d fb98 	bl	801b114 <trace_printf>
 800d9e4:	4959      	ldr	r1, [pc, #356]	; (800db4c <netif_add+0x1a4>)
 800d9e6:	485a      	ldr	r0, [pc, #360]	; (800db50 <netif_add+0x1a8>)
 800d9e8:	f00d fb94 	bl	801b114 <trace_printf>
 800d9ec:	e7fe      	b.n	800d9ec <netif_add+0x44>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800d9ee:	68bb      	ldr	r3, [r7, #8]
 800d9f0:	2b00      	cmp	r3, #0
 800d9f2:	d101      	bne.n	800d9f8 <netif_add+0x50>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800d9f4:	4b58      	ldr	r3, [pc, #352]	; (800db58 <netif_add+0x1b0>)
 800d9f6:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	2b00      	cmp	r3, #0
 800d9fc:	d101      	bne.n	800da02 <netif_add+0x5a>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800d9fe:	4b56      	ldr	r3, [pc, #344]	; (800db58 <netif_add+0x1b0>)
 800da00:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800da02:	683b      	ldr	r3, [r7, #0]
 800da04:	2b00      	cmp	r3, #0
 800da06:	d101      	bne.n	800da0c <netif_add+0x64>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800da08:	4b53      	ldr	r3, [pc, #332]	; (800db58 <netif_add+0x1b0>)
 800da0a:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800da0c:	68fb      	ldr	r3, [r7, #12]
 800da0e:	2200      	movs	r2, #0
 800da10:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800da12:	68fb      	ldr	r3, [r7, #12]
 800da14:	2200      	movs	r2, #0
 800da16:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800da18:	68fb      	ldr	r3, [r7, #12]
 800da1a:	2200      	movs	r2, #0
 800da1c:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800da1e:	68fb      	ldr	r3, [r7, #12]
 800da20:	4a4e      	ldr	r2, [pc, #312]	; (800db5c <netif_add+0x1b4>)
 800da22:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800da24:	68fb      	ldr	r3, [r7, #12]
 800da26:	2200      	movs	r2, #0
 800da28:	851a      	strh	r2, [r3, #40]	; 0x28
  netif->flags = 0;
 800da2a:	68fb      	ldr	r3, [r7, #12]
 800da2c:	2200      	movs	r2, #0
 800da2e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 800da32:	68fb      	ldr	r3, [r7, #12]
 800da34:	3324      	adds	r3, #36	; 0x24
 800da36:	2204      	movs	r2, #4
 800da38:	2100      	movs	r1, #0
 800da3a:	4618      	mov	r0, r3
 800da3c:	f00d fbe6 	bl	801b20c <memset>
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800da40:	68fb      	ldr	r3, [r7, #12]
 800da42:	2200      	movs	r2, #0
 800da44:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800da46:	68fb      	ldr	r3, [r7, #12]
 800da48:	6a3a      	ldr	r2, [r7, #32]
 800da4a:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800da4c:	4b44      	ldr	r3, [pc, #272]	; (800db60 <netif_add+0x1b8>)
 800da4e:	781a      	ldrb	r2, [r3, #0]
 800da50:	68fb      	ldr	r3, [r7, #12]
 800da52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  netif->input = input;
 800da56:	68fb      	ldr	r3, [r7, #12]
 800da58:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800da5a:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800da5c:	683b      	ldr	r3, [r7, #0]
 800da5e:	687a      	ldr	r2, [r7, #4]
 800da60:	68b9      	ldr	r1, [r7, #8]
 800da62:	68f8      	ldr	r0, [r7, #12]
 800da64:	f000 f928 	bl	800dcb8 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800da68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da6a:	68f8      	ldr	r0, [r7, #12]
 800da6c:	4798      	blx	r3
 800da6e:	4603      	mov	r3, r0
 800da70:	2b00      	cmp	r3, #0
 800da72:	d001      	beq.n	800da78 <netif_add+0xd0>
    return NULL;
 800da74:	2300      	movs	r3, #0
 800da76:	e060      	b.n	800db3a <netif_add+0x192>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800da78:	68fb      	ldr	r3, [r7, #12]
 800da7a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800da7e:	2bff      	cmp	r3, #255	; 0xff
 800da80:	d103      	bne.n	800da8a <netif_add+0xe2>
        netif->num = 0;
 800da82:	68fb      	ldr	r3, [r7, #12]
 800da84:	2200      	movs	r2, #0
 800da86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }
      num_netifs = 0;
 800da8a:	2300      	movs	r3, #0
 800da8c:	617b      	str	r3, [r7, #20]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800da8e:	4b35      	ldr	r3, [pc, #212]	; (800db64 <netif_add+0x1bc>)
 800da90:	681b      	ldr	r3, [r3, #0]
 800da92:	613b      	str	r3, [r7, #16]
 800da94:	e033      	b.n	800dafe <netif_add+0x156>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800da96:	693a      	ldr	r2, [r7, #16]
 800da98:	68fb      	ldr	r3, [r7, #12]
 800da9a:	429a      	cmp	r2, r3
 800da9c:	d10a      	bne.n	800dab4 <netif_add+0x10c>
 800da9e:	f240 128b 	movw	r2, #395	; 0x18b
 800daa2:	4931      	ldr	r1, [pc, #196]	; (800db68 <netif_add+0x1c0>)
 800daa4:	4828      	ldr	r0, [pc, #160]	; (800db48 <netif_add+0x1a0>)
 800daa6:	f00d fb35 	bl	801b114 <trace_printf>
 800daaa:	4928      	ldr	r1, [pc, #160]	; (800db4c <netif_add+0x1a4>)
 800daac:	4828      	ldr	r0, [pc, #160]	; (800db50 <netif_add+0x1a8>)
 800daae:	f00d fb31 	bl	801b114 <trace_printf>
 800dab2:	e7fe      	b.n	800dab2 <netif_add+0x10a>
        num_netifs++;
 800dab4:	697b      	ldr	r3, [r7, #20]
 800dab6:	3301      	adds	r3, #1
 800dab8:	617b      	str	r3, [r7, #20]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800daba:	697b      	ldr	r3, [r7, #20]
 800dabc:	2bff      	cmp	r3, #255	; 0xff
 800dabe:	dd0a      	ble.n	800dad6 <netif_add+0x12e>
 800dac0:	f240 128d 	movw	r2, #397	; 0x18d
 800dac4:	4929      	ldr	r1, [pc, #164]	; (800db6c <netif_add+0x1c4>)
 800dac6:	4820      	ldr	r0, [pc, #128]	; (800db48 <netif_add+0x1a0>)
 800dac8:	f00d fb24 	bl	801b114 <trace_printf>
 800dacc:	491f      	ldr	r1, [pc, #124]	; (800db4c <netif_add+0x1a4>)
 800dace:	4820      	ldr	r0, [pc, #128]	; (800db50 <netif_add+0x1a8>)
 800dad0:	f00d fb20 	bl	801b114 <trace_printf>
 800dad4:	e7fe      	b.n	800dad4 <netif_add+0x12c>
        if (netif2->num == netif->num) {
 800dad6:	693b      	ldr	r3, [r7, #16]
 800dad8:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 800dadc:	68fb      	ldr	r3, [r7, #12]
 800dade:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800dae2:	429a      	cmp	r2, r3
 800dae4:	d108      	bne.n	800daf8 <netif_add+0x150>
          netif->num++;
 800dae6:	68fb      	ldr	r3, [r7, #12]
 800dae8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800daec:	3301      	adds	r3, #1
 800daee:	b2da      	uxtb	r2, r3
 800daf0:	68fb      	ldr	r3, [r7, #12]
 800daf2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          break;
 800daf6:	e005      	b.n	800db04 <netif_add+0x15c>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800daf8:	693b      	ldr	r3, [r7, #16]
 800dafa:	681b      	ldr	r3, [r3, #0]
 800dafc:	613b      	str	r3, [r7, #16]
 800dafe:	693b      	ldr	r3, [r7, #16]
 800db00:	2b00      	cmp	r3, #0
 800db02:	d1c8      	bne.n	800da96 <netif_add+0xee>
        }
      }
    } while (netif2 != NULL);
 800db04:	693b      	ldr	r3, [r7, #16]
 800db06:	2b00      	cmp	r3, #0
 800db08:	d1b6      	bne.n	800da78 <netif_add+0xd0>
  }
  if (netif->num == 254) {
 800db0a:	68fb      	ldr	r3, [r7, #12]
 800db0c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800db10:	2bfe      	cmp	r3, #254	; 0xfe
 800db12:	d103      	bne.n	800db1c <netif_add+0x174>
    netif_num = 0;
 800db14:	4b12      	ldr	r3, [pc, #72]	; (800db60 <netif_add+0x1b8>)
 800db16:	2200      	movs	r2, #0
 800db18:	701a      	strb	r2, [r3, #0]
 800db1a:	e006      	b.n	800db2a <netif_add+0x182>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800db1c:	68fb      	ldr	r3, [r7, #12]
 800db1e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800db22:	3301      	adds	r3, #1
 800db24:	b2da      	uxtb	r2, r3
 800db26:	4b0e      	ldr	r3, [pc, #56]	; (800db60 <netif_add+0x1b8>)
 800db28:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800db2a:	4b0e      	ldr	r3, [pc, #56]	; (800db64 <netif_add+0x1bc>)
 800db2c:	681a      	ldr	r2, [r3, #0]
 800db2e:	68fb      	ldr	r3, [r7, #12]
 800db30:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800db32:	4a0c      	ldr	r2, [pc, #48]	; (800db64 <netif_add+0x1bc>)
 800db34:	68fb      	ldr	r3, [r7, #12]
 800db36:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800db38:	68fb      	ldr	r3, [r7, #12]
}
 800db3a:	4618      	mov	r0, r3
 800db3c:	3718      	adds	r7, #24
 800db3e:	46bd      	mov	sp, r7
 800db40:	bd80      	pop	{r7, pc}
 800db42:	bf00      	nop
 800db44:	0801dbf4 	.word	0x0801dbf4
 800db48:	0801db80 	.word	0x0801db80
 800db4c:	0801dba0 	.word	0x0801dba0
 800db50:	0801dbd4 	.word	0x0801dbd4
 800db54:	0801dc10 	.word	0x0801dc10
 800db58:	08020718 	.word	0x08020718
 800db5c:	0800dfd3 	.word	0x0800dfd3
 800db60:	20009f8c 	.word	0x20009f8c
 800db64:	20010b70 	.word	0x20010b70
 800db68:	0801dc34 	.word	0x0801dc34
 800db6c:	0801dc48 	.word	0x0801dc48

0800db70 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800db70:	b580      	push	{r7, lr}
 800db72:	b082      	sub	sp, #8
 800db74:	af00      	add	r7, sp, #0
 800db76:	6078      	str	r0, [r7, #4]
 800db78:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800db7a:	6839      	ldr	r1, [r7, #0]
 800db7c:	6878      	ldr	r0, [r7, #4]
 800db7e:	f002 ff3f 	bl	8010a00 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800db82:	6839      	ldr	r1, [r7, #0]
 800db84:	6878      	ldr	r0, [r7, #4]
 800db86:	f008 fbb9 	bl	80162fc <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800db8a:	bf00      	nop
 800db8c:	3708      	adds	r7, #8
 800db8e:	46bd      	mov	sp, r7
 800db90:	bd80      	pop	{r7, pc}
	...

0800db94 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800db94:	b580      	push	{r7, lr}
 800db96:	b086      	sub	sp, #24
 800db98:	af00      	add	r7, sp, #0
 800db9a:	60f8      	str	r0, [r7, #12]
 800db9c:	60b9      	str	r1, [r7, #8]
 800db9e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800dba0:	68bb      	ldr	r3, [r7, #8]
 800dba2:	2b00      	cmp	r3, #0
 800dba4:	d10a      	bne.n	800dbbc <netif_do_set_ipaddr+0x28>
 800dba6:	f240 12cb 	movw	r2, #459	; 0x1cb
 800dbaa:	4920      	ldr	r1, [pc, #128]	; (800dc2c <netif_do_set_ipaddr+0x98>)
 800dbac:	4820      	ldr	r0, [pc, #128]	; (800dc30 <netif_do_set_ipaddr+0x9c>)
 800dbae:	f00d fab1 	bl	801b114 <trace_printf>
 800dbb2:	4920      	ldr	r1, [pc, #128]	; (800dc34 <netif_do_set_ipaddr+0xa0>)
 800dbb4:	4820      	ldr	r0, [pc, #128]	; (800dc38 <netif_do_set_ipaddr+0xa4>)
 800dbb6:	f00d faad 	bl	801b114 <trace_printf>
 800dbba:	e7fe      	b.n	800dbba <netif_do_set_ipaddr+0x26>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	2b00      	cmp	r3, #0
 800dbc0:	d10a      	bne.n	800dbd8 <netif_do_set_ipaddr+0x44>
 800dbc2:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800dbc6:	4919      	ldr	r1, [pc, #100]	; (800dc2c <netif_do_set_ipaddr+0x98>)
 800dbc8:	4819      	ldr	r0, [pc, #100]	; (800dc30 <netif_do_set_ipaddr+0x9c>)
 800dbca:	f00d faa3 	bl	801b114 <trace_printf>
 800dbce:	4919      	ldr	r1, [pc, #100]	; (800dc34 <netif_do_set_ipaddr+0xa0>)
 800dbd0:	4819      	ldr	r0, [pc, #100]	; (800dc38 <netif_do_set_ipaddr+0xa4>)
 800dbd2:	f00d fa9f 	bl	801b114 <trace_printf>
 800dbd6:	e7fe      	b.n	800dbd6 <netif_do_set_ipaddr+0x42>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800dbd8:	68bb      	ldr	r3, [r7, #8]
 800dbda:	681a      	ldr	r2, [r3, #0]
 800dbdc:	68fb      	ldr	r3, [r7, #12]
 800dbde:	3304      	adds	r3, #4
 800dbe0:	681b      	ldr	r3, [r3, #0]
 800dbe2:	429a      	cmp	r2, r3
 800dbe4:	d01c      	beq.n	800dc20 <netif_do_set_ipaddr+0x8c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800dbe6:	68bb      	ldr	r3, [r7, #8]
 800dbe8:	681b      	ldr	r3, [r3, #0]
 800dbea:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800dbec:	68fb      	ldr	r3, [r7, #12]
 800dbee:	3304      	adds	r3, #4
 800dbf0:	681a      	ldr	r2, [r3, #0]
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800dbf6:	f107 0314 	add.w	r3, r7, #20
 800dbfa:	4619      	mov	r1, r3
 800dbfc:	6878      	ldr	r0, [r7, #4]
 800dbfe:	f7ff ffb7 	bl	800db70 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800dc02:	68bb      	ldr	r3, [r7, #8]
 800dc04:	2b00      	cmp	r3, #0
 800dc06:	d002      	beq.n	800dc0e <netif_do_set_ipaddr+0x7a>
 800dc08:	68bb      	ldr	r3, [r7, #8]
 800dc0a:	681b      	ldr	r3, [r3, #0]
 800dc0c:	e000      	b.n	800dc10 <netif_do_set_ipaddr+0x7c>
 800dc0e:	2300      	movs	r3, #0
 800dc10:	68fa      	ldr	r2, [r7, #12]
 800dc12:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800dc14:	2101      	movs	r1, #1
 800dc16:	68f8      	ldr	r0, [r7, #12]
 800dc18:	f000 f8da 	bl	800ddd0 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800dc1c:	2301      	movs	r3, #1
 800dc1e:	e000      	b.n	800dc22 <netif_do_set_ipaddr+0x8e>
  }
  return 0; /* address unchanged */
 800dc20:	2300      	movs	r3, #0
}
 800dc22:	4618      	mov	r0, r3
 800dc24:	3718      	adds	r7, #24
 800dc26:	46bd      	mov	sp, r7
 800dc28:	bd80      	pop	{r7, pc}
 800dc2a:	bf00      	nop
 800dc2c:	0801dc78 	.word	0x0801dc78
 800dc30:	0801db80 	.word	0x0801db80
 800dc34:	0801dba0 	.word	0x0801dba0
 800dc38:	0801dbd4 	.word	0x0801dbd4

0800dc3c <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800dc3c:	b480      	push	{r7}
 800dc3e:	b085      	sub	sp, #20
 800dc40:	af00      	add	r7, sp, #0
 800dc42:	60f8      	str	r0, [r7, #12]
 800dc44:	60b9      	str	r1, [r7, #8]
 800dc46:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800dc48:	68bb      	ldr	r3, [r7, #8]
 800dc4a:	681a      	ldr	r2, [r3, #0]
 800dc4c:	68fb      	ldr	r3, [r7, #12]
 800dc4e:	3308      	adds	r3, #8
 800dc50:	681b      	ldr	r3, [r3, #0]
 800dc52:	429a      	cmp	r2, r3
 800dc54:	d00a      	beq.n	800dc6c <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800dc56:	68bb      	ldr	r3, [r7, #8]
 800dc58:	2b00      	cmp	r3, #0
 800dc5a:	d002      	beq.n	800dc62 <netif_do_set_netmask+0x26>
 800dc5c:	68bb      	ldr	r3, [r7, #8]
 800dc5e:	681b      	ldr	r3, [r3, #0]
 800dc60:	e000      	b.n	800dc64 <netif_do_set_netmask+0x28>
 800dc62:	2300      	movs	r3, #0
 800dc64:	68fa      	ldr	r2, [r7, #12]
 800dc66:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800dc68:	2301      	movs	r3, #1
 800dc6a:	e000      	b.n	800dc6e <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800dc6c:	2300      	movs	r3, #0
}
 800dc6e:	4618      	mov	r0, r3
 800dc70:	3714      	adds	r7, #20
 800dc72:	46bd      	mov	sp, r7
 800dc74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc78:	4770      	bx	lr

0800dc7a <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800dc7a:	b480      	push	{r7}
 800dc7c:	b085      	sub	sp, #20
 800dc7e:	af00      	add	r7, sp, #0
 800dc80:	60f8      	str	r0, [r7, #12]
 800dc82:	60b9      	str	r1, [r7, #8]
 800dc84:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800dc86:	68bb      	ldr	r3, [r7, #8]
 800dc88:	681a      	ldr	r2, [r3, #0]
 800dc8a:	68fb      	ldr	r3, [r7, #12]
 800dc8c:	330c      	adds	r3, #12
 800dc8e:	681b      	ldr	r3, [r3, #0]
 800dc90:	429a      	cmp	r2, r3
 800dc92:	d00a      	beq.n	800dcaa <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800dc94:	68bb      	ldr	r3, [r7, #8]
 800dc96:	2b00      	cmp	r3, #0
 800dc98:	d002      	beq.n	800dca0 <netif_do_set_gw+0x26>
 800dc9a:	68bb      	ldr	r3, [r7, #8]
 800dc9c:	681b      	ldr	r3, [r3, #0]
 800dc9e:	e000      	b.n	800dca2 <netif_do_set_gw+0x28>
 800dca0:	2300      	movs	r3, #0
 800dca2:	68fa      	ldr	r2, [r7, #12]
 800dca4:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800dca6:	2301      	movs	r3, #1
 800dca8:	e000      	b.n	800dcac <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800dcaa:	2300      	movs	r3, #0
}
 800dcac:	4618      	mov	r0, r3
 800dcae:	3714      	adds	r7, #20
 800dcb0:	46bd      	mov	sp, r7
 800dcb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcb6:	4770      	bx	lr

0800dcb8 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800dcb8:	b580      	push	{r7, lr}
 800dcba:	b088      	sub	sp, #32
 800dcbc:	af00      	add	r7, sp, #0
 800dcbe:	60f8      	str	r0, [r7, #12]
 800dcc0:	60b9      	str	r1, [r7, #8]
 800dcc2:	607a      	str	r2, [r7, #4]
 800dcc4:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800dcc6:	2300      	movs	r3, #0
 800dcc8:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800dcca:	2300      	movs	r3, #0
 800dccc:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800dcce:	68bb      	ldr	r3, [r7, #8]
 800dcd0:	2b00      	cmp	r3, #0
 800dcd2:	d101      	bne.n	800dcd8 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800dcd4:	4b1c      	ldr	r3, [pc, #112]	; (800dd48 <netif_set_addr+0x90>)
 800dcd6:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	2b00      	cmp	r3, #0
 800dcdc:	d101      	bne.n	800dce2 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800dcde:	4b1a      	ldr	r3, [pc, #104]	; (800dd48 <netif_set_addr+0x90>)
 800dce0:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800dce2:	683b      	ldr	r3, [r7, #0]
 800dce4:	2b00      	cmp	r3, #0
 800dce6:	d101      	bne.n	800dcec <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800dce8:	4b17      	ldr	r3, [pc, #92]	; (800dd48 <netif_set_addr+0x90>)
 800dcea:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800dcec:	68bb      	ldr	r3, [r7, #8]
 800dcee:	2b00      	cmp	r3, #0
 800dcf0:	d003      	beq.n	800dcfa <netif_set_addr+0x42>
 800dcf2:	68bb      	ldr	r3, [r7, #8]
 800dcf4:	681b      	ldr	r3, [r3, #0]
 800dcf6:	2b00      	cmp	r3, #0
 800dcf8:	d101      	bne.n	800dcfe <netif_set_addr+0x46>
 800dcfa:	2301      	movs	r3, #1
 800dcfc:	e000      	b.n	800dd00 <netif_set_addr+0x48>
 800dcfe:	2300      	movs	r3, #0
 800dd00:	617b      	str	r3, [r7, #20]
  if (remove) {
 800dd02:	697b      	ldr	r3, [r7, #20]
 800dd04:	2b00      	cmp	r3, #0
 800dd06:	d006      	beq.n	800dd16 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800dd08:	f107 0310 	add.w	r3, r7, #16
 800dd0c:	461a      	mov	r2, r3
 800dd0e:	68b9      	ldr	r1, [r7, #8]
 800dd10:	68f8      	ldr	r0, [r7, #12]
 800dd12:	f7ff ff3f 	bl	800db94 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800dd16:	69fa      	ldr	r2, [r7, #28]
 800dd18:	6879      	ldr	r1, [r7, #4]
 800dd1a:	68f8      	ldr	r0, [r7, #12]
 800dd1c:	f7ff ff8e 	bl	800dc3c <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800dd20:	69ba      	ldr	r2, [r7, #24]
 800dd22:	6839      	ldr	r1, [r7, #0]
 800dd24:	68f8      	ldr	r0, [r7, #12]
 800dd26:	f7ff ffa8 	bl	800dc7a <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800dd2a:	697b      	ldr	r3, [r7, #20]
 800dd2c:	2b00      	cmp	r3, #0
 800dd2e:	d106      	bne.n	800dd3e <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800dd30:	f107 0310 	add.w	r3, r7, #16
 800dd34:	461a      	mov	r2, r3
 800dd36:	68b9      	ldr	r1, [r7, #8]
 800dd38:	68f8      	ldr	r0, [r7, #12]
 800dd3a:	f7ff ff2b 	bl	800db94 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800dd3e:	bf00      	nop
 800dd40:	3720      	adds	r7, #32
 800dd42:	46bd      	mov	sp, r7
 800dd44:	bd80      	pop	{r7, pc}
 800dd46:	bf00      	nop
 800dd48:	08020718 	.word	0x08020718

0800dd4c <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800dd4c:	b480      	push	{r7}
 800dd4e:	b083      	sub	sp, #12
 800dd50:	af00      	add	r7, sp, #0
 800dd52:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800dd54:	4a04      	ldr	r2, [pc, #16]	; (800dd68 <netif_set_default+0x1c>)
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800dd5a:	bf00      	nop
 800dd5c:	370c      	adds	r7, #12
 800dd5e:	46bd      	mov	sp, r7
 800dd60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd64:	4770      	bx	lr
 800dd66:	bf00      	nop
 800dd68:	20010b74 	.word	0x20010b74

0800dd6c <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800dd6c:	b580      	push	{r7, lr}
 800dd6e:	b082      	sub	sp, #8
 800dd70:	af00      	add	r7, sp, #0
 800dd72:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	2b00      	cmp	r3, #0
 800dd78:	d10a      	bne.n	800dd90 <netif_set_up+0x24>
 800dd7a:	f44f 7254 	mov.w	r2, #848	; 0x350
 800dd7e:	4910      	ldr	r1, [pc, #64]	; (800ddc0 <netif_set_up+0x54>)
 800dd80:	4810      	ldr	r0, [pc, #64]	; (800ddc4 <netif_set_up+0x58>)
 800dd82:	f00d f9c7 	bl	801b114 <trace_printf>
 800dd86:	4910      	ldr	r1, [pc, #64]	; (800ddc8 <netif_set_up+0x5c>)
 800dd88:	4810      	ldr	r0, [pc, #64]	; (800ddcc <netif_set_up+0x60>)
 800dd8a:	f00d f9c3 	bl	801b114 <trace_printf>
 800dd8e:	e7fe      	b.n	800dd8e <netif_set_up+0x22>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800dd96:	f003 0301 	and.w	r3, r3, #1
 800dd9a:	2b00      	cmp	r3, #0
 800dd9c:	d10c      	bne.n	800ddb8 <netif_set_up+0x4c>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800dda4:	f043 0301 	orr.w	r3, r3, #1
 800dda8:	b2da      	uxtb	r2, r3
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800ddb0:	2103      	movs	r1, #3
 800ddb2:	6878      	ldr	r0, [r7, #4]
 800ddb4:	f000 f80c 	bl	800ddd0 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800ddb8:	3708      	adds	r7, #8
 800ddba:	46bd      	mov	sp, r7
 800ddbc:	bd80      	pop	{r7, pc}
 800ddbe:	bf00      	nop
 800ddc0:	0801dce8 	.word	0x0801dce8
 800ddc4:	0801db80 	.word	0x0801db80
 800ddc8:	0801dba0 	.word	0x0801dba0
 800ddcc:	0801dbd4 	.word	0x0801dbd4

0800ddd0 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800ddd0:	b580      	push	{r7, lr}
 800ddd2:	b082      	sub	sp, #8
 800ddd4:	af00      	add	r7, sp, #0
 800ddd6:	6078      	str	r0, [r7, #4]
 800ddd8:	460b      	mov	r3, r1
 800ddda:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	2b00      	cmp	r3, #0
 800dde0:	d10a      	bne.n	800ddf8 <netif_issue_reports+0x28>
 800dde2:	f240 326d 	movw	r2, #877	; 0x36d
 800dde6:	4919      	ldr	r1, [pc, #100]	; (800de4c <netif_issue_reports+0x7c>)
 800dde8:	4819      	ldr	r0, [pc, #100]	; (800de50 <netif_issue_reports+0x80>)
 800ddea:	f00d f993 	bl	801b114 <trace_printf>
 800ddee:	4919      	ldr	r1, [pc, #100]	; (800de54 <netif_issue_reports+0x84>)
 800ddf0:	4819      	ldr	r0, [pc, #100]	; (800de58 <netif_issue_reports+0x88>)
 800ddf2:	f00d f98f 	bl	801b114 <trace_printf>
 800ddf6:	e7fe      	b.n	800ddf6 <netif_issue_reports+0x26>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800ddfe:	f003 0304 	and.w	r3, r3, #4
 800de02:	2b00      	cmp	r3, #0
 800de04:	d01e      	beq.n	800de44 <netif_issue_reports+0x74>
      !(netif->flags & NETIF_FLAG_UP)) {
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800de0c:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800de10:	2b00      	cmp	r3, #0
 800de12:	d017      	beq.n	800de44 <netif_issue_reports+0x74>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800de14:	78fb      	ldrb	r3, [r7, #3]
 800de16:	f003 0301 	and.w	r3, r3, #1
 800de1a:	2b00      	cmp	r3, #0
 800de1c:	d013      	beq.n	800de46 <netif_issue_reports+0x76>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	3304      	adds	r3, #4
 800de22:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800de24:	2b00      	cmp	r3, #0
 800de26:	d00e      	beq.n	800de46 <netif_issue_reports+0x76>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800de2e:	f003 0308 	and.w	r3, r3, #8
 800de32:	2b00      	cmp	r3, #0
 800de34:	d007      	beq.n	800de46 <netif_issue_reports+0x76>
      etharp_gratuitous(netif);
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	3304      	adds	r3, #4
 800de3a:	4619      	mov	r1, r3
 800de3c:	6878      	ldr	r0, [r7, #4]
 800de3e:	f00b f98b 	bl	8019158 <etharp_request>
 800de42:	e000      	b.n	800de46 <netif_issue_reports+0x76>
    return;
 800de44:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800de46:	3708      	adds	r7, #8
 800de48:	46bd      	mov	sp, r7
 800de4a:	bd80      	pop	{r7, pc}
 800de4c:	0801dd04 	.word	0x0801dd04
 800de50:	0801db80 	.word	0x0801db80
 800de54:	0801dba0 	.word	0x0801dba0
 800de58:	0801dbd4 	.word	0x0801dbd4

0800de5c <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800de5c:	b580      	push	{r7, lr}
 800de5e:	b082      	sub	sp, #8
 800de60:	af00      	add	r7, sp, #0
 800de62:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	2b00      	cmp	r3, #0
 800de68:	d10a      	bne.n	800de80 <netif_set_down+0x24>
 800de6a:	f240 329b 	movw	r2, #923	; 0x39b
 800de6e:	4913      	ldr	r1, [pc, #76]	; (800debc <netif_set_down+0x60>)
 800de70:	4813      	ldr	r0, [pc, #76]	; (800dec0 <netif_set_down+0x64>)
 800de72:	f00d f94f 	bl	801b114 <trace_printf>
 800de76:	4913      	ldr	r1, [pc, #76]	; (800dec4 <netif_set_down+0x68>)
 800de78:	4813      	ldr	r0, [pc, #76]	; (800dec8 <netif_set_down+0x6c>)
 800de7a:	f00d f94b 	bl	801b114 <trace_printf>
 800de7e:	e7fe      	b.n	800de7e <netif_set_down+0x22>

  if (netif->flags & NETIF_FLAG_UP) {
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800de86:	f003 0301 	and.w	r3, r3, #1
 800de8a:	2b00      	cmp	r3, #0
 800de8c:	d012      	beq.n	800deb4 <netif_set_down+0x58>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800de94:	f023 0301 	bic.w	r3, r3, #1
 800de98:	b2da      	uxtb	r2, r3
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800dea6:	f003 0308 	and.w	r3, r3, #8
 800deaa:	2b00      	cmp	r3, #0
 800deac:	d002      	beq.n	800deb4 <netif_set_down+0x58>
      etharp_cleanup_netif(netif);
 800deae:	6878      	ldr	r0, [r7, #4]
 800deb0:	f00a fc92 	bl	80187d8 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800deb4:	3708      	adds	r7, #8
 800deb6:	46bd      	mov	sp, r7
 800deb8:	bd80      	pop	{r7, pc}
 800deba:	bf00      	nop
 800debc:	0801dd28 	.word	0x0801dd28
 800dec0:	0801db80 	.word	0x0801db80
 800dec4:	0801dba0 	.word	0x0801dba0
 800dec8:	0801dbd4 	.word	0x0801dbd4

0800decc <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800decc:	b580      	push	{r7, lr}
 800dece:	b082      	sub	sp, #8
 800ded0:	af00      	add	r7, sp, #0
 800ded2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	2b00      	cmp	r3, #0
 800ded8:	d10a      	bne.n	800def0 <netif_set_link_up+0x24>
 800deda:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800dede:	4915      	ldr	r1, [pc, #84]	; (800df34 <netif_set_link_up+0x68>)
 800dee0:	4815      	ldr	r0, [pc, #84]	; (800df38 <netif_set_link_up+0x6c>)
 800dee2:	f00d f917 	bl	801b114 <trace_printf>
 800dee6:	4915      	ldr	r1, [pc, #84]	; (800df3c <netif_set_link_up+0x70>)
 800dee8:	4815      	ldr	r0, [pc, #84]	; (800df40 <netif_set_link_up+0x74>)
 800deea:	f00d f913 	bl	801b114 <trace_printf>
 800deee:	e7fe      	b.n	800deee <netif_set_link_up+0x22>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800def6:	f003 0304 	and.w	r3, r3, #4
 800defa:	2b00      	cmp	r3, #0
 800defc:	d117      	bne.n	800df2e <netif_set_link_up+0x62>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800df04:	f043 0304 	orr.w	r3, r3, #4
 800df08:	b2da      	uxtb	r2, r3
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

#if LWIP_DHCP
    dhcp_network_changed(netif);
 800df10:	6878      	ldr	r0, [r7, #4]
 800df12:	f008 fe31 	bl	8016b78 <dhcp_network_changed>

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800df16:	2103      	movs	r1, #3
 800df18:	6878      	ldr	r0, [r7, #4]
 800df1a:	f7ff ff59 	bl	800ddd0 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	69db      	ldr	r3, [r3, #28]
 800df22:	2b00      	cmp	r3, #0
 800df24:	d003      	beq.n	800df2e <netif_set_link_up+0x62>
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	69db      	ldr	r3, [r3, #28]
 800df2a:	6878      	ldr	r0, [r7, #4]
 800df2c:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800df2e:	3708      	adds	r7, #8
 800df30:	46bd      	mov	sp, r7
 800df32:	bd80      	pop	{r7, pc}
 800df34:	0801dd48 	.word	0x0801dd48
 800df38:	0801db80 	.word	0x0801db80
 800df3c:	0801dba0 	.word	0x0801dba0
 800df40:	0801dbd4 	.word	0x0801dbd4

0800df44 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800df44:	b580      	push	{r7, lr}
 800df46:	b082      	sub	sp, #8
 800df48:	af00      	add	r7, sp, #0
 800df4a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	2b00      	cmp	r3, #0
 800df50:	d10a      	bne.n	800df68 <netif_set_link_down+0x24>
 800df52:	f240 4206 	movw	r2, #1030	; 0x406
 800df56:	4912      	ldr	r1, [pc, #72]	; (800dfa0 <netif_set_link_down+0x5c>)
 800df58:	4812      	ldr	r0, [pc, #72]	; (800dfa4 <netif_set_link_down+0x60>)
 800df5a:	f00d f8db 	bl	801b114 <trace_printf>
 800df5e:	4912      	ldr	r1, [pc, #72]	; (800dfa8 <netif_set_link_down+0x64>)
 800df60:	4812      	ldr	r0, [pc, #72]	; (800dfac <netif_set_link_down+0x68>)
 800df62:	f00d f8d7 	bl	801b114 <trace_printf>
 800df66:	e7fe      	b.n	800df66 <netif_set_link_down+0x22>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800df6e:	f003 0304 	and.w	r3, r3, #4
 800df72:	2b00      	cmp	r3, #0
 800df74:	d010      	beq.n	800df98 <netif_set_link_down+0x54>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800df7c:	f023 0304 	bic.w	r3, r3, #4
 800df80:	b2da      	uxtb	r2, r3
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    NETIF_LINK_CALLBACK(netif);
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	69db      	ldr	r3, [r3, #28]
 800df8c:	2b00      	cmp	r3, #0
 800df8e:	d003      	beq.n	800df98 <netif_set_link_down+0x54>
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	69db      	ldr	r3, [r3, #28]
 800df94:	6878      	ldr	r0, [r7, #4]
 800df96:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800df98:	3708      	adds	r7, #8
 800df9a:	46bd      	mov	sp, r7
 800df9c:	bd80      	pop	{r7, pc}
 800df9e:	bf00      	nop
 800dfa0:	0801dd6c 	.word	0x0801dd6c
 800dfa4:	0801db80 	.word	0x0801db80
 800dfa8:	0801dba0 	.word	0x0801dba0
 800dfac:	0801dbd4 	.word	0x0801dbd4

0800dfb0 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800dfb0:	b480      	push	{r7}
 800dfb2:	b083      	sub	sp, #12
 800dfb4:	af00      	add	r7, sp, #0
 800dfb6:	6078      	str	r0, [r7, #4]
 800dfb8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	2b00      	cmp	r3, #0
 800dfbe:	d002      	beq.n	800dfc6 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	683a      	ldr	r2, [r7, #0]
 800dfc4:	61da      	str	r2, [r3, #28]
  }
}
 800dfc6:	bf00      	nop
 800dfc8:	370c      	adds	r7, #12
 800dfca:	46bd      	mov	sp, r7
 800dfcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfd0:	4770      	bx	lr

0800dfd2 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800dfd2:	b480      	push	{r7}
 800dfd4:	b085      	sub	sp, #20
 800dfd6:	af00      	add	r7, sp, #0
 800dfd8:	60f8      	str	r0, [r7, #12]
 800dfda:	60b9      	str	r1, [r7, #8]
 800dfdc:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800dfde:	f06f 030b 	mvn.w	r3, #11
}
 800dfe2:	4618      	mov	r0, r3
 800dfe4:	3714      	adds	r7, #20
 800dfe6:	46bd      	mov	sp, r7
 800dfe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfec:	4770      	bx	lr
	...

0800dff0 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800dff0:	b480      	push	{r7}
 800dff2:	b085      	sub	sp, #20
 800dff4:	af00      	add	r7, sp, #0
 800dff6:	4603      	mov	r3, r0
 800dff8:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800dffa:	79fb      	ldrb	r3, [r7, #7]
 800dffc:	2b00      	cmp	r3, #0
 800dffe:	d013      	beq.n	800e028 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800e000:	4b0d      	ldr	r3, [pc, #52]	; (800e038 <netif_get_by_index+0x48>)
 800e002:	681b      	ldr	r3, [r3, #0]
 800e004:	60fb      	str	r3, [r7, #12]
 800e006:	e00c      	b.n	800e022 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800e008:	68fb      	ldr	r3, [r7, #12]
 800e00a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e00e:	3301      	adds	r3, #1
 800e010:	b2db      	uxtb	r3, r3
 800e012:	79fa      	ldrb	r2, [r7, #7]
 800e014:	429a      	cmp	r2, r3
 800e016:	d101      	bne.n	800e01c <netif_get_by_index+0x2c>
        return netif; /* found! */
 800e018:	68fb      	ldr	r3, [r7, #12]
 800e01a:	e006      	b.n	800e02a <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800e01c:	68fb      	ldr	r3, [r7, #12]
 800e01e:	681b      	ldr	r3, [r3, #0]
 800e020:	60fb      	str	r3, [r7, #12]
 800e022:	68fb      	ldr	r3, [r7, #12]
 800e024:	2b00      	cmp	r3, #0
 800e026:	d1ef      	bne.n	800e008 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800e028:	2300      	movs	r3, #0
}
 800e02a:	4618      	mov	r0, r3
 800e02c:	3714      	adds	r7, #20
 800e02e:	46bd      	mov	sp, r7
 800e030:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e034:	4770      	bx	lr
 800e036:	bf00      	nop
 800e038:	20010b70 	.word	0x20010b70

0800e03c <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800e03c:	b580      	push	{r7, lr}
 800e03e:	b082      	sub	sp, #8
 800e040:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800e042:	f00c ffff 	bl	801b044 <sys_arch_protect>
 800e046:	6038      	str	r0, [r7, #0]
 800e048:	4b0d      	ldr	r3, [pc, #52]	; (800e080 <pbuf_free_ooseq+0x44>)
 800e04a:	2200      	movs	r2, #0
 800e04c:	701a      	strb	r2, [r3, #0]
 800e04e:	6838      	ldr	r0, [r7, #0]
 800e050:	f00d f806 	bl	801b060 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800e054:	4b0b      	ldr	r3, [pc, #44]	; (800e084 <pbuf_free_ooseq+0x48>)
 800e056:	681b      	ldr	r3, [r3, #0]
 800e058:	607b      	str	r3, [r7, #4]
 800e05a:	e00a      	b.n	800e072 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e060:	2b00      	cmp	r3, #0
 800e062:	d003      	beq.n	800e06c <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800e064:	6878      	ldr	r0, [r7, #4]
 800e066:	f002 fd09 	bl	8010a7c <tcp_free_ooseq>
      return;
 800e06a:	e005      	b.n	800e078 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	68db      	ldr	r3, [r3, #12]
 800e070:	607b      	str	r3, [r7, #4]
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	2b00      	cmp	r3, #0
 800e076:	d1f1      	bne.n	800e05c <pbuf_free_ooseq+0x20>
    }
  }
}
 800e078:	3708      	adds	r7, #8
 800e07a:	46bd      	mov	sp, r7
 800e07c:	bd80      	pop	{r7, pc}
 800e07e:	bf00      	nop
 800e080:	20010b78 	.word	0x20010b78
 800e084:	20010c80 	.word	0x20010c80

0800e088 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800e088:	b580      	push	{r7, lr}
 800e08a:	b082      	sub	sp, #8
 800e08c:	af00      	add	r7, sp, #0
 800e08e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800e090:	f7ff ffd4 	bl	800e03c <pbuf_free_ooseq>
}
 800e094:	bf00      	nop
 800e096:	3708      	adds	r7, #8
 800e098:	46bd      	mov	sp, r7
 800e09a:	bd80      	pop	{r7, pc}

0800e09c <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800e09c:	b580      	push	{r7, lr}
 800e09e:	b082      	sub	sp, #8
 800e0a0:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800e0a2:	f00c ffcf 	bl	801b044 <sys_arch_protect>
 800e0a6:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800e0a8:	4b0f      	ldr	r3, [pc, #60]	; (800e0e8 <pbuf_pool_is_empty+0x4c>)
 800e0aa:	781b      	ldrb	r3, [r3, #0]
 800e0ac:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800e0ae:	4b0e      	ldr	r3, [pc, #56]	; (800e0e8 <pbuf_pool_is_empty+0x4c>)
 800e0b0:	2201      	movs	r2, #1
 800e0b2:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800e0b4:	6878      	ldr	r0, [r7, #4]
 800e0b6:	f00c ffd3 	bl	801b060 <sys_arch_unprotect>

  if (!queued) {
 800e0ba:	78fb      	ldrb	r3, [r7, #3]
 800e0bc:	2b00      	cmp	r3, #0
 800e0be:	d10f      	bne.n	800e0e0 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800e0c0:	2100      	movs	r1, #0
 800e0c2:	480a      	ldr	r0, [pc, #40]	; (800e0ec <pbuf_pool_is_empty+0x50>)
 800e0c4:	f7fe fd8e 	bl	800cbe4 <tcpip_try_callback>
 800e0c8:	4603      	mov	r3, r0
 800e0ca:	2b00      	cmp	r3, #0
 800e0cc:	d008      	beq.n	800e0e0 <pbuf_pool_is_empty+0x44>
 800e0ce:	f00c ffb9 	bl	801b044 <sys_arch_protect>
 800e0d2:	6078      	str	r0, [r7, #4]
 800e0d4:	4b04      	ldr	r3, [pc, #16]	; (800e0e8 <pbuf_pool_is_empty+0x4c>)
 800e0d6:	2200      	movs	r2, #0
 800e0d8:	701a      	strb	r2, [r3, #0]
 800e0da:	6878      	ldr	r0, [r7, #4]
 800e0dc:	f00c ffc0 	bl	801b060 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800e0e0:	bf00      	nop
 800e0e2:	3708      	adds	r7, #8
 800e0e4:	46bd      	mov	sp, r7
 800e0e6:	bd80      	pop	{r7, pc}
 800e0e8:	20010b78 	.word	0x20010b78
 800e0ec:	0800e089 	.word	0x0800e089

0800e0f0 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800e0f0:	b480      	push	{r7}
 800e0f2:	b085      	sub	sp, #20
 800e0f4:	af00      	add	r7, sp, #0
 800e0f6:	60f8      	str	r0, [r7, #12]
 800e0f8:	60b9      	str	r1, [r7, #8]
 800e0fa:	4611      	mov	r1, r2
 800e0fc:	461a      	mov	r2, r3
 800e0fe:	460b      	mov	r3, r1
 800e100:	80fb      	strh	r3, [r7, #6]
 800e102:	4613      	mov	r3, r2
 800e104:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800e106:	68fb      	ldr	r3, [r7, #12]
 800e108:	2200      	movs	r2, #0
 800e10a:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800e10c:	68fb      	ldr	r3, [r7, #12]
 800e10e:	68ba      	ldr	r2, [r7, #8]
 800e110:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800e112:	68fb      	ldr	r3, [r7, #12]
 800e114:	88fa      	ldrh	r2, [r7, #6]
 800e116:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800e118:	68fb      	ldr	r3, [r7, #12]
 800e11a:	88ba      	ldrh	r2, [r7, #4]
 800e11c:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800e11e:	8b3b      	ldrh	r3, [r7, #24]
 800e120:	b2da      	uxtb	r2, r3
 800e122:	68fb      	ldr	r3, [r7, #12]
 800e124:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800e126:	68fb      	ldr	r3, [r7, #12]
 800e128:	7f3a      	ldrb	r2, [r7, #28]
 800e12a:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800e12c:	68fb      	ldr	r3, [r7, #12]
 800e12e:	2201      	movs	r2, #1
 800e130:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800e132:	68fb      	ldr	r3, [r7, #12]
 800e134:	2200      	movs	r2, #0
 800e136:	73da      	strb	r2, [r3, #15]
}
 800e138:	bf00      	nop
 800e13a:	3714      	adds	r7, #20
 800e13c:	46bd      	mov	sp, r7
 800e13e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e142:	4770      	bx	lr

0800e144 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800e144:	b580      	push	{r7, lr}
 800e146:	b08c      	sub	sp, #48	; 0x30
 800e148:	af02      	add	r7, sp, #8
 800e14a:	4603      	mov	r3, r0
 800e14c:	71fb      	strb	r3, [r7, #7]
 800e14e:	460b      	mov	r3, r1
 800e150:	80bb      	strh	r3, [r7, #4]
 800e152:	4613      	mov	r3, r2
 800e154:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800e156:	79fb      	ldrb	r3, [r7, #7]
 800e158:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800e15a:	887b      	ldrh	r3, [r7, #2]
 800e15c:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800e160:	f000 8088 	beq.w	800e274 <pbuf_alloc+0x130>
 800e164:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800e168:	f300 80d3 	bgt.w	800e312 <pbuf_alloc+0x1ce>
 800e16c:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800e170:	d010      	beq.n	800e194 <pbuf_alloc+0x50>
 800e172:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800e176:	f300 80cc 	bgt.w	800e312 <pbuf_alloc+0x1ce>
 800e17a:	2b01      	cmp	r3, #1
 800e17c:	d002      	beq.n	800e184 <pbuf_alloc+0x40>
 800e17e:	2b41      	cmp	r3, #65	; 0x41
 800e180:	f040 80c7 	bne.w	800e312 <pbuf_alloc+0x1ce>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800e184:	887a      	ldrh	r2, [r7, #2]
 800e186:	88bb      	ldrh	r3, [r7, #4]
 800e188:	4619      	mov	r1, r3
 800e18a:	2000      	movs	r0, #0
 800e18c:	f000 f8e0 	bl	800e350 <pbuf_alloc_reference>
 800e190:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800e192:	e0ca      	b.n	800e32a <pbuf_alloc+0x1e6>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800e194:	2300      	movs	r3, #0
 800e196:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800e198:	2300      	movs	r3, #0
 800e19a:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800e19c:	88bb      	ldrh	r3, [r7, #4]
 800e19e:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800e1a0:	200c      	movs	r0, #12
 800e1a2:	f7ff fb69 	bl	800d878 <memp_malloc>
 800e1a6:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800e1a8:	693b      	ldr	r3, [r7, #16]
 800e1aa:	2b00      	cmp	r3, #0
 800e1ac:	d109      	bne.n	800e1c2 <pbuf_alloc+0x7e>
          PBUF_POOL_IS_EMPTY();
 800e1ae:	f7ff ff75 	bl	800e09c <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800e1b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1b4:	2b00      	cmp	r3, #0
 800e1b6:	d002      	beq.n	800e1be <pbuf_alloc+0x7a>
            pbuf_free(p);
 800e1b8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e1ba:	f000 fad9 	bl	800e770 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800e1be:	2300      	movs	r3, #0
 800e1c0:	e0b4      	b.n	800e32c <pbuf_alloc+0x1e8>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800e1c2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e1c4:	3303      	adds	r3, #3
 800e1c6:	b29b      	uxth	r3, r3
 800e1c8:	f023 0303 	bic.w	r3, r3, #3
 800e1cc:	b29b      	uxth	r3, r3
 800e1ce:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800e1d2:	b29b      	uxth	r3, r3
 800e1d4:	8b7a      	ldrh	r2, [r7, #26]
 800e1d6:	4293      	cmp	r3, r2
 800e1d8:	bf28      	it	cs
 800e1da:	4613      	movcs	r3, r2
 800e1dc:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800e1de:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e1e0:	3310      	adds	r3, #16
 800e1e2:	693a      	ldr	r2, [r7, #16]
 800e1e4:	4413      	add	r3, r2
 800e1e6:	3303      	adds	r3, #3
 800e1e8:	f023 0303 	bic.w	r3, r3, #3
 800e1ec:	4618      	mov	r0, r3
 800e1ee:	89f9      	ldrh	r1, [r7, #14]
 800e1f0:	8b7a      	ldrh	r2, [r7, #26]
 800e1f2:	2300      	movs	r3, #0
 800e1f4:	9301      	str	r3, [sp, #4]
 800e1f6:	887b      	ldrh	r3, [r7, #2]
 800e1f8:	9300      	str	r3, [sp, #0]
 800e1fa:	460b      	mov	r3, r1
 800e1fc:	4601      	mov	r1, r0
 800e1fe:	6938      	ldr	r0, [r7, #16]
 800e200:	f7ff ff76 	bl	800e0f0 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800e204:	693b      	ldr	r3, [r7, #16]
 800e206:	685b      	ldr	r3, [r3, #4]
 800e208:	f003 0303 	and.w	r3, r3, #3
 800e20c:	2b00      	cmp	r3, #0
 800e20e:	d00a      	beq.n	800e226 <pbuf_alloc+0xe2>
 800e210:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e214:	4947      	ldr	r1, [pc, #284]	; (800e334 <pbuf_alloc+0x1f0>)
 800e216:	4848      	ldr	r0, [pc, #288]	; (800e338 <pbuf_alloc+0x1f4>)
 800e218:	f00c ff7c 	bl	801b114 <trace_printf>
 800e21c:	4947      	ldr	r1, [pc, #284]	; (800e33c <pbuf_alloc+0x1f8>)
 800e21e:	4848      	ldr	r0, [pc, #288]	; (800e340 <pbuf_alloc+0x1fc>)
 800e220:	f00c ff78 	bl	801b114 <trace_printf>
 800e224:	e7fe      	b.n	800e224 <pbuf_alloc+0xe0>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800e226:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e228:	3303      	adds	r3, #3
 800e22a:	f023 0303 	bic.w	r3, r3, #3
 800e22e:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800e232:	d10a      	bne.n	800e24a <pbuf_alloc+0x106>
 800e234:	f44f 7281 	mov.w	r2, #258	; 0x102
 800e238:	4942      	ldr	r1, [pc, #264]	; (800e344 <pbuf_alloc+0x200>)
 800e23a:	483f      	ldr	r0, [pc, #252]	; (800e338 <pbuf_alloc+0x1f4>)
 800e23c:	f00c ff6a 	bl	801b114 <trace_printf>
 800e240:	493e      	ldr	r1, [pc, #248]	; (800e33c <pbuf_alloc+0x1f8>)
 800e242:	483f      	ldr	r0, [pc, #252]	; (800e340 <pbuf_alloc+0x1fc>)
 800e244:	f00c ff66 	bl	801b114 <trace_printf>
 800e248:	e7fe      	b.n	800e248 <pbuf_alloc+0x104>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800e24a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e24c:	2b00      	cmp	r3, #0
 800e24e:	d102      	bne.n	800e256 <pbuf_alloc+0x112>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800e250:	693b      	ldr	r3, [r7, #16]
 800e252:	627b      	str	r3, [r7, #36]	; 0x24
 800e254:	e002      	b.n	800e25c <pbuf_alloc+0x118>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800e256:	69fb      	ldr	r3, [r7, #28]
 800e258:	693a      	ldr	r2, [r7, #16]
 800e25a:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800e25c:	693b      	ldr	r3, [r7, #16]
 800e25e:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800e260:	8b7a      	ldrh	r2, [r7, #26]
 800e262:	89fb      	ldrh	r3, [r7, #14]
 800e264:	1ad3      	subs	r3, r2, r3
 800e266:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800e268:	2300      	movs	r3, #0
 800e26a:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800e26c:	8b7b      	ldrh	r3, [r7, #26]
 800e26e:	2b00      	cmp	r3, #0
 800e270:	d196      	bne.n	800e1a0 <pbuf_alloc+0x5c>
      break;
 800e272:	e05a      	b.n	800e32a <pbuf_alloc+0x1e6>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800e274:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e276:	3303      	adds	r3, #3
 800e278:	b29b      	uxth	r3, r3
 800e27a:	f023 0303 	bic.w	r3, r3, #3
 800e27e:	b29a      	uxth	r2, r3
 800e280:	88bb      	ldrh	r3, [r7, #4]
 800e282:	3303      	adds	r3, #3
 800e284:	b29b      	uxth	r3, r3
 800e286:	f023 0303 	bic.w	r3, r3, #3
 800e28a:	b29b      	uxth	r3, r3
 800e28c:	4413      	add	r3, r2
 800e28e:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800e290:	8b3b      	ldrh	r3, [r7, #24]
 800e292:	3310      	adds	r3, #16
 800e294:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800e296:	8b3a      	ldrh	r2, [r7, #24]
 800e298:	88bb      	ldrh	r3, [r7, #4]
 800e29a:	3303      	adds	r3, #3
 800e29c:	f023 0303 	bic.w	r3, r3, #3
 800e2a0:	429a      	cmp	r2, r3
 800e2a2:	d306      	bcc.n	800e2b2 <pbuf_alloc+0x16e>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800e2a4:	8afa      	ldrh	r2, [r7, #22]
 800e2a6:	88bb      	ldrh	r3, [r7, #4]
 800e2a8:	3303      	adds	r3, #3
 800e2aa:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800e2ae:	429a      	cmp	r2, r3
 800e2b0:	d201      	bcs.n	800e2b6 <pbuf_alloc+0x172>
        return NULL;
 800e2b2:	2300      	movs	r3, #0
 800e2b4:	e03a      	b.n	800e32c <pbuf_alloc+0x1e8>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800e2b6:	8afb      	ldrh	r3, [r7, #22]
 800e2b8:	4618      	mov	r0, r3
 800e2ba:	f7ff f8cf 	bl	800d45c <mem_malloc>
 800e2be:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800e2c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2c2:	2b00      	cmp	r3, #0
 800e2c4:	d101      	bne.n	800e2ca <pbuf_alloc+0x186>
        return NULL;
 800e2c6:	2300      	movs	r3, #0
 800e2c8:	e030      	b.n	800e32c <pbuf_alloc+0x1e8>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800e2ca:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e2cc:	3310      	adds	r3, #16
 800e2ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e2d0:	4413      	add	r3, r2
 800e2d2:	3303      	adds	r3, #3
 800e2d4:	f023 0303 	bic.w	r3, r3, #3
 800e2d8:	4618      	mov	r0, r3
 800e2da:	88b9      	ldrh	r1, [r7, #4]
 800e2dc:	88ba      	ldrh	r2, [r7, #4]
 800e2de:	2300      	movs	r3, #0
 800e2e0:	9301      	str	r3, [sp, #4]
 800e2e2:	887b      	ldrh	r3, [r7, #2]
 800e2e4:	9300      	str	r3, [sp, #0]
 800e2e6:	460b      	mov	r3, r1
 800e2e8:	4601      	mov	r1, r0
 800e2ea:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e2ec:	f7ff ff00 	bl	800e0f0 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800e2f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2f2:	685b      	ldr	r3, [r3, #4]
 800e2f4:	f003 0303 	and.w	r3, r3, #3
 800e2f8:	2b00      	cmp	r3, #0
 800e2fa:	d015      	beq.n	800e328 <pbuf_alloc+0x1e4>
 800e2fc:	f44f 7291 	mov.w	r2, #290	; 0x122
 800e300:	4911      	ldr	r1, [pc, #68]	; (800e348 <pbuf_alloc+0x204>)
 800e302:	480d      	ldr	r0, [pc, #52]	; (800e338 <pbuf_alloc+0x1f4>)
 800e304:	f00c ff06 	bl	801b114 <trace_printf>
 800e308:	490c      	ldr	r1, [pc, #48]	; (800e33c <pbuf_alloc+0x1f8>)
 800e30a:	480d      	ldr	r0, [pc, #52]	; (800e340 <pbuf_alloc+0x1fc>)
 800e30c:	f00c ff02 	bl	801b114 <trace_printf>
 800e310:	e7fe      	b.n	800e310 <pbuf_alloc+0x1cc>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800e312:	f240 1227 	movw	r2, #295	; 0x127
 800e316:	490d      	ldr	r1, [pc, #52]	; (800e34c <pbuf_alloc+0x208>)
 800e318:	4807      	ldr	r0, [pc, #28]	; (800e338 <pbuf_alloc+0x1f4>)
 800e31a:	f00c fefb 	bl	801b114 <trace_printf>
 800e31e:	4907      	ldr	r1, [pc, #28]	; (800e33c <pbuf_alloc+0x1f8>)
 800e320:	4807      	ldr	r0, [pc, #28]	; (800e340 <pbuf_alloc+0x1fc>)
 800e322:	f00c fef7 	bl	801b114 <trace_printf>
 800e326:	e7fe      	b.n	800e326 <pbuf_alloc+0x1e2>
      break;
 800e328:	bf00      	nop
      return NULL;
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800e32a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e32c:	4618      	mov	r0, r3
 800e32e:	3728      	adds	r7, #40	; 0x28
 800e330:	46bd      	mov	sp, r7
 800e332:	bd80      	pop	{r7, pc}
 800e334:	0801dd90 	.word	0x0801dd90
 800e338:	0801ddc0 	.word	0x0801ddc0
 800e33c:	0801dde0 	.word	0x0801dde0
 800e340:	0801de10 	.word	0x0801de10
 800e344:	0801de14 	.word	0x0801de14
 800e348:	0801de48 	.word	0x0801de48
 800e34c:	0801de74 	.word	0x0801de74

0800e350 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800e350:	b580      	push	{r7, lr}
 800e352:	b086      	sub	sp, #24
 800e354:	af02      	add	r7, sp, #8
 800e356:	6078      	str	r0, [r7, #4]
 800e358:	460b      	mov	r3, r1
 800e35a:	807b      	strh	r3, [r7, #2]
 800e35c:	4613      	mov	r3, r2
 800e35e:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800e360:	883b      	ldrh	r3, [r7, #0]
 800e362:	2b41      	cmp	r3, #65	; 0x41
 800e364:	d00d      	beq.n	800e382 <pbuf_alloc_reference+0x32>
 800e366:	883b      	ldrh	r3, [r7, #0]
 800e368:	2b01      	cmp	r3, #1
 800e36a:	d00a      	beq.n	800e382 <pbuf_alloc_reference+0x32>
 800e36c:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800e370:	4910      	ldr	r1, [pc, #64]	; (800e3b4 <pbuf_alloc_reference+0x64>)
 800e372:	4811      	ldr	r0, [pc, #68]	; (800e3b8 <pbuf_alloc_reference+0x68>)
 800e374:	f00c fece 	bl	801b114 <trace_printf>
 800e378:	4910      	ldr	r1, [pc, #64]	; (800e3bc <pbuf_alloc_reference+0x6c>)
 800e37a:	4811      	ldr	r0, [pc, #68]	; (800e3c0 <pbuf_alloc_reference+0x70>)
 800e37c:	f00c feca 	bl	801b114 <trace_printf>
 800e380:	e7fe      	b.n	800e380 <pbuf_alloc_reference+0x30>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800e382:	200b      	movs	r0, #11
 800e384:	f7ff fa78 	bl	800d878 <memp_malloc>
 800e388:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800e38a:	68fb      	ldr	r3, [r7, #12]
 800e38c:	2b00      	cmp	r3, #0
 800e38e:	d101      	bne.n	800e394 <pbuf_alloc_reference+0x44>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800e390:	2300      	movs	r3, #0
 800e392:	e00b      	b.n	800e3ac <pbuf_alloc_reference+0x5c>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800e394:	8879      	ldrh	r1, [r7, #2]
 800e396:	887a      	ldrh	r2, [r7, #2]
 800e398:	2300      	movs	r3, #0
 800e39a:	9301      	str	r3, [sp, #4]
 800e39c:	883b      	ldrh	r3, [r7, #0]
 800e39e:	9300      	str	r3, [sp, #0]
 800e3a0:	460b      	mov	r3, r1
 800e3a2:	6879      	ldr	r1, [r7, #4]
 800e3a4:	68f8      	ldr	r0, [r7, #12]
 800e3a6:	f7ff fea3 	bl	800e0f0 <pbuf_init_alloced_pbuf>
  return p;
 800e3aa:	68fb      	ldr	r3, [r7, #12]
}
 800e3ac:	4618      	mov	r0, r3
 800e3ae:	3710      	adds	r7, #16
 800e3b0:	46bd      	mov	sp, r7
 800e3b2:	bd80      	pop	{r7, pc}
 800e3b4:	0801de90 	.word	0x0801de90
 800e3b8:	0801ddc0 	.word	0x0801ddc0
 800e3bc:	0801dde0 	.word	0x0801dde0
 800e3c0:	0801de10 	.word	0x0801de10

0800e3c4 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800e3c4:	b580      	push	{r7, lr}
 800e3c6:	b088      	sub	sp, #32
 800e3c8:	af02      	add	r7, sp, #8
 800e3ca:	607b      	str	r3, [r7, #4]
 800e3cc:	4603      	mov	r3, r0
 800e3ce:	73fb      	strb	r3, [r7, #15]
 800e3d0:	460b      	mov	r3, r1
 800e3d2:	81bb      	strh	r3, [r7, #12]
 800e3d4:	4613      	mov	r3, r2
 800e3d6:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800e3d8:	7bfb      	ldrb	r3, [r7, #15]
 800e3da:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800e3dc:	8a7b      	ldrh	r3, [r7, #18]
 800e3de:	3303      	adds	r3, #3
 800e3e0:	f023 0203 	bic.w	r2, r3, #3
 800e3e4:	89bb      	ldrh	r3, [r7, #12]
 800e3e6:	441a      	add	r2, r3
 800e3e8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e3ea:	429a      	cmp	r2, r3
 800e3ec:	d901      	bls.n	800e3f2 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800e3ee:	2300      	movs	r3, #0
 800e3f0:	e018      	b.n	800e424 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800e3f2:	6a3b      	ldr	r3, [r7, #32]
 800e3f4:	2b00      	cmp	r3, #0
 800e3f6:	d007      	beq.n	800e408 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800e3f8:	8a7b      	ldrh	r3, [r7, #18]
 800e3fa:	3303      	adds	r3, #3
 800e3fc:	f023 0303 	bic.w	r3, r3, #3
 800e400:	6a3a      	ldr	r2, [r7, #32]
 800e402:	4413      	add	r3, r2
 800e404:	617b      	str	r3, [r7, #20]
 800e406:	e001      	b.n	800e40c <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800e408:	2300      	movs	r3, #0
 800e40a:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800e40c:	6878      	ldr	r0, [r7, #4]
 800e40e:	89b9      	ldrh	r1, [r7, #12]
 800e410:	89ba      	ldrh	r2, [r7, #12]
 800e412:	2302      	movs	r3, #2
 800e414:	9301      	str	r3, [sp, #4]
 800e416:	897b      	ldrh	r3, [r7, #10]
 800e418:	9300      	str	r3, [sp, #0]
 800e41a:	460b      	mov	r3, r1
 800e41c:	6979      	ldr	r1, [r7, #20]
 800e41e:	f7ff fe67 	bl	800e0f0 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800e422:	687b      	ldr	r3, [r7, #4]
}
 800e424:	4618      	mov	r0, r3
 800e426:	3718      	adds	r7, #24
 800e428:	46bd      	mov	sp, r7
 800e42a:	bd80      	pop	{r7, pc}

0800e42c <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800e42c:	b580      	push	{r7, lr}
 800e42e:	b084      	sub	sp, #16
 800e430:	af00      	add	r7, sp, #0
 800e432:	6078      	str	r0, [r7, #4]
 800e434:	460b      	mov	r3, r1
 800e436:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800e438:	687b      	ldr	r3, [r7, #4]
 800e43a:	2b00      	cmp	r3, #0
 800e43c:	d10a      	bne.n	800e454 <pbuf_realloc+0x28>
 800e43e:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800e442:	493f      	ldr	r1, [pc, #252]	; (800e540 <pbuf_realloc+0x114>)
 800e444:	483f      	ldr	r0, [pc, #252]	; (800e544 <pbuf_realloc+0x118>)
 800e446:	f00c fe65 	bl	801b114 <trace_printf>
 800e44a:	493f      	ldr	r1, [pc, #252]	; (800e548 <pbuf_realloc+0x11c>)
 800e44c:	483f      	ldr	r0, [pc, #252]	; (800e54c <pbuf_realloc+0x120>)
 800e44e:	f00c fe61 	bl	801b114 <trace_printf>
 800e452:	e7fe      	b.n	800e452 <pbuf_realloc+0x26>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	891b      	ldrh	r3, [r3, #8]
 800e458:	887a      	ldrh	r2, [r7, #2]
 800e45a:	429a      	cmp	r2, r3
 800e45c:	d26b      	bcs.n	800e536 <pbuf_realloc+0x10a>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	891a      	ldrh	r2, [r3, #8]
 800e462:	887b      	ldrh	r3, [r7, #2]
 800e464:	1ad3      	subs	r3, r2, r3
 800e466:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800e468:	887b      	ldrh	r3, [r7, #2]
 800e46a:	817b      	strh	r3, [r7, #10]
  q = p;
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800e470:	e01c      	b.n	800e4ac <pbuf_realloc+0x80>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800e472:	68fb      	ldr	r3, [r7, #12]
 800e474:	895b      	ldrh	r3, [r3, #10]
 800e476:	897a      	ldrh	r2, [r7, #10]
 800e478:	1ad3      	subs	r3, r2, r3
 800e47a:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800e47c:	68fb      	ldr	r3, [r7, #12]
 800e47e:	891a      	ldrh	r2, [r3, #8]
 800e480:	893b      	ldrh	r3, [r7, #8]
 800e482:	1ad3      	subs	r3, r2, r3
 800e484:	b29a      	uxth	r2, r3
 800e486:	68fb      	ldr	r3, [r7, #12]
 800e488:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800e48a:	68fb      	ldr	r3, [r7, #12]
 800e48c:	681b      	ldr	r3, [r3, #0]
 800e48e:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800e490:	68fb      	ldr	r3, [r7, #12]
 800e492:	2b00      	cmp	r3, #0
 800e494:	d10a      	bne.n	800e4ac <pbuf_realloc+0x80>
 800e496:	f240 12af 	movw	r2, #431	; 0x1af
 800e49a:	492d      	ldr	r1, [pc, #180]	; (800e550 <pbuf_realloc+0x124>)
 800e49c:	4829      	ldr	r0, [pc, #164]	; (800e544 <pbuf_realloc+0x118>)
 800e49e:	f00c fe39 	bl	801b114 <trace_printf>
 800e4a2:	4929      	ldr	r1, [pc, #164]	; (800e548 <pbuf_realloc+0x11c>)
 800e4a4:	4829      	ldr	r0, [pc, #164]	; (800e54c <pbuf_realloc+0x120>)
 800e4a6:	f00c fe35 	bl	801b114 <trace_printf>
 800e4aa:	e7fe      	b.n	800e4aa <pbuf_realloc+0x7e>
  while (rem_len > q->len) {
 800e4ac:	68fb      	ldr	r3, [r7, #12]
 800e4ae:	895b      	ldrh	r3, [r3, #10]
 800e4b0:	897a      	ldrh	r2, [r7, #10]
 800e4b2:	429a      	cmp	r2, r3
 800e4b4:	d8dd      	bhi.n	800e472 <pbuf_realloc+0x46>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800e4b6:	68fb      	ldr	r3, [r7, #12]
 800e4b8:	7b1b      	ldrb	r3, [r3, #12]
 800e4ba:	f003 030f 	and.w	r3, r3, #15
 800e4be:	2b00      	cmp	r3, #0
 800e4c0:	d125      	bne.n	800e50e <pbuf_realloc+0xe2>
 800e4c2:	68fb      	ldr	r3, [r7, #12]
 800e4c4:	895b      	ldrh	r3, [r3, #10]
 800e4c6:	897a      	ldrh	r2, [r7, #10]
 800e4c8:	429a      	cmp	r2, r3
 800e4ca:	d020      	beq.n	800e50e <pbuf_realloc+0xe2>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800e4cc:	68fb      	ldr	r3, [r7, #12]
 800e4ce:	7b5b      	ldrb	r3, [r3, #13]
 800e4d0:	f003 0302 	and.w	r3, r3, #2
 800e4d4:	2b00      	cmp	r3, #0
 800e4d6:	d11a      	bne.n	800e50e <pbuf_realloc+0xe2>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800e4d8:	68fb      	ldr	r3, [r7, #12]
 800e4da:	685a      	ldr	r2, [r3, #4]
 800e4dc:	68fb      	ldr	r3, [r7, #12]
 800e4de:	1ad3      	subs	r3, r2, r3
 800e4e0:	b29a      	uxth	r2, r3
 800e4e2:	897b      	ldrh	r3, [r7, #10]
 800e4e4:	4413      	add	r3, r2
 800e4e6:	b29b      	uxth	r3, r3
 800e4e8:	4619      	mov	r1, r3
 800e4ea:	68f8      	ldr	r0, [r7, #12]
 800e4ec:	f7fe fe78 	bl	800d1e0 <mem_trim>
 800e4f0:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800e4f2:	68fb      	ldr	r3, [r7, #12]
 800e4f4:	2b00      	cmp	r3, #0
 800e4f6:	d10a      	bne.n	800e50e <pbuf_realloc+0xe2>
 800e4f8:	f240 12bd 	movw	r2, #445	; 0x1bd
 800e4fc:	4915      	ldr	r1, [pc, #84]	; (800e554 <pbuf_realloc+0x128>)
 800e4fe:	4811      	ldr	r0, [pc, #68]	; (800e544 <pbuf_realloc+0x118>)
 800e500:	f00c fe08 	bl	801b114 <trace_printf>
 800e504:	4910      	ldr	r1, [pc, #64]	; (800e548 <pbuf_realloc+0x11c>)
 800e506:	4811      	ldr	r0, [pc, #68]	; (800e54c <pbuf_realloc+0x120>)
 800e508:	f00c fe04 	bl	801b114 <trace_printf>
 800e50c:	e7fe      	b.n	800e50c <pbuf_realloc+0xe0>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800e50e:	68fb      	ldr	r3, [r7, #12]
 800e510:	897a      	ldrh	r2, [r7, #10]
 800e512:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800e514:	68fb      	ldr	r3, [r7, #12]
 800e516:	895a      	ldrh	r2, [r3, #10]
 800e518:	68fb      	ldr	r3, [r7, #12]
 800e51a:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800e51c:	68fb      	ldr	r3, [r7, #12]
 800e51e:	681b      	ldr	r3, [r3, #0]
 800e520:	2b00      	cmp	r3, #0
 800e522:	d004      	beq.n	800e52e <pbuf_realloc+0x102>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800e524:	68fb      	ldr	r3, [r7, #12]
 800e526:	681b      	ldr	r3, [r3, #0]
 800e528:	4618      	mov	r0, r3
 800e52a:	f000 f921 	bl	800e770 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800e52e:	68fb      	ldr	r3, [r7, #12]
 800e530:	2200      	movs	r2, #0
 800e532:	601a      	str	r2, [r3, #0]
 800e534:	e000      	b.n	800e538 <pbuf_realloc+0x10c>
    return;
 800e536:	bf00      	nop

}
 800e538:	3710      	adds	r7, #16
 800e53a:	46bd      	mov	sp, r7
 800e53c:	bd80      	pop	{r7, pc}
 800e53e:	bf00      	nop
 800e540:	0801dea4 	.word	0x0801dea4
 800e544:	0801ddc0 	.word	0x0801ddc0
 800e548:	0801dde0 	.word	0x0801dde0
 800e54c:	0801de10 	.word	0x0801de10
 800e550:	0801debc 	.word	0x0801debc
 800e554:	0801ded4 	.word	0x0801ded4

0800e558 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800e558:	b580      	push	{r7, lr}
 800e55a:	b086      	sub	sp, #24
 800e55c:	af00      	add	r7, sp, #0
 800e55e:	60f8      	str	r0, [r7, #12]
 800e560:	60b9      	str	r1, [r7, #8]
 800e562:	4613      	mov	r3, r2
 800e564:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800e566:	68fb      	ldr	r3, [r7, #12]
 800e568:	2b00      	cmp	r3, #0
 800e56a:	d10a      	bne.n	800e582 <pbuf_add_header_impl+0x2a>
 800e56c:	f240 12df 	movw	r2, #479	; 0x1df
 800e570:	492c      	ldr	r1, [pc, #176]	; (800e624 <pbuf_add_header_impl+0xcc>)
 800e572:	482d      	ldr	r0, [pc, #180]	; (800e628 <pbuf_add_header_impl+0xd0>)
 800e574:	f00c fdce 	bl	801b114 <trace_printf>
 800e578:	492c      	ldr	r1, [pc, #176]	; (800e62c <pbuf_add_header_impl+0xd4>)
 800e57a:	482d      	ldr	r0, [pc, #180]	; (800e630 <pbuf_add_header_impl+0xd8>)
 800e57c:	f00c fdca 	bl	801b114 <trace_printf>
 800e580:	e7fe      	b.n	800e580 <pbuf_add_header_impl+0x28>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800e582:	68fb      	ldr	r3, [r7, #12]
 800e584:	2b00      	cmp	r3, #0
 800e586:	d003      	beq.n	800e590 <pbuf_add_header_impl+0x38>
 800e588:	68bb      	ldr	r3, [r7, #8]
 800e58a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e58e:	d301      	bcc.n	800e594 <pbuf_add_header_impl+0x3c>
    return 1;
 800e590:	2301      	movs	r3, #1
 800e592:	e043      	b.n	800e61c <pbuf_add_header_impl+0xc4>
  }
  if (header_size_increment == 0) {
 800e594:	68bb      	ldr	r3, [r7, #8]
 800e596:	2b00      	cmp	r3, #0
 800e598:	d101      	bne.n	800e59e <pbuf_add_header_impl+0x46>
    return 0;
 800e59a:	2300      	movs	r3, #0
 800e59c:	e03e      	b.n	800e61c <pbuf_add_header_impl+0xc4>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800e59e:	68bb      	ldr	r3, [r7, #8]
 800e5a0:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800e5a2:	68fb      	ldr	r3, [r7, #12]
 800e5a4:	891a      	ldrh	r2, [r3, #8]
 800e5a6:	8a7b      	ldrh	r3, [r7, #18]
 800e5a8:	4413      	add	r3, r2
 800e5aa:	b29b      	uxth	r3, r3
 800e5ac:	8a7a      	ldrh	r2, [r7, #18]
 800e5ae:	429a      	cmp	r2, r3
 800e5b0:	d901      	bls.n	800e5b6 <pbuf_add_header_impl+0x5e>
    return 1;
 800e5b2:	2301      	movs	r3, #1
 800e5b4:	e032      	b.n	800e61c <pbuf_add_header_impl+0xc4>
  }

  type_internal = p->type_internal;
 800e5b6:	68fb      	ldr	r3, [r7, #12]
 800e5b8:	7b1b      	ldrb	r3, [r3, #12]
 800e5ba:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800e5bc:	8a3b      	ldrh	r3, [r7, #16]
 800e5be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e5c2:	2b00      	cmp	r3, #0
 800e5c4:	d00c      	beq.n	800e5e0 <pbuf_add_header_impl+0x88>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800e5c6:	68fb      	ldr	r3, [r7, #12]
 800e5c8:	685a      	ldr	r2, [r3, #4]
 800e5ca:	68bb      	ldr	r3, [r7, #8]
 800e5cc:	425b      	negs	r3, r3
 800e5ce:	4413      	add	r3, r2
 800e5d0:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800e5d2:	68fb      	ldr	r3, [r7, #12]
 800e5d4:	3310      	adds	r3, #16
 800e5d6:	697a      	ldr	r2, [r7, #20]
 800e5d8:	429a      	cmp	r2, r3
 800e5da:	d20d      	bcs.n	800e5f8 <pbuf_add_header_impl+0xa0>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800e5dc:	2301      	movs	r3, #1
 800e5de:	e01d      	b.n	800e61c <pbuf_add_header_impl+0xc4>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800e5e0:	79fb      	ldrb	r3, [r7, #7]
 800e5e2:	2b00      	cmp	r3, #0
 800e5e4:	d006      	beq.n	800e5f4 <pbuf_add_header_impl+0x9c>
      payload = (u8_t *)p->payload - header_size_increment;
 800e5e6:	68fb      	ldr	r3, [r7, #12]
 800e5e8:	685a      	ldr	r2, [r3, #4]
 800e5ea:	68bb      	ldr	r3, [r7, #8]
 800e5ec:	425b      	negs	r3, r3
 800e5ee:	4413      	add	r3, r2
 800e5f0:	617b      	str	r3, [r7, #20]
 800e5f2:	e001      	b.n	800e5f8 <pbuf_add_header_impl+0xa0>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800e5f4:	2301      	movs	r3, #1
 800e5f6:	e011      	b.n	800e61c <pbuf_add_header_impl+0xc4>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800e5f8:	68fb      	ldr	r3, [r7, #12]
 800e5fa:	697a      	ldr	r2, [r7, #20]
 800e5fc:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800e5fe:	68fb      	ldr	r3, [r7, #12]
 800e600:	895a      	ldrh	r2, [r3, #10]
 800e602:	8a7b      	ldrh	r3, [r7, #18]
 800e604:	4413      	add	r3, r2
 800e606:	b29a      	uxth	r2, r3
 800e608:	68fb      	ldr	r3, [r7, #12]
 800e60a:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800e60c:	68fb      	ldr	r3, [r7, #12]
 800e60e:	891a      	ldrh	r2, [r3, #8]
 800e610:	8a7b      	ldrh	r3, [r7, #18]
 800e612:	4413      	add	r3, r2
 800e614:	b29a      	uxth	r2, r3
 800e616:	68fb      	ldr	r3, [r7, #12]
 800e618:	811a      	strh	r2, [r3, #8]


  return 0;
 800e61a:	2300      	movs	r3, #0
}
 800e61c:	4618      	mov	r0, r3
 800e61e:	3718      	adds	r7, #24
 800e620:	46bd      	mov	sp, r7
 800e622:	bd80      	pop	{r7, pc}
 800e624:	0801def0 	.word	0x0801def0
 800e628:	0801ddc0 	.word	0x0801ddc0
 800e62c:	0801dde0 	.word	0x0801dde0
 800e630:	0801de10 	.word	0x0801de10

0800e634 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800e634:	b580      	push	{r7, lr}
 800e636:	b082      	sub	sp, #8
 800e638:	af00      	add	r7, sp, #0
 800e63a:	6078      	str	r0, [r7, #4]
 800e63c:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800e63e:	2200      	movs	r2, #0
 800e640:	6839      	ldr	r1, [r7, #0]
 800e642:	6878      	ldr	r0, [r7, #4]
 800e644:	f7ff ff88 	bl	800e558 <pbuf_add_header_impl>
 800e648:	4603      	mov	r3, r0
}
 800e64a:	4618      	mov	r0, r3
 800e64c:	3708      	adds	r7, #8
 800e64e:	46bd      	mov	sp, r7
 800e650:	bd80      	pop	{r7, pc}
	...

0800e654 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800e654:	b580      	push	{r7, lr}
 800e656:	b084      	sub	sp, #16
 800e658:	af00      	add	r7, sp, #0
 800e65a:	6078      	str	r0, [r7, #4]
 800e65c:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	2b00      	cmp	r3, #0
 800e662:	d10a      	bne.n	800e67a <pbuf_remove_header+0x26>
 800e664:	f240 224b 	movw	r2, #587	; 0x24b
 800e668:	4922      	ldr	r1, [pc, #136]	; (800e6f4 <pbuf_remove_header+0xa0>)
 800e66a:	4823      	ldr	r0, [pc, #140]	; (800e6f8 <pbuf_remove_header+0xa4>)
 800e66c:	f00c fd52 	bl	801b114 <trace_printf>
 800e670:	4922      	ldr	r1, [pc, #136]	; (800e6fc <pbuf_remove_header+0xa8>)
 800e672:	4823      	ldr	r0, [pc, #140]	; (800e700 <pbuf_remove_header+0xac>)
 800e674:	f00c fd4e 	bl	801b114 <trace_printf>
 800e678:	e7fe      	b.n	800e678 <pbuf_remove_header+0x24>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	2b00      	cmp	r3, #0
 800e67e:	d003      	beq.n	800e688 <pbuf_remove_header+0x34>
 800e680:	683b      	ldr	r3, [r7, #0]
 800e682:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e686:	d301      	bcc.n	800e68c <pbuf_remove_header+0x38>
    return 1;
 800e688:	2301      	movs	r3, #1
 800e68a:	e02e      	b.n	800e6ea <pbuf_remove_header+0x96>
  }
  if (header_size_decrement == 0) {
 800e68c:	683b      	ldr	r3, [r7, #0]
 800e68e:	2b00      	cmp	r3, #0
 800e690:	d101      	bne.n	800e696 <pbuf_remove_header+0x42>
    return 0;
 800e692:	2300      	movs	r3, #0
 800e694:	e029      	b.n	800e6ea <pbuf_remove_header+0x96>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800e696:	683b      	ldr	r3, [r7, #0]
 800e698:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	895b      	ldrh	r3, [r3, #10]
 800e69e:	89fa      	ldrh	r2, [r7, #14]
 800e6a0:	429a      	cmp	r2, r3
 800e6a2:	d90a      	bls.n	800e6ba <pbuf_remove_header+0x66>
 800e6a4:	f240 2255 	movw	r2, #597	; 0x255
 800e6a8:	4916      	ldr	r1, [pc, #88]	; (800e704 <pbuf_remove_header+0xb0>)
 800e6aa:	4813      	ldr	r0, [pc, #76]	; (800e6f8 <pbuf_remove_header+0xa4>)
 800e6ac:	f00c fd32 	bl	801b114 <trace_printf>
 800e6b0:	4912      	ldr	r1, [pc, #72]	; (800e6fc <pbuf_remove_header+0xa8>)
 800e6b2:	4813      	ldr	r0, [pc, #76]	; (800e700 <pbuf_remove_header+0xac>)
 800e6b4:	f00c fd2e 	bl	801b114 <trace_printf>
 800e6b8:	e7fe      	b.n	800e6b8 <pbuf_remove_header+0x64>

  /* remember current payload pointer */
  payload = p->payload;
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	685b      	ldr	r3, [r3, #4]
 800e6be:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	685a      	ldr	r2, [r3, #4]
 800e6c4:	683b      	ldr	r3, [r7, #0]
 800e6c6:	441a      	add	r2, r3
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	895a      	ldrh	r2, [r3, #10]
 800e6d0:	89fb      	ldrh	r3, [r7, #14]
 800e6d2:	1ad3      	subs	r3, r2, r3
 800e6d4:	b29a      	uxth	r2, r3
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800e6da:	687b      	ldr	r3, [r7, #4]
 800e6dc:	891a      	ldrh	r2, [r3, #8]
 800e6de:	89fb      	ldrh	r3, [r7, #14]
 800e6e0:	1ad3      	subs	r3, r2, r3
 800e6e2:	b29a      	uxth	r2, r3
 800e6e4:	687b      	ldr	r3, [r7, #4]
 800e6e6:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800e6e8:	2300      	movs	r3, #0
}
 800e6ea:	4618      	mov	r0, r3
 800e6ec:	3710      	adds	r7, #16
 800e6ee:	46bd      	mov	sp, r7
 800e6f0:	bd80      	pop	{r7, pc}
 800e6f2:	bf00      	nop
 800e6f4:	0801def0 	.word	0x0801def0
 800e6f8:	0801ddc0 	.word	0x0801ddc0
 800e6fc:	0801dde0 	.word	0x0801dde0
 800e700:	0801de10 	.word	0x0801de10
 800e704:	0801defc 	.word	0x0801defc

0800e708 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800e708:	b580      	push	{r7, lr}
 800e70a:	b082      	sub	sp, #8
 800e70c:	af00      	add	r7, sp, #0
 800e70e:	6078      	str	r0, [r7, #4]
 800e710:	460b      	mov	r3, r1
 800e712:	807b      	strh	r3, [r7, #2]
 800e714:	4613      	mov	r3, r2
 800e716:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800e718:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e71c:	2b00      	cmp	r3, #0
 800e71e:	da08      	bge.n	800e732 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800e720:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e724:	425b      	negs	r3, r3
 800e726:	4619      	mov	r1, r3
 800e728:	6878      	ldr	r0, [r7, #4]
 800e72a:	f7ff ff93 	bl	800e654 <pbuf_remove_header>
 800e72e:	4603      	mov	r3, r0
 800e730:	e007      	b.n	800e742 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800e732:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e736:	787a      	ldrb	r2, [r7, #1]
 800e738:	4619      	mov	r1, r3
 800e73a:	6878      	ldr	r0, [r7, #4]
 800e73c:	f7ff ff0c 	bl	800e558 <pbuf_add_header_impl>
 800e740:	4603      	mov	r3, r0
  }
}
 800e742:	4618      	mov	r0, r3
 800e744:	3708      	adds	r7, #8
 800e746:	46bd      	mov	sp, r7
 800e748:	bd80      	pop	{r7, pc}

0800e74a <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800e74a:	b580      	push	{r7, lr}
 800e74c:	b082      	sub	sp, #8
 800e74e:	af00      	add	r7, sp, #0
 800e750:	6078      	str	r0, [r7, #4]
 800e752:	460b      	mov	r3, r1
 800e754:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800e756:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e75a:	2201      	movs	r2, #1
 800e75c:	4619      	mov	r1, r3
 800e75e:	6878      	ldr	r0, [r7, #4]
 800e760:	f7ff ffd2 	bl	800e708 <pbuf_header_impl>
 800e764:	4603      	mov	r3, r0
}
 800e766:	4618      	mov	r0, r3
 800e768:	3708      	adds	r7, #8
 800e76a:	46bd      	mov	sp, r7
 800e76c:	bd80      	pop	{r7, pc}
	...

0800e770 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800e770:	b580      	push	{r7, lr}
 800e772:	b088      	sub	sp, #32
 800e774:	af00      	add	r7, sp, #0
 800e776:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	2b00      	cmp	r3, #0
 800e77c:	d10f      	bne.n	800e79e <pbuf_free+0x2e>
    LWIP_ASSERT("p != NULL", p != NULL);
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	2b00      	cmp	r3, #0
 800e782:	d10a      	bne.n	800e79a <pbuf_free+0x2a>
 800e784:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800e788:	4942      	ldr	r1, [pc, #264]	; (800e894 <pbuf_free+0x124>)
 800e78a:	4843      	ldr	r0, [pc, #268]	; (800e898 <pbuf_free+0x128>)
 800e78c:	f00c fcc2 	bl	801b114 <trace_printf>
 800e790:	4942      	ldr	r1, [pc, #264]	; (800e89c <pbuf_free+0x12c>)
 800e792:	4843      	ldr	r0, [pc, #268]	; (800e8a0 <pbuf_free+0x130>)
 800e794:	f00c fcbe 	bl	801b114 <trace_printf>
 800e798:	e7fe      	b.n	800e798 <pbuf_free+0x28>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800e79a:	2300      	movs	r3, #0
 800e79c:	e075      	b.n	800e88a <pbuf_free+0x11a>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800e79e:	2300      	movs	r3, #0
 800e7a0:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800e7a2:	e06e      	b.n	800e882 <pbuf_free+0x112>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800e7a4:	f00c fc4e 	bl	801b044 <sys_arch_protect>
 800e7a8:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	7b9b      	ldrb	r3, [r3, #14]
 800e7ae:	2b00      	cmp	r3, #0
 800e7b0:	d10a      	bne.n	800e7c8 <pbuf_free+0x58>
 800e7b2:	f240 22f1 	movw	r2, #753	; 0x2f1
 800e7b6:	493b      	ldr	r1, [pc, #236]	; (800e8a4 <pbuf_free+0x134>)
 800e7b8:	4837      	ldr	r0, [pc, #220]	; (800e898 <pbuf_free+0x128>)
 800e7ba:	f00c fcab 	bl	801b114 <trace_printf>
 800e7be:	4937      	ldr	r1, [pc, #220]	; (800e89c <pbuf_free+0x12c>)
 800e7c0:	4837      	ldr	r0, [pc, #220]	; (800e8a0 <pbuf_free+0x130>)
 800e7c2:	f00c fca7 	bl	801b114 <trace_printf>
 800e7c6:	e7fe      	b.n	800e7c6 <pbuf_free+0x56>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	7b9b      	ldrb	r3, [r3, #14]
 800e7cc:	3b01      	subs	r3, #1
 800e7ce:	b2da      	uxtb	r2, r3
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	739a      	strb	r2, [r3, #14]
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	7b9b      	ldrb	r3, [r3, #14]
 800e7d8:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800e7da:	69b8      	ldr	r0, [r7, #24]
 800e7dc:	f00c fc40 	bl	801b060 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800e7e0:	7dfb      	ldrb	r3, [r7, #23]
 800e7e2:	2b00      	cmp	r3, #0
 800e7e4:	d14b      	bne.n	800e87e <pbuf_free+0x10e>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	681b      	ldr	r3, [r3, #0]
 800e7ea:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800e7ec:	687b      	ldr	r3, [r7, #4]
 800e7ee:	7b1b      	ldrb	r3, [r3, #12]
 800e7f0:	f003 030f 	and.w	r3, r3, #15
 800e7f4:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800e7f6:	687b      	ldr	r3, [r7, #4]
 800e7f8:	7b5b      	ldrb	r3, [r3, #13]
 800e7fa:	f003 0302 	and.w	r3, r3, #2
 800e7fe:	2b00      	cmp	r3, #0
 800e800:	d015      	beq.n	800e82e <pbuf_free+0xbe>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800e806:	68bb      	ldr	r3, [r7, #8]
 800e808:	691b      	ldr	r3, [r3, #16]
 800e80a:	2b00      	cmp	r3, #0
 800e80c:	d10a      	bne.n	800e824 <pbuf_free+0xb4>
 800e80e:	f240 22ff 	movw	r2, #767	; 0x2ff
 800e812:	4925      	ldr	r1, [pc, #148]	; (800e8a8 <pbuf_free+0x138>)
 800e814:	4820      	ldr	r0, [pc, #128]	; (800e898 <pbuf_free+0x128>)
 800e816:	f00c fc7d 	bl	801b114 <trace_printf>
 800e81a:	4920      	ldr	r1, [pc, #128]	; (800e89c <pbuf_free+0x12c>)
 800e81c:	4820      	ldr	r0, [pc, #128]	; (800e8a0 <pbuf_free+0x130>)
 800e81e:	f00c fc79 	bl	801b114 <trace_printf>
 800e822:	e7fe      	b.n	800e822 <pbuf_free+0xb2>
        pc->custom_free_function(p);
 800e824:	68bb      	ldr	r3, [r7, #8]
 800e826:	691b      	ldr	r3, [r3, #16]
 800e828:	6878      	ldr	r0, [r7, #4]
 800e82a:	4798      	blx	r3
 800e82c:	e021      	b.n	800e872 <pbuf_free+0x102>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800e82e:	7bfb      	ldrb	r3, [r7, #15]
 800e830:	2b02      	cmp	r3, #2
 800e832:	d104      	bne.n	800e83e <pbuf_free+0xce>
          memp_free(MEMP_PBUF_POOL, p);
 800e834:	6879      	ldr	r1, [r7, #4]
 800e836:	200c      	movs	r0, #12
 800e838:	f7ff f880 	bl	800d93c <memp_free>
 800e83c:	e019      	b.n	800e872 <pbuf_free+0x102>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800e83e:	7bfb      	ldrb	r3, [r7, #15]
 800e840:	2b01      	cmp	r3, #1
 800e842:	d104      	bne.n	800e84e <pbuf_free+0xde>
          memp_free(MEMP_PBUF, p);
 800e844:	6879      	ldr	r1, [r7, #4]
 800e846:	200b      	movs	r0, #11
 800e848:	f7ff f878 	bl	800d93c <memp_free>
 800e84c:	e011      	b.n	800e872 <pbuf_free+0x102>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800e84e:	7bfb      	ldrb	r3, [r7, #15]
 800e850:	2b00      	cmp	r3, #0
 800e852:	d103      	bne.n	800e85c <pbuf_free+0xec>
          mem_free(p);
 800e854:	6878      	ldr	r0, [r7, #4]
 800e856:	f7fe fc2f 	bl	800d0b8 <mem_free>
 800e85a:	e00a      	b.n	800e872 <pbuf_free+0x102>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800e85c:	f240 320f 	movw	r2, #783	; 0x30f
 800e860:	4912      	ldr	r1, [pc, #72]	; (800e8ac <pbuf_free+0x13c>)
 800e862:	480d      	ldr	r0, [pc, #52]	; (800e898 <pbuf_free+0x128>)
 800e864:	f00c fc56 	bl	801b114 <trace_printf>
 800e868:	490c      	ldr	r1, [pc, #48]	; (800e89c <pbuf_free+0x12c>)
 800e86a:	480d      	ldr	r0, [pc, #52]	; (800e8a0 <pbuf_free+0x130>)
 800e86c:	f00c fc52 	bl	801b114 <trace_printf>
 800e870:	e7fe      	b.n	800e870 <pbuf_free+0x100>
        }
      }
      count++;
 800e872:	7ffb      	ldrb	r3, [r7, #31]
 800e874:	3301      	adds	r3, #1
 800e876:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800e878:	693b      	ldr	r3, [r7, #16]
 800e87a:	607b      	str	r3, [r7, #4]
 800e87c:	e001      	b.n	800e882 <pbuf_free+0x112>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800e87e:	2300      	movs	r3, #0
 800e880:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	2b00      	cmp	r3, #0
 800e886:	d18d      	bne.n	800e7a4 <pbuf_free+0x34>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800e888:	7ffb      	ldrb	r3, [r7, #31]
}
 800e88a:	4618      	mov	r0, r3
 800e88c:	3720      	adds	r7, #32
 800e88e:	46bd      	mov	sp, r7
 800e890:	bd80      	pop	{r7, pc}
 800e892:	bf00      	nop
 800e894:	0801def0 	.word	0x0801def0
 800e898:	0801ddc0 	.word	0x0801ddc0
 800e89c:	0801dde0 	.word	0x0801dde0
 800e8a0:	0801de10 	.word	0x0801de10
 800e8a4:	0801df1c 	.word	0x0801df1c
 800e8a8:	0801df34 	.word	0x0801df34
 800e8ac:	0801df58 	.word	0x0801df58

0800e8b0 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800e8b0:	b480      	push	{r7}
 800e8b2:	b085      	sub	sp, #20
 800e8b4:	af00      	add	r7, sp, #0
 800e8b6:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800e8b8:	2300      	movs	r3, #0
 800e8ba:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800e8bc:	e005      	b.n	800e8ca <pbuf_clen+0x1a>
    ++len;
 800e8be:	89fb      	ldrh	r3, [r7, #14]
 800e8c0:	3301      	adds	r3, #1
 800e8c2:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	681b      	ldr	r3, [r3, #0]
 800e8c8:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800e8ca:	687b      	ldr	r3, [r7, #4]
 800e8cc:	2b00      	cmp	r3, #0
 800e8ce:	d1f6      	bne.n	800e8be <pbuf_clen+0xe>
  }
  return len;
 800e8d0:	89fb      	ldrh	r3, [r7, #14]
}
 800e8d2:	4618      	mov	r0, r3
 800e8d4:	3714      	adds	r7, #20
 800e8d6:	46bd      	mov	sp, r7
 800e8d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8dc:	4770      	bx	lr
	...

0800e8e0 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800e8e0:	b580      	push	{r7, lr}
 800e8e2:	b084      	sub	sp, #16
 800e8e4:	af00      	add	r7, sp, #0
 800e8e6:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	2b00      	cmp	r3, #0
 800e8ec:	d01a      	beq.n	800e924 <pbuf_ref+0x44>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800e8ee:	f00c fba9 	bl	801b044 <sys_arch_protect>
 800e8f2:	60f8      	str	r0, [r7, #12]
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	7b9b      	ldrb	r3, [r3, #14]
 800e8f8:	3301      	adds	r3, #1
 800e8fa:	b2da      	uxtb	r2, r3
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	739a      	strb	r2, [r3, #14]
 800e900:	68f8      	ldr	r0, [r7, #12]
 800e902:	f00c fbad 	bl	801b060 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800e906:	687b      	ldr	r3, [r7, #4]
 800e908:	7b9b      	ldrb	r3, [r3, #14]
 800e90a:	2b00      	cmp	r3, #0
 800e90c:	d10a      	bne.n	800e924 <pbuf_ref+0x44>
 800e90e:	f240 3242 	movw	r2, #834	; 0x342
 800e912:	4906      	ldr	r1, [pc, #24]	; (800e92c <pbuf_ref+0x4c>)
 800e914:	4806      	ldr	r0, [pc, #24]	; (800e930 <pbuf_ref+0x50>)
 800e916:	f00c fbfd 	bl	801b114 <trace_printf>
 800e91a:	4906      	ldr	r1, [pc, #24]	; (800e934 <pbuf_ref+0x54>)
 800e91c:	4806      	ldr	r0, [pc, #24]	; (800e938 <pbuf_ref+0x58>)
 800e91e:	f00c fbf9 	bl	801b114 <trace_printf>
 800e922:	e7fe      	b.n	800e922 <pbuf_ref+0x42>
  }
}
 800e924:	bf00      	nop
 800e926:	3710      	adds	r7, #16
 800e928:	46bd      	mov	sp, r7
 800e92a:	bd80      	pop	{r7, pc}
 800e92c:	0801df6c 	.word	0x0801df6c
 800e930:	0801ddc0 	.word	0x0801ddc0
 800e934:	0801dde0 	.word	0x0801dde0
 800e938:	0801de10 	.word	0x0801de10

0800e93c <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800e93c:	b580      	push	{r7, lr}
 800e93e:	b084      	sub	sp, #16
 800e940:	af00      	add	r7, sp, #0
 800e942:	6078      	str	r0, [r7, #4]
 800e944:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	2b00      	cmp	r3, #0
 800e94a:	d002      	beq.n	800e952 <pbuf_cat+0x16>
 800e94c:	683b      	ldr	r3, [r7, #0]
 800e94e:	2b00      	cmp	r3, #0
 800e950:	d10a      	bne.n	800e968 <pbuf_cat+0x2c>
 800e952:	f240 3259 	movw	r2, #857	; 0x359
 800e956:	4924      	ldr	r1, [pc, #144]	; (800e9e8 <pbuf_cat+0xac>)
 800e958:	4824      	ldr	r0, [pc, #144]	; (800e9ec <pbuf_cat+0xb0>)
 800e95a:	f00c fbdb 	bl	801b114 <trace_printf>
 800e95e:	4924      	ldr	r1, [pc, #144]	; (800e9f0 <pbuf_cat+0xb4>)
 800e960:	4824      	ldr	r0, [pc, #144]	; (800e9f4 <pbuf_cat+0xb8>)
 800e962:	f00c fbd7 	bl	801b114 <trace_printf>
 800e966:	e7fe      	b.n	800e966 <pbuf_cat+0x2a>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	60fb      	str	r3, [r7, #12]
 800e96c:	e00a      	b.n	800e984 <pbuf_cat+0x48>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800e96e:	68fb      	ldr	r3, [r7, #12]
 800e970:	891a      	ldrh	r2, [r3, #8]
 800e972:	683b      	ldr	r3, [r7, #0]
 800e974:	891b      	ldrh	r3, [r3, #8]
 800e976:	4413      	add	r3, r2
 800e978:	b29a      	uxth	r2, r3
 800e97a:	68fb      	ldr	r3, [r7, #12]
 800e97c:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800e97e:	68fb      	ldr	r3, [r7, #12]
 800e980:	681b      	ldr	r3, [r3, #0]
 800e982:	60fb      	str	r3, [r7, #12]
 800e984:	68fb      	ldr	r3, [r7, #12]
 800e986:	681b      	ldr	r3, [r3, #0]
 800e988:	2b00      	cmp	r3, #0
 800e98a:	d1f0      	bne.n	800e96e <pbuf_cat+0x32>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800e98c:	68fb      	ldr	r3, [r7, #12]
 800e98e:	891a      	ldrh	r2, [r3, #8]
 800e990:	68fb      	ldr	r3, [r7, #12]
 800e992:	895b      	ldrh	r3, [r3, #10]
 800e994:	429a      	cmp	r2, r3
 800e996:	d00a      	beq.n	800e9ae <pbuf_cat+0x72>
 800e998:	f240 3262 	movw	r2, #866	; 0x362
 800e99c:	4916      	ldr	r1, [pc, #88]	; (800e9f8 <pbuf_cat+0xbc>)
 800e99e:	4813      	ldr	r0, [pc, #76]	; (800e9ec <pbuf_cat+0xb0>)
 800e9a0:	f00c fbb8 	bl	801b114 <trace_printf>
 800e9a4:	4912      	ldr	r1, [pc, #72]	; (800e9f0 <pbuf_cat+0xb4>)
 800e9a6:	4813      	ldr	r0, [pc, #76]	; (800e9f4 <pbuf_cat+0xb8>)
 800e9a8:	f00c fbb4 	bl	801b114 <trace_printf>
 800e9ac:	e7fe      	b.n	800e9ac <pbuf_cat+0x70>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800e9ae:	68fb      	ldr	r3, [r7, #12]
 800e9b0:	681b      	ldr	r3, [r3, #0]
 800e9b2:	2b00      	cmp	r3, #0
 800e9b4:	d00a      	beq.n	800e9cc <pbuf_cat+0x90>
 800e9b6:	f240 3263 	movw	r2, #867	; 0x363
 800e9ba:	4910      	ldr	r1, [pc, #64]	; (800e9fc <pbuf_cat+0xc0>)
 800e9bc:	480b      	ldr	r0, [pc, #44]	; (800e9ec <pbuf_cat+0xb0>)
 800e9be:	f00c fba9 	bl	801b114 <trace_printf>
 800e9c2:	490b      	ldr	r1, [pc, #44]	; (800e9f0 <pbuf_cat+0xb4>)
 800e9c4:	480b      	ldr	r0, [pc, #44]	; (800e9f4 <pbuf_cat+0xb8>)
 800e9c6:	f00c fba5 	bl	801b114 <trace_printf>
 800e9ca:	e7fe      	b.n	800e9ca <pbuf_cat+0x8e>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800e9cc:	68fb      	ldr	r3, [r7, #12]
 800e9ce:	891a      	ldrh	r2, [r3, #8]
 800e9d0:	683b      	ldr	r3, [r7, #0]
 800e9d2:	891b      	ldrh	r3, [r3, #8]
 800e9d4:	4413      	add	r3, r2
 800e9d6:	b29a      	uxth	r2, r3
 800e9d8:	68fb      	ldr	r3, [r7, #12]
 800e9da:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800e9dc:	68fb      	ldr	r3, [r7, #12]
 800e9de:	683a      	ldr	r2, [r7, #0]
 800e9e0:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800e9e2:	3710      	adds	r7, #16
 800e9e4:	46bd      	mov	sp, r7
 800e9e6:	bd80      	pop	{r7, pc}
 800e9e8:	0801df80 	.word	0x0801df80
 800e9ec:	0801ddc0 	.word	0x0801ddc0
 800e9f0:	0801dde0 	.word	0x0801dde0
 800e9f4:	0801de10 	.word	0x0801de10
 800e9f8:	0801dfb8 	.word	0x0801dfb8
 800e9fc:	0801dfe8 	.word	0x0801dfe8

0800ea00 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800ea00:	b580      	push	{r7, lr}
 800ea02:	b082      	sub	sp, #8
 800ea04:	af00      	add	r7, sp, #0
 800ea06:	6078      	str	r0, [r7, #4]
 800ea08:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800ea0a:	6839      	ldr	r1, [r7, #0]
 800ea0c:	6878      	ldr	r0, [r7, #4]
 800ea0e:	f7ff ff95 	bl	800e93c <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800ea12:	6838      	ldr	r0, [r7, #0]
 800ea14:	f7ff ff64 	bl	800e8e0 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800ea18:	bf00      	nop
 800ea1a:	3708      	adds	r7, #8
 800ea1c:	46bd      	mov	sp, r7
 800ea1e:	bd80      	pop	{r7, pc}

0800ea20 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800ea20:	b580      	push	{r7, lr}
 800ea22:	b086      	sub	sp, #24
 800ea24:	af00      	add	r7, sp, #0
 800ea26:	6078      	str	r0, [r7, #4]
 800ea28:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800ea2a:	2300      	movs	r3, #0
 800ea2c:	617b      	str	r3, [r7, #20]
 800ea2e:	2300      	movs	r3, #0
 800ea30:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800ea32:	687b      	ldr	r3, [r7, #4]
 800ea34:	2b00      	cmp	r3, #0
 800ea36:	d008      	beq.n	800ea4a <pbuf_copy+0x2a>
 800ea38:	683b      	ldr	r3, [r7, #0]
 800ea3a:	2b00      	cmp	r3, #0
 800ea3c:	d005      	beq.n	800ea4a <pbuf_copy+0x2a>
 800ea3e:	687b      	ldr	r3, [r7, #4]
 800ea40:	891a      	ldrh	r2, [r3, #8]
 800ea42:	683b      	ldr	r3, [r7, #0]
 800ea44:	891b      	ldrh	r3, [r3, #8]
 800ea46:	429a      	cmp	r2, r3
 800ea48:	d20a      	bcs.n	800ea60 <pbuf_copy+0x40>
 800ea4a:	f240 32c9 	movw	r2, #969	; 0x3c9
 800ea4e:	495c      	ldr	r1, [pc, #368]	; (800ebc0 <pbuf_copy+0x1a0>)
 800ea50:	485c      	ldr	r0, [pc, #368]	; (800ebc4 <pbuf_copy+0x1a4>)
 800ea52:	f00c fb5f 	bl	801b114 <trace_printf>
 800ea56:	495c      	ldr	r1, [pc, #368]	; (800ebc8 <pbuf_copy+0x1a8>)
 800ea58:	485c      	ldr	r0, [pc, #368]	; (800ebcc <pbuf_copy+0x1ac>)
 800ea5a:	f00c fb5b 	bl	801b114 <trace_printf>
 800ea5e:	e7fe      	b.n	800ea5e <pbuf_copy+0x3e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	895b      	ldrh	r3, [r3, #10]
 800ea64:	461a      	mov	r2, r3
 800ea66:	697b      	ldr	r3, [r7, #20]
 800ea68:	1ad2      	subs	r2, r2, r3
 800ea6a:	683b      	ldr	r3, [r7, #0]
 800ea6c:	895b      	ldrh	r3, [r3, #10]
 800ea6e:	4619      	mov	r1, r3
 800ea70:	693b      	ldr	r3, [r7, #16]
 800ea72:	1acb      	subs	r3, r1, r3
 800ea74:	429a      	cmp	r2, r3
 800ea76:	d306      	bcc.n	800ea86 <pbuf_copy+0x66>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800ea78:	683b      	ldr	r3, [r7, #0]
 800ea7a:	895b      	ldrh	r3, [r3, #10]
 800ea7c:	461a      	mov	r2, r3
 800ea7e:	693b      	ldr	r3, [r7, #16]
 800ea80:	1ad3      	subs	r3, r2, r3
 800ea82:	60fb      	str	r3, [r7, #12]
 800ea84:	e005      	b.n	800ea92 <pbuf_copy+0x72>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	895b      	ldrh	r3, [r3, #10]
 800ea8a:	461a      	mov	r2, r3
 800ea8c:	697b      	ldr	r3, [r7, #20]
 800ea8e:	1ad3      	subs	r3, r2, r3
 800ea90:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800ea92:	687b      	ldr	r3, [r7, #4]
 800ea94:	685a      	ldr	r2, [r3, #4]
 800ea96:	697b      	ldr	r3, [r7, #20]
 800ea98:	18d0      	adds	r0, r2, r3
 800ea9a:	683b      	ldr	r3, [r7, #0]
 800ea9c:	685a      	ldr	r2, [r3, #4]
 800ea9e:	693b      	ldr	r3, [r7, #16]
 800eaa0:	4413      	add	r3, r2
 800eaa2:	68fa      	ldr	r2, [r7, #12]
 800eaa4:	4619      	mov	r1, r3
 800eaa6:	f00c fb89 	bl	801b1bc <memcpy>
    offset_to += len;
 800eaaa:	697a      	ldr	r2, [r7, #20]
 800eaac:	68fb      	ldr	r3, [r7, #12]
 800eaae:	4413      	add	r3, r2
 800eab0:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800eab2:	693a      	ldr	r2, [r7, #16]
 800eab4:	68fb      	ldr	r3, [r7, #12]
 800eab6:	4413      	add	r3, r2
 800eab8:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	895b      	ldrh	r3, [r3, #10]
 800eabe:	461a      	mov	r2, r3
 800eac0:	697b      	ldr	r3, [r7, #20]
 800eac2:	4293      	cmp	r3, r2
 800eac4:	d90a      	bls.n	800eadc <pbuf_copy+0xbc>
 800eac6:	f240 32d9 	movw	r2, #985	; 0x3d9
 800eaca:	4941      	ldr	r1, [pc, #260]	; (800ebd0 <pbuf_copy+0x1b0>)
 800eacc:	483d      	ldr	r0, [pc, #244]	; (800ebc4 <pbuf_copy+0x1a4>)
 800eace:	f00c fb21 	bl	801b114 <trace_printf>
 800ead2:	493d      	ldr	r1, [pc, #244]	; (800ebc8 <pbuf_copy+0x1a8>)
 800ead4:	483d      	ldr	r0, [pc, #244]	; (800ebcc <pbuf_copy+0x1ac>)
 800ead6:	f00c fb1d 	bl	801b114 <trace_printf>
 800eada:	e7fe      	b.n	800eada <pbuf_copy+0xba>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800eadc:	683b      	ldr	r3, [r7, #0]
 800eade:	895b      	ldrh	r3, [r3, #10]
 800eae0:	461a      	mov	r2, r3
 800eae2:	693b      	ldr	r3, [r7, #16]
 800eae4:	4293      	cmp	r3, r2
 800eae6:	d90a      	bls.n	800eafe <pbuf_copy+0xde>
 800eae8:	f240 32da 	movw	r2, #986	; 0x3da
 800eaec:	4939      	ldr	r1, [pc, #228]	; (800ebd4 <pbuf_copy+0x1b4>)
 800eaee:	4835      	ldr	r0, [pc, #212]	; (800ebc4 <pbuf_copy+0x1a4>)
 800eaf0:	f00c fb10 	bl	801b114 <trace_printf>
 800eaf4:	4934      	ldr	r1, [pc, #208]	; (800ebc8 <pbuf_copy+0x1a8>)
 800eaf6:	4835      	ldr	r0, [pc, #212]	; (800ebcc <pbuf_copy+0x1ac>)
 800eaf8:	f00c fb0c 	bl	801b114 <trace_printf>
 800eafc:	e7fe      	b.n	800eafc <pbuf_copy+0xdc>
    if (offset_from >= p_from->len) {
 800eafe:	683b      	ldr	r3, [r7, #0]
 800eb00:	895b      	ldrh	r3, [r3, #10]
 800eb02:	461a      	mov	r2, r3
 800eb04:	693b      	ldr	r3, [r7, #16]
 800eb06:	4293      	cmp	r3, r2
 800eb08:	d304      	bcc.n	800eb14 <pbuf_copy+0xf4>
      /* on to next p_from (if any) */
      offset_from = 0;
 800eb0a:	2300      	movs	r3, #0
 800eb0c:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800eb0e:	683b      	ldr	r3, [r7, #0]
 800eb10:	681b      	ldr	r3, [r3, #0]
 800eb12:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	895b      	ldrh	r3, [r3, #10]
 800eb18:	461a      	mov	r2, r3
 800eb1a:	697b      	ldr	r3, [r7, #20]
 800eb1c:	4293      	cmp	r3, r2
 800eb1e:	d115      	bne.n	800eb4c <pbuf_copy+0x12c>
      /* on to next p_to (if any) */
      offset_to = 0;
 800eb20:	2300      	movs	r3, #0
 800eb22:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	681b      	ldr	r3, [r3, #0]
 800eb28:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800eb2a:	687b      	ldr	r3, [r7, #4]
 800eb2c:	2b00      	cmp	r3, #0
 800eb2e:	d10d      	bne.n	800eb4c <pbuf_copy+0x12c>
 800eb30:	683b      	ldr	r3, [r7, #0]
 800eb32:	2b00      	cmp	r3, #0
 800eb34:	d00a      	beq.n	800eb4c <pbuf_copy+0x12c>
 800eb36:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800eb3a:	4927      	ldr	r1, [pc, #156]	; (800ebd8 <pbuf_copy+0x1b8>)
 800eb3c:	4821      	ldr	r0, [pc, #132]	; (800ebc4 <pbuf_copy+0x1a4>)
 800eb3e:	f00c fae9 	bl	801b114 <trace_printf>
 800eb42:	4921      	ldr	r1, [pc, #132]	; (800ebc8 <pbuf_copy+0x1a8>)
 800eb44:	4821      	ldr	r0, [pc, #132]	; (800ebcc <pbuf_copy+0x1ac>)
 800eb46:	f00c fae5 	bl	801b114 <trace_printf>
 800eb4a:	e7fe      	b.n	800eb4a <pbuf_copy+0x12a>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800eb4c:	683b      	ldr	r3, [r7, #0]
 800eb4e:	2b00      	cmp	r3, #0
 800eb50:	d014      	beq.n	800eb7c <pbuf_copy+0x15c>
 800eb52:	683b      	ldr	r3, [r7, #0]
 800eb54:	895a      	ldrh	r2, [r3, #10]
 800eb56:	683b      	ldr	r3, [r7, #0]
 800eb58:	891b      	ldrh	r3, [r3, #8]
 800eb5a:	429a      	cmp	r2, r3
 800eb5c:	d10e      	bne.n	800eb7c <pbuf_copy+0x15c>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800eb5e:	683b      	ldr	r3, [r7, #0]
 800eb60:	681b      	ldr	r3, [r3, #0]
 800eb62:	2b00      	cmp	r3, #0
 800eb64:	d00a      	beq.n	800eb7c <pbuf_copy+0x15c>
 800eb66:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800eb6a:	491c      	ldr	r1, [pc, #112]	; (800ebdc <pbuf_copy+0x1bc>)
 800eb6c:	4815      	ldr	r0, [pc, #84]	; (800ebc4 <pbuf_copy+0x1a4>)
 800eb6e:	f00c fad1 	bl	801b114 <trace_printf>
 800eb72:	4915      	ldr	r1, [pc, #84]	; (800ebc8 <pbuf_copy+0x1a8>)
 800eb74:	4815      	ldr	r0, [pc, #84]	; (800ebcc <pbuf_copy+0x1ac>)
 800eb76:	f00c facd 	bl	801b114 <trace_printf>
 800eb7a:	e7fe      	b.n	800eb7a <pbuf_copy+0x15a>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	2b00      	cmp	r3, #0
 800eb80:	d014      	beq.n	800ebac <pbuf_copy+0x18c>
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	895a      	ldrh	r2, [r3, #10]
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	891b      	ldrh	r3, [r3, #8]
 800eb8a:	429a      	cmp	r2, r3
 800eb8c:	d10e      	bne.n	800ebac <pbuf_copy+0x18c>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800eb8e:	687b      	ldr	r3, [r7, #4]
 800eb90:	681b      	ldr	r3, [r3, #0]
 800eb92:	2b00      	cmp	r3, #0
 800eb94:	d00a      	beq.n	800ebac <pbuf_copy+0x18c>
 800eb96:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800eb9a:	4910      	ldr	r1, [pc, #64]	; (800ebdc <pbuf_copy+0x1bc>)
 800eb9c:	4809      	ldr	r0, [pc, #36]	; (800ebc4 <pbuf_copy+0x1a4>)
 800eb9e:	f00c fab9 	bl	801b114 <trace_printf>
 800eba2:	4909      	ldr	r1, [pc, #36]	; (800ebc8 <pbuf_copy+0x1a8>)
 800eba4:	4809      	ldr	r0, [pc, #36]	; (800ebcc <pbuf_copy+0x1ac>)
 800eba6:	f00c fab5 	bl	801b114 <trace_printf>
 800ebaa:	e7fe      	b.n	800ebaa <pbuf_copy+0x18a>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800ebac:	683b      	ldr	r3, [r7, #0]
 800ebae:	2b00      	cmp	r3, #0
 800ebb0:	f47f af56 	bne.w	800ea60 <pbuf_copy+0x40>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800ebb4:	2300      	movs	r3, #0
}
 800ebb6:	4618      	mov	r0, r3
 800ebb8:	3718      	adds	r7, #24
 800ebba:	46bd      	mov	sp, r7
 800ebbc:	bd80      	pop	{r7, pc}
 800ebbe:	bf00      	nop
 800ebc0:	0801e034 	.word	0x0801e034
 800ebc4:	0801ddc0 	.word	0x0801ddc0
 800ebc8:	0801dde0 	.word	0x0801dde0
 800ebcc:	0801de10 	.word	0x0801de10
 800ebd0:	0801e064 	.word	0x0801e064
 800ebd4:	0801e07c 	.word	0x0801e07c
 800ebd8:	0801e098 	.word	0x0801e098
 800ebdc:	0801e0a8 	.word	0x0801e0a8

0800ebe0 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800ebe0:	b580      	push	{r7, lr}
 800ebe2:	b088      	sub	sp, #32
 800ebe4:	af00      	add	r7, sp, #0
 800ebe6:	60f8      	str	r0, [r7, #12]
 800ebe8:	60b9      	str	r1, [r7, #8]
 800ebea:	4611      	mov	r1, r2
 800ebec:	461a      	mov	r2, r3
 800ebee:	460b      	mov	r3, r1
 800ebf0:	80fb      	strh	r3, [r7, #6]
 800ebf2:	4613      	mov	r3, r2
 800ebf4:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800ebf6:	2300      	movs	r3, #0
 800ebf8:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800ebfa:	2300      	movs	r3, #0
 800ebfc:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800ebfe:	68fb      	ldr	r3, [r7, #12]
 800ec00:	2b00      	cmp	r3, #0
 800ec02:	d10a      	bne.n	800ec1a <pbuf_copy_partial+0x3a>
 800ec04:	f240 420a 	movw	r2, #1034	; 0x40a
 800ec08:	492c      	ldr	r1, [pc, #176]	; (800ecbc <pbuf_copy_partial+0xdc>)
 800ec0a:	482d      	ldr	r0, [pc, #180]	; (800ecc0 <pbuf_copy_partial+0xe0>)
 800ec0c:	f00c fa82 	bl	801b114 <trace_printf>
 800ec10:	492c      	ldr	r1, [pc, #176]	; (800ecc4 <pbuf_copy_partial+0xe4>)
 800ec12:	482d      	ldr	r0, [pc, #180]	; (800ecc8 <pbuf_copy_partial+0xe8>)
 800ec14:	f00c fa7e 	bl	801b114 <trace_printf>
 800ec18:	e7fe      	b.n	800ec18 <pbuf_copy_partial+0x38>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800ec1a:	68bb      	ldr	r3, [r7, #8]
 800ec1c:	2b00      	cmp	r3, #0
 800ec1e:	d10a      	bne.n	800ec36 <pbuf_copy_partial+0x56>
 800ec20:	f240 420b 	movw	r2, #1035	; 0x40b
 800ec24:	4929      	ldr	r1, [pc, #164]	; (800eccc <pbuf_copy_partial+0xec>)
 800ec26:	4826      	ldr	r0, [pc, #152]	; (800ecc0 <pbuf_copy_partial+0xe0>)
 800ec28:	f00c fa74 	bl	801b114 <trace_printf>
 800ec2c:	4925      	ldr	r1, [pc, #148]	; (800ecc4 <pbuf_copy_partial+0xe4>)
 800ec2e:	4826      	ldr	r0, [pc, #152]	; (800ecc8 <pbuf_copy_partial+0xe8>)
 800ec30:	f00c fa70 	bl	801b114 <trace_printf>
 800ec34:	e7fe      	b.n	800ec34 <pbuf_copy_partial+0x54>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800ec36:	68fb      	ldr	r3, [r7, #12]
 800ec38:	61fb      	str	r3, [r7, #28]
 800ec3a:	e034      	b.n	800eca6 <pbuf_copy_partial+0xc6>
    if ((offset != 0) && (offset >= p->len)) {
 800ec3c:	88bb      	ldrh	r3, [r7, #4]
 800ec3e:	2b00      	cmp	r3, #0
 800ec40:	d00a      	beq.n	800ec58 <pbuf_copy_partial+0x78>
 800ec42:	69fb      	ldr	r3, [r7, #28]
 800ec44:	895b      	ldrh	r3, [r3, #10]
 800ec46:	88ba      	ldrh	r2, [r7, #4]
 800ec48:	429a      	cmp	r2, r3
 800ec4a:	d305      	bcc.n	800ec58 <pbuf_copy_partial+0x78>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800ec4c:	69fb      	ldr	r3, [r7, #28]
 800ec4e:	895b      	ldrh	r3, [r3, #10]
 800ec50:	88ba      	ldrh	r2, [r7, #4]
 800ec52:	1ad3      	subs	r3, r2, r3
 800ec54:	80bb      	strh	r3, [r7, #4]
 800ec56:	e023      	b.n	800eca0 <pbuf_copy_partial+0xc0>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800ec58:	69fb      	ldr	r3, [r7, #28]
 800ec5a:	895a      	ldrh	r2, [r3, #10]
 800ec5c:	88bb      	ldrh	r3, [r7, #4]
 800ec5e:	1ad3      	subs	r3, r2, r3
 800ec60:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800ec62:	8b3a      	ldrh	r2, [r7, #24]
 800ec64:	88fb      	ldrh	r3, [r7, #6]
 800ec66:	429a      	cmp	r2, r3
 800ec68:	d901      	bls.n	800ec6e <pbuf_copy_partial+0x8e>
        buf_copy_len = len;
 800ec6a:	88fb      	ldrh	r3, [r7, #6]
 800ec6c:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800ec6e:	8b7b      	ldrh	r3, [r7, #26]
 800ec70:	68ba      	ldr	r2, [r7, #8]
 800ec72:	18d0      	adds	r0, r2, r3
 800ec74:	69fb      	ldr	r3, [r7, #28]
 800ec76:	685a      	ldr	r2, [r3, #4]
 800ec78:	88bb      	ldrh	r3, [r7, #4]
 800ec7a:	4413      	add	r3, r2
 800ec7c:	8b3a      	ldrh	r2, [r7, #24]
 800ec7e:	4619      	mov	r1, r3
 800ec80:	f00c fa9c 	bl	801b1bc <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800ec84:	8afa      	ldrh	r2, [r7, #22]
 800ec86:	8b3b      	ldrh	r3, [r7, #24]
 800ec88:	4413      	add	r3, r2
 800ec8a:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800ec8c:	8b7a      	ldrh	r2, [r7, #26]
 800ec8e:	8b3b      	ldrh	r3, [r7, #24]
 800ec90:	4413      	add	r3, r2
 800ec92:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800ec94:	88fa      	ldrh	r2, [r7, #6]
 800ec96:	8b3b      	ldrh	r3, [r7, #24]
 800ec98:	1ad3      	subs	r3, r2, r3
 800ec9a:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800ec9c:	2300      	movs	r3, #0
 800ec9e:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800eca0:	69fb      	ldr	r3, [r7, #28]
 800eca2:	681b      	ldr	r3, [r3, #0]
 800eca4:	61fb      	str	r3, [r7, #28]
 800eca6:	88fb      	ldrh	r3, [r7, #6]
 800eca8:	2b00      	cmp	r3, #0
 800ecaa:	d002      	beq.n	800ecb2 <pbuf_copy_partial+0xd2>
 800ecac:	69fb      	ldr	r3, [r7, #28]
 800ecae:	2b00      	cmp	r3, #0
 800ecb0:	d1c4      	bne.n	800ec3c <pbuf_copy_partial+0x5c>
    }
  }
  return copied_total;
 800ecb2:	8afb      	ldrh	r3, [r7, #22]
}
 800ecb4:	4618      	mov	r0, r3
 800ecb6:	3720      	adds	r7, #32
 800ecb8:	46bd      	mov	sp, r7
 800ecba:	bd80      	pop	{r7, pc}
 800ecbc:	0801e0d4 	.word	0x0801e0d4
 800ecc0:	0801ddc0 	.word	0x0801ddc0
 800ecc4:	0801dde0 	.word	0x0801dde0
 800ecc8:	0801de10 	.word	0x0801de10
 800eccc:	0801e0f4 	.word	0x0801e0f4

0800ecd0 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800ecd0:	b580      	push	{r7, lr}
 800ecd2:	b084      	sub	sp, #16
 800ecd4:	af00      	add	r7, sp, #0
 800ecd6:	4603      	mov	r3, r0
 800ecd8:	603a      	str	r2, [r7, #0]
 800ecda:	71fb      	strb	r3, [r7, #7]
 800ecdc:	460b      	mov	r3, r1
 800ecde:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800ece0:	683b      	ldr	r3, [r7, #0]
 800ece2:	8919      	ldrh	r1, [r3, #8]
 800ece4:	88ba      	ldrh	r2, [r7, #4]
 800ece6:	79fb      	ldrb	r3, [r7, #7]
 800ece8:	4618      	mov	r0, r3
 800ecea:	f7ff fa2b 	bl	800e144 <pbuf_alloc>
 800ecee:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800ecf0:	68fb      	ldr	r3, [r7, #12]
 800ecf2:	2b00      	cmp	r3, #0
 800ecf4:	d101      	bne.n	800ecfa <pbuf_clone+0x2a>
    return NULL;
 800ecf6:	2300      	movs	r3, #0
 800ecf8:	e015      	b.n	800ed26 <pbuf_clone+0x56>
  }
  err = pbuf_copy(q, p);
 800ecfa:	6839      	ldr	r1, [r7, #0]
 800ecfc:	68f8      	ldr	r0, [r7, #12]
 800ecfe:	f7ff fe8f 	bl	800ea20 <pbuf_copy>
 800ed02:	4603      	mov	r3, r0
 800ed04:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800ed06:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800ed0a:	2b00      	cmp	r3, #0
 800ed0c:	d00a      	beq.n	800ed24 <pbuf_clone+0x54>
 800ed0e:	f240 5224 	movw	r2, #1316	; 0x524
 800ed12:	4907      	ldr	r1, [pc, #28]	; (800ed30 <pbuf_clone+0x60>)
 800ed14:	4807      	ldr	r0, [pc, #28]	; (800ed34 <pbuf_clone+0x64>)
 800ed16:	f00c f9fd 	bl	801b114 <trace_printf>
 800ed1a:	4907      	ldr	r1, [pc, #28]	; (800ed38 <pbuf_clone+0x68>)
 800ed1c:	4807      	ldr	r0, [pc, #28]	; (800ed3c <pbuf_clone+0x6c>)
 800ed1e:	f00c f9f9 	bl	801b114 <trace_printf>
 800ed22:	e7fe      	b.n	800ed22 <pbuf_clone+0x52>
  return q;
 800ed24:	68fb      	ldr	r3, [r7, #12]
}
 800ed26:	4618      	mov	r0, r3
 800ed28:	3710      	adds	r7, #16
 800ed2a:	46bd      	mov	sp, r7
 800ed2c:	bd80      	pop	{r7, pc}
 800ed2e:	bf00      	nop
 800ed30:	0801e200 	.word	0x0801e200
 800ed34:	0801ddc0 	.word	0x0801ddc0
 800ed38:	0801dde0 	.word	0x0801dde0
 800ed3c:	0801de10 	.word	0x0801de10

0800ed40 <stats_init>:

struct stats_ lwip_stats;

void
stats_init(void)
{
 800ed40:	b480      	push	{r7}
 800ed42:	af00      	add	r7, sp, #0
#ifdef LWIP_DEBUG
#if MEM_STATS
  lwip_stats.mem.name = "MEM";
 800ed44:	4b04      	ldr	r3, [pc, #16]	; (800ed58 <stats_init+0x18>)
 800ed46:	4a05      	ldr	r2, [pc, #20]	; (800ed5c <stats_init+0x1c>)
 800ed48:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
#endif /* MEM_STATS */
#endif /* LWIP_DEBUG */
}
 800ed4c:	bf00      	nop
 800ed4e:	46bd      	mov	sp, r7
 800ed50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed54:	4770      	bx	lr
 800ed56:	bf00      	nop
 800ed58:	20010b7c 	.word	0x20010b7c
 800ed5c:	0801e214 	.word	0x0801e214

0800ed60 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800ed60:	b580      	push	{r7, lr}
 800ed62:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800ed64:	f00c fa5a 	bl	801b21c <rand>
 800ed68:	4603      	mov	r3, r0
 800ed6a:	b29b      	uxth	r3, r3
 800ed6c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800ed70:	b29b      	uxth	r3, r3
 800ed72:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800ed76:	b29a      	uxth	r2, r3
 800ed78:	4b01      	ldr	r3, [pc, #4]	; (800ed80 <tcp_init+0x20>)
 800ed7a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800ed7c:	bf00      	nop
 800ed7e:	bd80      	pop	{r7, pc}
 800ed80:	20000014 	.word	0x20000014

0800ed84 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800ed84:	b580      	push	{r7, lr}
 800ed86:	b082      	sub	sp, #8
 800ed88:	af00      	add	r7, sp, #0
 800ed8a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800ed8c:	687b      	ldr	r3, [r7, #4]
 800ed8e:	7d1b      	ldrb	r3, [r3, #20]
 800ed90:	2b01      	cmp	r3, #1
 800ed92:	d109      	bne.n	800eda8 <tcp_free+0x24>
 800ed94:	22d4      	movs	r2, #212	; 0xd4
 800ed96:	4908      	ldr	r1, [pc, #32]	; (800edb8 <tcp_free+0x34>)
 800ed98:	4808      	ldr	r0, [pc, #32]	; (800edbc <tcp_free+0x38>)
 800ed9a:	f00c f9bb 	bl	801b114 <trace_printf>
 800ed9e:	4908      	ldr	r1, [pc, #32]	; (800edc0 <tcp_free+0x3c>)
 800eda0:	4808      	ldr	r0, [pc, #32]	; (800edc4 <tcp_free+0x40>)
 800eda2:	f00c f9b7 	bl	801b114 <trace_printf>
 800eda6:	e7fe      	b.n	800eda6 <tcp_free+0x22>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800eda8:	6879      	ldr	r1, [r7, #4]
 800edaa:	2001      	movs	r0, #1
 800edac:	f7fe fdc6 	bl	800d93c <memp_free>
}
 800edb0:	bf00      	nop
 800edb2:	3708      	adds	r7, #8
 800edb4:	46bd      	mov	sp, r7
 800edb6:	bd80      	pop	{r7, pc}
 800edb8:	0801e290 	.word	0x0801e290
 800edbc:	0801e2a4 	.word	0x0801e2a4
 800edc0:	0801e2c4 	.word	0x0801e2c4
 800edc4:	0801e2f4 	.word	0x0801e2f4

0800edc8 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800edc8:	b580      	push	{r7, lr}
 800edca:	b082      	sub	sp, #8
 800edcc:	af00      	add	r7, sp, #0
 800edce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	7d1b      	ldrb	r3, [r3, #20]
 800edd4:	2b01      	cmp	r3, #1
 800edd6:	d109      	bne.n	800edec <tcp_free_listen+0x24>
 800edd8:	22df      	movs	r2, #223	; 0xdf
 800edda:	4908      	ldr	r1, [pc, #32]	; (800edfc <tcp_free_listen+0x34>)
 800eddc:	4808      	ldr	r0, [pc, #32]	; (800ee00 <tcp_free_listen+0x38>)
 800edde:	f00c f999 	bl	801b114 <trace_printf>
 800ede2:	4908      	ldr	r1, [pc, #32]	; (800ee04 <tcp_free_listen+0x3c>)
 800ede4:	4808      	ldr	r0, [pc, #32]	; (800ee08 <tcp_free_listen+0x40>)
 800ede6:	f00c f995 	bl	801b114 <trace_printf>
 800edea:	e7fe      	b.n	800edea <tcp_free_listen+0x22>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800edec:	6879      	ldr	r1, [r7, #4]
 800edee:	2002      	movs	r0, #2
 800edf0:	f7fe fda4 	bl	800d93c <memp_free>
}
 800edf4:	bf00      	nop
 800edf6:	3708      	adds	r7, #8
 800edf8:	46bd      	mov	sp, r7
 800edfa:	bd80      	pop	{r7, pc}
 800edfc:	0801e2f8 	.word	0x0801e2f8
 800ee00:	0801e2a4 	.word	0x0801e2a4
 800ee04:	0801e2c4 	.word	0x0801e2c4
 800ee08:	0801e2f4 	.word	0x0801e2f4

0800ee0c <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800ee0c:	b580      	push	{r7, lr}
 800ee0e:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800ee10:	f001 f84c 	bl	800feac <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800ee14:	4b07      	ldr	r3, [pc, #28]	; (800ee34 <tcp_tmr+0x28>)
 800ee16:	781b      	ldrb	r3, [r3, #0]
 800ee18:	3301      	adds	r3, #1
 800ee1a:	b2da      	uxtb	r2, r3
 800ee1c:	4b05      	ldr	r3, [pc, #20]	; (800ee34 <tcp_tmr+0x28>)
 800ee1e:	701a      	strb	r2, [r3, #0]
 800ee20:	4b04      	ldr	r3, [pc, #16]	; (800ee34 <tcp_tmr+0x28>)
 800ee22:	781b      	ldrb	r3, [r3, #0]
 800ee24:	f003 0301 	and.w	r3, r3, #1
 800ee28:	2b00      	cmp	r3, #0
 800ee2a:	d001      	beq.n	800ee30 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800ee2c:	f000 fcd0 	bl	800f7d0 <tcp_slowtmr>
  }
}
 800ee30:	bf00      	nop
 800ee32:	bd80      	pop	{r7, pc}
 800ee34:	20009f8d 	.word	0x20009f8d

0800ee38 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800ee38:	b580      	push	{r7, lr}
 800ee3a:	b084      	sub	sp, #16
 800ee3c:	af00      	add	r7, sp, #0
 800ee3e:	6078      	str	r0, [r7, #4]
 800ee40:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800ee42:	683b      	ldr	r3, [r7, #0]
 800ee44:	2b00      	cmp	r3, #0
 800ee46:	d109      	bne.n	800ee5c <tcp_remove_listener+0x24>
 800ee48:	22ff      	movs	r2, #255	; 0xff
 800ee4a:	490f      	ldr	r1, [pc, #60]	; (800ee88 <tcp_remove_listener+0x50>)
 800ee4c:	480f      	ldr	r0, [pc, #60]	; (800ee8c <tcp_remove_listener+0x54>)
 800ee4e:	f00c f961 	bl	801b114 <trace_printf>
 800ee52:	490f      	ldr	r1, [pc, #60]	; (800ee90 <tcp_remove_listener+0x58>)
 800ee54:	480f      	ldr	r0, [pc, #60]	; (800ee94 <tcp_remove_listener+0x5c>)
 800ee56:	f00c f95d 	bl	801b114 <trace_printf>
 800ee5a:	e7fe      	b.n	800ee5a <tcp_remove_listener+0x22>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	60fb      	str	r3, [r7, #12]
 800ee60:	e00a      	b.n	800ee78 <tcp_remove_listener+0x40>
    if (pcb->listener == lpcb) {
 800ee62:	68fb      	ldr	r3, [r7, #12]
 800ee64:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ee66:	683a      	ldr	r2, [r7, #0]
 800ee68:	429a      	cmp	r2, r3
 800ee6a:	d102      	bne.n	800ee72 <tcp_remove_listener+0x3a>
      pcb->listener = NULL;
 800ee6c:	68fb      	ldr	r3, [r7, #12]
 800ee6e:	2200      	movs	r2, #0
 800ee70:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800ee72:	68fb      	ldr	r3, [r7, #12]
 800ee74:	68db      	ldr	r3, [r3, #12]
 800ee76:	60fb      	str	r3, [r7, #12]
 800ee78:	68fb      	ldr	r3, [r7, #12]
 800ee7a:	2b00      	cmp	r3, #0
 800ee7c:	d1f1      	bne.n	800ee62 <tcp_remove_listener+0x2a>
    }
  }
}
 800ee7e:	bf00      	nop
 800ee80:	bf00      	nop
 800ee82:	3710      	adds	r7, #16
 800ee84:	46bd      	mov	sp, r7
 800ee86:	bd80      	pop	{r7, pc}
 800ee88:	0801e314 	.word	0x0801e314
 800ee8c:	0801e2a4 	.word	0x0801e2a4
 800ee90:	0801e2c4 	.word	0x0801e2c4
 800ee94:	0801e2f4 	.word	0x0801e2f4

0800ee98 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800ee98:	b580      	push	{r7, lr}
 800ee9a:	b084      	sub	sp, #16
 800ee9c:	af00      	add	r7, sp, #0
 800ee9e:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800eea0:	687b      	ldr	r3, [r7, #4]
 800eea2:	2b00      	cmp	r3, #0
 800eea4:	d10a      	bne.n	800eebc <tcp_listen_closed+0x24>
 800eea6:	f240 1211 	movw	r2, #273	; 0x111
 800eeaa:	4917      	ldr	r1, [pc, #92]	; (800ef08 <tcp_listen_closed+0x70>)
 800eeac:	4817      	ldr	r0, [pc, #92]	; (800ef0c <tcp_listen_closed+0x74>)
 800eeae:	f00c f931 	bl	801b114 <trace_printf>
 800eeb2:	4917      	ldr	r1, [pc, #92]	; (800ef10 <tcp_listen_closed+0x78>)
 800eeb4:	4817      	ldr	r0, [pc, #92]	; (800ef14 <tcp_listen_closed+0x7c>)
 800eeb6:	f00c f92d 	bl	801b114 <trace_printf>
 800eeba:	e7fe      	b.n	800eeba <tcp_listen_closed+0x22>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	7d1b      	ldrb	r3, [r3, #20]
 800eec0:	2b01      	cmp	r3, #1
 800eec2:	d00a      	beq.n	800eeda <tcp_listen_closed+0x42>
 800eec4:	f44f 7289 	mov.w	r2, #274	; 0x112
 800eec8:	4913      	ldr	r1, [pc, #76]	; (800ef18 <tcp_listen_closed+0x80>)
 800eeca:	4810      	ldr	r0, [pc, #64]	; (800ef0c <tcp_listen_closed+0x74>)
 800eecc:	f00c f922 	bl	801b114 <trace_printf>
 800eed0:	490f      	ldr	r1, [pc, #60]	; (800ef10 <tcp_listen_closed+0x78>)
 800eed2:	4810      	ldr	r0, [pc, #64]	; (800ef14 <tcp_listen_closed+0x7c>)
 800eed4:	f00c f91e 	bl	801b114 <trace_printf>
 800eed8:	e7fe      	b.n	800eed8 <tcp_listen_closed+0x40>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800eeda:	2301      	movs	r3, #1
 800eedc:	60fb      	str	r3, [r7, #12]
 800eede:	e00b      	b.n	800eef8 <tcp_listen_closed+0x60>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800eee0:	4a0e      	ldr	r2, [pc, #56]	; (800ef1c <tcp_listen_closed+0x84>)
 800eee2:	68fb      	ldr	r3, [r7, #12]
 800eee4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800eee8:	681b      	ldr	r3, [r3, #0]
 800eeea:	6879      	ldr	r1, [r7, #4]
 800eeec:	4618      	mov	r0, r3
 800eeee:	f7ff ffa3 	bl	800ee38 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800eef2:	68fb      	ldr	r3, [r7, #12]
 800eef4:	3301      	adds	r3, #1
 800eef6:	60fb      	str	r3, [r7, #12]
 800eef8:	68fb      	ldr	r3, [r7, #12]
 800eefa:	2b03      	cmp	r3, #3
 800eefc:	d9f0      	bls.n	800eee0 <tcp_listen_closed+0x48>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800eefe:	bf00      	nop
 800ef00:	bf00      	nop
 800ef02:	3710      	adds	r7, #16
 800ef04:	46bd      	mov	sp, r7
 800ef06:	bd80      	pop	{r7, pc}
 800ef08:	0801e33c 	.word	0x0801e33c
 800ef0c:	0801e2a4 	.word	0x0801e2a4
 800ef10:	0801e2c4 	.word	0x0801e2c4
 800ef14:	0801e2f4 	.word	0x0801e2f4
 800ef18:	0801e348 	.word	0x0801e348
 800ef1c:	080206e0 	.word	0x080206e0

0800ef20 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800ef20:	b5b0      	push	{r4, r5, r7, lr}
 800ef22:	b088      	sub	sp, #32
 800ef24:	af04      	add	r7, sp, #16
 800ef26:	6078      	str	r0, [r7, #4]
 800ef28:	460b      	mov	r3, r1
 800ef2a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	2b00      	cmp	r3, #0
 800ef30:	d10a      	bne.n	800ef48 <tcp_close_shutdown+0x28>
 800ef32:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800ef36:	4966      	ldr	r1, [pc, #408]	; (800f0d0 <tcp_close_shutdown+0x1b0>)
 800ef38:	4866      	ldr	r0, [pc, #408]	; (800f0d4 <tcp_close_shutdown+0x1b4>)
 800ef3a:	f00c f8eb 	bl	801b114 <trace_printf>
 800ef3e:	4966      	ldr	r1, [pc, #408]	; (800f0d8 <tcp_close_shutdown+0x1b8>)
 800ef40:	4866      	ldr	r0, [pc, #408]	; (800f0dc <tcp_close_shutdown+0x1bc>)
 800ef42:	f00c f8e7 	bl	801b114 <trace_printf>
 800ef46:	e7fe      	b.n	800ef46 <tcp_close_shutdown+0x26>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800ef48:	78fb      	ldrb	r3, [r7, #3]
 800ef4a:	2b00      	cmp	r3, #0
 800ef4c:	d06a      	beq.n	800f024 <tcp_close_shutdown+0x104>
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	7d1b      	ldrb	r3, [r3, #20]
 800ef52:	2b04      	cmp	r3, #4
 800ef54:	d003      	beq.n	800ef5e <tcp_close_shutdown+0x3e>
 800ef56:	687b      	ldr	r3, [r7, #4]
 800ef58:	7d1b      	ldrb	r3, [r3, #20]
 800ef5a:	2b07      	cmp	r3, #7
 800ef5c:	d162      	bne.n	800f024 <tcp_close_shutdown+0x104>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ef62:	2b00      	cmp	r3, #0
 800ef64:	d104      	bne.n	800ef70 <tcp_close_shutdown+0x50>
 800ef66:	687b      	ldr	r3, [r7, #4]
 800ef68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ef6a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800ef6e:	d059      	beq.n	800f024 <tcp_close_shutdown+0x104>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800ef70:	687b      	ldr	r3, [r7, #4]
 800ef72:	8b5b      	ldrh	r3, [r3, #26]
 800ef74:	f003 0310 	and.w	r3, r3, #16
 800ef78:	2b00      	cmp	r3, #0
 800ef7a:	d10a      	bne.n	800ef92 <tcp_close_shutdown+0x72>
 800ef7c:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800ef80:	4957      	ldr	r1, [pc, #348]	; (800f0e0 <tcp_close_shutdown+0x1c0>)
 800ef82:	4854      	ldr	r0, [pc, #336]	; (800f0d4 <tcp_close_shutdown+0x1b4>)
 800ef84:	f00c f8c6 	bl	801b114 <trace_printf>
 800ef88:	4953      	ldr	r1, [pc, #332]	; (800f0d8 <tcp_close_shutdown+0x1b8>)
 800ef8a:	4854      	ldr	r0, [pc, #336]	; (800f0dc <tcp_close_shutdown+0x1bc>)
 800ef8c:	f00c f8c2 	bl	801b114 <trace_printf>
 800ef90:	e7fe      	b.n	800ef90 <tcp_close_shutdown+0x70>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800ef92:	687b      	ldr	r3, [r7, #4]
 800ef94:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800ef96:	687b      	ldr	r3, [r7, #4]
 800ef98:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800ef9a:	687d      	ldr	r5, [r7, #4]
 800ef9c:	687b      	ldr	r3, [r7, #4]
 800ef9e:	3304      	adds	r3, #4
 800efa0:	687a      	ldr	r2, [r7, #4]
 800efa2:	8ad2      	ldrh	r2, [r2, #22]
 800efa4:	6879      	ldr	r1, [r7, #4]
 800efa6:	8b09      	ldrh	r1, [r1, #24]
 800efa8:	9102      	str	r1, [sp, #8]
 800efaa:	9201      	str	r2, [sp, #4]
 800efac:	9300      	str	r3, [sp, #0]
 800efae:	462b      	mov	r3, r5
 800efb0:	4622      	mov	r2, r4
 800efb2:	4601      	mov	r1, r0
 800efb4:	6878      	ldr	r0, [r7, #4]
 800efb6:	f006 f887 	bl	80150c8 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800efba:	6878      	ldr	r0, [r7, #4]
 800efbc:	f001 fb7c 	bl	80106b8 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800efc0:	4b48      	ldr	r3, [pc, #288]	; (800f0e4 <tcp_close_shutdown+0x1c4>)
 800efc2:	681b      	ldr	r3, [r3, #0]
 800efc4:	687a      	ldr	r2, [r7, #4]
 800efc6:	429a      	cmp	r2, r3
 800efc8:	d105      	bne.n	800efd6 <tcp_close_shutdown+0xb6>
 800efca:	4b46      	ldr	r3, [pc, #280]	; (800f0e4 <tcp_close_shutdown+0x1c4>)
 800efcc:	681b      	ldr	r3, [r3, #0]
 800efce:	68db      	ldr	r3, [r3, #12]
 800efd0:	4a44      	ldr	r2, [pc, #272]	; (800f0e4 <tcp_close_shutdown+0x1c4>)
 800efd2:	6013      	str	r3, [r2, #0]
 800efd4:	e013      	b.n	800effe <tcp_close_shutdown+0xde>
 800efd6:	4b43      	ldr	r3, [pc, #268]	; (800f0e4 <tcp_close_shutdown+0x1c4>)
 800efd8:	681b      	ldr	r3, [r3, #0]
 800efda:	60fb      	str	r3, [r7, #12]
 800efdc:	e00c      	b.n	800eff8 <tcp_close_shutdown+0xd8>
 800efde:	68fb      	ldr	r3, [r7, #12]
 800efe0:	68db      	ldr	r3, [r3, #12]
 800efe2:	687a      	ldr	r2, [r7, #4]
 800efe4:	429a      	cmp	r2, r3
 800efe6:	d104      	bne.n	800eff2 <tcp_close_shutdown+0xd2>
 800efe8:	687b      	ldr	r3, [r7, #4]
 800efea:	68da      	ldr	r2, [r3, #12]
 800efec:	68fb      	ldr	r3, [r7, #12]
 800efee:	60da      	str	r2, [r3, #12]
 800eff0:	e005      	b.n	800effe <tcp_close_shutdown+0xde>
 800eff2:	68fb      	ldr	r3, [r7, #12]
 800eff4:	68db      	ldr	r3, [r3, #12]
 800eff6:	60fb      	str	r3, [r7, #12]
 800eff8:	68fb      	ldr	r3, [r7, #12]
 800effa:	2b00      	cmp	r3, #0
 800effc:	d1ef      	bne.n	800efde <tcp_close_shutdown+0xbe>
 800effe:	687b      	ldr	r3, [r7, #4]
 800f000:	2200      	movs	r2, #0
 800f002:	60da      	str	r2, [r3, #12]
 800f004:	4b38      	ldr	r3, [pc, #224]	; (800f0e8 <tcp_close_shutdown+0x1c8>)
 800f006:	2201      	movs	r2, #1
 800f008:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800f00a:	4b38      	ldr	r3, [pc, #224]	; (800f0ec <tcp_close_shutdown+0x1cc>)
 800f00c:	681b      	ldr	r3, [r3, #0]
 800f00e:	687a      	ldr	r2, [r7, #4]
 800f010:	429a      	cmp	r2, r3
 800f012:	d102      	bne.n	800f01a <tcp_close_shutdown+0xfa>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800f014:	f004 f948 	bl	80132a8 <tcp_trigger_input_pcb_close>
 800f018:	e002      	b.n	800f020 <tcp_close_shutdown+0x100>
      } else {
        tcp_free(pcb);
 800f01a:	6878      	ldr	r0, [r7, #4]
 800f01c:	f7ff feb2 	bl	800ed84 <tcp_free>
      }
      return ERR_OK;
 800f020:	2300      	movs	r3, #0
 800f022:	e050      	b.n	800f0c6 <tcp_close_shutdown+0x1a6>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	7d1b      	ldrb	r3, [r3, #20]
 800f028:	2b02      	cmp	r3, #2
 800f02a:	d03b      	beq.n	800f0a4 <tcp_close_shutdown+0x184>
 800f02c:	2b02      	cmp	r3, #2
 800f02e:	dc44      	bgt.n	800f0ba <tcp_close_shutdown+0x19a>
 800f030:	2b00      	cmp	r3, #0
 800f032:	d002      	beq.n	800f03a <tcp_close_shutdown+0x11a>
 800f034:	2b01      	cmp	r3, #1
 800f036:	d02a      	beq.n	800f08e <tcp_close_shutdown+0x16e>
 800f038:	e03f      	b.n	800f0ba <tcp_close_shutdown+0x19a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800f03a:	687b      	ldr	r3, [r7, #4]
 800f03c:	8adb      	ldrh	r3, [r3, #22]
 800f03e:	2b00      	cmp	r3, #0
 800f040:	d021      	beq.n	800f086 <tcp_close_shutdown+0x166>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800f042:	4b2b      	ldr	r3, [pc, #172]	; (800f0f0 <tcp_close_shutdown+0x1d0>)
 800f044:	681b      	ldr	r3, [r3, #0]
 800f046:	687a      	ldr	r2, [r7, #4]
 800f048:	429a      	cmp	r2, r3
 800f04a:	d105      	bne.n	800f058 <tcp_close_shutdown+0x138>
 800f04c:	4b28      	ldr	r3, [pc, #160]	; (800f0f0 <tcp_close_shutdown+0x1d0>)
 800f04e:	681b      	ldr	r3, [r3, #0]
 800f050:	68db      	ldr	r3, [r3, #12]
 800f052:	4a27      	ldr	r2, [pc, #156]	; (800f0f0 <tcp_close_shutdown+0x1d0>)
 800f054:	6013      	str	r3, [r2, #0]
 800f056:	e013      	b.n	800f080 <tcp_close_shutdown+0x160>
 800f058:	4b25      	ldr	r3, [pc, #148]	; (800f0f0 <tcp_close_shutdown+0x1d0>)
 800f05a:	681b      	ldr	r3, [r3, #0]
 800f05c:	60bb      	str	r3, [r7, #8]
 800f05e:	e00c      	b.n	800f07a <tcp_close_shutdown+0x15a>
 800f060:	68bb      	ldr	r3, [r7, #8]
 800f062:	68db      	ldr	r3, [r3, #12]
 800f064:	687a      	ldr	r2, [r7, #4]
 800f066:	429a      	cmp	r2, r3
 800f068:	d104      	bne.n	800f074 <tcp_close_shutdown+0x154>
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	68da      	ldr	r2, [r3, #12]
 800f06e:	68bb      	ldr	r3, [r7, #8]
 800f070:	60da      	str	r2, [r3, #12]
 800f072:	e005      	b.n	800f080 <tcp_close_shutdown+0x160>
 800f074:	68bb      	ldr	r3, [r7, #8]
 800f076:	68db      	ldr	r3, [r3, #12]
 800f078:	60bb      	str	r3, [r7, #8]
 800f07a:	68bb      	ldr	r3, [r7, #8]
 800f07c:	2b00      	cmp	r3, #0
 800f07e:	d1ef      	bne.n	800f060 <tcp_close_shutdown+0x140>
 800f080:	687b      	ldr	r3, [r7, #4]
 800f082:	2200      	movs	r2, #0
 800f084:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800f086:	6878      	ldr	r0, [r7, #4]
 800f088:	f7ff fe7c 	bl	800ed84 <tcp_free>
      break;
 800f08c:	e01a      	b.n	800f0c4 <tcp_close_shutdown+0x1a4>
    case LISTEN:
      tcp_listen_closed(pcb);
 800f08e:	6878      	ldr	r0, [r7, #4]
 800f090:	f7ff ff02 	bl	800ee98 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800f094:	6879      	ldr	r1, [r7, #4]
 800f096:	4817      	ldr	r0, [pc, #92]	; (800f0f4 <tcp_close_shutdown+0x1d4>)
 800f098:	f001 fb64 	bl	8010764 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800f09c:	6878      	ldr	r0, [r7, #4]
 800f09e:	f7ff fe93 	bl	800edc8 <tcp_free_listen>
      break;
 800f0a2:	e00f      	b.n	800f0c4 <tcp_close_shutdown+0x1a4>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800f0a4:	6879      	ldr	r1, [r7, #4]
 800f0a6:	480f      	ldr	r0, [pc, #60]	; (800f0e4 <tcp_close_shutdown+0x1c4>)
 800f0a8:	f001 fb5c 	bl	8010764 <tcp_pcb_remove>
 800f0ac:	4b0e      	ldr	r3, [pc, #56]	; (800f0e8 <tcp_close_shutdown+0x1c8>)
 800f0ae:	2201      	movs	r2, #1
 800f0b0:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800f0b2:	6878      	ldr	r0, [r7, #4]
 800f0b4:	f7ff fe66 	bl	800ed84 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800f0b8:	e004      	b.n	800f0c4 <tcp_close_shutdown+0x1a4>
    default:
      return tcp_close_shutdown_fin(pcb);
 800f0ba:	6878      	ldr	r0, [r7, #4]
 800f0bc:	f000 f81c 	bl	800f0f8 <tcp_close_shutdown_fin>
 800f0c0:	4603      	mov	r3, r0
 800f0c2:	e000      	b.n	800f0c6 <tcp_close_shutdown+0x1a6>
  }
  return ERR_OK;
 800f0c4:	2300      	movs	r3, #0
}
 800f0c6:	4618      	mov	r0, r3
 800f0c8:	3710      	adds	r7, #16
 800f0ca:	46bd      	mov	sp, r7
 800f0cc:	bdb0      	pop	{r4, r5, r7, pc}
 800f0ce:	bf00      	nop
 800f0d0:	0801e360 	.word	0x0801e360
 800f0d4:	0801e2a4 	.word	0x0801e2a4
 800f0d8:	0801e2c4 	.word	0x0801e2c4
 800f0dc:	0801e2f4 	.word	0x0801e2f4
 800f0e0:	0801e380 	.word	0x0801e380
 800f0e4:	20010c80 	.word	0x20010c80
 800f0e8:	20010c7c 	.word	0x20010c7c
 800f0ec:	20010c94 	.word	0x20010c94
 800f0f0:	20010c8c 	.word	0x20010c8c
 800f0f4:	20010c88 	.word	0x20010c88

0800f0f8 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800f0f8:	b580      	push	{r7, lr}
 800f0fa:	b084      	sub	sp, #16
 800f0fc:	af00      	add	r7, sp, #0
 800f0fe:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800f100:	687b      	ldr	r3, [r7, #4]
 800f102:	2b00      	cmp	r3, #0
 800f104:	d10a      	bne.n	800f11c <tcp_close_shutdown_fin+0x24>
 800f106:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800f10a:	492f      	ldr	r1, [pc, #188]	; (800f1c8 <tcp_close_shutdown_fin+0xd0>)
 800f10c:	482f      	ldr	r0, [pc, #188]	; (800f1cc <tcp_close_shutdown_fin+0xd4>)
 800f10e:	f00c f801 	bl	801b114 <trace_printf>
 800f112:	492f      	ldr	r1, [pc, #188]	; (800f1d0 <tcp_close_shutdown_fin+0xd8>)
 800f114:	482f      	ldr	r0, [pc, #188]	; (800f1d4 <tcp_close_shutdown_fin+0xdc>)
 800f116:	f00b fffd 	bl	801b114 <trace_printf>
 800f11a:	e7fe      	b.n	800f11a <tcp_close_shutdown_fin+0x22>

  switch (pcb->state) {
 800f11c:	687b      	ldr	r3, [r7, #4]
 800f11e:	7d1b      	ldrb	r3, [r3, #20]
 800f120:	2b07      	cmp	r3, #7
 800f122:	d020      	beq.n	800f166 <tcp_close_shutdown_fin+0x6e>
 800f124:	2b07      	cmp	r3, #7
 800f126:	dc2b      	bgt.n	800f180 <tcp_close_shutdown_fin+0x88>
 800f128:	2b03      	cmp	r3, #3
 800f12a:	d002      	beq.n	800f132 <tcp_close_shutdown_fin+0x3a>
 800f12c:	2b04      	cmp	r3, #4
 800f12e:	d00d      	beq.n	800f14c <tcp_close_shutdown_fin+0x54>
 800f130:	e026      	b.n	800f180 <tcp_close_shutdown_fin+0x88>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800f132:	6878      	ldr	r0, [r7, #4]
 800f134:	f005 f824 	bl	8014180 <tcp_send_fin>
 800f138:	4603      	mov	r3, r0
 800f13a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800f13c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f140:	2b00      	cmp	r3, #0
 800f142:	d11f      	bne.n	800f184 <tcp_close_shutdown_fin+0x8c>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800f144:	687b      	ldr	r3, [r7, #4]
 800f146:	2205      	movs	r2, #5
 800f148:	751a      	strb	r2, [r3, #20]
      }
      break;
 800f14a:	e01b      	b.n	800f184 <tcp_close_shutdown_fin+0x8c>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800f14c:	6878      	ldr	r0, [r7, #4]
 800f14e:	f005 f817 	bl	8014180 <tcp_send_fin>
 800f152:	4603      	mov	r3, r0
 800f154:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800f156:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f15a:	2b00      	cmp	r3, #0
 800f15c:	d114      	bne.n	800f188 <tcp_close_shutdown_fin+0x90>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800f15e:	687b      	ldr	r3, [r7, #4]
 800f160:	2205      	movs	r2, #5
 800f162:	751a      	strb	r2, [r3, #20]
      }
      break;
 800f164:	e010      	b.n	800f188 <tcp_close_shutdown_fin+0x90>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800f166:	6878      	ldr	r0, [r7, #4]
 800f168:	f005 f80a 	bl	8014180 <tcp_send_fin>
 800f16c:	4603      	mov	r3, r0
 800f16e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800f170:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f174:	2b00      	cmp	r3, #0
 800f176:	d109      	bne.n	800f18c <tcp_close_shutdown_fin+0x94>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800f178:	687b      	ldr	r3, [r7, #4]
 800f17a:	2209      	movs	r2, #9
 800f17c:	751a      	strb	r2, [r3, #20]
      }
      break;
 800f17e:	e005      	b.n	800f18c <tcp_close_shutdown_fin+0x94>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800f180:	2300      	movs	r3, #0
 800f182:	e01c      	b.n	800f1be <tcp_close_shutdown_fin+0xc6>
      break;
 800f184:	bf00      	nop
 800f186:	e002      	b.n	800f18e <tcp_close_shutdown_fin+0x96>
      break;
 800f188:	bf00      	nop
 800f18a:	e000      	b.n	800f18e <tcp_close_shutdown_fin+0x96>
      break;
 800f18c:	bf00      	nop
  }

  if (err == ERR_OK) {
 800f18e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f192:	2b00      	cmp	r3, #0
 800f194:	d103      	bne.n	800f19e <tcp_close_shutdown_fin+0xa6>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800f196:	6878      	ldr	r0, [r7, #4]
 800f198:	f005 f962 	bl	8014460 <tcp_output>
 800f19c:	e00d      	b.n	800f1ba <tcp_close_shutdown_fin+0xc2>
  } else if (err == ERR_MEM) {
 800f19e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f1a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f1a6:	d108      	bne.n	800f1ba <tcp_close_shutdown_fin+0xc2>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800f1a8:	687b      	ldr	r3, [r7, #4]
 800f1aa:	8b5b      	ldrh	r3, [r3, #26]
 800f1ac:	f043 0308 	orr.w	r3, r3, #8
 800f1b0:	b29a      	uxth	r2, r3
 800f1b2:	687b      	ldr	r3, [r7, #4]
 800f1b4:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800f1b6:	2300      	movs	r3, #0
 800f1b8:	e001      	b.n	800f1be <tcp_close_shutdown_fin+0xc6>
  }
  return err;
 800f1ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800f1be:	4618      	mov	r0, r3
 800f1c0:	3710      	adds	r7, #16
 800f1c2:	46bd      	mov	sp, r7
 800f1c4:	bd80      	pop	{r7, pc}
 800f1c6:	bf00      	nop
 800f1c8:	0801e33c 	.word	0x0801e33c
 800f1cc:	0801e2a4 	.word	0x0801e2a4
 800f1d0:	0801e2c4 	.word	0x0801e2c4
 800f1d4:	0801e2f4 	.word	0x0801e2f4

0800f1d8 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800f1d8:	b580      	push	{r7, lr}
 800f1da:	b082      	sub	sp, #8
 800f1dc:	af00      	add	r7, sp, #0
 800f1de:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800f1e0:	687b      	ldr	r3, [r7, #4]
 800f1e2:	2b00      	cmp	r3, #0
 800f1e4:	d10a      	bne.n	800f1fc <tcp_close+0x24>
 800f1e6:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800f1ea:	490e      	ldr	r1, [pc, #56]	; (800f224 <tcp_close+0x4c>)
 800f1ec:	480e      	ldr	r0, [pc, #56]	; (800f228 <tcp_close+0x50>)
 800f1ee:	f00b ff91 	bl	801b114 <trace_printf>
 800f1f2:	490e      	ldr	r1, [pc, #56]	; (800f22c <tcp_close+0x54>)
 800f1f4:	480e      	ldr	r0, [pc, #56]	; (800f230 <tcp_close+0x58>)
 800f1f6:	f00b ff8d 	bl	801b114 <trace_printf>
 800f1fa:	e7fe      	b.n	800f1fa <tcp_close+0x22>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800f1fc:	687b      	ldr	r3, [r7, #4]
 800f1fe:	7d1b      	ldrb	r3, [r3, #20]
 800f200:	2b01      	cmp	r3, #1
 800f202:	d006      	beq.n	800f212 <tcp_close+0x3a>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800f204:	687b      	ldr	r3, [r7, #4]
 800f206:	8b5b      	ldrh	r3, [r3, #26]
 800f208:	f043 0310 	orr.w	r3, r3, #16
 800f20c:	b29a      	uxth	r2, r3
 800f20e:	687b      	ldr	r3, [r7, #4]
 800f210:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800f212:	2101      	movs	r1, #1
 800f214:	6878      	ldr	r0, [r7, #4]
 800f216:	f7ff fe83 	bl	800ef20 <tcp_close_shutdown>
 800f21a:	4603      	mov	r3, r0
}
 800f21c:	4618      	mov	r0, r3
 800f21e:	3708      	adds	r7, #8
 800f220:	46bd      	mov	sp, r7
 800f222:	bd80      	pop	{r7, pc}
 800f224:	0801e39c 	.word	0x0801e39c
 800f228:	0801e2a4 	.word	0x0801e2a4
 800f22c:	0801e2c4 	.word	0x0801e2c4
 800f230:	0801e2f4 	.word	0x0801e2f4

0800f234 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 800f234:	b580      	push	{r7, lr}
 800f236:	b084      	sub	sp, #16
 800f238:	af00      	add	r7, sp, #0
 800f23a:	60f8      	str	r0, [r7, #12]
 800f23c:	60b9      	str	r1, [r7, #8]
 800f23e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 800f240:	68fb      	ldr	r3, [r7, #12]
 800f242:	2b00      	cmp	r3, #0
 800f244:	d10a      	bne.n	800f25c <tcp_shutdown+0x28>
 800f246:	f240 2207 	movw	r2, #519	; 0x207
 800f24a:	4925      	ldr	r1, [pc, #148]	; (800f2e0 <tcp_shutdown+0xac>)
 800f24c:	4825      	ldr	r0, [pc, #148]	; (800f2e4 <tcp_shutdown+0xb0>)
 800f24e:	f00b ff61 	bl	801b114 <trace_printf>
 800f252:	4925      	ldr	r1, [pc, #148]	; (800f2e8 <tcp_shutdown+0xb4>)
 800f254:	4825      	ldr	r0, [pc, #148]	; (800f2ec <tcp_shutdown+0xb8>)
 800f256:	f00b ff5d 	bl	801b114 <trace_printf>
 800f25a:	e7fe      	b.n	800f25a <tcp_shutdown+0x26>

  if (pcb->state == LISTEN) {
 800f25c:	68fb      	ldr	r3, [r7, #12]
 800f25e:	7d1b      	ldrb	r3, [r3, #20]
 800f260:	2b01      	cmp	r3, #1
 800f262:	d102      	bne.n	800f26a <tcp_shutdown+0x36>
    return ERR_CONN;
 800f264:	f06f 030a 	mvn.w	r3, #10
 800f268:	e036      	b.n	800f2d8 <tcp_shutdown+0xa4>
  }
  if (shut_rx) {
 800f26a:	68bb      	ldr	r3, [r7, #8]
 800f26c:	2b00      	cmp	r3, #0
 800f26e:	d01b      	beq.n	800f2a8 <tcp_shutdown+0x74>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800f270:	68fb      	ldr	r3, [r7, #12]
 800f272:	8b5b      	ldrh	r3, [r3, #26]
 800f274:	f043 0310 	orr.w	r3, r3, #16
 800f278:	b29a      	uxth	r2, r3
 800f27a:	68fb      	ldr	r3, [r7, #12]
 800f27c:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 800f27e:	687b      	ldr	r3, [r7, #4]
 800f280:	2b00      	cmp	r3, #0
 800f282:	d005      	beq.n	800f290 <tcp_shutdown+0x5c>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 800f284:	2101      	movs	r1, #1
 800f286:	68f8      	ldr	r0, [r7, #12]
 800f288:	f7ff fe4a 	bl	800ef20 <tcp_close_shutdown>
 800f28c:	4603      	mov	r3, r0
 800f28e:	e023      	b.n	800f2d8 <tcp_shutdown+0xa4>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 800f290:	68fb      	ldr	r3, [r7, #12]
 800f292:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f294:	2b00      	cmp	r3, #0
 800f296:	d007      	beq.n	800f2a8 <tcp_shutdown+0x74>
      pbuf_free(pcb->refused_data);
 800f298:	68fb      	ldr	r3, [r7, #12]
 800f29a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f29c:	4618      	mov	r0, r3
 800f29e:	f7ff fa67 	bl	800e770 <pbuf_free>
      pcb->refused_data = NULL;
 800f2a2:	68fb      	ldr	r3, [r7, #12]
 800f2a4:	2200      	movs	r2, #0
 800f2a6:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }
  if (shut_tx) {
 800f2a8:	687b      	ldr	r3, [r7, #4]
 800f2aa:	2b00      	cmp	r3, #0
 800f2ac:	d013      	beq.n	800f2d6 <tcp_shutdown+0xa2>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 800f2ae:	68fb      	ldr	r3, [r7, #12]
 800f2b0:	7d1b      	ldrb	r3, [r3, #20]
 800f2b2:	2b04      	cmp	r3, #4
 800f2b4:	dc02      	bgt.n	800f2bc <tcp_shutdown+0x88>
 800f2b6:	2b03      	cmp	r3, #3
 800f2b8:	da02      	bge.n	800f2c0 <tcp_shutdown+0x8c>
 800f2ba:	e009      	b.n	800f2d0 <tcp_shutdown+0x9c>
 800f2bc:	2b07      	cmp	r3, #7
 800f2be:	d107      	bne.n	800f2d0 <tcp_shutdown+0x9c>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 800f2c0:	68bb      	ldr	r3, [r7, #8]
 800f2c2:	b2db      	uxtb	r3, r3
 800f2c4:	4619      	mov	r1, r3
 800f2c6:	68f8      	ldr	r0, [r7, #12]
 800f2c8:	f7ff fe2a 	bl	800ef20 <tcp_close_shutdown>
 800f2cc:	4603      	mov	r3, r0
 800f2ce:	e003      	b.n	800f2d8 <tcp_shutdown+0xa4>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 800f2d0:	f06f 030a 	mvn.w	r3, #10
 800f2d4:	e000      	b.n	800f2d8 <tcp_shutdown+0xa4>
    }
  }
  return ERR_OK;
 800f2d6:	2300      	movs	r3, #0
}
 800f2d8:	4618      	mov	r0, r3
 800f2da:	3710      	adds	r7, #16
 800f2dc:	46bd      	mov	sp, r7
 800f2de:	bd80      	pop	{r7, pc}
 800f2e0:	0801e3b4 	.word	0x0801e3b4
 800f2e4:	0801e2a4 	.word	0x0801e2a4
 800f2e8:	0801e2c4 	.word	0x0801e2c4
 800f2ec:	0801e2f4 	.word	0x0801e2f4

0800f2f0 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800f2f0:	b580      	push	{r7, lr}
 800f2f2:	b08e      	sub	sp, #56	; 0x38
 800f2f4:	af04      	add	r7, sp, #16
 800f2f6:	6078      	str	r0, [r7, #4]
 800f2f8:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800f2fa:	687b      	ldr	r3, [r7, #4]
 800f2fc:	2b00      	cmp	r3, #0
 800f2fe:	d10a      	bne.n	800f316 <tcp_abandon+0x26>
 800f300:	f240 223d 	movw	r2, #573	; 0x23d
 800f304:	4954      	ldr	r1, [pc, #336]	; (800f458 <tcp_abandon+0x168>)
 800f306:	4855      	ldr	r0, [pc, #340]	; (800f45c <tcp_abandon+0x16c>)
 800f308:	f00b ff04 	bl	801b114 <trace_printf>
 800f30c:	4954      	ldr	r1, [pc, #336]	; (800f460 <tcp_abandon+0x170>)
 800f30e:	4855      	ldr	r0, [pc, #340]	; (800f464 <tcp_abandon+0x174>)
 800f310:	f00b ff00 	bl	801b114 <trace_printf>
 800f314:	e7fe      	b.n	800f314 <tcp_abandon+0x24>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800f316:	687b      	ldr	r3, [r7, #4]
 800f318:	7d1b      	ldrb	r3, [r3, #20]
 800f31a:	2b01      	cmp	r3, #1
 800f31c:	d10a      	bne.n	800f334 <tcp_abandon+0x44>
 800f31e:	f44f 7210 	mov.w	r2, #576	; 0x240
 800f322:	4951      	ldr	r1, [pc, #324]	; (800f468 <tcp_abandon+0x178>)
 800f324:	484d      	ldr	r0, [pc, #308]	; (800f45c <tcp_abandon+0x16c>)
 800f326:	f00b fef5 	bl	801b114 <trace_printf>
 800f32a:	494d      	ldr	r1, [pc, #308]	; (800f460 <tcp_abandon+0x170>)
 800f32c:	484d      	ldr	r0, [pc, #308]	; (800f464 <tcp_abandon+0x174>)
 800f32e:	f00b fef1 	bl	801b114 <trace_printf>
 800f332:	e7fe      	b.n	800f332 <tcp_abandon+0x42>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800f334:	687b      	ldr	r3, [r7, #4]
 800f336:	7d1b      	ldrb	r3, [r3, #20]
 800f338:	2b0a      	cmp	r3, #10
 800f33a:	d107      	bne.n	800f34c <tcp_abandon+0x5c>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800f33c:	6879      	ldr	r1, [r7, #4]
 800f33e:	484b      	ldr	r0, [pc, #300]	; (800f46c <tcp_abandon+0x17c>)
 800f340:	f001 fa10 	bl	8010764 <tcp_pcb_remove>
    tcp_free(pcb);
 800f344:	6878      	ldr	r0, [r7, #4]
 800f346:	f7ff fd1d 	bl	800ed84 <tcp_free>
 800f34a:	e082      	b.n	800f452 <tcp_abandon+0x162>
  } else {
    int send_rst = 0;
 800f34c:	2300      	movs	r3, #0
 800f34e:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800f350:	2300      	movs	r3, #0
 800f352:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800f354:	687b      	ldr	r3, [r7, #4]
 800f356:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f358:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800f35a:	687b      	ldr	r3, [r7, #4]
 800f35c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f35e:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800f360:	687b      	ldr	r3, [r7, #4]
 800f362:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f366:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800f368:	687b      	ldr	r3, [r7, #4]
 800f36a:	691b      	ldr	r3, [r3, #16]
 800f36c:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800f36e:	687b      	ldr	r3, [r7, #4]
 800f370:	7d1b      	ldrb	r3, [r3, #20]
 800f372:	2b00      	cmp	r3, #0
 800f374:	d126      	bne.n	800f3c4 <tcp_abandon+0xd4>
      if (pcb->local_port != 0) {
 800f376:	687b      	ldr	r3, [r7, #4]
 800f378:	8adb      	ldrh	r3, [r3, #22]
 800f37a:	2b00      	cmp	r3, #0
 800f37c:	d02e      	beq.n	800f3dc <tcp_abandon+0xec>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800f37e:	4b3c      	ldr	r3, [pc, #240]	; (800f470 <tcp_abandon+0x180>)
 800f380:	681b      	ldr	r3, [r3, #0]
 800f382:	687a      	ldr	r2, [r7, #4]
 800f384:	429a      	cmp	r2, r3
 800f386:	d105      	bne.n	800f394 <tcp_abandon+0xa4>
 800f388:	4b39      	ldr	r3, [pc, #228]	; (800f470 <tcp_abandon+0x180>)
 800f38a:	681b      	ldr	r3, [r3, #0]
 800f38c:	68db      	ldr	r3, [r3, #12]
 800f38e:	4a38      	ldr	r2, [pc, #224]	; (800f470 <tcp_abandon+0x180>)
 800f390:	6013      	str	r3, [r2, #0]
 800f392:	e013      	b.n	800f3bc <tcp_abandon+0xcc>
 800f394:	4b36      	ldr	r3, [pc, #216]	; (800f470 <tcp_abandon+0x180>)
 800f396:	681b      	ldr	r3, [r3, #0]
 800f398:	61fb      	str	r3, [r7, #28]
 800f39a:	e00c      	b.n	800f3b6 <tcp_abandon+0xc6>
 800f39c:	69fb      	ldr	r3, [r7, #28]
 800f39e:	68db      	ldr	r3, [r3, #12]
 800f3a0:	687a      	ldr	r2, [r7, #4]
 800f3a2:	429a      	cmp	r2, r3
 800f3a4:	d104      	bne.n	800f3b0 <tcp_abandon+0xc0>
 800f3a6:	687b      	ldr	r3, [r7, #4]
 800f3a8:	68da      	ldr	r2, [r3, #12]
 800f3aa:	69fb      	ldr	r3, [r7, #28]
 800f3ac:	60da      	str	r2, [r3, #12]
 800f3ae:	e005      	b.n	800f3bc <tcp_abandon+0xcc>
 800f3b0:	69fb      	ldr	r3, [r7, #28]
 800f3b2:	68db      	ldr	r3, [r3, #12]
 800f3b4:	61fb      	str	r3, [r7, #28]
 800f3b6:	69fb      	ldr	r3, [r7, #28]
 800f3b8:	2b00      	cmp	r3, #0
 800f3ba:	d1ef      	bne.n	800f39c <tcp_abandon+0xac>
 800f3bc:	687b      	ldr	r3, [r7, #4]
 800f3be:	2200      	movs	r2, #0
 800f3c0:	60da      	str	r2, [r3, #12]
 800f3c2:	e00b      	b.n	800f3dc <tcp_abandon+0xec>
      }
    } else {
      send_rst = reset;
 800f3c4:	683b      	ldr	r3, [r7, #0]
 800f3c6:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800f3c8:	687b      	ldr	r3, [r7, #4]
 800f3ca:	8adb      	ldrh	r3, [r3, #22]
 800f3cc:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800f3ce:	6879      	ldr	r1, [r7, #4]
 800f3d0:	4828      	ldr	r0, [pc, #160]	; (800f474 <tcp_abandon+0x184>)
 800f3d2:	f001 f9c7 	bl	8010764 <tcp_pcb_remove>
 800f3d6:	4b28      	ldr	r3, [pc, #160]	; (800f478 <tcp_abandon+0x188>)
 800f3d8:	2201      	movs	r2, #1
 800f3da:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800f3dc:	687b      	ldr	r3, [r7, #4]
 800f3de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f3e0:	2b00      	cmp	r3, #0
 800f3e2:	d004      	beq.n	800f3ee <tcp_abandon+0xfe>
      tcp_segs_free(pcb->unacked);
 800f3e4:	687b      	ldr	r3, [r7, #4]
 800f3e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f3e8:	4618      	mov	r0, r3
 800f3ea:	f000 fe43 	bl	8010074 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800f3ee:	687b      	ldr	r3, [r7, #4]
 800f3f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f3f2:	2b00      	cmp	r3, #0
 800f3f4:	d004      	beq.n	800f400 <tcp_abandon+0x110>
      tcp_segs_free(pcb->unsent);
 800f3f6:	687b      	ldr	r3, [r7, #4]
 800f3f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f3fa:	4618      	mov	r0, r3
 800f3fc:	f000 fe3a 	bl	8010074 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800f400:	687b      	ldr	r3, [r7, #4]
 800f402:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f404:	2b00      	cmp	r3, #0
 800f406:	d004      	beq.n	800f412 <tcp_abandon+0x122>
      tcp_segs_free(pcb->ooseq);
 800f408:	687b      	ldr	r3, [r7, #4]
 800f40a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f40c:	4618      	mov	r0, r3
 800f40e:	f000 fe31 	bl	8010074 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800f412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f414:	2b00      	cmp	r3, #0
 800f416:	d00e      	beq.n	800f436 <tcp_abandon+0x146>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800f418:	6879      	ldr	r1, [r7, #4]
 800f41a:	687b      	ldr	r3, [r7, #4]
 800f41c:	3304      	adds	r3, #4
 800f41e:	687a      	ldr	r2, [r7, #4]
 800f420:	8b12      	ldrh	r2, [r2, #24]
 800f422:	9202      	str	r2, [sp, #8]
 800f424:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800f426:	9201      	str	r2, [sp, #4]
 800f428:	9300      	str	r3, [sp, #0]
 800f42a:	460b      	mov	r3, r1
 800f42c:	697a      	ldr	r2, [r7, #20]
 800f42e:	69b9      	ldr	r1, [r7, #24]
 800f430:	6878      	ldr	r0, [r7, #4]
 800f432:	f005 fe49 	bl	80150c8 <tcp_rst>
    }
    last_state = pcb->state;
 800f436:	687b      	ldr	r3, [r7, #4]
 800f438:	7d1b      	ldrb	r3, [r3, #20]
 800f43a:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800f43c:	6878      	ldr	r0, [r7, #4]
 800f43e:	f7ff fca1 	bl	800ed84 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800f442:	693b      	ldr	r3, [r7, #16]
 800f444:	2b00      	cmp	r3, #0
 800f446:	d004      	beq.n	800f452 <tcp_abandon+0x162>
 800f448:	693b      	ldr	r3, [r7, #16]
 800f44a:	f06f 010c 	mvn.w	r1, #12
 800f44e:	68f8      	ldr	r0, [r7, #12]
 800f450:	4798      	blx	r3
  }
}
 800f452:	3728      	adds	r7, #40	; 0x28
 800f454:	46bd      	mov	sp, r7
 800f456:	bd80      	pop	{r7, pc}
 800f458:	0801e3d0 	.word	0x0801e3d0
 800f45c:	0801e2a4 	.word	0x0801e2a4
 800f460:	0801e2c4 	.word	0x0801e2c4
 800f464:	0801e2f4 	.word	0x0801e2f4
 800f468:	0801e3ec 	.word	0x0801e3ec
 800f46c:	20010c90 	.word	0x20010c90
 800f470:	20010c8c 	.word	0x20010c8c
 800f474:	20010c80 	.word	0x20010c80
 800f478:	20010c7c 	.word	0x20010c7c

0800f47c <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800f47c:	b580      	push	{r7, lr}
 800f47e:	b082      	sub	sp, #8
 800f480:	af00      	add	r7, sp, #0
 800f482:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800f484:	2101      	movs	r1, #1
 800f486:	6878      	ldr	r0, [r7, #4]
 800f488:	f7ff ff32 	bl	800f2f0 <tcp_abandon>
}
 800f48c:	bf00      	nop
 800f48e:	3708      	adds	r7, #8
 800f490:	46bd      	mov	sp, r7
 800f492:	bd80      	pop	{r7, pc}

0800f494 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800f494:	b580      	push	{r7, lr}
 800f496:	b088      	sub	sp, #32
 800f498:	af00      	add	r7, sp, #0
 800f49a:	60f8      	str	r0, [r7, #12]
 800f49c:	60b9      	str	r1, [r7, #8]
 800f49e:	4613      	mov	r3, r2
 800f4a0:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 800f4a2:	2304      	movs	r3, #4
 800f4a4:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800f4a6:	68bb      	ldr	r3, [r7, #8]
 800f4a8:	2b00      	cmp	r3, #0
 800f4aa:	d101      	bne.n	800f4b0 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 800f4ac:	4b3f      	ldr	r3, [pc, #252]	; (800f5ac <tcp_bind+0x118>)
 800f4ae:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800f4b0:	68fb      	ldr	r3, [r7, #12]
 800f4b2:	2b00      	cmp	r3, #0
 800f4b4:	d10a      	bne.n	800f4cc <tcp_bind+0x38>
 800f4b6:	f240 22a9 	movw	r2, #681	; 0x2a9
 800f4ba:	493d      	ldr	r1, [pc, #244]	; (800f5b0 <tcp_bind+0x11c>)
 800f4bc:	483d      	ldr	r0, [pc, #244]	; (800f5b4 <tcp_bind+0x120>)
 800f4be:	f00b fe29 	bl	801b114 <trace_printf>
 800f4c2:	493d      	ldr	r1, [pc, #244]	; (800f5b8 <tcp_bind+0x124>)
 800f4c4:	483d      	ldr	r0, [pc, #244]	; (800f5bc <tcp_bind+0x128>)
 800f4c6:	f00b fe25 	bl	801b114 <trace_printf>
 800f4ca:	e7fe      	b.n	800f4ca <tcp_bind+0x36>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800f4cc:	68fb      	ldr	r3, [r7, #12]
 800f4ce:	7d1b      	ldrb	r3, [r3, #20]
 800f4d0:	2b00      	cmp	r3, #0
 800f4d2:	d00a      	beq.n	800f4ea <tcp_bind+0x56>
 800f4d4:	f240 22ab 	movw	r2, #683	; 0x2ab
 800f4d8:	4939      	ldr	r1, [pc, #228]	; (800f5c0 <tcp_bind+0x12c>)
 800f4da:	4836      	ldr	r0, [pc, #216]	; (800f5b4 <tcp_bind+0x120>)
 800f4dc:	f00b fe1a 	bl	801b114 <trace_printf>
 800f4e0:	4935      	ldr	r1, [pc, #212]	; (800f5b8 <tcp_bind+0x124>)
 800f4e2:	4836      	ldr	r0, [pc, #216]	; (800f5bc <tcp_bind+0x128>)
 800f4e4:	f00b fe16 	bl	801b114 <trace_printf>
 800f4e8:	e7fe      	b.n	800f4e8 <tcp_bind+0x54>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 800f4ea:	88fb      	ldrh	r3, [r7, #6]
 800f4ec:	2b00      	cmp	r3, #0
 800f4ee:	d109      	bne.n	800f504 <tcp_bind+0x70>
    port = tcp_new_port();
 800f4f0:	f000 f928 	bl	800f744 <tcp_new_port>
 800f4f4:	4603      	mov	r3, r0
 800f4f6:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800f4f8:	88fb      	ldrh	r3, [r7, #6]
 800f4fa:	2b00      	cmp	r3, #0
 800f4fc:	d135      	bne.n	800f56a <tcp_bind+0xd6>
      return ERR_BUF;
 800f4fe:	f06f 0301 	mvn.w	r3, #1
 800f502:	e04f      	b.n	800f5a4 <tcp_bind+0x110>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 800f504:	2300      	movs	r3, #0
 800f506:	61fb      	str	r3, [r7, #28]
 800f508:	e02b      	b.n	800f562 <tcp_bind+0xce>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800f50a:	4a2e      	ldr	r2, [pc, #184]	; (800f5c4 <tcp_bind+0x130>)
 800f50c:	69fb      	ldr	r3, [r7, #28]
 800f50e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f512:	681b      	ldr	r3, [r3, #0]
 800f514:	61bb      	str	r3, [r7, #24]
 800f516:	e01e      	b.n	800f556 <tcp_bind+0xc2>
        if (cpcb->local_port == port) {
 800f518:	69bb      	ldr	r3, [r7, #24]
 800f51a:	8adb      	ldrh	r3, [r3, #22]
 800f51c:	88fa      	ldrh	r2, [r7, #6]
 800f51e:	429a      	cmp	r2, r3
 800f520:	d116      	bne.n	800f550 <tcp_bind+0xbc>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 800f522:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800f524:	2b00      	cmp	r3, #0
 800f526:	d010      	beq.n	800f54a <tcp_bind+0xb6>
                (ip_addr_isany(&cpcb->local_ip) ||
 800f528:	69bb      	ldr	r3, [r7, #24]
 800f52a:	681b      	ldr	r3, [r3, #0]
 800f52c:	2b00      	cmp	r3, #0
 800f52e:	d00c      	beq.n	800f54a <tcp_bind+0xb6>
 800f530:	68bb      	ldr	r3, [r7, #8]
 800f532:	2b00      	cmp	r3, #0
 800f534:	d009      	beq.n	800f54a <tcp_bind+0xb6>
                 ip_addr_isany(ipaddr) ||
 800f536:	68bb      	ldr	r3, [r7, #8]
 800f538:	681b      	ldr	r3, [r3, #0]
 800f53a:	2b00      	cmp	r3, #0
 800f53c:	d005      	beq.n	800f54a <tcp_bind+0xb6>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 800f53e:	69bb      	ldr	r3, [r7, #24]
 800f540:	681a      	ldr	r2, [r3, #0]
 800f542:	68bb      	ldr	r3, [r7, #8]
 800f544:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800f546:	429a      	cmp	r2, r3
 800f548:	d102      	bne.n	800f550 <tcp_bind+0xbc>
              return ERR_USE;
 800f54a:	f06f 0307 	mvn.w	r3, #7
 800f54e:	e029      	b.n	800f5a4 <tcp_bind+0x110>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800f550:	69bb      	ldr	r3, [r7, #24]
 800f552:	68db      	ldr	r3, [r3, #12]
 800f554:	61bb      	str	r3, [r7, #24]
 800f556:	69bb      	ldr	r3, [r7, #24]
 800f558:	2b00      	cmp	r3, #0
 800f55a:	d1dd      	bne.n	800f518 <tcp_bind+0x84>
    for (i = 0; i < max_pcb_list; i++) {
 800f55c:	69fb      	ldr	r3, [r7, #28]
 800f55e:	3301      	adds	r3, #1
 800f560:	61fb      	str	r3, [r7, #28]
 800f562:	69fa      	ldr	r2, [r7, #28]
 800f564:	697b      	ldr	r3, [r7, #20]
 800f566:	429a      	cmp	r2, r3
 800f568:	dbcf      	blt.n	800f50a <tcp_bind+0x76>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 800f56a:	68bb      	ldr	r3, [r7, #8]
 800f56c:	2b00      	cmp	r3, #0
 800f56e:	d00c      	beq.n	800f58a <tcp_bind+0xf6>
 800f570:	68bb      	ldr	r3, [r7, #8]
 800f572:	681b      	ldr	r3, [r3, #0]
 800f574:	2b00      	cmp	r3, #0
 800f576:	d008      	beq.n	800f58a <tcp_bind+0xf6>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 800f578:	68bb      	ldr	r3, [r7, #8]
 800f57a:	2b00      	cmp	r3, #0
 800f57c:	d002      	beq.n	800f584 <tcp_bind+0xf0>
 800f57e:	68bb      	ldr	r3, [r7, #8]
 800f580:	681b      	ldr	r3, [r3, #0]
 800f582:	e000      	b.n	800f586 <tcp_bind+0xf2>
 800f584:	2300      	movs	r3, #0
 800f586:	68fa      	ldr	r2, [r7, #12]
 800f588:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 800f58a:	68fb      	ldr	r3, [r7, #12]
 800f58c:	88fa      	ldrh	r2, [r7, #6]
 800f58e:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800f590:	4b0d      	ldr	r3, [pc, #52]	; (800f5c8 <tcp_bind+0x134>)
 800f592:	681a      	ldr	r2, [r3, #0]
 800f594:	68fb      	ldr	r3, [r7, #12]
 800f596:	60da      	str	r2, [r3, #12]
 800f598:	4a0b      	ldr	r2, [pc, #44]	; (800f5c8 <tcp_bind+0x134>)
 800f59a:	68fb      	ldr	r3, [r7, #12]
 800f59c:	6013      	str	r3, [r2, #0]
 800f59e:	f005 ff71 	bl	8015484 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 800f5a2:	2300      	movs	r3, #0
}
 800f5a4:	4618      	mov	r0, r3
 800f5a6:	3720      	adds	r7, #32
 800f5a8:	46bd      	mov	sp, r7
 800f5aa:	bd80      	pop	{r7, pc}
 800f5ac:	08020718 	.word	0x08020718
 800f5b0:	0801e420 	.word	0x0801e420
 800f5b4:	0801e2a4 	.word	0x0801e2a4
 800f5b8:	0801e2c4 	.word	0x0801e2c4
 800f5bc:	0801e2f4 	.word	0x0801e2f4
 800f5c0:	0801e438 	.word	0x0801e438
 800f5c4:	080206e0 	.word	0x080206e0
 800f5c8:	20010c8c 	.word	0x20010c8c

0800f5cc <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800f5cc:	b580      	push	{r7, lr}
 800f5ce:	b084      	sub	sp, #16
 800f5d0:	af00      	add	r7, sp, #0
 800f5d2:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800f5d4:	687b      	ldr	r3, [r7, #4]
 800f5d6:	2b00      	cmp	r3, #0
 800f5d8:	d10a      	bne.n	800f5f0 <tcp_update_rcv_ann_wnd+0x24>
 800f5da:	f240 32a6 	movw	r2, #934	; 0x3a6
 800f5de:	4928      	ldr	r1, [pc, #160]	; (800f680 <tcp_update_rcv_ann_wnd+0xb4>)
 800f5e0:	4828      	ldr	r0, [pc, #160]	; (800f684 <tcp_update_rcv_ann_wnd+0xb8>)
 800f5e2:	f00b fd97 	bl	801b114 <trace_printf>
 800f5e6:	4928      	ldr	r1, [pc, #160]	; (800f688 <tcp_update_rcv_ann_wnd+0xbc>)
 800f5e8:	4828      	ldr	r0, [pc, #160]	; (800f68c <tcp_update_rcv_ann_wnd+0xc0>)
 800f5ea:	f00b fd93 	bl	801b114 <trace_printf>
 800f5ee:	e7fe      	b.n	800f5ee <tcp_update_rcv_ann_wnd+0x22>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800f5f0:	687b      	ldr	r3, [r7, #4]
 800f5f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f5f4:	687a      	ldr	r2, [r7, #4]
 800f5f6:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800f5f8:	4413      	add	r3, r2
 800f5fa:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800f5fc:	687b      	ldr	r3, [r7, #4]
 800f5fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f600:	687a      	ldr	r2, [r7, #4]
 800f602:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800f604:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800f608:	bf28      	it	cs
 800f60a:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800f60e:	b292      	uxth	r2, r2
 800f610:	4413      	add	r3, r2
 800f612:	68fa      	ldr	r2, [r7, #12]
 800f614:	1ad3      	subs	r3, r2, r3
 800f616:	2b00      	cmp	r3, #0
 800f618:	db08      	blt.n	800f62c <tcp_update_rcv_ann_wnd+0x60>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800f61a:	687b      	ldr	r3, [r7, #4]
 800f61c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f61e:	687b      	ldr	r3, [r7, #4]
 800f620:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800f622:	687b      	ldr	r3, [r7, #4]
 800f624:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f626:	68fa      	ldr	r2, [r7, #12]
 800f628:	1ad3      	subs	r3, r2, r3
 800f62a:	e024      	b.n	800f676 <tcp_update_rcv_ann_wnd+0xaa>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800f62c:	687b      	ldr	r3, [r7, #4]
 800f62e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f630:	687b      	ldr	r3, [r7, #4]
 800f632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f634:	1ad3      	subs	r3, r2, r3
 800f636:	2b00      	cmp	r3, #0
 800f638:	dd03      	ble.n	800f642 <tcp_update_rcv_ann_wnd+0x76>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800f63a:	687b      	ldr	r3, [r7, #4]
 800f63c:	2200      	movs	r2, #0
 800f63e:	855a      	strh	r2, [r3, #42]	; 0x2a
 800f640:	e018      	b.n	800f674 <tcp_update_rcv_ann_wnd+0xa8>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800f642:	687b      	ldr	r3, [r7, #4]
 800f644:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f646:	687b      	ldr	r3, [r7, #4]
 800f648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f64a:	1ad3      	subs	r3, r2, r3
 800f64c:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800f64e:	68bb      	ldr	r3, [r7, #8]
 800f650:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f654:	d30a      	bcc.n	800f66c <tcp_update_rcv_ann_wnd+0xa0>
 800f656:	f240 32b6 	movw	r2, #950	; 0x3b6
 800f65a:	490d      	ldr	r1, [pc, #52]	; (800f690 <tcp_update_rcv_ann_wnd+0xc4>)
 800f65c:	4809      	ldr	r0, [pc, #36]	; (800f684 <tcp_update_rcv_ann_wnd+0xb8>)
 800f65e:	f00b fd59 	bl	801b114 <trace_printf>
 800f662:	4909      	ldr	r1, [pc, #36]	; (800f688 <tcp_update_rcv_ann_wnd+0xbc>)
 800f664:	4809      	ldr	r0, [pc, #36]	; (800f68c <tcp_update_rcv_ann_wnd+0xc0>)
 800f666:	f00b fd55 	bl	801b114 <trace_printf>
 800f66a:	e7fe      	b.n	800f66a <tcp_update_rcv_ann_wnd+0x9e>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800f66c:	68bb      	ldr	r3, [r7, #8]
 800f66e:	b29a      	uxth	r2, r3
 800f670:	687b      	ldr	r3, [r7, #4]
 800f672:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800f674:	2300      	movs	r3, #0
  }
}
 800f676:	4618      	mov	r0, r3
 800f678:	3710      	adds	r7, #16
 800f67a:	46bd      	mov	sp, r7
 800f67c:	bd80      	pop	{r7, pc}
 800f67e:	bf00      	nop
 800f680:	0801e4e8 	.word	0x0801e4e8
 800f684:	0801e2a4 	.word	0x0801e2a4
 800f688:	0801e2c4 	.word	0x0801e2c4
 800f68c:	0801e2f4 	.word	0x0801e2f4
 800f690:	0801e50c 	.word	0x0801e50c

0800f694 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800f694:	b580      	push	{r7, lr}
 800f696:	b084      	sub	sp, #16
 800f698:	af00      	add	r7, sp, #0
 800f69a:	6078      	str	r0, [r7, #4]
 800f69c:	460b      	mov	r3, r1
 800f69e:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800f6a0:	687b      	ldr	r3, [r7, #4]
 800f6a2:	2b00      	cmp	r3, #0
 800f6a4:	d10a      	bne.n	800f6bc <tcp_recved+0x28>
 800f6a6:	f240 32cf 	movw	r2, #975	; 0x3cf
 800f6aa:	4921      	ldr	r1, [pc, #132]	; (800f730 <tcp_recved+0x9c>)
 800f6ac:	4821      	ldr	r0, [pc, #132]	; (800f734 <tcp_recved+0xa0>)
 800f6ae:	f00b fd31 	bl	801b114 <trace_printf>
 800f6b2:	4921      	ldr	r1, [pc, #132]	; (800f738 <tcp_recved+0xa4>)
 800f6b4:	4821      	ldr	r0, [pc, #132]	; (800f73c <tcp_recved+0xa8>)
 800f6b6:	f00b fd2d 	bl	801b114 <trace_printf>
 800f6ba:	e7fe      	b.n	800f6ba <tcp_recved+0x26>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800f6bc:	687b      	ldr	r3, [r7, #4]
 800f6be:	7d1b      	ldrb	r3, [r3, #20]
 800f6c0:	2b01      	cmp	r3, #1
 800f6c2:	d10a      	bne.n	800f6da <tcp_recved+0x46>
 800f6c4:	f240 32d2 	movw	r2, #978	; 0x3d2
 800f6c8:	491d      	ldr	r1, [pc, #116]	; (800f740 <tcp_recved+0xac>)
 800f6ca:	481a      	ldr	r0, [pc, #104]	; (800f734 <tcp_recved+0xa0>)
 800f6cc:	f00b fd22 	bl	801b114 <trace_printf>
 800f6d0:	4919      	ldr	r1, [pc, #100]	; (800f738 <tcp_recved+0xa4>)
 800f6d2:	481a      	ldr	r0, [pc, #104]	; (800f73c <tcp_recved+0xa8>)
 800f6d4:	f00b fd1e 	bl	801b114 <trace_printf>
 800f6d8:	e7fe      	b.n	800f6d8 <tcp_recved+0x44>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800f6da:	687b      	ldr	r3, [r7, #4]
 800f6dc:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f6de:	887b      	ldrh	r3, [r7, #2]
 800f6e0:	4413      	add	r3, r2
 800f6e2:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800f6e4:	89fb      	ldrh	r3, [r7, #14]
 800f6e6:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800f6ea:	d804      	bhi.n	800f6f6 <tcp_recved+0x62>
 800f6ec:	687b      	ldr	r3, [r7, #4]
 800f6ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f6f0:	89fa      	ldrh	r2, [r7, #14]
 800f6f2:	429a      	cmp	r2, r3
 800f6f4:	d204      	bcs.n	800f700 <tcp_recved+0x6c>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800f6f6:	687b      	ldr	r3, [r7, #4]
 800f6f8:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800f6fc:	851a      	strh	r2, [r3, #40]	; 0x28
 800f6fe:	e002      	b.n	800f706 <tcp_recved+0x72>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800f700:	687b      	ldr	r3, [r7, #4]
 800f702:	89fa      	ldrh	r2, [r7, #14]
 800f704:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800f706:	6878      	ldr	r0, [r7, #4]
 800f708:	f7ff ff60 	bl	800f5cc <tcp_update_rcv_ann_wnd>
 800f70c:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800f70e:	68bb      	ldr	r3, [r7, #8]
 800f710:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800f714:	d309      	bcc.n	800f72a <tcp_recved+0x96>
    tcp_ack_now(pcb);
 800f716:	687b      	ldr	r3, [r7, #4]
 800f718:	8b5b      	ldrh	r3, [r3, #26]
 800f71a:	f043 0302 	orr.w	r3, r3, #2
 800f71e:	b29a      	uxth	r2, r3
 800f720:	687b      	ldr	r3, [r7, #4]
 800f722:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800f724:	6878      	ldr	r0, [r7, #4]
 800f726:	f004 fe9b 	bl	8014460 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800f72a:	3710      	adds	r7, #16
 800f72c:	46bd      	mov	sp, r7
 800f72e:	bd80      	pop	{r7, pc}
 800f730:	0801e528 	.word	0x0801e528
 800f734:	0801e2a4 	.word	0x0801e2a4
 800f738:	0801e2c4 	.word	0x0801e2c4
 800f73c:	0801e2f4 	.word	0x0801e2f4
 800f740:	0801e540 	.word	0x0801e540

0800f744 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800f744:	b480      	push	{r7}
 800f746:	b083      	sub	sp, #12
 800f748:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800f74a:	2300      	movs	r3, #0
 800f74c:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 800f74e:	4b1e      	ldr	r3, [pc, #120]	; (800f7c8 <tcp_new_port+0x84>)
 800f750:	881b      	ldrh	r3, [r3, #0]
 800f752:	3301      	adds	r3, #1
 800f754:	b29a      	uxth	r2, r3
 800f756:	4b1c      	ldr	r3, [pc, #112]	; (800f7c8 <tcp_new_port+0x84>)
 800f758:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800f75a:	4b1b      	ldr	r3, [pc, #108]	; (800f7c8 <tcp_new_port+0x84>)
 800f75c:	881b      	ldrh	r3, [r3, #0]
 800f75e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f762:	4293      	cmp	r3, r2
 800f764:	d103      	bne.n	800f76e <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800f766:	4b18      	ldr	r3, [pc, #96]	; (800f7c8 <tcp_new_port+0x84>)
 800f768:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800f76c:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800f76e:	2300      	movs	r3, #0
 800f770:	71fb      	strb	r3, [r7, #7]
 800f772:	e01e      	b.n	800f7b2 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800f774:	79fb      	ldrb	r3, [r7, #7]
 800f776:	4a15      	ldr	r2, [pc, #84]	; (800f7cc <tcp_new_port+0x88>)
 800f778:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f77c:	681b      	ldr	r3, [r3, #0]
 800f77e:	603b      	str	r3, [r7, #0]
 800f780:	e011      	b.n	800f7a6 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 800f782:	683b      	ldr	r3, [r7, #0]
 800f784:	8ada      	ldrh	r2, [r3, #22]
 800f786:	4b10      	ldr	r3, [pc, #64]	; (800f7c8 <tcp_new_port+0x84>)
 800f788:	881b      	ldrh	r3, [r3, #0]
 800f78a:	429a      	cmp	r2, r3
 800f78c:	d108      	bne.n	800f7a0 <tcp_new_port+0x5c>
        n++;
 800f78e:	88bb      	ldrh	r3, [r7, #4]
 800f790:	3301      	adds	r3, #1
 800f792:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800f794:	88bb      	ldrh	r3, [r7, #4]
 800f796:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f79a:	d3d8      	bcc.n	800f74e <tcp_new_port+0xa>
          return 0;
 800f79c:	2300      	movs	r3, #0
 800f79e:	e00d      	b.n	800f7bc <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800f7a0:	683b      	ldr	r3, [r7, #0]
 800f7a2:	68db      	ldr	r3, [r3, #12]
 800f7a4:	603b      	str	r3, [r7, #0]
 800f7a6:	683b      	ldr	r3, [r7, #0]
 800f7a8:	2b00      	cmp	r3, #0
 800f7aa:	d1ea      	bne.n	800f782 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800f7ac:	79fb      	ldrb	r3, [r7, #7]
 800f7ae:	3301      	adds	r3, #1
 800f7b0:	71fb      	strb	r3, [r7, #7]
 800f7b2:	79fb      	ldrb	r3, [r7, #7]
 800f7b4:	2b03      	cmp	r3, #3
 800f7b6:	d9dd      	bls.n	800f774 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800f7b8:	4b03      	ldr	r3, [pc, #12]	; (800f7c8 <tcp_new_port+0x84>)
 800f7ba:	881b      	ldrh	r3, [r3, #0]
}
 800f7bc:	4618      	mov	r0, r3
 800f7be:	370c      	adds	r7, #12
 800f7c0:	46bd      	mov	sp, r7
 800f7c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7c6:	4770      	bx	lr
 800f7c8:	20000014 	.word	0x20000014
 800f7cc:	080206e0 	.word	0x080206e0

0800f7d0 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800f7d0:	b5b0      	push	{r4, r5, r7, lr}
 800f7d2:	b090      	sub	sp, #64	; 0x40
 800f7d4:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800f7d6:	2300      	movs	r3, #0
 800f7d8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800f7dc:	4b9e      	ldr	r3, [pc, #632]	; (800fa58 <tcp_slowtmr+0x288>)
 800f7de:	681b      	ldr	r3, [r3, #0]
 800f7e0:	3301      	adds	r3, #1
 800f7e2:	4a9d      	ldr	r2, [pc, #628]	; (800fa58 <tcp_slowtmr+0x288>)
 800f7e4:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800f7e6:	4b9d      	ldr	r3, [pc, #628]	; (800fa5c <tcp_slowtmr+0x28c>)
 800f7e8:	781b      	ldrb	r3, [r3, #0]
 800f7ea:	3301      	adds	r3, #1
 800f7ec:	b2da      	uxtb	r2, r3
 800f7ee:	4b9b      	ldr	r3, [pc, #620]	; (800fa5c <tcp_slowtmr+0x28c>)
 800f7f0:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800f7f2:	2300      	movs	r3, #0
 800f7f4:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800f7f6:	4b9a      	ldr	r3, [pc, #616]	; (800fa60 <tcp_slowtmr+0x290>)
 800f7f8:	681b      	ldr	r3, [r3, #0]
 800f7fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800f7fc:	e2bd      	b.n	800fd7a <tcp_slowtmr+0x5aa>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800f7fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f800:	7d1b      	ldrb	r3, [r3, #20]
 800f802:	2b00      	cmp	r3, #0
 800f804:	d10a      	bne.n	800f81c <tcp_slowtmr+0x4c>
 800f806:	f240 42be 	movw	r2, #1214	; 0x4be
 800f80a:	4996      	ldr	r1, [pc, #600]	; (800fa64 <tcp_slowtmr+0x294>)
 800f80c:	4896      	ldr	r0, [pc, #600]	; (800fa68 <tcp_slowtmr+0x298>)
 800f80e:	f00b fc81 	bl	801b114 <trace_printf>
 800f812:	4996      	ldr	r1, [pc, #600]	; (800fa6c <tcp_slowtmr+0x29c>)
 800f814:	4896      	ldr	r0, [pc, #600]	; (800fa70 <tcp_slowtmr+0x2a0>)
 800f816:	f00b fc7d 	bl	801b114 <trace_printf>
 800f81a:	e7fe      	b.n	800f81a <tcp_slowtmr+0x4a>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800f81c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f81e:	7d1b      	ldrb	r3, [r3, #20]
 800f820:	2b01      	cmp	r3, #1
 800f822:	d10a      	bne.n	800f83a <tcp_slowtmr+0x6a>
 800f824:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800f828:	4992      	ldr	r1, [pc, #584]	; (800fa74 <tcp_slowtmr+0x2a4>)
 800f82a:	488f      	ldr	r0, [pc, #572]	; (800fa68 <tcp_slowtmr+0x298>)
 800f82c:	f00b fc72 	bl	801b114 <trace_printf>
 800f830:	498e      	ldr	r1, [pc, #568]	; (800fa6c <tcp_slowtmr+0x29c>)
 800f832:	488f      	ldr	r0, [pc, #572]	; (800fa70 <tcp_slowtmr+0x2a0>)
 800f834:	f00b fc6e 	bl	801b114 <trace_printf>
 800f838:	e7fe      	b.n	800f838 <tcp_slowtmr+0x68>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800f83a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f83c:	7d1b      	ldrb	r3, [r3, #20]
 800f83e:	2b0a      	cmp	r3, #10
 800f840:	d10a      	bne.n	800f858 <tcp_slowtmr+0x88>
 800f842:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800f846:	498c      	ldr	r1, [pc, #560]	; (800fa78 <tcp_slowtmr+0x2a8>)
 800f848:	4887      	ldr	r0, [pc, #540]	; (800fa68 <tcp_slowtmr+0x298>)
 800f84a:	f00b fc63 	bl	801b114 <trace_printf>
 800f84e:	4987      	ldr	r1, [pc, #540]	; (800fa6c <tcp_slowtmr+0x29c>)
 800f850:	4887      	ldr	r0, [pc, #540]	; (800fa70 <tcp_slowtmr+0x2a0>)
 800f852:	f00b fc5f 	bl	801b114 <trace_printf>
 800f856:	e7fe      	b.n	800f856 <tcp_slowtmr+0x86>
    if (pcb->last_timer == tcp_timer_ctr) {
 800f858:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f85a:	7f9a      	ldrb	r2, [r3, #30]
 800f85c:	4b7f      	ldr	r3, [pc, #508]	; (800fa5c <tcp_slowtmr+0x28c>)
 800f85e:	781b      	ldrb	r3, [r3, #0]
 800f860:	429a      	cmp	r2, r3
 800f862:	d105      	bne.n	800f870 <tcp_slowtmr+0xa0>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800f864:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f866:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800f868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f86a:	68db      	ldr	r3, [r3, #12]
 800f86c:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800f86e:	e284      	b.n	800fd7a <tcp_slowtmr+0x5aa>
    }
    pcb->last_timer = tcp_timer_ctr;
 800f870:	4b7a      	ldr	r3, [pc, #488]	; (800fa5c <tcp_slowtmr+0x28c>)
 800f872:	781a      	ldrb	r2, [r3, #0]
 800f874:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f876:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800f878:	2300      	movs	r3, #0
 800f87a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800f87e:	2300      	movs	r3, #0
 800f880:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800f884:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f886:	7d1b      	ldrb	r3, [r3, #20]
 800f888:	2b02      	cmp	r3, #2
 800f88a:	d10a      	bne.n	800f8a2 <tcp_slowtmr+0xd2>
 800f88c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f88e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f892:	2b05      	cmp	r3, #5
 800f894:	d905      	bls.n	800f8a2 <tcp_slowtmr+0xd2>
      ++pcb_remove;
 800f896:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f89a:	3301      	adds	r3, #1
 800f89c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
 800f8a0:	e128      	b.n	800faf4 <tcp_slowtmr+0x324>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800f8a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8a4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f8a8:	2b0b      	cmp	r3, #11
 800f8aa:	d905      	bls.n	800f8b8 <tcp_slowtmr+0xe8>
      ++pcb_remove;
 800f8ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f8b0:	3301      	adds	r3, #1
 800f8b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f8b6:	e11d      	b.n	800faf4 <tcp_slowtmr+0x324>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800f8b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8ba:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800f8be:	2b00      	cmp	r3, #0
 800f8c0:	d07d      	beq.n	800f9be <tcp_slowtmr+0x1ee>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800f8c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f8c6:	2b00      	cmp	r3, #0
 800f8c8:	d00a      	beq.n	800f8e0 <tcp_slowtmr+0x110>
 800f8ca:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800f8ce:	496b      	ldr	r1, [pc, #428]	; (800fa7c <tcp_slowtmr+0x2ac>)
 800f8d0:	4865      	ldr	r0, [pc, #404]	; (800fa68 <tcp_slowtmr+0x298>)
 800f8d2:	f00b fc1f 	bl	801b114 <trace_printf>
 800f8d6:	4965      	ldr	r1, [pc, #404]	; (800fa6c <tcp_slowtmr+0x29c>)
 800f8d8:	4865      	ldr	r0, [pc, #404]	; (800fa70 <tcp_slowtmr+0x2a0>)
 800f8da:	f00b fc1b 	bl	801b114 <trace_printf>
 800f8de:	e7fe      	b.n	800f8de <tcp_slowtmr+0x10e>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800f8e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f8e4:	2b00      	cmp	r3, #0
 800f8e6:	d10a      	bne.n	800f8fe <tcp_slowtmr+0x12e>
 800f8e8:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800f8ec:	4964      	ldr	r1, [pc, #400]	; (800fa80 <tcp_slowtmr+0x2b0>)
 800f8ee:	485e      	ldr	r0, [pc, #376]	; (800fa68 <tcp_slowtmr+0x298>)
 800f8f0:	f00b fc10 	bl	801b114 <trace_printf>
 800f8f4:	495d      	ldr	r1, [pc, #372]	; (800fa6c <tcp_slowtmr+0x29c>)
 800f8f6:	485e      	ldr	r0, [pc, #376]	; (800fa70 <tcp_slowtmr+0x2a0>)
 800f8f8:	f00b fc0c 	bl	801b114 <trace_printf>
 800f8fc:	e7fe      	b.n	800f8fc <tcp_slowtmr+0x12c>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800f8fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f900:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800f904:	2b0b      	cmp	r3, #11
 800f906:	d905      	bls.n	800f914 <tcp_slowtmr+0x144>
          ++pcb_remove; /* max probes reached */
 800f908:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f90c:	3301      	adds	r3, #1
 800f90e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f912:	e0ef      	b.n	800faf4 <tcp_slowtmr+0x324>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800f914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f916:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800f91a:	3b01      	subs	r3, #1
 800f91c:	4a59      	ldr	r2, [pc, #356]	; (800fa84 <tcp_slowtmr+0x2b4>)
 800f91e:	5cd3      	ldrb	r3, [r2, r3]
 800f920:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800f922:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f924:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800f928:	7c7a      	ldrb	r2, [r7, #17]
 800f92a:	429a      	cmp	r2, r3
 800f92c:	d907      	bls.n	800f93e <tcp_slowtmr+0x16e>
            pcb->persist_cnt++;
 800f92e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f930:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800f934:	3301      	adds	r3, #1
 800f936:	b2da      	uxtb	r2, r3
 800f938:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f93a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800f93e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f940:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800f944:	7c7a      	ldrb	r2, [r7, #17]
 800f946:	429a      	cmp	r2, r3
 800f948:	f200 80d4 	bhi.w	800faf4 <tcp_slowtmr+0x324>
            int next_slot = 1; /* increment timer to next slot */
 800f94c:	2301      	movs	r3, #1
 800f94e:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800f950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f952:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f956:	2b00      	cmp	r3, #0
 800f958:	d108      	bne.n	800f96c <tcp_slowtmr+0x19c>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800f95a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f95c:	f005 fcbe 	bl	80152dc <tcp_zero_window_probe>
 800f960:	4603      	mov	r3, r0
 800f962:	2b00      	cmp	r3, #0
 800f964:	d014      	beq.n	800f990 <tcp_slowtmr+0x1c0>
                next_slot = 0; /* try probe again with current slot */
 800f966:	2300      	movs	r3, #0
 800f968:	623b      	str	r3, [r7, #32]
 800f96a:	e011      	b.n	800f990 <tcp_slowtmr+0x1c0>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800f96c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f96e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f972:	4619      	mov	r1, r3
 800f974:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f976:	f004 fa9b 	bl	8013eb0 <tcp_split_unsent_seg>
 800f97a:	4603      	mov	r3, r0
 800f97c:	2b00      	cmp	r3, #0
 800f97e:	d107      	bne.n	800f990 <tcp_slowtmr+0x1c0>
                if (tcp_output(pcb) == ERR_OK) {
 800f980:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f982:	f004 fd6d 	bl	8014460 <tcp_output>
 800f986:	4603      	mov	r3, r0
 800f988:	2b00      	cmp	r3, #0
 800f98a:	d101      	bne.n	800f990 <tcp_slowtmr+0x1c0>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800f98c:	2300      	movs	r3, #0
 800f98e:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800f990:	6a3b      	ldr	r3, [r7, #32]
 800f992:	2b00      	cmp	r3, #0
 800f994:	f000 80ae 	beq.w	800faf4 <tcp_slowtmr+0x324>
              pcb->persist_cnt = 0;
 800f998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f99a:	2200      	movs	r2, #0
 800f99c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800f9a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9a2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800f9a6:	2b06      	cmp	r3, #6
 800f9a8:	f200 80a4 	bhi.w	800faf4 <tcp_slowtmr+0x324>
                pcb->persist_backoff++;
 800f9ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9ae:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800f9b2:	3301      	adds	r3, #1
 800f9b4:	b2da      	uxtb	r2, r3
 800f9b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9b8:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800f9bc:	e09a      	b.n	800faf4 <tcp_slowtmr+0x324>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800f9be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9c0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800f9c4:	2b00      	cmp	r3, #0
 800f9c6:	db0f      	blt.n	800f9e8 <tcp_slowtmr+0x218>
 800f9c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9ca:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800f9ce:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800f9d2:	4293      	cmp	r3, r2
 800f9d4:	d008      	beq.n	800f9e8 <tcp_slowtmr+0x218>
          ++pcb->rtime;
 800f9d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9d8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800f9dc:	b29b      	uxth	r3, r3
 800f9de:	3301      	adds	r3, #1
 800f9e0:	b29b      	uxth	r3, r3
 800f9e2:	b21a      	sxth	r2, r3
 800f9e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9e6:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800f9e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9ea:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800f9ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9f0:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800f9f4:	429a      	cmp	r2, r3
 800f9f6:	db7d      	blt.n	800faf4 <tcp_slowtmr+0x324>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800f9f8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f9fa:	f005 f855 	bl	8014aa8 <tcp_rexmit_rto_prepare>
 800f9fe:	4603      	mov	r3, r0
 800fa00:	2b00      	cmp	r3, #0
 800fa02:	d007      	beq.n	800fa14 <tcp_slowtmr+0x244>
 800fa04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fa08:	2b00      	cmp	r3, #0
 800fa0a:	d173      	bne.n	800faf4 <tcp_slowtmr+0x324>
 800fa0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fa10:	2b00      	cmp	r3, #0
 800fa12:	d06f      	beq.n	800faf4 <tcp_slowtmr+0x324>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800fa14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa16:	7d1b      	ldrb	r3, [r3, #20]
 800fa18:	2b02      	cmp	r3, #2
 800fa1a:	d03c      	beq.n	800fa96 <tcp_slowtmr+0x2c6>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800fa1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa1e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800fa22:	2b0c      	cmp	r3, #12
 800fa24:	bf28      	it	cs
 800fa26:	230c      	movcs	r3, #12
 800fa28:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800fa2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa2c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800fa30:	10db      	asrs	r3, r3, #3
 800fa32:	b21b      	sxth	r3, r3
 800fa34:	461a      	mov	r2, r3
 800fa36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa38:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800fa3c:	4413      	add	r3, r2
 800fa3e:	7efa      	ldrb	r2, [r7, #27]
 800fa40:	4911      	ldr	r1, [pc, #68]	; (800fa88 <tcp_slowtmr+0x2b8>)
 800fa42:	5c8a      	ldrb	r2, [r1, r2]
 800fa44:	4093      	lsls	r3, r2
 800fa46:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800fa48:	697b      	ldr	r3, [r7, #20]
 800fa4a:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800fa4e:	4293      	cmp	r3, r2
 800fa50:	dc1c      	bgt.n	800fa8c <tcp_slowtmr+0x2bc>
 800fa52:	697b      	ldr	r3, [r7, #20]
 800fa54:	b21a      	sxth	r2, r3
 800fa56:	e01b      	b.n	800fa90 <tcp_slowtmr+0x2c0>
 800fa58:	20010c84 	.word	0x20010c84
 800fa5c:	20009f8e 	.word	0x20009f8e
 800fa60:	20010c80 	.word	0x20010c80
 800fa64:	0801e5d0 	.word	0x0801e5d0
 800fa68:	0801e2a4 	.word	0x0801e2a4
 800fa6c:	0801e2c4 	.word	0x0801e2c4
 800fa70:	0801e2f4 	.word	0x0801e2f4
 800fa74:	0801e5fc 	.word	0x0801e5fc
 800fa78:	0801e628 	.word	0x0801e628
 800fa7c:	0801e658 	.word	0x0801e658
 800fa80:	0801e68c 	.word	0x0801e68c
 800fa84:	080206d8 	.word	0x080206d8
 800fa88:	080206c8 	.word	0x080206c8
 800fa8c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800fa90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa92:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800fa96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa98:	2200      	movs	r2, #0
 800fa9a:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800fa9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa9e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800faa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800faa4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800faa8:	4293      	cmp	r3, r2
 800faaa:	bf28      	it	cs
 800faac:	4613      	movcs	r3, r2
 800faae:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800fab0:	8a7b      	ldrh	r3, [r7, #18]
 800fab2:	085b      	lsrs	r3, r3, #1
 800fab4:	b29a      	uxth	r2, r3
 800fab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fab8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800fabc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fabe:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800fac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fac4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fac6:	005b      	lsls	r3, r3, #1
 800fac8:	b29b      	uxth	r3, r3
 800faca:	429a      	cmp	r2, r3
 800facc:	d206      	bcs.n	800fadc <tcp_slowtmr+0x30c>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800face:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fad0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fad2:	005b      	lsls	r3, r3, #1
 800fad4:	b29a      	uxth	r2, r3
 800fad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fad8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800fadc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fade:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800fae0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fae2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800fae6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fae8:	2200      	movs	r2, #0
 800faea:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800faee:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800faf0:	f005 f85a 	bl	8014ba8 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800faf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800faf6:	7d1b      	ldrb	r3, [r3, #20]
 800faf8:	2b06      	cmp	r3, #6
 800fafa:	d111      	bne.n	800fb20 <tcp_slowtmr+0x350>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800fafc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fafe:	8b5b      	ldrh	r3, [r3, #26]
 800fb00:	f003 0310 	and.w	r3, r3, #16
 800fb04:	2b00      	cmp	r3, #0
 800fb06:	d00b      	beq.n	800fb20 <tcp_slowtmr+0x350>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800fb08:	4ba1      	ldr	r3, [pc, #644]	; (800fd90 <tcp_slowtmr+0x5c0>)
 800fb0a:	681a      	ldr	r2, [r3, #0]
 800fb0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb0e:	6a1b      	ldr	r3, [r3, #32]
 800fb10:	1ad3      	subs	r3, r2, r3
 800fb12:	2b28      	cmp	r3, #40	; 0x28
 800fb14:	d904      	bls.n	800fb20 <tcp_slowtmr+0x350>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800fb16:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fb1a:	3301      	adds	r3, #1
 800fb1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800fb20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb22:	7a5b      	ldrb	r3, [r3, #9]
 800fb24:	f003 0308 	and.w	r3, r3, #8
 800fb28:	2b00      	cmp	r3, #0
 800fb2a:	d04c      	beq.n	800fbc6 <tcp_slowtmr+0x3f6>
        ((pcb->state == ESTABLISHED) ||
 800fb2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb2e:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800fb30:	2b04      	cmp	r3, #4
 800fb32:	d003      	beq.n	800fb3c <tcp_slowtmr+0x36c>
         (pcb->state == CLOSE_WAIT))) {
 800fb34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb36:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800fb38:	2b07      	cmp	r3, #7
 800fb3a:	d144      	bne.n	800fbc6 <tcp_slowtmr+0x3f6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800fb3c:	4b94      	ldr	r3, [pc, #592]	; (800fd90 <tcp_slowtmr+0x5c0>)
 800fb3e:	681a      	ldr	r2, [r3, #0]
 800fb40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb42:	6a1b      	ldr	r3, [r3, #32]
 800fb44:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800fb46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb48:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800fb4c:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 800fb50:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 800fb54:	498f      	ldr	r1, [pc, #572]	; (800fd94 <tcp_slowtmr+0x5c4>)
 800fb56:	fba1 1303 	umull	r1, r3, r1, r3
 800fb5a:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800fb5c:	429a      	cmp	r2, r3
 800fb5e:	d90a      	bls.n	800fb76 <tcp_slowtmr+0x3a6>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800fb60:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fb64:	3301      	adds	r3, #1
 800fb66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800fb6a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800fb6e:	3301      	adds	r3, #1
 800fb70:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800fb74:	e027      	b.n	800fbc6 <tcp_slowtmr+0x3f6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800fb76:	4b86      	ldr	r3, [pc, #536]	; (800fd90 <tcp_slowtmr+0x5c0>)
 800fb78:	681a      	ldr	r2, [r3, #0]
 800fb7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb7c:	6a1b      	ldr	r3, [r3, #32]
 800fb7e:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800fb80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb82:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800fb86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb88:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800fb8c:	4618      	mov	r0, r3
 800fb8e:	4b82      	ldr	r3, [pc, #520]	; (800fd98 <tcp_slowtmr+0x5c8>)
 800fb90:	fb03 f300 	mul.w	r3, r3, r0
 800fb94:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800fb96:	497f      	ldr	r1, [pc, #508]	; (800fd94 <tcp_slowtmr+0x5c4>)
 800fb98:	fba1 1303 	umull	r1, r3, r1, r3
 800fb9c:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800fb9e:	429a      	cmp	r2, r3
 800fba0:	d911      	bls.n	800fbc6 <tcp_slowtmr+0x3f6>
        err = tcp_keepalive(pcb);
 800fba2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fba4:	f005 fb54 	bl	8015250 <tcp_keepalive>
 800fba8:	4603      	mov	r3, r0
 800fbaa:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800fbae:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800fbb2:	2b00      	cmp	r3, #0
 800fbb4:	d107      	bne.n	800fbc6 <tcp_slowtmr+0x3f6>
          pcb->keep_cnt_sent++;
 800fbb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbb8:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800fbbc:	3301      	adds	r3, #1
 800fbbe:	b2da      	uxtb	r2, r3
 800fbc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbc2:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800fbc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbc8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fbca:	2b00      	cmp	r3, #0
 800fbcc:	d011      	beq.n	800fbf2 <tcp_slowtmr+0x422>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800fbce:	4b70      	ldr	r3, [pc, #448]	; (800fd90 <tcp_slowtmr+0x5c0>)
 800fbd0:	681a      	ldr	r2, [r3, #0]
 800fbd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbd4:	6a1b      	ldr	r3, [r3, #32]
 800fbd6:	1ad2      	subs	r2, r2, r3
 800fbd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbda:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800fbde:	4619      	mov	r1, r3
 800fbe0:	460b      	mov	r3, r1
 800fbe2:	005b      	lsls	r3, r3, #1
 800fbe4:	440b      	add	r3, r1
 800fbe6:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800fbe8:	429a      	cmp	r2, r3
 800fbea:	d302      	bcc.n	800fbf2 <tcp_slowtmr+0x422>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800fbec:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fbee:	f000 ff45 	bl	8010a7c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800fbf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbf4:	7d1b      	ldrb	r3, [r3, #20]
 800fbf6:	2b03      	cmp	r3, #3
 800fbf8:	d10b      	bne.n	800fc12 <tcp_slowtmr+0x442>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800fbfa:	4b65      	ldr	r3, [pc, #404]	; (800fd90 <tcp_slowtmr+0x5c0>)
 800fbfc:	681a      	ldr	r2, [r3, #0]
 800fbfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc00:	6a1b      	ldr	r3, [r3, #32]
 800fc02:	1ad3      	subs	r3, r2, r3
 800fc04:	2b28      	cmp	r3, #40	; 0x28
 800fc06:	d904      	bls.n	800fc12 <tcp_slowtmr+0x442>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800fc08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fc0c:	3301      	adds	r3, #1
 800fc0e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800fc12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc14:	7d1b      	ldrb	r3, [r3, #20]
 800fc16:	2b09      	cmp	r3, #9
 800fc18:	d10b      	bne.n	800fc32 <tcp_slowtmr+0x462>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800fc1a:	4b5d      	ldr	r3, [pc, #372]	; (800fd90 <tcp_slowtmr+0x5c0>)
 800fc1c:	681a      	ldr	r2, [r3, #0]
 800fc1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc20:	6a1b      	ldr	r3, [r3, #32]
 800fc22:	1ad3      	subs	r3, r2, r3
 800fc24:	2bf0      	cmp	r3, #240	; 0xf0
 800fc26:	d904      	bls.n	800fc32 <tcp_slowtmr+0x462>
        ++pcb_remove;
 800fc28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fc2c:	3301      	adds	r3, #1
 800fc2e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800fc32:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fc36:	2b00      	cmp	r3, #0
 800fc38:	d068      	beq.n	800fd0c <tcp_slowtmr+0x53c>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800fc3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fc40:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800fc42:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fc44:	f000 fd38 	bl	80106b8 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800fc48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc4a:	2b00      	cmp	r3, #0
 800fc4c:	d014      	beq.n	800fc78 <tcp_slowtmr+0x4a8>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800fc4e:	4b53      	ldr	r3, [pc, #332]	; (800fd9c <tcp_slowtmr+0x5cc>)
 800fc50:	681b      	ldr	r3, [r3, #0]
 800fc52:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fc54:	429a      	cmp	r2, r3
 800fc56:	d10a      	bne.n	800fc6e <tcp_slowtmr+0x49e>
 800fc58:	f240 526d 	movw	r2, #1389	; 0x56d
 800fc5c:	4950      	ldr	r1, [pc, #320]	; (800fda0 <tcp_slowtmr+0x5d0>)
 800fc5e:	4851      	ldr	r0, [pc, #324]	; (800fda4 <tcp_slowtmr+0x5d4>)
 800fc60:	f00b fa58 	bl	801b114 <trace_printf>
 800fc64:	4950      	ldr	r1, [pc, #320]	; (800fda8 <tcp_slowtmr+0x5d8>)
 800fc66:	4851      	ldr	r0, [pc, #324]	; (800fdac <tcp_slowtmr+0x5dc>)
 800fc68:	f00b fa54 	bl	801b114 <trace_printf>
 800fc6c:	e7fe      	b.n	800fc6c <tcp_slowtmr+0x49c>
        prev->next = pcb->next;
 800fc6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc70:	68da      	ldr	r2, [r3, #12]
 800fc72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc74:	60da      	str	r2, [r3, #12]
 800fc76:	e013      	b.n	800fca0 <tcp_slowtmr+0x4d0>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800fc78:	4b48      	ldr	r3, [pc, #288]	; (800fd9c <tcp_slowtmr+0x5cc>)
 800fc7a:	681b      	ldr	r3, [r3, #0]
 800fc7c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fc7e:	429a      	cmp	r2, r3
 800fc80:	d00a      	beq.n	800fc98 <tcp_slowtmr+0x4c8>
 800fc82:	f240 5271 	movw	r2, #1393	; 0x571
 800fc86:	494a      	ldr	r1, [pc, #296]	; (800fdb0 <tcp_slowtmr+0x5e0>)
 800fc88:	4846      	ldr	r0, [pc, #280]	; (800fda4 <tcp_slowtmr+0x5d4>)
 800fc8a:	f00b fa43 	bl	801b114 <trace_printf>
 800fc8e:	4946      	ldr	r1, [pc, #280]	; (800fda8 <tcp_slowtmr+0x5d8>)
 800fc90:	4846      	ldr	r0, [pc, #280]	; (800fdac <tcp_slowtmr+0x5dc>)
 800fc92:	f00b fa3f 	bl	801b114 <trace_printf>
 800fc96:	e7fe      	b.n	800fc96 <tcp_slowtmr+0x4c6>
        tcp_active_pcbs = pcb->next;
 800fc98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc9a:	68db      	ldr	r3, [r3, #12]
 800fc9c:	4a3f      	ldr	r2, [pc, #252]	; (800fd9c <tcp_slowtmr+0x5cc>)
 800fc9e:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800fca0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800fca4:	2b00      	cmp	r3, #0
 800fca6:	d013      	beq.n	800fcd0 <tcp_slowtmr+0x500>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800fca8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fcaa:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800fcac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fcae:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800fcb0:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800fcb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fcb4:	3304      	adds	r3, #4
 800fcb6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fcb8:	8ad2      	ldrh	r2, [r2, #22]
 800fcba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800fcbc:	8b09      	ldrh	r1, [r1, #24]
 800fcbe:	9102      	str	r1, [sp, #8]
 800fcc0:	9201      	str	r2, [sp, #4]
 800fcc2:	9300      	str	r3, [sp, #0]
 800fcc4:	462b      	mov	r3, r5
 800fcc6:	4622      	mov	r2, r4
 800fcc8:	4601      	mov	r1, r0
 800fcca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fccc:	f005 f9fc 	bl	80150c8 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800fcd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fcd2:	691b      	ldr	r3, [r3, #16]
 800fcd4:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800fcd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fcd8:	7d1b      	ldrb	r3, [r3, #20]
 800fcda:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800fcdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fcde:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800fce0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fce2:	68db      	ldr	r3, [r3, #12]
 800fce4:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800fce6:	6838      	ldr	r0, [r7, #0]
 800fce8:	f7ff f84c 	bl	800ed84 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800fcec:	4b31      	ldr	r3, [pc, #196]	; (800fdb4 <tcp_slowtmr+0x5e4>)
 800fcee:	2200      	movs	r2, #0
 800fcf0:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800fcf2:	68fb      	ldr	r3, [r7, #12]
 800fcf4:	2b00      	cmp	r3, #0
 800fcf6:	d004      	beq.n	800fd02 <tcp_slowtmr+0x532>
 800fcf8:	68fb      	ldr	r3, [r7, #12]
 800fcfa:	f06f 010c 	mvn.w	r1, #12
 800fcfe:	68b8      	ldr	r0, [r7, #8]
 800fd00:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800fd02:	4b2c      	ldr	r3, [pc, #176]	; (800fdb4 <tcp_slowtmr+0x5e4>)
 800fd04:	781b      	ldrb	r3, [r3, #0]
 800fd06:	2b00      	cmp	r3, #0
 800fd08:	d037      	beq.n	800fd7a <tcp_slowtmr+0x5aa>
        goto tcp_slowtmr_start;
 800fd0a:	e572      	b.n	800f7f2 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800fd0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd0e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800fd10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd12:	68db      	ldr	r3, [r3, #12]
 800fd14:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800fd16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd18:	7f1b      	ldrb	r3, [r3, #28]
 800fd1a:	3301      	adds	r3, #1
 800fd1c:	b2da      	uxtb	r2, r3
 800fd1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd20:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800fd22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd24:	7f1a      	ldrb	r2, [r3, #28]
 800fd26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd28:	7f5b      	ldrb	r3, [r3, #29]
 800fd2a:	429a      	cmp	r2, r3
 800fd2c:	d325      	bcc.n	800fd7a <tcp_slowtmr+0x5aa>
        prev->polltmr = 0;
 800fd2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd30:	2200      	movs	r2, #0
 800fd32:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800fd34:	4b1f      	ldr	r3, [pc, #124]	; (800fdb4 <tcp_slowtmr+0x5e4>)
 800fd36:	2200      	movs	r2, #0
 800fd38:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800fd3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fd40:	2b00      	cmp	r3, #0
 800fd42:	d00b      	beq.n	800fd5c <tcp_slowtmr+0x58c>
 800fd44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd46:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fd4a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fd4c:	6912      	ldr	r2, [r2, #16]
 800fd4e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800fd50:	4610      	mov	r0, r2
 800fd52:	4798      	blx	r3
 800fd54:	4603      	mov	r3, r0
 800fd56:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800fd5a:	e002      	b.n	800fd62 <tcp_slowtmr+0x592>
 800fd5c:	2300      	movs	r3, #0
 800fd5e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800fd62:	4b14      	ldr	r3, [pc, #80]	; (800fdb4 <tcp_slowtmr+0x5e4>)
 800fd64:	781b      	ldrb	r3, [r3, #0]
 800fd66:	2b00      	cmp	r3, #0
 800fd68:	d000      	beq.n	800fd6c <tcp_slowtmr+0x59c>
          goto tcp_slowtmr_start;
 800fd6a:	e542      	b.n	800f7f2 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800fd6c:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800fd70:	2b00      	cmp	r3, #0
 800fd72:	d102      	bne.n	800fd7a <tcp_slowtmr+0x5aa>
          tcp_output(prev);
 800fd74:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fd76:	f004 fb73 	bl	8014460 <tcp_output>
  while (pcb != NULL) {
 800fd7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd7c:	2b00      	cmp	r3, #0
 800fd7e:	f47f ad3e 	bne.w	800f7fe <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800fd82:	2300      	movs	r3, #0
 800fd84:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800fd86:	4b0c      	ldr	r3, [pc, #48]	; (800fdb8 <tcp_slowtmr+0x5e8>)
 800fd88:	681b      	ldr	r3, [r3, #0]
 800fd8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800fd8c:	e075      	b.n	800fe7a <tcp_slowtmr+0x6aa>
 800fd8e:	bf00      	nop
 800fd90:	20010c84 	.word	0x20010c84
 800fd94:	10624dd3 	.word	0x10624dd3
 800fd98:	000124f8 	.word	0x000124f8
 800fd9c:	20010c80 	.word	0x20010c80
 800fda0:	0801e6c4 	.word	0x0801e6c4
 800fda4:	0801e2a4 	.word	0x0801e2a4
 800fda8:	0801e2c4 	.word	0x0801e2c4
 800fdac:	0801e2f4 	.word	0x0801e2f4
 800fdb0:	0801e6f0 	.word	0x0801e6f0
 800fdb4:	20010c7c 	.word	0x20010c7c
 800fdb8:	20010c90 	.word	0x20010c90
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800fdbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fdbe:	7d1b      	ldrb	r3, [r3, #20]
 800fdc0:	2b0a      	cmp	r3, #10
 800fdc2:	d00a      	beq.n	800fdda <tcp_slowtmr+0x60a>
 800fdc4:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800fdc8:	4930      	ldr	r1, [pc, #192]	; (800fe8c <tcp_slowtmr+0x6bc>)
 800fdca:	4831      	ldr	r0, [pc, #196]	; (800fe90 <tcp_slowtmr+0x6c0>)
 800fdcc:	f00b f9a2 	bl	801b114 <trace_printf>
 800fdd0:	4930      	ldr	r1, [pc, #192]	; (800fe94 <tcp_slowtmr+0x6c4>)
 800fdd2:	4831      	ldr	r0, [pc, #196]	; (800fe98 <tcp_slowtmr+0x6c8>)
 800fdd4:	f00b f99e 	bl	801b114 <trace_printf>
 800fdd8:	e7fe      	b.n	800fdd8 <tcp_slowtmr+0x608>
    pcb_remove = 0;
 800fdda:	2300      	movs	r3, #0
 800fddc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800fde0:	4b2e      	ldr	r3, [pc, #184]	; (800fe9c <tcp_slowtmr+0x6cc>)
 800fde2:	681a      	ldr	r2, [r3, #0]
 800fde4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fde6:	6a1b      	ldr	r3, [r3, #32]
 800fde8:	1ad3      	subs	r3, r2, r3
 800fdea:	2bf0      	cmp	r3, #240	; 0xf0
 800fdec:	d904      	bls.n	800fdf8 <tcp_slowtmr+0x628>
      ++pcb_remove;
 800fdee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fdf2:	3301      	adds	r3, #1
 800fdf4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800fdf8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fdfc:	2b00      	cmp	r3, #0
 800fdfe:	d037      	beq.n	800fe70 <tcp_slowtmr+0x6a0>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800fe00:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fe02:	f000 fc59 	bl	80106b8 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800fe06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe08:	2b00      	cmp	r3, #0
 800fe0a:	d014      	beq.n	800fe36 <tcp_slowtmr+0x666>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800fe0c:	4b24      	ldr	r3, [pc, #144]	; (800fea0 <tcp_slowtmr+0x6d0>)
 800fe0e:	681b      	ldr	r3, [r3, #0]
 800fe10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fe12:	429a      	cmp	r2, r3
 800fe14:	d10a      	bne.n	800fe2c <tcp_slowtmr+0x65c>
 800fe16:	f240 52af 	movw	r2, #1455	; 0x5af
 800fe1a:	4922      	ldr	r1, [pc, #136]	; (800fea4 <tcp_slowtmr+0x6d4>)
 800fe1c:	481c      	ldr	r0, [pc, #112]	; (800fe90 <tcp_slowtmr+0x6c0>)
 800fe1e:	f00b f979 	bl	801b114 <trace_printf>
 800fe22:	491c      	ldr	r1, [pc, #112]	; (800fe94 <tcp_slowtmr+0x6c4>)
 800fe24:	481c      	ldr	r0, [pc, #112]	; (800fe98 <tcp_slowtmr+0x6c8>)
 800fe26:	f00b f975 	bl	801b114 <trace_printf>
 800fe2a:	e7fe      	b.n	800fe2a <tcp_slowtmr+0x65a>
        prev->next = pcb->next;
 800fe2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe2e:	68da      	ldr	r2, [r3, #12]
 800fe30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe32:	60da      	str	r2, [r3, #12]
 800fe34:	e013      	b.n	800fe5e <tcp_slowtmr+0x68e>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800fe36:	4b1a      	ldr	r3, [pc, #104]	; (800fea0 <tcp_slowtmr+0x6d0>)
 800fe38:	681b      	ldr	r3, [r3, #0]
 800fe3a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fe3c:	429a      	cmp	r2, r3
 800fe3e:	d00a      	beq.n	800fe56 <tcp_slowtmr+0x686>
 800fe40:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800fe44:	4918      	ldr	r1, [pc, #96]	; (800fea8 <tcp_slowtmr+0x6d8>)
 800fe46:	4812      	ldr	r0, [pc, #72]	; (800fe90 <tcp_slowtmr+0x6c0>)
 800fe48:	f00b f964 	bl	801b114 <trace_printf>
 800fe4c:	4911      	ldr	r1, [pc, #68]	; (800fe94 <tcp_slowtmr+0x6c4>)
 800fe4e:	4812      	ldr	r0, [pc, #72]	; (800fe98 <tcp_slowtmr+0x6c8>)
 800fe50:	f00b f960 	bl	801b114 <trace_printf>
 800fe54:	e7fe      	b.n	800fe54 <tcp_slowtmr+0x684>
        tcp_tw_pcbs = pcb->next;
 800fe56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe58:	68db      	ldr	r3, [r3, #12]
 800fe5a:	4a11      	ldr	r2, [pc, #68]	; (800fea0 <tcp_slowtmr+0x6d0>)
 800fe5c:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800fe5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe60:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800fe62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe64:	68db      	ldr	r3, [r3, #12]
 800fe66:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800fe68:	69f8      	ldr	r0, [r7, #28]
 800fe6a:	f7fe ff8b 	bl	800ed84 <tcp_free>
 800fe6e:	e004      	b.n	800fe7a <tcp_slowtmr+0x6aa>
    } else {
      prev = pcb;
 800fe70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe72:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800fe74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe76:	68db      	ldr	r3, [r3, #12]
 800fe78:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800fe7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe7c:	2b00      	cmp	r3, #0
 800fe7e:	d19d      	bne.n	800fdbc <tcp_slowtmr+0x5ec>
    }
  }
}
 800fe80:	bf00      	nop
 800fe82:	bf00      	nop
 800fe84:	3730      	adds	r7, #48	; 0x30
 800fe86:	46bd      	mov	sp, r7
 800fe88:	bdb0      	pop	{r4, r5, r7, pc}
 800fe8a:	bf00      	nop
 800fe8c:	0801e71c 	.word	0x0801e71c
 800fe90:	0801e2a4 	.word	0x0801e2a4
 800fe94:	0801e2c4 	.word	0x0801e2c4
 800fe98:	0801e2f4 	.word	0x0801e2f4
 800fe9c:	20010c84 	.word	0x20010c84
 800fea0:	20010c90 	.word	0x20010c90
 800fea4:	0801e74c 	.word	0x0801e74c
 800fea8:	0801e774 	.word	0x0801e774

0800feac <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800feac:	b580      	push	{r7, lr}
 800feae:	b082      	sub	sp, #8
 800feb0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800feb2:	4b2d      	ldr	r3, [pc, #180]	; (800ff68 <tcp_fasttmr+0xbc>)
 800feb4:	781b      	ldrb	r3, [r3, #0]
 800feb6:	3301      	adds	r3, #1
 800feb8:	b2da      	uxtb	r2, r3
 800feba:	4b2b      	ldr	r3, [pc, #172]	; (800ff68 <tcp_fasttmr+0xbc>)
 800febc:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800febe:	4b2b      	ldr	r3, [pc, #172]	; (800ff6c <tcp_fasttmr+0xc0>)
 800fec0:	681b      	ldr	r3, [r3, #0]
 800fec2:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800fec4:	e048      	b.n	800ff58 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800fec6:	687b      	ldr	r3, [r7, #4]
 800fec8:	7f9a      	ldrb	r2, [r3, #30]
 800feca:	4b27      	ldr	r3, [pc, #156]	; (800ff68 <tcp_fasttmr+0xbc>)
 800fecc:	781b      	ldrb	r3, [r3, #0]
 800fece:	429a      	cmp	r2, r3
 800fed0:	d03f      	beq.n	800ff52 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800fed2:	4b25      	ldr	r3, [pc, #148]	; (800ff68 <tcp_fasttmr+0xbc>)
 800fed4:	781a      	ldrb	r2, [r3, #0]
 800fed6:	687b      	ldr	r3, [r7, #4]
 800fed8:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800feda:	687b      	ldr	r3, [r7, #4]
 800fedc:	8b5b      	ldrh	r3, [r3, #26]
 800fede:	f003 0301 	and.w	r3, r3, #1
 800fee2:	2b00      	cmp	r3, #0
 800fee4:	d010      	beq.n	800ff08 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800fee6:	687b      	ldr	r3, [r7, #4]
 800fee8:	8b5b      	ldrh	r3, [r3, #26]
 800feea:	f043 0302 	orr.w	r3, r3, #2
 800feee:	b29a      	uxth	r2, r3
 800fef0:	687b      	ldr	r3, [r7, #4]
 800fef2:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800fef4:	6878      	ldr	r0, [r7, #4]
 800fef6:	f004 fab3 	bl	8014460 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800fefa:	687b      	ldr	r3, [r7, #4]
 800fefc:	8b5b      	ldrh	r3, [r3, #26]
 800fefe:	f023 0303 	bic.w	r3, r3, #3
 800ff02:	b29a      	uxth	r2, r3
 800ff04:	687b      	ldr	r3, [r7, #4]
 800ff06:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800ff08:	687b      	ldr	r3, [r7, #4]
 800ff0a:	8b5b      	ldrh	r3, [r3, #26]
 800ff0c:	f003 0308 	and.w	r3, r3, #8
 800ff10:	2b00      	cmp	r3, #0
 800ff12:	d009      	beq.n	800ff28 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800ff14:	687b      	ldr	r3, [r7, #4]
 800ff16:	8b5b      	ldrh	r3, [r3, #26]
 800ff18:	f023 0308 	bic.w	r3, r3, #8
 800ff1c:	b29a      	uxth	r2, r3
 800ff1e:	687b      	ldr	r3, [r7, #4]
 800ff20:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800ff22:	6878      	ldr	r0, [r7, #4]
 800ff24:	f7ff f8e8 	bl	800f0f8 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800ff28:	687b      	ldr	r3, [r7, #4]
 800ff2a:	68db      	ldr	r3, [r3, #12]
 800ff2c:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800ff2e:	687b      	ldr	r3, [r7, #4]
 800ff30:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ff32:	2b00      	cmp	r3, #0
 800ff34:	d00a      	beq.n	800ff4c <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800ff36:	4b0e      	ldr	r3, [pc, #56]	; (800ff70 <tcp_fasttmr+0xc4>)
 800ff38:	2200      	movs	r2, #0
 800ff3a:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800ff3c:	6878      	ldr	r0, [r7, #4]
 800ff3e:	f000 f819 	bl	800ff74 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800ff42:	4b0b      	ldr	r3, [pc, #44]	; (800ff70 <tcp_fasttmr+0xc4>)
 800ff44:	781b      	ldrb	r3, [r3, #0]
 800ff46:	2b00      	cmp	r3, #0
 800ff48:	d000      	beq.n	800ff4c <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800ff4a:	e7b8      	b.n	800febe <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800ff4c:	683b      	ldr	r3, [r7, #0]
 800ff4e:	607b      	str	r3, [r7, #4]
 800ff50:	e002      	b.n	800ff58 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800ff52:	687b      	ldr	r3, [r7, #4]
 800ff54:	68db      	ldr	r3, [r3, #12]
 800ff56:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800ff58:	687b      	ldr	r3, [r7, #4]
 800ff5a:	2b00      	cmp	r3, #0
 800ff5c:	d1b3      	bne.n	800fec6 <tcp_fasttmr+0x1a>
    }
  }
}
 800ff5e:	bf00      	nop
 800ff60:	bf00      	nop
 800ff62:	3708      	adds	r7, #8
 800ff64:	46bd      	mov	sp, r7
 800ff66:	bd80      	pop	{r7, pc}
 800ff68:	20009f8e 	.word	0x20009f8e
 800ff6c:	20010c80 	.word	0x20010c80
 800ff70:	20010c7c 	.word	0x20010c7c

0800ff74 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800ff74:	b590      	push	{r4, r7, lr}
 800ff76:	b085      	sub	sp, #20
 800ff78:	af00      	add	r7, sp, #0
 800ff7a:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800ff7c:	687b      	ldr	r3, [r7, #4]
 800ff7e:	2b00      	cmp	r3, #0
 800ff80:	d10a      	bne.n	800ff98 <tcp_process_refused_data+0x24>
 800ff82:	f240 6209 	movw	r2, #1545	; 0x609
 800ff86:	4937      	ldr	r1, [pc, #220]	; (8010064 <tcp_process_refused_data+0xf0>)
 800ff88:	4837      	ldr	r0, [pc, #220]	; (8010068 <tcp_process_refused_data+0xf4>)
 800ff8a:	f00b f8c3 	bl	801b114 <trace_printf>
 800ff8e:	4937      	ldr	r1, [pc, #220]	; (801006c <tcp_process_refused_data+0xf8>)
 800ff90:	4837      	ldr	r0, [pc, #220]	; (8010070 <tcp_process_refused_data+0xfc>)
 800ff92:	f00b f8bf 	bl	801b114 <trace_printf>
 800ff96:	e7fe      	b.n	800ff96 <tcp_process_refused_data+0x22>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800ff98:	687b      	ldr	r3, [r7, #4]
 800ff9a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ff9c:	7b5b      	ldrb	r3, [r3, #13]
 800ff9e:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800ffa0:	687b      	ldr	r3, [r7, #4]
 800ffa2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ffa4:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800ffa6:	687b      	ldr	r3, [r7, #4]
 800ffa8:	2200      	movs	r2, #0
 800ffaa:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800ffac:	687b      	ldr	r3, [r7, #4]
 800ffae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ffb2:	2b00      	cmp	r3, #0
 800ffb4:	d00b      	beq.n	800ffce <tcp_process_refused_data+0x5a>
 800ffb6:	687b      	ldr	r3, [r7, #4]
 800ffb8:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800ffbc:	687b      	ldr	r3, [r7, #4]
 800ffbe:	6918      	ldr	r0, [r3, #16]
 800ffc0:	2300      	movs	r3, #0
 800ffc2:	68ba      	ldr	r2, [r7, #8]
 800ffc4:	6879      	ldr	r1, [r7, #4]
 800ffc6:	47a0      	blx	r4
 800ffc8:	4603      	mov	r3, r0
 800ffca:	73fb      	strb	r3, [r7, #15]
 800ffcc:	e007      	b.n	800ffde <tcp_process_refused_data+0x6a>
 800ffce:	2300      	movs	r3, #0
 800ffd0:	68ba      	ldr	r2, [r7, #8]
 800ffd2:	6879      	ldr	r1, [r7, #4]
 800ffd4:	2000      	movs	r0, #0
 800ffd6:	f000 f8ad 	bl	8010134 <tcp_recv_null>
 800ffda:	4603      	mov	r3, r0
 800ffdc:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800ffde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ffe2:	2b00      	cmp	r3, #0
 800ffe4:	d12a      	bne.n	801003c <tcp_process_refused_data+0xc8>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800ffe6:	7bbb      	ldrb	r3, [r7, #14]
 800ffe8:	f003 0320 	and.w	r3, r3, #32
 800ffec:	2b00      	cmp	r3, #0
 800ffee:	d033      	beq.n	8010058 <tcp_process_refused_data+0xe4>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800fff0:	687b      	ldr	r3, [r7, #4]
 800fff2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fff4:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800fff8:	d005      	beq.n	8010006 <tcp_process_refused_data+0x92>
          pcb->rcv_wnd++;
 800fffa:	687b      	ldr	r3, [r7, #4]
 800fffc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fffe:	3301      	adds	r3, #1
 8010000:	b29a      	uxth	r2, r3
 8010002:	687b      	ldr	r3, [r7, #4]
 8010004:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8010006:	687b      	ldr	r3, [r7, #4]
 8010008:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801000c:	2b00      	cmp	r3, #0
 801000e:	d00b      	beq.n	8010028 <tcp_process_refused_data+0xb4>
 8010010:	687b      	ldr	r3, [r7, #4]
 8010012:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8010016:	687b      	ldr	r3, [r7, #4]
 8010018:	6918      	ldr	r0, [r3, #16]
 801001a:	2300      	movs	r3, #0
 801001c:	2200      	movs	r2, #0
 801001e:	6879      	ldr	r1, [r7, #4]
 8010020:	47a0      	blx	r4
 8010022:	4603      	mov	r3, r0
 8010024:	73fb      	strb	r3, [r7, #15]
 8010026:	e001      	b.n	801002c <tcp_process_refused_data+0xb8>
 8010028:	2300      	movs	r3, #0
 801002a:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 801002c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010030:	f113 0f0d 	cmn.w	r3, #13
 8010034:	d110      	bne.n	8010058 <tcp_process_refused_data+0xe4>
          return ERR_ABRT;
 8010036:	f06f 030c 	mvn.w	r3, #12
 801003a:	e00e      	b.n	801005a <tcp_process_refused_data+0xe6>
        }
      }
    } else if (err == ERR_ABRT) {
 801003c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010040:	f113 0f0d 	cmn.w	r3, #13
 8010044:	d102      	bne.n	801004c <tcp_process_refused_data+0xd8>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8010046:	f06f 030c 	mvn.w	r3, #12
 801004a:	e006      	b.n	801005a <tcp_process_refused_data+0xe6>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 801004c:	687b      	ldr	r3, [r7, #4]
 801004e:	68ba      	ldr	r2, [r7, #8]
 8010050:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 8010052:	f06f 0304 	mvn.w	r3, #4
 8010056:	e000      	b.n	801005a <tcp_process_refused_data+0xe6>
    }
  }
  return ERR_OK;
 8010058:	2300      	movs	r3, #0
}
 801005a:	4618      	mov	r0, r3
 801005c:	3714      	adds	r7, #20
 801005e:	46bd      	mov	sp, r7
 8010060:	bd90      	pop	{r4, r7, pc}
 8010062:	bf00      	nop
 8010064:	0801e79c 	.word	0x0801e79c
 8010068:	0801e2a4 	.word	0x0801e2a4
 801006c:	0801e2c4 	.word	0x0801e2c4
 8010070:	0801e2f4 	.word	0x0801e2f4

08010074 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8010074:	b580      	push	{r7, lr}
 8010076:	b084      	sub	sp, #16
 8010078:	af00      	add	r7, sp, #0
 801007a:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 801007c:	e007      	b.n	801008e <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 801007e:	687b      	ldr	r3, [r7, #4]
 8010080:	681b      	ldr	r3, [r3, #0]
 8010082:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8010084:	6878      	ldr	r0, [r7, #4]
 8010086:	f000 f80a 	bl	801009e <tcp_seg_free>
    seg = next;
 801008a:	68fb      	ldr	r3, [r7, #12]
 801008c:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 801008e:	687b      	ldr	r3, [r7, #4]
 8010090:	2b00      	cmp	r3, #0
 8010092:	d1f4      	bne.n	801007e <tcp_segs_free+0xa>
  }
}
 8010094:	bf00      	nop
 8010096:	bf00      	nop
 8010098:	3710      	adds	r7, #16
 801009a:	46bd      	mov	sp, r7
 801009c:	bd80      	pop	{r7, pc}

0801009e <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 801009e:	b580      	push	{r7, lr}
 80100a0:	b082      	sub	sp, #8
 80100a2:	af00      	add	r7, sp, #0
 80100a4:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 80100a6:	687b      	ldr	r3, [r7, #4]
 80100a8:	2b00      	cmp	r3, #0
 80100aa:	d00c      	beq.n	80100c6 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 80100ac:	687b      	ldr	r3, [r7, #4]
 80100ae:	685b      	ldr	r3, [r3, #4]
 80100b0:	2b00      	cmp	r3, #0
 80100b2:	d004      	beq.n	80100be <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 80100b4:	687b      	ldr	r3, [r7, #4]
 80100b6:	685b      	ldr	r3, [r3, #4]
 80100b8:	4618      	mov	r0, r3
 80100ba:	f7fe fb59 	bl	800e770 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 80100be:	6879      	ldr	r1, [r7, #4]
 80100c0:	2003      	movs	r0, #3
 80100c2:	f7fd fc3b 	bl	800d93c <memp_free>
  }
}
 80100c6:	bf00      	nop
 80100c8:	3708      	adds	r7, #8
 80100ca:	46bd      	mov	sp, r7
 80100cc:	bd80      	pop	{r7, pc}
	...

080100d0 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 80100d0:	b580      	push	{r7, lr}
 80100d2:	b084      	sub	sp, #16
 80100d4:	af00      	add	r7, sp, #0
 80100d6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 80100d8:	687b      	ldr	r3, [r7, #4]
 80100da:	2b00      	cmp	r3, #0
 80100dc:	d10a      	bne.n	80100f4 <tcp_seg_copy+0x24>
 80100de:	f240 6282 	movw	r2, #1666	; 0x682
 80100e2:	4910      	ldr	r1, [pc, #64]	; (8010124 <tcp_seg_copy+0x54>)
 80100e4:	4810      	ldr	r0, [pc, #64]	; (8010128 <tcp_seg_copy+0x58>)
 80100e6:	f00b f815 	bl	801b114 <trace_printf>
 80100ea:	4910      	ldr	r1, [pc, #64]	; (801012c <tcp_seg_copy+0x5c>)
 80100ec:	4810      	ldr	r0, [pc, #64]	; (8010130 <tcp_seg_copy+0x60>)
 80100ee:	f00b f811 	bl	801b114 <trace_printf>
 80100f2:	e7fe      	b.n	80100f2 <tcp_seg_copy+0x22>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 80100f4:	2003      	movs	r0, #3
 80100f6:	f7fd fbbf 	bl	800d878 <memp_malloc>
 80100fa:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 80100fc:	68fb      	ldr	r3, [r7, #12]
 80100fe:	2b00      	cmp	r3, #0
 8010100:	d101      	bne.n	8010106 <tcp_seg_copy+0x36>
    return NULL;
 8010102:	2300      	movs	r3, #0
 8010104:	e00a      	b.n	801011c <tcp_seg_copy+0x4c>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8010106:	2214      	movs	r2, #20
 8010108:	6879      	ldr	r1, [r7, #4]
 801010a:	68f8      	ldr	r0, [r7, #12]
 801010c:	f00b f856 	bl	801b1bc <memcpy>
  pbuf_ref(cseg->p);
 8010110:	68fb      	ldr	r3, [r7, #12]
 8010112:	685b      	ldr	r3, [r3, #4]
 8010114:	4618      	mov	r0, r3
 8010116:	f7fe fbe3 	bl	800e8e0 <pbuf_ref>
  return cseg;
 801011a:	68fb      	ldr	r3, [r7, #12]
}
 801011c:	4618      	mov	r0, r3
 801011e:	3710      	adds	r7, #16
 8010120:	46bd      	mov	sp, r7
 8010122:	bd80      	pop	{r7, pc}
 8010124:	0801e7e0 	.word	0x0801e7e0
 8010128:	0801e2a4 	.word	0x0801e2a4
 801012c:	0801e2c4 	.word	0x0801e2c4
 8010130:	0801e2f4 	.word	0x0801e2f4

08010134 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8010134:	b580      	push	{r7, lr}
 8010136:	b084      	sub	sp, #16
 8010138:	af00      	add	r7, sp, #0
 801013a:	60f8      	str	r0, [r7, #12]
 801013c:	60b9      	str	r1, [r7, #8]
 801013e:	607a      	str	r2, [r7, #4]
 8010140:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8010142:	68bb      	ldr	r3, [r7, #8]
 8010144:	2b00      	cmp	r3, #0
 8010146:	d10a      	bne.n	801015e <tcp_recv_null+0x2a>
 8010148:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 801014c:	4911      	ldr	r1, [pc, #68]	; (8010194 <tcp_recv_null+0x60>)
 801014e:	4812      	ldr	r0, [pc, #72]	; (8010198 <tcp_recv_null+0x64>)
 8010150:	f00a ffe0 	bl	801b114 <trace_printf>
 8010154:	4911      	ldr	r1, [pc, #68]	; (801019c <tcp_recv_null+0x68>)
 8010156:	4812      	ldr	r0, [pc, #72]	; (80101a0 <tcp_recv_null+0x6c>)
 8010158:	f00a ffdc 	bl	801b114 <trace_printf>
 801015c:	e7fe      	b.n	801015c <tcp_recv_null+0x28>

  if (p != NULL) {
 801015e:	687b      	ldr	r3, [r7, #4]
 8010160:	2b00      	cmp	r3, #0
 8010162:	d009      	beq.n	8010178 <tcp_recv_null+0x44>
    tcp_recved(pcb, p->tot_len);
 8010164:	687b      	ldr	r3, [r7, #4]
 8010166:	891b      	ldrh	r3, [r3, #8]
 8010168:	4619      	mov	r1, r3
 801016a:	68b8      	ldr	r0, [r7, #8]
 801016c:	f7ff fa92 	bl	800f694 <tcp_recved>
    pbuf_free(p);
 8010170:	6878      	ldr	r0, [r7, #4]
 8010172:	f7fe fafd 	bl	800e770 <pbuf_free>
 8010176:	e008      	b.n	801018a <tcp_recv_null+0x56>
  } else if (err == ERR_OK) {
 8010178:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801017c:	2b00      	cmp	r3, #0
 801017e:	d104      	bne.n	801018a <tcp_recv_null+0x56>
    return tcp_close(pcb);
 8010180:	68b8      	ldr	r0, [r7, #8]
 8010182:	f7ff f829 	bl	800f1d8 <tcp_close>
 8010186:	4603      	mov	r3, r0
 8010188:	e000      	b.n	801018c <tcp_recv_null+0x58>
  }
  return ERR_OK;
 801018a:	2300      	movs	r3, #0
}
 801018c:	4618      	mov	r0, r3
 801018e:	3710      	adds	r7, #16
 8010190:	46bd      	mov	sp, r7
 8010192:	bd80      	pop	{r7, pc}
 8010194:	0801e7fc 	.word	0x0801e7fc
 8010198:	0801e2a4 	.word	0x0801e2a4
 801019c:	0801e2c4 	.word	0x0801e2c4
 80101a0:	0801e2f4 	.word	0x0801e2f4

080101a4 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 80101a4:	b580      	push	{r7, lr}
 80101a6:	b086      	sub	sp, #24
 80101a8:	af00      	add	r7, sp, #0
 80101aa:	4603      	mov	r3, r0
 80101ac:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 80101ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80101b2:	2b00      	cmp	r3, #0
 80101b4:	db01      	blt.n	80101ba <tcp_kill_prio+0x16>
 80101b6:	79fb      	ldrb	r3, [r7, #7]
 80101b8:	e000      	b.n	80101bc <tcp_kill_prio+0x18>
 80101ba:	237f      	movs	r3, #127	; 0x7f
 80101bc:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 80101be:	7afb      	ldrb	r3, [r7, #11]
 80101c0:	2b00      	cmp	r3, #0
 80101c2:	d034      	beq.n	801022e <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 80101c4:	7afb      	ldrb	r3, [r7, #11]
 80101c6:	3b01      	subs	r3, #1
 80101c8:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 80101ca:	2300      	movs	r3, #0
 80101cc:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80101ce:	2300      	movs	r3, #0
 80101d0:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80101d2:	4b19      	ldr	r3, [pc, #100]	; (8010238 <tcp_kill_prio+0x94>)
 80101d4:	681b      	ldr	r3, [r3, #0]
 80101d6:	617b      	str	r3, [r7, #20]
 80101d8:	e01f      	b.n	801021a <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 80101da:	697b      	ldr	r3, [r7, #20]
 80101dc:	7d5b      	ldrb	r3, [r3, #21]
 80101de:	7afa      	ldrb	r2, [r7, #11]
 80101e0:	429a      	cmp	r2, r3
 80101e2:	d80c      	bhi.n	80101fe <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 80101e4:	697b      	ldr	r3, [r7, #20]
 80101e6:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 80101e8:	7afa      	ldrb	r2, [r7, #11]
 80101ea:	429a      	cmp	r2, r3
 80101ec:	d112      	bne.n	8010214 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 80101ee:	4b13      	ldr	r3, [pc, #76]	; (801023c <tcp_kill_prio+0x98>)
 80101f0:	681a      	ldr	r2, [r3, #0]
 80101f2:	697b      	ldr	r3, [r7, #20]
 80101f4:	6a1b      	ldr	r3, [r3, #32]
 80101f6:	1ad3      	subs	r3, r2, r3
 80101f8:	68fa      	ldr	r2, [r7, #12]
 80101fa:	429a      	cmp	r2, r3
 80101fc:	d80a      	bhi.n	8010214 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 80101fe:	4b0f      	ldr	r3, [pc, #60]	; (801023c <tcp_kill_prio+0x98>)
 8010200:	681a      	ldr	r2, [r3, #0]
 8010202:	697b      	ldr	r3, [r7, #20]
 8010204:	6a1b      	ldr	r3, [r3, #32]
 8010206:	1ad3      	subs	r3, r2, r3
 8010208:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 801020a:	697b      	ldr	r3, [r7, #20]
 801020c:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 801020e:	697b      	ldr	r3, [r7, #20]
 8010210:	7d5b      	ldrb	r3, [r3, #21]
 8010212:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010214:	697b      	ldr	r3, [r7, #20]
 8010216:	68db      	ldr	r3, [r3, #12]
 8010218:	617b      	str	r3, [r7, #20]
 801021a:	697b      	ldr	r3, [r7, #20]
 801021c:	2b00      	cmp	r3, #0
 801021e:	d1dc      	bne.n	80101da <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8010220:	693b      	ldr	r3, [r7, #16]
 8010222:	2b00      	cmp	r3, #0
 8010224:	d004      	beq.n	8010230 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8010226:	6938      	ldr	r0, [r7, #16]
 8010228:	f7ff f928 	bl	800f47c <tcp_abort>
 801022c:	e000      	b.n	8010230 <tcp_kill_prio+0x8c>
    return;
 801022e:	bf00      	nop
  }
}
 8010230:	3718      	adds	r7, #24
 8010232:	46bd      	mov	sp, r7
 8010234:	bd80      	pop	{r7, pc}
 8010236:	bf00      	nop
 8010238:	20010c80 	.word	0x20010c80
 801023c:	20010c84 	.word	0x20010c84

08010240 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8010240:	b580      	push	{r7, lr}
 8010242:	b086      	sub	sp, #24
 8010244:	af00      	add	r7, sp, #0
 8010246:	4603      	mov	r3, r0
 8010248:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 801024a:	79fb      	ldrb	r3, [r7, #7]
 801024c:	2b08      	cmp	r3, #8
 801024e:	d00d      	beq.n	801026c <tcp_kill_state+0x2c>
 8010250:	79fb      	ldrb	r3, [r7, #7]
 8010252:	2b09      	cmp	r3, #9
 8010254:	d00a      	beq.n	801026c <tcp_kill_state+0x2c>
 8010256:	f240 62dd 	movw	r2, #1757	; 0x6dd
 801025a:	491b      	ldr	r1, [pc, #108]	; (80102c8 <tcp_kill_state+0x88>)
 801025c:	481b      	ldr	r0, [pc, #108]	; (80102cc <tcp_kill_state+0x8c>)
 801025e:	f00a ff59 	bl	801b114 <trace_printf>
 8010262:	491b      	ldr	r1, [pc, #108]	; (80102d0 <tcp_kill_state+0x90>)
 8010264:	481b      	ldr	r0, [pc, #108]	; (80102d4 <tcp_kill_state+0x94>)
 8010266:	f00a ff55 	bl	801b114 <trace_printf>
 801026a:	e7fe      	b.n	801026a <tcp_kill_state+0x2a>

  inactivity = 0;
 801026c:	2300      	movs	r3, #0
 801026e:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8010270:	2300      	movs	r3, #0
 8010272:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010274:	4b18      	ldr	r3, [pc, #96]	; (80102d8 <tcp_kill_state+0x98>)
 8010276:	681b      	ldr	r3, [r3, #0]
 8010278:	617b      	str	r3, [r7, #20]
 801027a:	e017      	b.n	80102ac <tcp_kill_state+0x6c>
    if (pcb->state == state) {
 801027c:	697b      	ldr	r3, [r7, #20]
 801027e:	7d1b      	ldrb	r3, [r3, #20]
 8010280:	79fa      	ldrb	r2, [r7, #7]
 8010282:	429a      	cmp	r2, r3
 8010284:	d10f      	bne.n	80102a6 <tcp_kill_state+0x66>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8010286:	4b15      	ldr	r3, [pc, #84]	; (80102dc <tcp_kill_state+0x9c>)
 8010288:	681a      	ldr	r2, [r3, #0]
 801028a:	697b      	ldr	r3, [r7, #20]
 801028c:	6a1b      	ldr	r3, [r3, #32]
 801028e:	1ad3      	subs	r3, r2, r3
 8010290:	68fa      	ldr	r2, [r7, #12]
 8010292:	429a      	cmp	r2, r3
 8010294:	d807      	bhi.n	80102a6 <tcp_kill_state+0x66>
        inactivity = tcp_ticks - pcb->tmr;
 8010296:	4b11      	ldr	r3, [pc, #68]	; (80102dc <tcp_kill_state+0x9c>)
 8010298:	681a      	ldr	r2, [r3, #0]
 801029a:	697b      	ldr	r3, [r7, #20]
 801029c:	6a1b      	ldr	r3, [r3, #32]
 801029e:	1ad3      	subs	r3, r2, r3
 80102a0:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 80102a2:	697b      	ldr	r3, [r7, #20]
 80102a4:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80102a6:	697b      	ldr	r3, [r7, #20]
 80102a8:	68db      	ldr	r3, [r3, #12]
 80102aa:	617b      	str	r3, [r7, #20]
 80102ac:	697b      	ldr	r3, [r7, #20]
 80102ae:	2b00      	cmp	r3, #0
 80102b0:	d1e4      	bne.n	801027c <tcp_kill_state+0x3c>
      }
    }
  }
  if (inactive != NULL) {
 80102b2:	693b      	ldr	r3, [r7, #16]
 80102b4:	2b00      	cmp	r3, #0
 80102b6:	d003      	beq.n	80102c0 <tcp_kill_state+0x80>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 80102b8:	2100      	movs	r1, #0
 80102ba:	6938      	ldr	r0, [r7, #16]
 80102bc:	f7ff f818 	bl	800f2f0 <tcp_abandon>
  }
}
 80102c0:	bf00      	nop
 80102c2:	3718      	adds	r7, #24
 80102c4:	46bd      	mov	sp, r7
 80102c6:	bd80      	pop	{r7, pc}
 80102c8:	0801e818 	.word	0x0801e818
 80102cc:	0801e2a4 	.word	0x0801e2a4
 80102d0:	0801e2c4 	.word	0x0801e2c4
 80102d4:	0801e2f4 	.word	0x0801e2f4
 80102d8:	20010c80 	.word	0x20010c80
 80102dc:	20010c84 	.word	0x20010c84

080102e0 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 80102e0:	b580      	push	{r7, lr}
 80102e2:	b084      	sub	sp, #16
 80102e4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 80102e6:	2300      	movs	r3, #0
 80102e8:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 80102ea:	2300      	movs	r3, #0
 80102ec:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80102ee:	4b12      	ldr	r3, [pc, #72]	; (8010338 <tcp_kill_timewait+0x58>)
 80102f0:	681b      	ldr	r3, [r3, #0]
 80102f2:	60fb      	str	r3, [r7, #12]
 80102f4:	e012      	b.n	801031c <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80102f6:	4b11      	ldr	r3, [pc, #68]	; (801033c <tcp_kill_timewait+0x5c>)
 80102f8:	681a      	ldr	r2, [r3, #0]
 80102fa:	68fb      	ldr	r3, [r7, #12]
 80102fc:	6a1b      	ldr	r3, [r3, #32]
 80102fe:	1ad3      	subs	r3, r2, r3
 8010300:	687a      	ldr	r2, [r7, #4]
 8010302:	429a      	cmp	r2, r3
 8010304:	d807      	bhi.n	8010316 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8010306:	4b0d      	ldr	r3, [pc, #52]	; (801033c <tcp_kill_timewait+0x5c>)
 8010308:	681a      	ldr	r2, [r3, #0]
 801030a:	68fb      	ldr	r3, [r7, #12]
 801030c:	6a1b      	ldr	r3, [r3, #32]
 801030e:	1ad3      	subs	r3, r2, r3
 8010310:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8010312:	68fb      	ldr	r3, [r7, #12]
 8010314:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8010316:	68fb      	ldr	r3, [r7, #12]
 8010318:	68db      	ldr	r3, [r3, #12]
 801031a:	60fb      	str	r3, [r7, #12]
 801031c:	68fb      	ldr	r3, [r7, #12]
 801031e:	2b00      	cmp	r3, #0
 8010320:	d1e9      	bne.n	80102f6 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8010322:	68bb      	ldr	r3, [r7, #8]
 8010324:	2b00      	cmp	r3, #0
 8010326:	d002      	beq.n	801032e <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8010328:	68b8      	ldr	r0, [r7, #8]
 801032a:	f7ff f8a7 	bl	800f47c <tcp_abort>
  }
}
 801032e:	bf00      	nop
 8010330:	3710      	adds	r7, #16
 8010332:	46bd      	mov	sp, r7
 8010334:	bd80      	pop	{r7, pc}
 8010336:	bf00      	nop
 8010338:	20010c90 	.word	0x20010c90
 801033c:	20010c84 	.word	0x20010c84

08010340 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8010340:	b580      	push	{r7, lr}
 8010342:	b082      	sub	sp, #8
 8010344:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8010346:	4b10      	ldr	r3, [pc, #64]	; (8010388 <tcp_handle_closepend+0x48>)
 8010348:	681b      	ldr	r3, [r3, #0]
 801034a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 801034c:	e014      	b.n	8010378 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 801034e:	687b      	ldr	r3, [r7, #4]
 8010350:	68db      	ldr	r3, [r3, #12]
 8010352:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8010354:	687b      	ldr	r3, [r7, #4]
 8010356:	8b5b      	ldrh	r3, [r3, #26]
 8010358:	f003 0308 	and.w	r3, r3, #8
 801035c:	2b00      	cmp	r3, #0
 801035e:	d009      	beq.n	8010374 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8010360:	687b      	ldr	r3, [r7, #4]
 8010362:	8b5b      	ldrh	r3, [r3, #26]
 8010364:	f023 0308 	bic.w	r3, r3, #8
 8010368:	b29a      	uxth	r2, r3
 801036a:	687b      	ldr	r3, [r7, #4]
 801036c:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 801036e:	6878      	ldr	r0, [r7, #4]
 8010370:	f7fe fec2 	bl	800f0f8 <tcp_close_shutdown_fin>
    }
    pcb = next;
 8010374:	683b      	ldr	r3, [r7, #0]
 8010376:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8010378:	687b      	ldr	r3, [r7, #4]
 801037a:	2b00      	cmp	r3, #0
 801037c:	d1e7      	bne.n	801034e <tcp_handle_closepend+0xe>
  }
}
 801037e:	bf00      	nop
 8010380:	bf00      	nop
 8010382:	3708      	adds	r7, #8
 8010384:	46bd      	mov	sp, r7
 8010386:	bd80      	pop	{r7, pc}
 8010388:	20010c80 	.word	0x20010c80

0801038c <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 801038c:	b580      	push	{r7, lr}
 801038e:	b084      	sub	sp, #16
 8010390:	af00      	add	r7, sp, #0
 8010392:	4603      	mov	r3, r0
 8010394:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8010396:	2001      	movs	r0, #1
 8010398:	f7fd fa6e 	bl	800d878 <memp_malloc>
 801039c:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 801039e:	68fb      	ldr	r3, [r7, #12]
 80103a0:	2b00      	cmp	r3, #0
 80103a2:	d14e      	bne.n	8010442 <tcp_alloc+0xb6>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 80103a4:	f7ff ffcc 	bl	8010340 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 80103a8:	f7ff ff9a 	bl	80102e0 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80103ac:	2001      	movs	r0, #1
 80103ae:	f7fd fa63 	bl	800d878 <memp_malloc>
 80103b2:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 80103b4:	68fb      	ldr	r3, [r7, #12]
 80103b6:	2b00      	cmp	r3, #0
 80103b8:	d139      	bne.n	801042e <tcp_alloc+0xa2>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 80103ba:	2009      	movs	r0, #9
 80103bc:	f7ff ff40 	bl	8010240 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80103c0:	2001      	movs	r0, #1
 80103c2:	f7fd fa59 	bl	800d878 <memp_malloc>
 80103c6:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 80103c8:	68fb      	ldr	r3, [r7, #12]
 80103ca:	2b00      	cmp	r3, #0
 80103cc:	d125      	bne.n	801041a <tcp_alloc+0x8e>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 80103ce:	2008      	movs	r0, #8
 80103d0:	f7ff ff36 	bl	8010240 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80103d4:	2001      	movs	r0, #1
 80103d6:	f7fd fa4f 	bl	800d878 <memp_malloc>
 80103da:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 80103dc:	68fb      	ldr	r3, [r7, #12]
 80103de:	2b00      	cmp	r3, #0
 80103e0:	d111      	bne.n	8010406 <tcp_alloc+0x7a>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 80103e2:	79fb      	ldrb	r3, [r7, #7]
 80103e4:	4618      	mov	r0, r3
 80103e6:	f7ff fedd 	bl	80101a4 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80103ea:	2001      	movs	r0, #1
 80103ec:	f7fd fa44 	bl	800d878 <memp_malloc>
 80103f0:	60f8      	str	r0, [r7, #12]
          if (pcb != NULL) {
 80103f2:	68fb      	ldr	r3, [r7, #12]
 80103f4:	2b00      	cmp	r3, #0
 80103f6:	d006      	beq.n	8010406 <tcp_alloc+0x7a>
            /* adjust err stats: memp_malloc failed multiple times before */
            MEMP_STATS_DEC(err, MEMP_TCP_PCB);
 80103f8:	4b36      	ldr	r3, [pc, #216]	; (80104d4 <tcp_alloc+0x148>)
 80103fa:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80103fe:	889a      	ldrh	r2, [r3, #4]
 8010400:	3a01      	subs	r2, #1
 8010402:	b292      	uxth	r2, r2
 8010404:	809a      	strh	r2, [r3, #4]
          }
        }
        if (pcb != NULL) {
 8010406:	68fb      	ldr	r3, [r7, #12]
 8010408:	2b00      	cmp	r3, #0
 801040a:	d006      	beq.n	801041a <tcp_alloc+0x8e>
          /* adjust err stats: memp_malloc failed multiple times before */
          MEMP_STATS_DEC(err, MEMP_TCP_PCB);
 801040c:	4b31      	ldr	r3, [pc, #196]	; (80104d4 <tcp_alloc+0x148>)
 801040e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8010412:	889a      	ldrh	r2, [r3, #4]
 8010414:	3a01      	subs	r2, #1
 8010416:	b292      	uxth	r2, r2
 8010418:	809a      	strh	r2, [r3, #4]
        }
      }
      if (pcb != NULL) {
 801041a:	68fb      	ldr	r3, [r7, #12]
 801041c:	2b00      	cmp	r3, #0
 801041e:	d006      	beq.n	801042e <tcp_alloc+0xa2>
        /* adjust err stats: memp_malloc failed multiple times before */
        MEMP_STATS_DEC(err, MEMP_TCP_PCB);
 8010420:	4b2c      	ldr	r3, [pc, #176]	; (80104d4 <tcp_alloc+0x148>)
 8010422:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8010426:	889a      	ldrh	r2, [r3, #4]
 8010428:	3a01      	subs	r2, #1
 801042a:	b292      	uxth	r2, r2
 801042c:	809a      	strh	r2, [r3, #4]
      }
    }
    if (pcb != NULL) {
 801042e:	68fb      	ldr	r3, [r7, #12]
 8010430:	2b00      	cmp	r3, #0
 8010432:	d006      	beq.n	8010442 <tcp_alloc+0xb6>
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
 8010434:	4b27      	ldr	r3, [pc, #156]	; (80104d4 <tcp_alloc+0x148>)
 8010436:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 801043a:	889a      	ldrh	r2, [r3, #4]
 801043c:	3a01      	subs	r2, #1
 801043e:	b292      	uxth	r2, r2
 8010440:	809a      	strh	r2, [r3, #4]
    }
  }
  if (pcb != NULL) {
 8010442:	68fb      	ldr	r3, [r7, #12]
 8010444:	2b00      	cmp	r3, #0
 8010446:	d03f      	beq.n	80104c8 <tcp_alloc+0x13c>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8010448:	229c      	movs	r2, #156	; 0x9c
 801044a:	2100      	movs	r1, #0
 801044c:	68f8      	ldr	r0, [r7, #12]
 801044e:	f00a fedd 	bl	801b20c <memset>
    pcb->prio = prio;
 8010452:	68fb      	ldr	r3, [r7, #12]
 8010454:	79fa      	ldrb	r2, [r7, #7]
 8010456:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8010458:	68fb      	ldr	r3, [r7, #12]
 801045a:	f44f 6286 	mov.w	r2, #1072	; 0x430
 801045e:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8010462:	68fb      	ldr	r3, [r7, #12]
 8010464:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8010468:	855a      	strh	r2, [r3, #42]	; 0x2a
 801046a:	68fb      	ldr	r3, [r7, #12]
 801046c:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 801046e:	68fb      	ldr	r3, [r7, #12]
 8010470:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8010472:	68fb      	ldr	r3, [r7, #12]
 8010474:	22ff      	movs	r2, #255	; 0xff
 8010476:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8010478:	68fb      	ldr	r3, [r7, #12]
 801047a:	f44f 7206 	mov.w	r2, #536	; 0x218
 801047e:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8010480:	68fb      	ldr	r3, [r7, #12]
 8010482:	2206      	movs	r2, #6
 8010484:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8010488:	68fb      	ldr	r3, [r7, #12]
 801048a:	2206      	movs	r2, #6
 801048c:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 801048e:	68fb      	ldr	r3, [r7, #12]
 8010490:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010494:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 8010496:	68fb      	ldr	r3, [r7, #12]
 8010498:	2201      	movs	r2, #1
 801049a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 801049e:	4b0e      	ldr	r3, [pc, #56]	; (80104d8 <tcp_alloc+0x14c>)
 80104a0:	681a      	ldr	r2, [r3, #0]
 80104a2:	68fb      	ldr	r3, [r7, #12]
 80104a4:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 80104a6:	4b0d      	ldr	r3, [pc, #52]	; (80104dc <tcp_alloc+0x150>)
 80104a8:	781a      	ldrb	r2, [r3, #0]
 80104aa:	68fb      	ldr	r3, [r7, #12]
 80104ac:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 80104ae:	68fb      	ldr	r3, [r7, #12]
 80104b0:	f44f 6286 	mov.w	r2, #1072	; 0x430
 80104b4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 80104b8:	68fb      	ldr	r3, [r7, #12]
 80104ba:	4a09      	ldr	r2, [pc, #36]	; (80104e0 <tcp_alloc+0x154>)
 80104bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 80104c0:	68fb      	ldr	r3, [r7, #12]
 80104c2:	4a08      	ldr	r2, [pc, #32]	; (80104e4 <tcp_alloc+0x158>)
 80104c4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 80104c8:	68fb      	ldr	r3, [r7, #12]
}
 80104ca:	4618      	mov	r0, r3
 80104cc:	3710      	adds	r7, #16
 80104ce:	46bd      	mov	sp, r7
 80104d0:	bd80      	pop	{r7, pc}
 80104d2:	bf00      	nop
 80104d4:	20010b7c 	.word	0x20010b7c
 80104d8:	20010c84 	.word	0x20010c84
 80104dc:	20009f8e 	.word	0x20009f8e
 80104e0:	08010135 	.word	0x08010135
 80104e4:	006ddd00 	.word	0x006ddd00

080104e8 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 80104e8:	b580      	push	{r7, lr}
 80104ea:	b084      	sub	sp, #16
 80104ec:	af00      	add	r7, sp, #0
 80104ee:	4603      	mov	r3, r0
 80104f0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 80104f2:	2040      	movs	r0, #64	; 0x40
 80104f4:	f7ff ff4a 	bl	801038c <tcp_alloc>
 80104f8:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 80104fa:	68fb      	ldr	r3, [r7, #12]
}
 80104fc:	4618      	mov	r0, r3
 80104fe:	3710      	adds	r7, #16
 8010500:	46bd      	mov	sp, r7
 8010502:	bd80      	pop	{r7, pc}

08010504 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 8010504:	b480      	push	{r7}
 8010506:	b083      	sub	sp, #12
 8010508:	af00      	add	r7, sp, #0
 801050a:	6078      	str	r0, [r7, #4]
 801050c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 801050e:	687b      	ldr	r3, [r7, #4]
 8010510:	2b00      	cmp	r3, #0
 8010512:	d002      	beq.n	801051a <tcp_arg+0x16>
    pcb->callback_arg = arg;
 8010514:	687b      	ldr	r3, [r7, #4]
 8010516:	683a      	ldr	r2, [r7, #0]
 8010518:	611a      	str	r2, [r3, #16]
  }
}
 801051a:	bf00      	nop
 801051c:	370c      	adds	r7, #12
 801051e:	46bd      	mov	sp, r7
 8010520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010524:	4770      	bx	lr
	...

08010528 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 8010528:	b580      	push	{r7, lr}
 801052a:	b082      	sub	sp, #8
 801052c:	af00      	add	r7, sp, #0
 801052e:	6078      	str	r0, [r7, #4]
 8010530:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8010532:	687b      	ldr	r3, [r7, #4]
 8010534:	2b00      	cmp	r3, #0
 8010536:	d012      	beq.n	801055e <tcp_recv+0x36>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8010538:	687b      	ldr	r3, [r7, #4]
 801053a:	7d1b      	ldrb	r3, [r3, #20]
 801053c:	2b01      	cmp	r3, #1
 801053e:	d10a      	bne.n	8010556 <tcp_recv+0x2e>
 8010540:	f240 72df 	movw	r2, #2015	; 0x7df
 8010544:	4908      	ldr	r1, [pc, #32]	; (8010568 <tcp_recv+0x40>)
 8010546:	4809      	ldr	r0, [pc, #36]	; (801056c <tcp_recv+0x44>)
 8010548:	f00a fde4 	bl	801b114 <trace_printf>
 801054c:	4908      	ldr	r1, [pc, #32]	; (8010570 <tcp_recv+0x48>)
 801054e:	4809      	ldr	r0, [pc, #36]	; (8010574 <tcp_recv+0x4c>)
 8010550:	f00a fde0 	bl	801b114 <trace_printf>
 8010554:	e7fe      	b.n	8010554 <tcp_recv+0x2c>
    pcb->recv = recv;
 8010556:	687b      	ldr	r3, [r7, #4]
 8010558:	683a      	ldr	r2, [r7, #0]
 801055a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 801055e:	bf00      	nop
 8010560:	3708      	adds	r7, #8
 8010562:	46bd      	mov	sp, r7
 8010564:	bd80      	pop	{r7, pc}
 8010566:	bf00      	nop
 8010568:	0801e828 	.word	0x0801e828
 801056c:	0801e2a4 	.word	0x0801e2a4
 8010570:	0801e2c4 	.word	0x0801e2c4
 8010574:	0801e2f4 	.word	0x0801e2f4

08010578 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 8010578:	b580      	push	{r7, lr}
 801057a:	b082      	sub	sp, #8
 801057c:	af00      	add	r7, sp, #0
 801057e:	6078      	str	r0, [r7, #4]
 8010580:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8010582:	687b      	ldr	r3, [r7, #4]
 8010584:	2b00      	cmp	r3, #0
 8010586:	d012      	beq.n	80105ae <tcp_sent+0x36>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8010588:	687b      	ldr	r3, [r7, #4]
 801058a:	7d1b      	ldrb	r3, [r3, #20]
 801058c:	2b01      	cmp	r3, #1
 801058e:	d10a      	bne.n	80105a6 <tcp_sent+0x2e>
 8010590:	f240 72f3 	movw	r2, #2035	; 0x7f3
 8010594:	4908      	ldr	r1, [pc, #32]	; (80105b8 <tcp_sent+0x40>)
 8010596:	4809      	ldr	r0, [pc, #36]	; (80105bc <tcp_sent+0x44>)
 8010598:	f00a fdbc 	bl	801b114 <trace_printf>
 801059c:	4908      	ldr	r1, [pc, #32]	; (80105c0 <tcp_sent+0x48>)
 801059e:	4809      	ldr	r0, [pc, #36]	; (80105c4 <tcp_sent+0x4c>)
 80105a0:	f00a fdb8 	bl	801b114 <trace_printf>
 80105a4:	e7fe      	b.n	80105a4 <tcp_sent+0x2c>
    pcb->sent = sent;
 80105a6:	687b      	ldr	r3, [r7, #4]
 80105a8:	683a      	ldr	r2, [r7, #0]
 80105aa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 80105ae:	bf00      	nop
 80105b0:	3708      	adds	r7, #8
 80105b2:	46bd      	mov	sp, r7
 80105b4:	bd80      	pop	{r7, pc}
 80105b6:	bf00      	nop
 80105b8:	0801e850 	.word	0x0801e850
 80105bc:	0801e2a4 	.word	0x0801e2a4
 80105c0:	0801e2c4 	.word	0x0801e2c4
 80105c4:	0801e2f4 	.word	0x0801e2f4

080105c8 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 80105c8:	b580      	push	{r7, lr}
 80105ca:	b082      	sub	sp, #8
 80105cc:	af00      	add	r7, sp, #0
 80105ce:	6078      	str	r0, [r7, #4]
 80105d0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 80105d2:	687b      	ldr	r3, [r7, #4]
 80105d4:	2b00      	cmp	r3, #0
 80105d6:	d012      	beq.n	80105fe <tcp_err+0x36>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 80105d8:	687b      	ldr	r3, [r7, #4]
 80105da:	7d1b      	ldrb	r3, [r3, #20]
 80105dc:	2b01      	cmp	r3, #1
 80105de:	d10a      	bne.n	80105f6 <tcp_err+0x2e>
 80105e0:	f640 020d 	movw	r2, #2061	; 0x80d
 80105e4:	4908      	ldr	r1, [pc, #32]	; (8010608 <tcp_err+0x40>)
 80105e6:	4809      	ldr	r0, [pc, #36]	; (801060c <tcp_err+0x44>)
 80105e8:	f00a fd94 	bl	801b114 <trace_printf>
 80105ec:	4908      	ldr	r1, [pc, #32]	; (8010610 <tcp_err+0x48>)
 80105ee:	4809      	ldr	r0, [pc, #36]	; (8010614 <tcp_err+0x4c>)
 80105f0:	f00a fd90 	bl	801b114 <trace_printf>
 80105f4:	e7fe      	b.n	80105f4 <tcp_err+0x2c>
    pcb->errf = err;
 80105f6:	687b      	ldr	r3, [r7, #4]
 80105f8:	683a      	ldr	r2, [r7, #0]
 80105fa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 80105fe:	bf00      	nop
 8010600:	3708      	adds	r7, #8
 8010602:	46bd      	mov	sp, r7
 8010604:	bd80      	pop	{r7, pc}
 8010606:	bf00      	nop
 8010608:	0801e878 	.word	0x0801e878
 801060c:	0801e2a4 	.word	0x0801e2a4
 8010610:	0801e2c4 	.word	0x0801e2c4
 8010614:	0801e2f4 	.word	0x0801e2f4

08010618 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 8010618:	b480      	push	{r7}
 801061a:	b085      	sub	sp, #20
 801061c:	af00      	add	r7, sp, #0
 801061e:	6078      	str	r0, [r7, #4]
 8010620:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 8010622:	687b      	ldr	r3, [r7, #4]
 8010624:	2b00      	cmp	r3, #0
 8010626:	d008      	beq.n	801063a <tcp_accept+0x22>
 8010628:	687b      	ldr	r3, [r7, #4]
 801062a:	7d1b      	ldrb	r3, [r3, #20]
 801062c:	2b01      	cmp	r3, #1
 801062e:	d104      	bne.n	801063a <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 8010630:	687b      	ldr	r3, [r7, #4]
 8010632:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 8010634:	68fb      	ldr	r3, [r7, #12]
 8010636:	683a      	ldr	r2, [r7, #0]
 8010638:	619a      	str	r2, [r3, #24]
  }
}
 801063a:	bf00      	nop
 801063c:	3714      	adds	r7, #20
 801063e:	46bd      	mov	sp, r7
 8010640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010644:	4770      	bx	lr
	...

08010648 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 8010648:	b580      	push	{r7, lr}
 801064a:	b084      	sub	sp, #16
 801064c:	af00      	add	r7, sp, #0
 801064e:	60f8      	str	r0, [r7, #12]
 8010650:	60b9      	str	r1, [r7, #8]
 8010652:	4613      	mov	r3, r2
 8010654:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 8010656:	68fb      	ldr	r3, [r7, #12]
 8010658:	2b00      	cmp	r3, #0
 801065a:	d10a      	bne.n	8010672 <tcp_poll+0x2a>
 801065c:	f640 023d 	movw	r2, #2109	; 0x83d
 8010660:	4910      	ldr	r1, [pc, #64]	; (80106a4 <tcp_poll+0x5c>)
 8010662:	4811      	ldr	r0, [pc, #68]	; (80106a8 <tcp_poll+0x60>)
 8010664:	f00a fd56 	bl	801b114 <trace_printf>
 8010668:	4910      	ldr	r1, [pc, #64]	; (80106ac <tcp_poll+0x64>)
 801066a:	4811      	ldr	r0, [pc, #68]	; (80106b0 <tcp_poll+0x68>)
 801066c:	f00a fd52 	bl	801b114 <trace_printf>
 8010670:	e7fe      	b.n	8010670 <tcp_poll+0x28>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8010672:	68fb      	ldr	r3, [r7, #12]
 8010674:	7d1b      	ldrb	r3, [r3, #20]
 8010676:	2b01      	cmp	r3, #1
 8010678:	d10a      	bne.n	8010690 <tcp_poll+0x48>
 801067a:	f640 023e 	movw	r2, #2110	; 0x83e
 801067e:	490d      	ldr	r1, [pc, #52]	; (80106b4 <tcp_poll+0x6c>)
 8010680:	4809      	ldr	r0, [pc, #36]	; (80106a8 <tcp_poll+0x60>)
 8010682:	f00a fd47 	bl	801b114 <trace_printf>
 8010686:	4909      	ldr	r1, [pc, #36]	; (80106ac <tcp_poll+0x64>)
 8010688:	4809      	ldr	r0, [pc, #36]	; (80106b0 <tcp_poll+0x68>)
 801068a:	f00a fd43 	bl	801b114 <trace_printf>
 801068e:	e7fe      	b.n	801068e <tcp_poll+0x46>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 8010690:	68fb      	ldr	r3, [r7, #12]
 8010692:	68ba      	ldr	r2, [r7, #8]
 8010694:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 8010698:	68fb      	ldr	r3, [r7, #12]
 801069a:	79fa      	ldrb	r2, [r7, #7]
 801069c:	775a      	strb	r2, [r3, #29]
}
 801069e:	3710      	adds	r7, #16
 80106a0:	46bd      	mov	sp, r7
 80106a2:	bd80      	pop	{r7, pc}
 80106a4:	0801e8a0 	.word	0x0801e8a0
 80106a8:	0801e2a4 	.word	0x0801e2a4
 80106ac:	0801e2c4 	.word	0x0801e2c4
 80106b0:	0801e2f4 	.word	0x0801e2f4
 80106b4:	0801e8b8 	.word	0x0801e8b8

080106b8 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 80106b8:	b580      	push	{r7, lr}
 80106ba:	b082      	sub	sp, #8
 80106bc:	af00      	add	r7, sp, #0
 80106be:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 80106c0:	687b      	ldr	r3, [r7, #4]
 80106c2:	2b00      	cmp	r3, #0
 80106c4:	d10a      	bne.n	80106dc <tcp_pcb_purge+0x24>
 80106c6:	f640 0251 	movw	r2, #2129	; 0x851
 80106ca:	4922      	ldr	r1, [pc, #136]	; (8010754 <tcp_pcb_purge+0x9c>)
 80106cc:	4822      	ldr	r0, [pc, #136]	; (8010758 <tcp_pcb_purge+0xa0>)
 80106ce:	f00a fd21 	bl	801b114 <trace_printf>
 80106d2:	4922      	ldr	r1, [pc, #136]	; (801075c <tcp_pcb_purge+0xa4>)
 80106d4:	4822      	ldr	r0, [pc, #136]	; (8010760 <tcp_pcb_purge+0xa8>)
 80106d6:	f00a fd1d 	bl	801b114 <trace_printf>
 80106da:	e7fe      	b.n	80106da <tcp_pcb_purge+0x22>

  if (pcb->state != CLOSED &&
 80106dc:	687b      	ldr	r3, [r7, #4]
 80106de:	7d1b      	ldrb	r3, [r3, #20]
 80106e0:	2b00      	cmp	r3, #0
 80106e2:	d033      	beq.n	801074c <tcp_pcb_purge+0x94>
      pcb->state != TIME_WAIT &&
 80106e4:	687b      	ldr	r3, [r7, #4]
 80106e6:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 80106e8:	2b0a      	cmp	r3, #10
 80106ea:	d02f      	beq.n	801074c <tcp_pcb_purge+0x94>
      pcb->state != LISTEN) {
 80106ec:	687b      	ldr	r3, [r7, #4]
 80106ee:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 80106f0:	2b01      	cmp	r3, #1
 80106f2:	d02b      	beq.n	801074c <tcp_pcb_purge+0x94>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 80106f4:	687b      	ldr	r3, [r7, #4]
 80106f6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80106f8:	2b00      	cmp	r3, #0
 80106fa:	d007      	beq.n	801070c <tcp_pcb_purge+0x54>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 80106fc:	687b      	ldr	r3, [r7, #4]
 80106fe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010700:	4618      	mov	r0, r3
 8010702:	f7fe f835 	bl	800e770 <pbuf_free>
      pcb->refused_data = NULL;
 8010706:	687b      	ldr	r3, [r7, #4]
 8010708:	2200      	movs	r2, #0
 801070a:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 801070c:	687b      	ldr	r3, [r7, #4]
 801070e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010710:	2b00      	cmp	r3, #0
 8010712:	d002      	beq.n	801071a <tcp_pcb_purge+0x62>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8010714:	6878      	ldr	r0, [r7, #4]
 8010716:	f000 f9b1 	bl	8010a7c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 801071a:	687b      	ldr	r3, [r7, #4]
 801071c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010720:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8010722:	687b      	ldr	r3, [r7, #4]
 8010724:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010726:	4618      	mov	r0, r3
 8010728:	f7ff fca4 	bl	8010074 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 801072c:	687b      	ldr	r3, [r7, #4]
 801072e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010730:	4618      	mov	r0, r3
 8010732:	f7ff fc9f 	bl	8010074 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8010736:	687b      	ldr	r3, [r7, #4]
 8010738:	2200      	movs	r2, #0
 801073a:	66da      	str	r2, [r3, #108]	; 0x6c
 801073c:	687b      	ldr	r3, [r7, #4]
 801073e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8010740:	687b      	ldr	r3, [r7, #4]
 8010742:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8010744:	687b      	ldr	r3, [r7, #4]
 8010746:	2200      	movs	r2, #0
 8010748:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 801074c:	3708      	adds	r7, #8
 801074e:	46bd      	mov	sp, r7
 8010750:	bd80      	pop	{r7, pc}
 8010752:	bf00      	nop
 8010754:	0801e8d8 	.word	0x0801e8d8
 8010758:	0801e2a4 	.word	0x0801e2a4
 801075c:	0801e2c4 	.word	0x0801e2c4
 8010760:	0801e2f4 	.word	0x0801e2f4

08010764 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8010764:	b580      	push	{r7, lr}
 8010766:	b084      	sub	sp, #16
 8010768:	af00      	add	r7, sp, #0
 801076a:	6078      	str	r0, [r7, #4]
 801076c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 801076e:	683b      	ldr	r3, [r7, #0]
 8010770:	2b00      	cmp	r3, #0
 8010772:	d10a      	bne.n	801078a <tcp_pcb_remove+0x26>
 8010774:	f640 0283 	movw	r2, #2179	; 0x883
 8010778:	4947      	ldr	r1, [pc, #284]	; (8010898 <tcp_pcb_remove+0x134>)
 801077a:	4848      	ldr	r0, [pc, #288]	; (801089c <tcp_pcb_remove+0x138>)
 801077c:	f00a fcca 	bl	801b114 <trace_printf>
 8010780:	4947      	ldr	r1, [pc, #284]	; (80108a0 <tcp_pcb_remove+0x13c>)
 8010782:	4848      	ldr	r0, [pc, #288]	; (80108a4 <tcp_pcb_remove+0x140>)
 8010784:	f00a fcc6 	bl	801b114 <trace_printf>
 8010788:	e7fe      	b.n	8010788 <tcp_pcb_remove+0x24>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 801078a:	687b      	ldr	r3, [r7, #4]
 801078c:	2b00      	cmp	r3, #0
 801078e:	d10a      	bne.n	80107a6 <tcp_pcb_remove+0x42>
 8010790:	f640 0284 	movw	r2, #2180	; 0x884
 8010794:	4944      	ldr	r1, [pc, #272]	; (80108a8 <tcp_pcb_remove+0x144>)
 8010796:	4841      	ldr	r0, [pc, #260]	; (801089c <tcp_pcb_remove+0x138>)
 8010798:	f00a fcbc 	bl	801b114 <trace_printf>
 801079c:	4940      	ldr	r1, [pc, #256]	; (80108a0 <tcp_pcb_remove+0x13c>)
 801079e:	4841      	ldr	r0, [pc, #260]	; (80108a4 <tcp_pcb_remove+0x140>)
 80107a0:	f00a fcb8 	bl	801b114 <trace_printf>
 80107a4:	e7fe      	b.n	80107a4 <tcp_pcb_remove+0x40>

  TCP_RMV(pcblist, pcb);
 80107a6:	687b      	ldr	r3, [r7, #4]
 80107a8:	681b      	ldr	r3, [r3, #0]
 80107aa:	683a      	ldr	r2, [r7, #0]
 80107ac:	429a      	cmp	r2, r3
 80107ae:	d105      	bne.n	80107bc <tcp_pcb_remove+0x58>
 80107b0:	687b      	ldr	r3, [r7, #4]
 80107b2:	681b      	ldr	r3, [r3, #0]
 80107b4:	68da      	ldr	r2, [r3, #12]
 80107b6:	687b      	ldr	r3, [r7, #4]
 80107b8:	601a      	str	r2, [r3, #0]
 80107ba:	e013      	b.n	80107e4 <tcp_pcb_remove+0x80>
 80107bc:	687b      	ldr	r3, [r7, #4]
 80107be:	681b      	ldr	r3, [r3, #0]
 80107c0:	60fb      	str	r3, [r7, #12]
 80107c2:	e00c      	b.n	80107de <tcp_pcb_remove+0x7a>
 80107c4:	68fb      	ldr	r3, [r7, #12]
 80107c6:	68db      	ldr	r3, [r3, #12]
 80107c8:	683a      	ldr	r2, [r7, #0]
 80107ca:	429a      	cmp	r2, r3
 80107cc:	d104      	bne.n	80107d8 <tcp_pcb_remove+0x74>
 80107ce:	683b      	ldr	r3, [r7, #0]
 80107d0:	68da      	ldr	r2, [r3, #12]
 80107d2:	68fb      	ldr	r3, [r7, #12]
 80107d4:	60da      	str	r2, [r3, #12]
 80107d6:	e005      	b.n	80107e4 <tcp_pcb_remove+0x80>
 80107d8:	68fb      	ldr	r3, [r7, #12]
 80107da:	68db      	ldr	r3, [r3, #12]
 80107dc:	60fb      	str	r3, [r7, #12]
 80107de:	68fb      	ldr	r3, [r7, #12]
 80107e0:	2b00      	cmp	r3, #0
 80107e2:	d1ef      	bne.n	80107c4 <tcp_pcb_remove+0x60>
 80107e4:	683b      	ldr	r3, [r7, #0]
 80107e6:	2200      	movs	r2, #0
 80107e8:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 80107ea:	6838      	ldr	r0, [r7, #0]
 80107ec:	f7ff ff64 	bl	80106b8 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 80107f0:	683b      	ldr	r3, [r7, #0]
 80107f2:	7d1b      	ldrb	r3, [r3, #20]
 80107f4:	2b0a      	cmp	r3, #10
 80107f6:	d013      	beq.n	8010820 <tcp_pcb_remove+0xbc>
      (pcb->state != LISTEN) &&
 80107f8:	683b      	ldr	r3, [r7, #0]
 80107fa:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 80107fc:	2b01      	cmp	r3, #1
 80107fe:	d00f      	beq.n	8010820 <tcp_pcb_remove+0xbc>
      (pcb->flags & TF_ACK_DELAY)) {
 8010800:	683b      	ldr	r3, [r7, #0]
 8010802:	8b5b      	ldrh	r3, [r3, #26]
 8010804:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8010808:	2b00      	cmp	r3, #0
 801080a:	d009      	beq.n	8010820 <tcp_pcb_remove+0xbc>
    tcp_ack_now(pcb);
 801080c:	683b      	ldr	r3, [r7, #0]
 801080e:	8b5b      	ldrh	r3, [r3, #26]
 8010810:	f043 0302 	orr.w	r3, r3, #2
 8010814:	b29a      	uxth	r2, r3
 8010816:	683b      	ldr	r3, [r7, #0]
 8010818:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 801081a:	6838      	ldr	r0, [r7, #0]
 801081c:	f003 fe20 	bl	8014460 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8010820:	683b      	ldr	r3, [r7, #0]
 8010822:	7d1b      	ldrb	r3, [r3, #20]
 8010824:	2b01      	cmp	r3, #1
 8010826:	d02c      	beq.n	8010882 <tcp_pcb_remove+0x11e>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8010828:	683b      	ldr	r3, [r7, #0]
 801082a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801082c:	2b00      	cmp	r3, #0
 801082e:	d00a      	beq.n	8010846 <tcp_pcb_remove+0xe2>
 8010830:	f640 0293 	movw	r2, #2195	; 0x893
 8010834:	491d      	ldr	r1, [pc, #116]	; (80108ac <tcp_pcb_remove+0x148>)
 8010836:	4819      	ldr	r0, [pc, #100]	; (801089c <tcp_pcb_remove+0x138>)
 8010838:	f00a fc6c 	bl	801b114 <trace_printf>
 801083c:	4918      	ldr	r1, [pc, #96]	; (80108a0 <tcp_pcb_remove+0x13c>)
 801083e:	4819      	ldr	r0, [pc, #100]	; (80108a4 <tcp_pcb_remove+0x140>)
 8010840:	f00a fc68 	bl	801b114 <trace_printf>
 8010844:	e7fe      	b.n	8010844 <tcp_pcb_remove+0xe0>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8010846:	683b      	ldr	r3, [r7, #0]
 8010848:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801084a:	2b00      	cmp	r3, #0
 801084c:	d00a      	beq.n	8010864 <tcp_pcb_remove+0x100>
 801084e:	f640 0294 	movw	r2, #2196	; 0x894
 8010852:	4917      	ldr	r1, [pc, #92]	; (80108b0 <tcp_pcb_remove+0x14c>)
 8010854:	4811      	ldr	r0, [pc, #68]	; (801089c <tcp_pcb_remove+0x138>)
 8010856:	f00a fc5d 	bl	801b114 <trace_printf>
 801085a:	4911      	ldr	r1, [pc, #68]	; (80108a0 <tcp_pcb_remove+0x13c>)
 801085c:	4811      	ldr	r0, [pc, #68]	; (80108a4 <tcp_pcb_remove+0x140>)
 801085e:	f00a fc59 	bl	801b114 <trace_printf>
 8010862:	e7fe      	b.n	8010862 <tcp_pcb_remove+0xfe>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8010864:	683b      	ldr	r3, [r7, #0]
 8010866:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010868:	2b00      	cmp	r3, #0
 801086a:	d00a      	beq.n	8010882 <tcp_pcb_remove+0x11e>
 801086c:	f640 0296 	movw	r2, #2198	; 0x896
 8010870:	4910      	ldr	r1, [pc, #64]	; (80108b4 <tcp_pcb_remove+0x150>)
 8010872:	480a      	ldr	r0, [pc, #40]	; (801089c <tcp_pcb_remove+0x138>)
 8010874:	f00a fc4e 	bl	801b114 <trace_printf>
 8010878:	4909      	ldr	r1, [pc, #36]	; (80108a0 <tcp_pcb_remove+0x13c>)
 801087a:	480a      	ldr	r0, [pc, #40]	; (80108a4 <tcp_pcb_remove+0x140>)
 801087c:	f00a fc4a 	bl	801b114 <trace_printf>
 8010880:	e7fe      	b.n	8010880 <tcp_pcb_remove+0x11c>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8010882:	683b      	ldr	r3, [r7, #0]
 8010884:	2200      	movs	r2, #0
 8010886:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8010888:	683b      	ldr	r3, [r7, #0]
 801088a:	2200      	movs	r2, #0
 801088c:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 801088e:	bf00      	nop
 8010890:	3710      	adds	r7, #16
 8010892:	46bd      	mov	sp, r7
 8010894:	bd80      	pop	{r7, pc}
 8010896:	bf00      	nop
 8010898:	0801e8f4 	.word	0x0801e8f4
 801089c:	0801e2a4 	.word	0x0801e2a4
 80108a0:	0801e2c4 	.word	0x0801e2c4
 80108a4:	0801e2f4 	.word	0x0801e2f4
 80108a8:	0801e910 	.word	0x0801e910
 80108ac:	0801e930 	.word	0x0801e930
 80108b0:	0801e948 	.word	0x0801e948
 80108b4:	0801e964 	.word	0x0801e964

080108b8 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 80108b8:	b580      	push	{r7, lr}
 80108ba:	b082      	sub	sp, #8
 80108bc:	af00      	add	r7, sp, #0
 80108be:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 80108c0:	687b      	ldr	r3, [r7, #4]
 80108c2:	2b00      	cmp	r3, #0
 80108c4:	d10a      	bne.n	80108dc <tcp_next_iss+0x24>
 80108c6:	f640 02af 	movw	r2, #2223	; 0x8af
 80108ca:	490b      	ldr	r1, [pc, #44]	; (80108f8 <tcp_next_iss+0x40>)
 80108cc:	480b      	ldr	r0, [pc, #44]	; (80108fc <tcp_next_iss+0x44>)
 80108ce:	f00a fc21 	bl	801b114 <trace_printf>
 80108d2:	490b      	ldr	r1, [pc, #44]	; (8010900 <tcp_next_iss+0x48>)
 80108d4:	480b      	ldr	r0, [pc, #44]	; (8010904 <tcp_next_iss+0x4c>)
 80108d6:	f00a fc1d 	bl	801b114 <trace_printf>
 80108da:	e7fe      	b.n	80108da <tcp_next_iss+0x22>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 80108dc:	4b0a      	ldr	r3, [pc, #40]	; (8010908 <tcp_next_iss+0x50>)
 80108de:	681a      	ldr	r2, [r3, #0]
 80108e0:	4b0a      	ldr	r3, [pc, #40]	; (801090c <tcp_next_iss+0x54>)
 80108e2:	681b      	ldr	r3, [r3, #0]
 80108e4:	4413      	add	r3, r2
 80108e6:	4a08      	ldr	r2, [pc, #32]	; (8010908 <tcp_next_iss+0x50>)
 80108e8:	6013      	str	r3, [r2, #0]
  return iss;
 80108ea:	4b07      	ldr	r3, [pc, #28]	; (8010908 <tcp_next_iss+0x50>)
 80108ec:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 80108ee:	4618      	mov	r0, r3
 80108f0:	3708      	adds	r7, #8
 80108f2:	46bd      	mov	sp, r7
 80108f4:	bd80      	pop	{r7, pc}
 80108f6:	bf00      	nop
 80108f8:	0801e97c 	.word	0x0801e97c
 80108fc:	0801e2a4 	.word	0x0801e2a4
 8010900:	0801e2c4 	.word	0x0801e2c4
 8010904:	0801e2f4 	.word	0x0801e2f4
 8010908:	20000018 	.word	0x20000018
 801090c:	20010c84 	.word	0x20010c84

08010910 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8010910:	b580      	push	{r7, lr}
 8010912:	b086      	sub	sp, #24
 8010914:	af00      	add	r7, sp, #0
 8010916:	4603      	mov	r3, r0
 8010918:	60b9      	str	r1, [r7, #8]
 801091a:	607a      	str	r2, [r7, #4]
 801091c:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 801091e:	687b      	ldr	r3, [r7, #4]
 8010920:	2b00      	cmp	r3, #0
 8010922:	d10a      	bne.n	801093a <tcp_eff_send_mss_netif+0x2a>
 8010924:	f640 02c5 	movw	r2, #2245	; 0x8c5
 8010928:	4915      	ldr	r1, [pc, #84]	; (8010980 <tcp_eff_send_mss_netif+0x70>)
 801092a:	4816      	ldr	r0, [pc, #88]	; (8010984 <tcp_eff_send_mss_netif+0x74>)
 801092c:	f00a fbf2 	bl	801b114 <trace_printf>
 8010930:	4915      	ldr	r1, [pc, #84]	; (8010988 <tcp_eff_send_mss_netif+0x78>)
 8010932:	4816      	ldr	r0, [pc, #88]	; (801098c <tcp_eff_send_mss_netif+0x7c>)
 8010934:	f00a fbee 	bl	801b114 <trace_printf>
 8010938:	e7fe      	b.n	8010938 <tcp_eff_send_mss_netif+0x28>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 801093a:	68bb      	ldr	r3, [r7, #8]
 801093c:	2b00      	cmp	r3, #0
 801093e:	d101      	bne.n	8010944 <tcp_eff_send_mss_netif+0x34>
      return sendmss;
 8010940:	89fb      	ldrh	r3, [r7, #14]
 8010942:	e019      	b.n	8010978 <tcp_eff_send_mss_netif+0x68>
    }
    mtu = outif->mtu;
 8010944:	68bb      	ldr	r3, [r7, #8]
 8010946:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010948:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 801094a:	8afb      	ldrh	r3, [r7, #22]
 801094c:	2b00      	cmp	r3, #0
 801094e:	d012      	beq.n	8010976 <tcp_eff_send_mss_netif+0x66>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8010950:	2328      	movs	r3, #40	; 0x28
 8010952:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8010954:	8afa      	ldrh	r2, [r7, #22]
 8010956:	8abb      	ldrh	r3, [r7, #20]
 8010958:	429a      	cmp	r2, r3
 801095a:	d904      	bls.n	8010966 <tcp_eff_send_mss_netif+0x56>
 801095c:	8afa      	ldrh	r2, [r7, #22]
 801095e:	8abb      	ldrh	r3, [r7, #20]
 8010960:	1ad3      	subs	r3, r2, r3
 8010962:	b29b      	uxth	r3, r3
 8010964:	e000      	b.n	8010968 <tcp_eff_send_mss_netif+0x58>
 8010966:	2300      	movs	r3, #0
 8010968:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 801096a:	8a7a      	ldrh	r2, [r7, #18]
 801096c:	89fb      	ldrh	r3, [r7, #14]
 801096e:	4293      	cmp	r3, r2
 8010970:	bf28      	it	cs
 8010972:	4613      	movcs	r3, r2
 8010974:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8010976:	89fb      	ldrh	r3, [r7, #14]
}
 8010978:	4618      	mov	r0, r3
 801097a:	3718      	adds	r7, #24
 801097c:	46bd      	mov	sp, r7
 801097e:	bd80      	pop	{r7, pc}
 8010980:	0801e998 	.word	0x0801e998
 8010984:	0801e2a4 	.word	0x0801e2a4
 8010988:	0801e2c4 	.word	0x0801e2c4
 801098c:	0801e2f4 	.word	0x0801e2f4

08010990 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8010990:	b580      	push	{r7, lr}
 8010992:	b084      	sub	sp, #16
 8010994:	af00      	add	r7, sp, #0
 8010996:	6078      	str	r0, [r7, #4]
 8010998:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 801099a:	683b      	ldr	r3, [r7, #0]
 801099c:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 801099e:	687b      	ldr	r3, [r7, #4]
 80109a0:	2b00      	cmp	r3, #0
 80109a2:	d11c      	bne.n	80109de <tcp_netif_ip_addr_changed_pcblist+0x4e>
 80109a4:	f44f 6210 	mov.w	r2, #2304	; 0x900
 80109a8:	4911      	ldr	r1, [pc, #68]	; (80109f0 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 80109aa:	4812      	ldr	r0, [pc, #72]	; (80109f4 <tcp_netif_ip_addr_changed_pcblist+0x64>)
 80109ac:	f00a fbb2 	bl	801b114 <trace_printf>
 80109b0:	4911      	ldr	r1, [pc, #68]	; (80109f8 <tcp_netif_ip_addr_changed_pcblist+0x68>)
 80109b2:	4812      	ldr	r0, [pc, #72]	; (80109fc <tcp_netif_ip_addr_changed_pcblist+0x6c>)
 80109b4:	f00a fbae 	bl	801b114 <trace_printf>
 80109b8:	e7fe      	b.n	80109b8 <tcp_netif_ip_addr_changed_pcblist+0x28>

  while (pcb != NULL) {
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 80109ba:	68fb      	ldr	r3, [r7, #12]
 80109bc:	681a      	ldr	r2, [r3, #0]
 80109be:	687b      	ldr	r3, [r7, #4]
 80109c0:	681b      	ldr	r3, [r3, #0]
 80109c2:	429a      	cmp	r2, r3
 80109c4:	d108      	bne.n	80109d8 <tcp_netif_ip_addr_changed_pcblist+0x48>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 80109c6:	68fb      	ldr	r3, [r7, #12]
 80109c8:	68db      	ldr	r3, [r3, #12]
 80109ca:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 80109cc:	68f8      	ldr	r0, [r7, #12]
 80109ce:	f7fe fd55 	bl	800f47c <tcp_abort>
      pcb = next;
 80109d2:	68bb      	ldr	r3, [r7, #8]
 80109d4:	60fb      	str	r3, [r7, #12]
 80109d6:	e002      	b.n	80109de <tcp_netif_ip_addr_changed_pcblist+0x4e>
    } else {
      pcb = pcb->next;
 80109d8:	68fb      	ldr	r3, [r7, #12]
 80109da:	68db      	ldr	r3, [r3, #12]
 80109dc:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 80109de:	68fb      	ldr	r3, [r7, #12]
 80109e0:	2b00      	cmp	r3, #0
 80109e2:	d1ea      	bne.n	80109ba <tcp_netif_ip_addr_changed_pcblist+0x2a>
    }
  }
}
 80109e4:	bf00      	nop
 80109e6:	bf00      	nop
 80109e8:	3710      	adds	r7, #16
 80109ea:	46bd      	mov	sp, r7
 80109ec:	bd80      	pop	{r7, pc}
 80109ee:	bf00      	nop
 80109f0:	0801e9c0 	.word	0x0801e9c0
 80109f4:	0801e2a4 	.word	0x0801e2a4
 80109f8:	0801e2c4 	.word	0x0801e2c4
 80109fc:	0801e2f4 	.word	0x0801e2f4

08010a00 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8010a00:	b580      	push	{r7, lr}
 8010a02:	b084      	sub	sp, #16
 8010a04:	af00      	add	r7, sp, #0
 8010a06:	6078      	str	r0, [r7, #4]
 8010a08:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8010a0a:	687b      	ldr	r3, [r7, #4]
 8010a0c:	2b00      	cmp	r3, #0
 8010a0e:	d02a      	beq.n	8010a66 <tcp_netif_ip_addr_changed+0x66>
 8010a10:	687b      	ldr	r3, [r7, #4]
 8010a12:	681b      	ldr	r3, [r3, #0]
 8010a14:	2b00      	cmp	r3, #0
 8010a16:	d026      	beq.n	8010a66 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8010a18:	4b15      	ldr	r3, [pc, #84]	; (8010a70 <tcp_netif_ip_addr_changed+0x70>)
 8010a1a:	681b      	ldr	r3, [r3, #0]
 8010a1c:	4619      	mov	r1, r3
 8010a1e:	6878      	ldr	r0, [r7, #4]
 8010a20:	f7ff ffb6 	bl	8010990 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8010a24:	4b13      	ldr	r3, [pc, #76]	; (8010a74 <tcp_netif_ip_addr_changed+0x74>)
 8010a26:	681b      	ldr	r3, [r3, #0]
 8010a28:	4619      	mov	r1, r3
 8010a2a:	6878      	ldr	r0, [r7, #4]
 8010a2c:	f7ff ffb0 	bl	8010990 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8010a30:	683b      	ldr	r3, [r7, #0]
 8010a32:	2b00      	cmp	r3, #0
 8010a34:	d017      	beq.n	8010a66 <tcp_netif_ip_addr_changed+0x66>
 8010a36:	683b      	ldr	r3, [r7, #0]
 8010a38:	681b      	ldr	r3, [r3, #0]
 8010a3a:	2b00      	cmp	r3, #0
 8010a3c:	d013      	beq.n	8010a66 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8010a3e:	4b0e      	ldr	r3, [pc, #56]	; (8010a78 <tcp_netif_ip_addr_changed+0x78>)
 8010a40:	681b      	ldr	r3, [r3, #0]
 8010a42:	60fb      	str	r3, [r7, #12]
 8010a44:	e00c      	b.n	8010a60 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8010a46:	68fb      	ldr	r3, [r7, #12]
 8010a48:	681a      	ldr	r2, [r3, #0]
 8010a4a:	687b      	ldr	r3, [r7, #4]
 8010a4c:	681b      	ldr	r3, [r3, #0]
 8010a4e:	429a      	cmp	r2, r3
 8010a50:	d103      	bne.n	8010a5a <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8010a52:	683b      	ldr	r3, [r7, #0]
 8010a54:	681a      	ldr	r2, [r3, #0]
 8010a56:	68fb      	ldr	r3, [r7, #12]
 8010a58:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8010a5a:	68fb      	ldr	r3, [r7, #12]
 8010a5c:	68db      	ldr	r3, [r3, #12]
 8010a5e:	60fb      	str	r3, [r7, #12]
 8010a60:	68fb      	ldr	r3, [r7, #12]
 8010a62:	2b00      	cmp	r3, #0
 8010a64:	d1ef      	bne.n	8010a46 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8010a66:	bf00      	nop
 8010a68:	3710      	adds	r7, #16
 8010a6a:	46bd      	mov	sp, r7
 8010a6c:	bd80      	pop	{r7, pc}
 8010a6e:	bf00      	nop
 8010a70:	20010c80 	.word	0x20010c80
 8010a74:	20010c8c 	.word	0x20010c8c
 8010a78:	20010c88 	.word	0x20010c88

08010a7c <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8010a7c:	b580      	push	{r7, lr}
 8010a7e:	b082      	sub	sp, #8
 8010a80:	af00      	add	r7, sp, #0
 8010a82:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8010a84:	687b      	ldr	r3, [r7, #4]
 8010a86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010a88:	2b00      	cmp	r3, #0
 8010a8a:	d007      	beq.n	8010a9c <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8010a8c:	687b      	ldr	r3, [r7, #4]
 8010a8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010a90:	4618      	mov	r0, r3
 8010a92:	f7ff faef 	bl	8010074 <tcp_segs_free>
    pcb->ooseq = NULL;
 8010a96:	687b      	ldr	r3, [r7, #4]
 8010a98:	2200      	movs	r2, #0
 8010a9a:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8010a9c:	bf00      	nop
 8010a9e:	3708      	adds	r7, #8
 8010aa0:	46bd      	mov	sp, r7
 8010aa2:	bd80      	pop	{r7, pc}

08010aa4 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8010aa4:	b590      	push	{r4, r7, lr}
 8010aa6:	b08d      	sub	sp, #52	; 0x34
 8010aa8:	af04      	add	r7, sp, #16
 8010aaa:	6078      	str	r0, [r7, #4]
 8010aac:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8010aae:	687b      	ldr	r3, [r7, #4]
 8010ab0:	2b00      	cmp	r3, #0
 8010ab2:	d109      	bne.n	8010ac8 <tcp_input+0x24>
 8010ab4:	2283      	movs	r2, #131	; 0x83
 8010ab6:	49a1      	ldr	r1, [pc, #644]	; (8010d3c <tcp_input+0x298>)
 8010ab8:	48a1      	ldr	r0, [pc, #644]	; (8010d40 <tcp_input+0x29c>)
 8010aba:	f00a fb2b 	bl	801b114 <trace_printf>
 8010abe:	49a1      	ldr	r1, [pc, #644]	; (8010d44 <tcp_input+0x2a0>)
 8010ac0:	48a1      	ldr	r0, [pc, #644]	; (8010d48 <tcp_input+0x2a4>)
 8010ac2:	f00a fb27 	bl	801b114 <trace_printf>
 8010ac6:	e7fe      	b.n	8010ac6 <tcp_input+0x22>

  PERF_START;

  TCP_STATS_INC(tcp.recv);
 8010ac8:	4ba0      	ldr	r3, [pc, #640]	; (8010d4c <tcp_input+0x2a8>)
 8010aca:	f8b3 3092 	ldrh.w	r3, [r3, #146]	; 0x92
 8010ace:	3301      	adds	r3, #1
 8010ad0:	b29a      	uxth	r2, r3
 8010ad2:	4b9e      	ldr	r3, [pc, #632]	; (8010d4c <tcp_input+0x2a8>)
 8010ad4:	f8a3 2092 	strh.w	r2, [r3, #146]	; 0x92
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8010ad8:	687b      	ldr	r3, [r7, #4]
 8010ada:	685b      	ldr	r3, [r3, #4]
 8010adc:	4a9c      	ldr	r2, [pc, #624]	; (8010d50 <tcp_input+0x2ac>)
 8010ade:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8010ae0:	687b      	ldr	r3, [r7, #4]
 8010ae2:	895b      	ldrh	r3, [r3, #10]
 8010ae4:	2b13      	cmp	r3, #19
 8010ae6:	d809      	bhi.n	8010afc <tcp_input+0x58>
    /* drop short packets */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: short packet (%"U16_F" bytes) discarded\n", p->tot_len));
    TCP_STATS_INC(tcp.lenerr);
 8010ae8:	4b98      	ldr	r3, [pc, #608]	; (8010d4c <tcp_input+0x2a8>)
 8010aea:	f8b3 309a 	ldrh.w	r3, [r3, #154]	; 0x9a
 8010aee:	3301      	adds	r3, #1
 8010af0:	b29a      	uxth	r2, r3
 8010af2:	4b96      	ldr	r3, [pc, #600]	; (8010d4c <tcp_input+0x2a8>)
 8010af4:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
    goto dropped;
 8010af8:	f000 bc4a 	b.w	8011390 <tcp_input+0x8ec>
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8010afc:	4b95      	ldr	r3, [pc, #596]	; (8010d54 <tcp_input+0x2b0>)
 8010afe:	695b      	ldr	r3, [r3, #20]
 8010b00:	4a94      	ldr	r2, [pc, #592]	; (8010d54 <tcp_input+0x2b0>)
 8010b02:	6812      	ldr	r2, [r2, #0]
 8010b04:	4611      	mov	r1, r2
 8010b06:	4618      	mov	r0, r3
 8010b08:	f009 f844 	bl	8019b94 <ip4_addr_isbroadcast_u32>
 8010b0c:	4603      	mov	r3, r0
 8010b0e:	2b00      	cmp	r3, #0
 8010b10:	d105      	bne.n	8010b1e <tcp_input+0x7a>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8010b12:	4b90      	ldr	r3, [pc, #576]	; (8010d54 <tcp_input+0x2b0>)
 8010b14:	695b      	ldr	r3, [r3, #20]
 8010b16:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8010b1a:	2be0      	cmp	r3, #224	; 0xe0
 8010b1c:	d109      	bne.n	8010b32 <tcp_input+0x8e>
    TCP_STATS_INC(tcp.proterr);
 8010b1e:	4b8b      	ldr	r3, [pc, #556]	; (8010d4c <tcp_input+0x2a8>)
 8010b20:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 8010b24:	3301      	adds	r3, #1
 8010b26:	b29a      	uxth	r2, r3
 8010b28:	4b88      	ldr	r3, [pc, #544]	; (8010d4c <tcp_input+0x2a8>)
 8010b2a:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
    goto dropped;
 8010b2e:	f000 bc2f 	b.w	8011390 <tcp_input+0x8ec>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8010b32:	4b87      	ldr	r3, [pc, #540]	; (8010d50 <tcp_input+0x2ac>)
 8010b34:	681b      	ldr	r3, [r3, #0]
 8010b36:	899b      	ldrh	r3, [r3, #12]
 8010b38:	b29b      	uxth	r3, r3
 8010b3a:	4618      	mov	r0, r3
 8010b3c:	f7fc f902 	bl	800cd44 <lwip_htons>
 8010b40:	4603      	mov	r3, r0
 8010b42:	0b1b      	lsrs	r3, r3, #12
 8010b44:	b29b      	uxth	r3, r3
 8010b46:	b2db      	uxtb	r3, r3
 8010b48:	009b      	lsls	r3, r3, #2
 8010b4a:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8010b4c:	7cbb      	ldrb	r3, [r7, #18]
 8010b4e:	2b13      	cmp	r3, #19
 8010b50:	d905      	bls.n	8010b5e <tcp_input+0xba>
 8010b52:	7cbb      	ldrb	r3, [r7, #18]
 8010b54:	b29a      	uxth	r2, r3
 8010b56:	687b      	ldr	r3, [r7, #4]
 8010b58:	891b      	ldrh	r3, [r3, #8]
 8010b5a:	429a      	cmp	r2, r3
 8010b5c:	d909      	bls.n	8010b72 <tcp_input+0xce>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: invalid header length (%"U16_F")\n", (u16_t)hdrlen_bytes));
    TCP_STATS_INC(tcp.lenerr);
 8010b5e:	4b7b      	ldr	r3, [pc, #492]	; (8010d4c <tcp_input+0x2a8>)
 8010b60:	f8b3 309a 	ldrh.w	r3, [r3, #154]	; 0x9a
 8010b64:	3301      	adds	r3, #1
 8010b66:	b29a      	uxth	r2, r3
 8010b68:	4b78      	ldr	r3, [pc, #480]	; (8010d4c <tcp_input+0x2a8>)
 8010b6a:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
    goto dropped;
 8010b6e:	f000 bc0f 	b.w	8011390 <tcp_input+0x8ec>
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8010b72:	7cbb      	ldrb	r3, [r7, #18]
 8010b74:	b29b      	uxth	r3, r3
 8010b76:	3b14      	subs	r3, #20
 8010b78:	b29a      	uxth	r2, r3
 8010b7a:	4b77      	ldr	r3, [pc, #476]	; (8010d58 <tcp_input+0x2b4>)
 8010b7c:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8010b7e:	4b77      	ldr	r3, [pc, #476]	; (8010d5c <tcp_input+0x2b8>)
 8010b80:	2200      	movs	r2, #0
 8010b82:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8010b84:	687b      	ldr	r3, [r7, #4]
 8010b86:	895a      	ldrh	r2, [r3, #10]
 8010b88:	7cbb      	ldrb	r3, [r7, #18]
 8010b8a:	b29b      	uxth	r3, r3
 8010b8c:	429a      	cmp	r2, r3
 8010b8e:	d309      	bcc.n	8010ba4 <tcp_input+0x100>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8010b90:	4b71      	ldr	r3, [pc, #452]	; (8010d58 <tcp_input+0x2b4>)
 8010b92:	881a      	ldrh	r2, [r3, #0]
 8010b94:	4b72      	ldr	r3, [pc, #456]	; (8010d60 <tcp_input+0x2bc>)
 8010b96:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8010b98:	7cbb      	ldrb	r3, [r7, #18]
 8010b9a:	4619      	mov	r1, r3
 8010b9c:	6878      	ldr	r0, [r7, #4]
 8010b9e:	f7fd fd59 	bl	800e654 <pbuf_remove_header>
 8010ba2:	e062      	b.n	8010c6a <tcp_input+0x1c6>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8010ba4:	687b      	ldr	r3, [r7, #4]
 8010ba6:	681b      	ldr	r3, [r3, #0]
 8010ba8:	2b00      	cmp	r3, #0
 8010baa:	d109      	bne.n	8010bc0 <tcp_input+0x11c>
 8010bac:	22c2      	movs	r2, #194	; 0xc2
 8010bae:	496d      	ldr	r1, [pc, #436]	; (8010d64 <tcp_input+0x2c0>)
 8010bb0:	4863      	ldr	r0, [pc, #396]	; (8010d40 <tcp_input+0x29c>)
 8010bb2:	f00a faaf 	bl	801b114 <trace_printf>
 8010bb6:	4963      	ldr	r1, [pc, #396]	; (8010d44 <tcp_input+0x2a0>)
 8010bb8:	4863      	ldr	r0, [pc, #396]	; (8010d48 <tcp_input+0x2a4>)
 8010bba:	f00a faab 	bl	801b114 <trace_printf>
 8010bbe:	e7fe      	b.n	8010bbe <tcp_input+0x11a>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8010bc0:	2114      	movs	r1, #20
 8010bc2:	6878      	ldr	r0, [r7, #4]
 8010bc4:	f7fd fd46 	bl	800e654 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8010bc8:	687b      	ldr	r3, [r7, #4]
 8010bca:	895a      	ldrh	r2, [r3, #10]
 8010bcc:	4b64      	ldr	r3, [pc, #400]	; (8010d60 <tcp_input+0x2bc>)
 8010bce:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8010bd0:	4b61      	ldr	r3, [pc, #388]	; (8010d58 <tcp_input+0x2b4>)
 8010bd2:	881a      	ldrh	r2, [r3, #0]
 8010bd4:	4b62      	ldr	r3, [pc, #392]	; (8010d60 <tcp_input+0x2bc>)
 8010bd6:	881b      	ldrh	r3, [r3, #0]
 8010bd8:	1ad3      	subs	r3, r2, r3
 8010bda:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8010bdc:	4b60      	ldr	r3, [pc, #384]	; (8010d60 <tcp_input+0x2bc>)
 8010bde:	881b      	ldrh	r3, [r3, #0]
 8010be0:	4619      	mov	r1, r3
 8010be2:	6878      	ldr	r0, [r7, #4]
 8010be4:	f7fd fd36 	bl	800e654 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8010be8:	687b      	ldr	r3, [r7, #4]
 8010bea:	681b      	ldr	r3, [r3, #0]
 8010bec:	895b      	ldrh	r3, [r3, #10]
 8010bee:	8a3a      	ldrh	r2, [r7, #16]
 8010bf0:	429a      	cmp	r2, r3
 8010bf2:	d908      	bls.n	8010c06 <tcp_input+0x162>
      /* drop short packets */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: options overflow second pbuf (%"U16_F" bytes)\n", p->next->len));
      TCP_STATS_INC(tcp.lenerr);
 8010bf4:	4b55      	ldr	r3, [pc, #340]	; (8010d4c <tcp_input+0x2a8>)
 8010bf6:	f8b3 309a 	ldrh.w	r3, [r3, #154]	; 0x9a
 8010bfa:	3301      	adds	r3, #1
 8010bfc:	b29a      	uxth	r2, r3
 8010bfe:	4b53      	ldr	r3, [pc, #332]	; (8010d4c <tcp_input+0x2a8>)
 8010c00:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
      goto dropped;
 8010c04:	e3c4      	b.n	8011390 <tcp_input+0x8ec>
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8010c06:	687b      	ldr	r3, [r7, #4]
 8010c08:	681b      	ldr	r3, [r3, #0]
 8010c0a:	685b      	ldr	r3, [r3, #4]
 8010c0c:	4a53      	ldr	r2, [pc, #332]	; (8010d5c <tcp_input+0x2b8>)
 8010c0e:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8010c10:	687b      	ldr	r3, [r7, #4]
 8010c12:	681b      	ldr	r3, [r3, #0]
 8010c14:	8a3a      	ldrh	r2, [r7, #16]
 8010c16:	4611      	mov	r1, r2
 8010c18:	4618      	mov	r0, r3
 8010c1a:	f7fd fd1b 	bl	800e654 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8010c1e:	687b      	ldr	r3, [r7, #4]
 8010c20:	891a      	ldrh	r2, [r3, #8]
 8010c22:	8a3b      	ldrh	r3, [r7, #16]
 8010c24:	1ad3      	subs	r3, r2, r3
 8010c26:	b29a      	uxth	r2, r3
 8010c28:	687b      	ldr	r3, [r7, #4]
 8010c2a:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8010c2c:	687b      	ldr	r3, [r7, #4]
 8010c2e:	895b      	ldrh	r3, [r3, #10]
 8010c30:	2b00      	cmp	r3, #0
 8010c32:	d009      	beq.n	8010c48 <tcp_input+0x1a4>
 8010c34:	22df      	movs	r2, #223	; 0xdf
 8010c36:	494c      	ldr	r1, [pc, #304]	; (8010d68 <tcp_input+0x2c4>)
 8010c38:	4841      	ldr	r0, [pc, #260]	; (8010d40 <tcp_input+0x29c>)
 8010c3a:	f00a fa6b 	bl	801b114 <trace_printf>
 8010c3e:	4941      	ldr	r1, [pc, #260]	; (8010d44 <tcp_input+0x2a0>)
 8010c40:	4841      	ldr	r0, [pc, #260]	; (8010d48 <tcp_input+0x2a4>)
 8010c42:	f00a fa67 	bl	801b114 <trace_printf>
 8010c46:	e7fe      	b.n	8010c46 <tcp_input+0x1a2>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8010c48:	687b      	ldr	r3, [r7, #4]
 8010c4a:	891a      	ldrh	r2, [r3, #8]
 8010c4c:	687b      	ldr	r3, [r7, #4]
 8010c4e:	681b      	ldr	r3, [r3, #0]
 8010c50:	891b      	ldrh	r3, [r3, #8]
 8010c52:	429a      	cmp	r2, r3
 8010c54:	d009      	beq.n	8010c6a <tcp_input+0x1c6>
 8010c56:	22e0      	movs	r2, #224	; 0xe0
 8010c58:	4944      	ldr	r1, [pc, #272]	; (8010d6c <tcp_input+0x2c8>)
 8010c5a:	4839      	ldr	r0, [pc, #228]	; (8010d40 <tcp_input+0x29c>)
 8010c5c:	f00a fa5a 	bl	801b114 <trace_printf>
 8010c60:	4938      	ldr	r1, [pc, #224]	; (8010d44 <tcp_input+0x2a0>)
 8010c62:	4839      	ldr	r0, [pc, #228]	; (8010d48 <tcp_input+0x2a4>)
 8010c64:	f00a fa56 	bl	801b114 <trace_printf>
 8010c68:	e7fe      	b.n	8010c68 <tcp_input+0x1c4>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8010c6a:	4b39      	ldr	r3, [pc, #228]	; (8010d50 <tcp_input+0x2ac>)
 8010c6c:	681b      	ldr	r3, [r3, #0]
 8010c6e:	881b      	ldrh	r3, [r3, #0]
 8010c70:	b29b      	uxth	r3, r3
 8010c72:	4a37      	ldr	r2, [pc, #220]	; (8010d50 <tcp_input+0x2ac>)
 8010c74:	6814      	ldr	r4, [r2, #0]
 8010c76:	4618      	mov	r0, r3
 8010c78:	f7fc f864 	bl	800cd44 <lwip_htons>
 8010c7c:	4603      	mov	r3, r0
 8010c7e:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8010c80:	4b33      	ldr	r3, [pc, #204]	; (8010d50 <tcp_input+0x2ac>)
 8010c82:	681b      	ldr	r3, [r3, #0]
 8010c84:	885b      	ldrh	r3, [r3, #2]
 8010c86:	b29b      	uxth	r3, r3
 8010c88:	4a31      	ldr	r2, [pc, #196]	; (8010d50 <tcp_input+0x2ac>)
 8010c8a:	6814      	ldr	r4, [r2, #0]
 8010c8c:	4618      	mov	r0, r3
 8010c8e:	f7fc f859 	bl	800cd44 <lwip_htons>
 8010c92:	4603      	mov	r3, r0
 8010c94:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8010c96:	4b2e      	ldr	r3, [pc, #184]	; (8010d50 <tcp_input+0x2ac>)
 8010c98:	681b      	ldr	r3, [r3, #0]
 8010c9a:	685b      	ldr	r3, [r3, #4]
 8010c9c:	4a2c      	ldr	r2, [pc, #176]	; (8010d50 <tcp_input+0x2ac>)
 8010c9e:	6814      	ldr	r4, [r2, #0]
 8010ca0:	4618      	mov	r0, r3
 8010ca2:	f7fc f864 	bl	800cd6e <lwip_htonl>
 8010ca6:	4603      	mov	r3, r0
 8010ca8:	6063      	str	r3, [r4, #4]
 8010caa:	6863      	ldr	r3, [r4, #4]
 8010cac:	4a30      	ldr	r2, [pc, #192]	; (8010d70 <tcp_input+0x2cc>)
 8010cae:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8010cb0:	4b27      	ldr	r3, [pc, #156]	; (8010d50 <tcp_input+0x2ac>)
 8010cb2:	681b      	ldr	r3, [r3, #0]
 8010cb4:	689b      	ldr	r3, [r3, #8]
 8010cb6:	4a26      	ldr	r2, [pc, #152]	; (8010d50 <tcp_input+0x2ac>)
 8010cb8:	6814      	ldr	r4, [r2, #0]
 8010cba:	4618      	mov	r0, r3
 8010cbc:	f7fc f857 	bl	800cd6e <lwip_htonl>
 8010cc0:	4603      	mov	r3, r0
 8010cc2:	60a3      	str	r3, [r4, #8]
 8010cc4:	68a3      	ldr	r3, [r4, #8]
 8010cc6:	4a2b      	ldr	r2, [pc, #172]	; (8010d74 <tcp_input+0x2d0>)
 8010cc8:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8010cca:	4b21      	ldr	r3, [pc, #132]	; (8010d50 <tcp_input+0x2ac>)
 8010ccc:	681b      	ldr	r3, [r3, #0]
 8010cce:	89db      	ldrh	r3, [r3, #14]
 8010cd0:	b29b      	uxth	r3, r3
 8010cd2:	4a1f      	ldr	r2, [pc, #124]	; (8010d50 <tcp_input+0x2ac>)
 8010cd4:	6814      	ldr	r4, [r2, #0]
 8010cd6:	4618      	mov	r0, r3
 8010cd8:	f7fc f834 	bl	800cd44 <lwip_htons>
 8010cdc:	4603      	mov	r3, r0
 8010cde:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8010ce0:	4b1b      	ldr	r3, [pc, #108]	; (8010d50 <tcp_input+0x2ac>)
 8010ce2:	681b      	ldr	r3, [r3, #0]
 8010ce4:	899b      	ldrh	r3, [r3, #12]
 8010ce6:	b29b      	uxth	r3, r3
 8010ce8:	4618      	mov	r0, r3
 8010cea:	f7fc f82b 	bl	800cd44 <lwip_htons>
 8010cee:	4603      	mov	r3, r0
 8010cf0:	b2db      	uxtb	r3, r3
 8010cf2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010cf6:	b2da      	uxtb	r2, r3
 8010cf8:	4b1f      	ldr	r3, [pc, #124]	; (8010d78 <tcp_input+0x2d4>)
 8010cfa:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8010cfc:	687b      	ldr	r3, [r7, #4]
 8010cfe:	891a      	ldrh	r2, [r3, #8]
 8010d00:	4b1e      	ldr	r3, [pc, #120]	; (8010d7c <tcp_input+0x2d8>)
 8010d02:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8010d04:	4b1c      	ldr	r3, [pc, #112]	; (8010d78 <tcp_input+0x2d4>)
 8010d06:	781b      	ldrb	r3, [r3, #0]
 8010d08:	f003 0303 	and.w	r3, r3, #3
 8010d0c:	2b00      	cmp	r3, #0
 8010d0e:	d037      	beq.n	8010d80 <tcp_input+0x2dc>
    tcplen++;
 8010d10:	4b1a      	ldr	r3, [pc, #104]	; (8010d7c <tcp_input+0x2d8>)
 8010d12:	881b      	ldrh	r3, [r3, #0]
 8010d14:	3301      	adds	r3, #1
 8010d16:	b29a      	uxth	r2, r3
 8010d18:	4b18      	ldr	r3, [pc, #96]	; (8010d7c <tcp_input+0x2d8>)
 8010d1a:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8010d1c:	687b      	ldr	r3, [r7, #4]
 8010d1e:	891a      	ldrh	r2, [r3, #8]
 8010d20:	4b16      	ldr	r3, [pc, #88]	; (8010d7c <tcp_input+0x2d8>)
 8010d22:	881b      	ldrh	r3, [r3, #0]
 8010d24:	429a      	cmp	r2, r3
 8010d26:	d92b      	bls.n	8010d80 <tcp_input+0x2dc>
      /* u16_t overflow, cannot handle this */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: length u16_t overflow, cannot handle this\n"));
      TCP_STATS_INC(tcp.lenerr);
 8010d28:	4b08      	ldr	r3, [pc, #32]	; (8010d4c <tcp_input+0x2a8>)
 8010d2a:	f8b3 309a 	ldrh.w	r3, [r3, #154]	; 0x9a
 8010d2e:	3301      	adds	r3, #1
 8010d30:	b29a      	uxth	r2, r3
 8010d32:	4b06      	ldr	r3, [pc, #24]	; (8010d4c <tcp_input+0x2a8>)
 8010d34:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
      goto dropped;
 8010d38:	e32a      	b.n	8011390 <tcp_input+0x8ec>
 8010d3a:	bf00      	nop
 8010d3c:	0801e9f4 	.word	0x0801e9f4
 8010d40:	0801ea0c 	.word	0x0801ea0c
 8010d44:	0801ea2c 	.word	0x0801ea2c
 8010d48:	0801ea60 	.word	0x0801ea60
 8010d4c:	20010b7c 	.word	0x20010b7c
 8010d50:	20009fa4 	.word	0x20009fa4
 8010d54:	2000d40c 	.word	0x2000d40c
 8010d58:	20009fa8 	.word	0x20009fa8
 8010d5c:	20009fac 	.word	0x20009fac
 8010d60:	20009faa 	.word	0x20009faa
 8010d64:	0801ea64 	.word	0x0801ea64
 8010d68:	0801ea74 	.word	0x0801ea74
 8010d6c:	0801ea80 	.word	0x0801ea80
 8010d70:	20009fb4 	.word	0x20009fb4
 8010d74:	20009fb8 	.word	0x20009fb8
 8010d78:	20009fc0 	.word	0x20009fc0
 8010d7c:	20009fbe 	.word	0x20009fbe
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8010d80:	2300      	movs	r3, #0
 8010d82:	61fb      	str	r3, [r7, #28]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010d84:	4b90      	ldr	r3, [pc, #576]	; (8010fc8 <tcp_input+0x524>)
 8010d86:	681b      	ldr	r3, [r3, #0]
 8010d88:	61bb      	str	r3, [r7, #24]
 8010d8a:	e092      	b.n	8010eb2 <tcp_input+0x40e>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8010d8c:	69bb      	ldr	r3, [r7, #24]
 8010d8e:	7d1b      	ldrb	r3, [r3, #20]
 8010d90:	2b00      	cmp	r3, #0
 8010d92:	d109      	bne.n	8010da8 <tcp_input+0x304>
 8010d94:	22fb      	movs	r2, #251	; 0xfb
 8010d96:	498d      	ldr	r1, [pc, #564]	; (8010fcc <tcp_input+0x528>)
 8010d98:	488d      	ldr	r0, [pc, #564]	; (8010fd0 <tcp_input+0x52c>)
 8010d9a:	f00a f9bb 	bl	801b114 <trace_printf>
 8010d9e:	498d      	ldr	r1, [pc, #564]	; (8010fd4 <tcp_input+0x530>)
 8010da0:	488d      	ldr	r0, [pc, #564]	; (8010fd8 <tcp_input+0x534>)
 8010da2:	f00a f9b7 	bl	801b114 <trace_printf>
 8010da6:	e7fe      	b.n	8010da6 <tcp_input+0x302>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8010da8:	69bb      	ldr	r3, [r7, #24]
 8010daa:	7d1b      	ldrb	r3, [r3, #20]
 8010dac:	2b0a      	cmp	r3, #10
 8010dae:	d109      	bne.n	8010dc4 <tcp_input+0x320>
 8010db0:	22fc      	movs	r2, #252	; 0xfc
 8010db2:	498a      	ldr	r1, [pc, #552]	; (8010fdc <tcp_input+0x538>)
 8010db4:	4886      	ldr	r0, [pc, #536]	; (8010fd0 <tcp_input+0x52c>)
 8010db6:	f00a f9ad 	bl	801b114 <trace_printf>
 8010dba:	4986      	ldr	r1, [pc, #536]	; (8010fd4 <tcp_input+0x530>)
 8010dbc:	4886      	ldr	r0, [pc, #536]	; (8010fd8 <tcp_input+0x534>)
 8010dbe:	f00a f9a9 	bl	801b114 <trace_printf>
 8010dc2:	e7fe      	b.n	8010dc2 <tcp_input+0x31e>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8010dc4:	69bb      	ldr	r3, [r7, #24]
 8010dc6:	7d1b      	ldrb	r3, [r3, #20]
 8010dc8:	2b01      	cmp	r3, #1
 8010dca:	d109      	bne.n	8010de0 <tcp_input+0x33c>
 8010dcc:	22fd      	movs	r2, #253	; 0xfd
 8010dce:	4984      	ldr	r1, [pc, #528]	; (8010fe0 <tcp_input+0x53c>)
 8010dd0:	487f      	ldr	r0, [pc, #508]	; (8010fd0 <tcp_input+0x52c>)
 8010dd2:	f00a f99f 	bl	801b114 <trace_printf>
 8010dd6:	497f      	ldr	r1, [pc, #508]	; (8010fd4 <tcp_input+0x530>)
 8010dd8:	487f      	ldr	r0, [pc, #508]	; (8010fd8 <tcp_input+0x534>)
 8010dda:	f00a f99b 	bl	801b114 <trace_printf>
 8010dde:	e7fe      	b.n	8010dde <tcp_input+0x33a>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010de0:	69bb      	ldr	r3, [r7, #24]
 8010de2:	7a1b      	ldrb	r3, [r3, #8]
 8010de4:	2b00      	cmp	r3, #0
 8010de6:	d00c      	beq.n	8010e02 <tcp_input+0x35e>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8010de8:	69bb      	ldr	r3, [r7, #24]
 8010dea:	7a1a      	ldrb	r2, [r3, #8]
 8010dec:	4b7d      	ldr	r3, [pc, #500]	; (8010fe4 <tcp_input+0x540>)
 8010dee:	685b      	ldr	r3, [r3, #4]
 8010df0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8010df4:	3301      	adds	r3, #1
 8010df6:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010df8:	429a      	cmp	r2, r3
 8010dfa:	d002      	beq.n	8010e02 <tcp_input+0x35e>
      prev = pcb;
 8010dfc:	69bb      	ldr	r3, [r7, #24]
 8010dfe:	61fb      	str	r3, [r7, #28]
      continue;
 8010e00:	e054      	b.n	8010eac <tcp_input+0x408>
    }

    if (pcb->remote_port == tcphdr->src &&
 8010e02:	69bb      	ldr	r3, [r7, #24]
 8010e04:	8b1a      	ldrh	r2, [r3, #24]
 8010e06:	4b78      	ldr	r3, [pc, #480]	; (8010fe8 <tcp_input+0x544>)
 8010e08:	681b      	ldr	r3, [r3, #0]
 8010e0a:	881b      	ldrh	r3, [r3, #0]
 8010e0c:	b29b      	uxth	r3, r3
 8010e0e:	429a      	cmp	r2, r3
 8010e10:	d14a      	bne.n	8010ea8 <tcp_input+0x404>
        pcb->local_port == tcphdr->dest &&
 8010e12:	69bb      	ldr	r3, [r7, #24]
 8010e14:	8ada      	ldrh	r2, [r3, #22]
 8010e16:	4b74      	ldr	r3, [pc, #464]	; (8010fe8 <tcp_input+0x544>)
 8010e18:	681b      	ldr	r3, [r3, #0]
 8010e1a:	885b      	ldrh	r3, [r3, #2]
 8010e1c:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8010e1e:	429a      	cmp	r2, r3
 8010e20:	d142      	bne.n	8010ea8 <tcp_input+0x404>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8010e22:	69bb      	ldr	r3, [r7, #24]
 8010e24:	685a      	ldr	r2, [r3, #4]
 8010e26:	4b6f      	ldr	r3, [pc, #444]	; (8010fe4 <tcp_input+0x540>)
 8010e28:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8010e2a:	429a      	cmp	r2, r3
 8010e2c:	d13c      	bne.n	8010ea8 <tcp_input+0x404>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8010e2e:	69bb      	ldr	r3, [r7, #24]
 8010e30:	681a      	ldr	r2, [r3, #0]
 8010e32:	4b6c      	ldr	r3, [pc, #432]	; (8010fe4 <tcp_input+0x540>)
 8010e34:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8010e36:	429a      	cmp	r2, r3
 8010e38:	d136      	bne.n	8010ea8 <tcp_input+0x404>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8010e3a:	69bb      	ldr	r3, [r7, #24]
 8010e3c:	68db      	ldr	r3, [r3, #12]
 8010e3e:	69ba      	ldr	r2, [r7, #24]
 8010e40:	429a      	cmp	r2, r3
 8010e42:	d10a      	bne.n	8010e5a <tcp_input+0x3b6>
 8010e44:	f240 120d 	movw	r2, #269	; 0x10d
 8010e48:	4968      	ldr	r1, [pc, #416]	; (8010fec <tcp_input+0x548>)
 8010e4a:	4861      	ldr	r0, [pc, #388]	; (8010fd0 <tcp_input+0x52c>)
 8010e4c:	f00a f962 	bl	801b114 <trace_printf>
 8010e50:	4960      	ldr	r1, [pc, #384]	; (8010fd4 <tcp_input+0x530>)
 8010e52:	4861      	ldr	r0, [pc, #388]	; (8010fd8 <tcp_input+0x534>)
 8010e54:	f00a f95e 	bl	801b114 <trace_printf>
 8010e58:	e7fe      	b.n	8010e58 <tcp_input+0x3b4>
      if (prev != NULL) {
 8010e5a:	69fb      	ldr	r3, [r7, #28]
 8010e5c:	2b00      	cmp	r3, #0
 8010e5e:	d00b      	beq.n	8010e78 <tcp_input+0x3d4>
        prev->next = pcb->next;
 8010e60:	69bb      	ldr	r3, [r7, #24]
 8010e62:	68da      	ldr	r2, [r3, #12]
 8010e64:	69fb      	ldr	r3, [r7, #28]
 8010e66:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8010e68:	4b57      	ldr	r3, [pc, #348]	; (8010fc8 <tcp_input+0x524>)
 8010e6a:	681a      	ldr	r2, [r3, #0]
 8010e6c:	69bb      	ldr	r3, [r7, #24]
 8010e6e:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8010e70:	4a55      	ldr	r2, [pc, #340]	; (8010fc8 <tcp_input+0x524>)
 8010e72:	69bb      	ldr	r3, [r7, #24]
 8010e74:	6013      	str	r3, [r2, #0]
 8010e76:	e007      	b.n	8010e88 <tcp_input+0x3e4>
      } else {
        TCP_STATS_INC(tcp.cachehit);
 8010e78:	4b5d      	ldr	r3, [pc, #372]	; (8010ff0 <tcp_input+0x54c>)
 8010e7a:	f8b3 30a6 	ldrh.w	r3, [r3, #166]	; 0xa6
 8010e7e:	3301      	adds	r3, #1
 8010e80:	b29a      	uxth	r2, r3
 8010e82:	4b5b      	ldr	r3, [pc, #364]	; (8010ff0 <tcp_input+0x54c>)
 8010e84:	f8a3 20a6 	strh.w	r2, [r3, #166]	; 0xa6
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8010e88:	69bb      	ldr	r3, [r7, #24]
 8010e8a:	68db      	ldr	r3, [r3, #12]
 8010e8c:	69ba      	ldr	r2, [r7, #24]
 8010e8e:	429a      	cmp	r2, r3
 8010e90:	d114      	bne.n	8010ebc <tcp_input+0x418>
 8010e92:	f240 1215 	movw	r2, #277	; 0x115
 8010e96:	4957      	ldr	r1, [pc, #348]	; (8010ff4 <tcp_input+0x550>)
 8010e98:	484d      	ldr	r0, [pc, #308]	; (8010fd0 <tcp_input+0x52c>)
 8010e9a:	f00a f93b 	bl	801b114 <trace_printf>
 8010e9e:	494d      	ldr	r1, [pc, #308]	; (8010fd4 <tcp_input+0x530>)
 8010ea0:	484d      	ldr	r0, [pc, #308]	; (8010fd8 <tcp_input+0x534>)
 8010ea2:	f00a f937 	bl	801b114 <trace_printf>
 8010ea6:	e7fe      	b.n	8010ea6 <tcp_input+0x402>
      break;
    }
    prev = pcb;
 8010ea8:	69bb      	ldr	r3, [r7, #24]
 8010eaa:	61fb      	str	r3, [r7, #28]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010eac:	69bb      	ldr	r3, [r7, #24]
 8010eae:	68db      	ldr	r3, [r3, #12]
 8010eb0:	61bb      	str	r3, [r7, #24]
 8010eb2:	69bb      	ldr	r3, [r7, #24]
 8010eb4:	2b00      	cmp	r3, #0
 8010eb6:	f47f af69 	bne.w	8010d8c <tcp_input+0x2e8>
 8010eba:	e000      	b.n	8010ebe <tcp_input+0x41a>
      break;
 8010ebc:	bf00      	nop
  }

  if (pcb == NULL) {
 8010ebe:	69bb      	ldr	r3, [r7, #24]
 8010ec0:	2b00      	cmp	r3, #0
 8010ec2:	f040 80c1 	bne.w	8011048 <tcp_input+0x5a4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8010ec6:	4b4c      	ldr	r3, [pc, #304]	; (8010ff8 <tcp_input+0x554>)
 8010ec8:	681b      	ldr	r3, [r3, #0]
 8010eca:	61bb      	str	r3, [r7, #24]
 8010ecc:	e043      	b.n	8010f56 <tcp_input+0x4b2>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8010ece:	69bb      	ldr	r3, [r7, #24]
 8010ed0:	7d1b      	ldrb	r3, [r3, #20]
 8010ed2:	2b0a      	cmp	r3, #10
 8010ed4:	d00a      	beq.n	8010eec <tcp_input+0x448>
 8010ed6:	f240 121f 	movw	r2, #287	; 0x11f
 8010eda:	4948      	ldr	r1, [pc, #288]	; (8010ffc <tcp_input+0x558>)
 8010edc:	483c      	ldr	r0, [pc, #240]	; (8010fd0 <tcp_input+0x52c>)
 8010ede:	f00a f919 	bl	801b114 <trace_printf>
 8010ee2:	493c      	ldr	r1, [pc, #240]	; (8010fd4 <tcp_input+0x530>)
 8010ee4:	483c      	ldr	r0, [pc, #240]	; (8010fd8 <tcp_input+0x534>)
 8010ee6:	f00a f915 	bl	801b114 <trace_printf>
 8010eea:	e7fe      	b.n	8010eea <tcp_input+0x446>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010eec:	69bb      	ldr	r3, [r7, #24]
 8010eee:	7a1b      	ldrb	r3, [r3, #8]
 8010ef0:	2b00      	cmp	r3, #0
 8010ef2:	d009      	beq.n	8010f08 <tcp_input+0x464>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8010ef4:	69bb      	ldr	r3, [r7, #24]
 8010ef6:	7a1a      	ldrb	r2, [r3, #8]
 8010ef8:	4b3a      	ldr	r3, [pc, #232]	; (8010fe4 <tcp_input+0x540>)
 8010efa:	685b      	ldr	r3, [r3, #4]
 8010efc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8010f00:	3301      	adds	r3, #1
 8010f02:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010f04:	429a      	cmp	r2, r3
 8010f06:	d122      	bne.n	8010f4e <tcp_input+0x4aa>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8010f08:	69bb      	ldr	r3, [r7, #24]
 8010f0a:	8b1a      	ldrh	r2, [r3, #24]
 8010f0c:	4b36      	ldr	r3, [pc, #216]	; (8010fe8 <tcp_input+0x544>)
 8010f0e:	681b      	ldr	r3, [r3, #0]
 8010f10:	881b      	ldrh	r3, [r3, #0]
 8010f12:	b29b      	uxth	r3, r3
 8010f14:	429a      	cmp	r2, r3
 8010f16:	d11b      	bne.n	8010f50 <tcp_input+0x4ac>
          pcb->local_port == tcphdr->dest &&
 8010f18:	69bb      	ldr	r3, [r7, #24]
 8010f1a:	8ada      	ldrh	r2, [r3, #22]
 8010f1c:	4b32      	ldr	r3, [pc, #200]	; (8010fe8 <tcp_input+0x544>)
 8010f1e:	681b      	ldr	r3, [r3, #0]
 8010f20:	885b      	ldrh	r3, [r3, #2]
 8010f22:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8010f24:	429a      	cmp	r2, r3
 8010f26:	d113      	bne.n	8010f50 <tcp_input+0x4ac>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8010f28:	69bb      	ldr	r3, [r7, #24]
 8010f2a:	685a      	ldr	r2, [r3, #4]
 8010f2c:	4b2d      	ldr	r3, [pc, #180]	; (8010fe4 <tcp_input+0x540>)
 8010f2e:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8010f30:	429a      	cmp	r2, r3
 8010f32:	d10d      	bne.n	8010f50 <tcp_input+0x4ac>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8010f34:	69bb      	ldr	r3, [r7, #24]
 8010f36:	681a      	ldr	r2, [r3, #0]
 8010f38:	4b2a      	ldr	r3, [pc, #168]	; (8010fe4 <tcp_input+0x540>)
 8010f3a:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8010f3c:	429a      	cmp	r2, r3
 8010f3e:	d107      	bne.n	8010f50 <tcp_input+0x4ac>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8010f40:	69b8      	ldr	r0, [r7, #24]
 8010f42:	f000 fb9d 	bl	8011680 <tcp_timewait_input>
        }
        pbuf_free(p);
 8010f46:	6878      	ldr	r0, [r7, #4]
 8010f48:	f7fd fc12 	bl	800e770 <pbuf_free>
        return;
 8010f4c:	e22d      	b.n	80113aa <tcp_input+0x906>
        continue;
 8010f4e:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8010f50:	69bb      	ldr	r3, [r7, #24]
 8010f52:	68db      	ldr	r3, [r3, #12]
 8010f54:	61bb      	str	r3, [r7, #24]
 8010f56:	69bb      	ldr	r3, [r7, #24]
 8010f58:	2b00      	cmp	r3, #0
 8010f5a:	d1b8      	bne.n	8010ece <tcp_input+0x42a>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8010f5c:	2300      	movs	r3, #0
 8010f5e:	61fb      	str	r3, [r7, #28]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8010f60:	4b27      	ldr	r3, [pc, #156]	; (8011000 <tcp_input+0x55c>)
 8010f62:	681b      	ldr	r3, [r3, #0]
 8010f64:	617b      	str	r3, [r7, #20]
 8010f66:	e02a      	b.n	8010fbe <tcp_input+0x51a>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8010f68:	697b      	ldr	r3, [r7, #20]
 8010f6a:	7a1b      	ldrb	r3, [r3, #8]
 8010f6c:	2b00      	cmp	r3, #0
 8010f6e:	d00c      	beq.n	8010f8a <tcp_input+0x4e6>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8010f70:	697b      	ldr	r3, [r7, #20]
 8010f72:	7a1a      	ldrb	r2, [r3, #8]
 8010f74:	4b1b      	ldr	r3, [pc, #108]	; (8010fe4 <tcp_input+0x540>)
 8010f76:	685b      	ldr	r3, [r3, #4]
 8010f78:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8010f7c:	3301      	adds	r3, #1
 8010f7e:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8010f80:	429a      	cmp	r2, r3
 8010f82:	d002      	beq.n	8010f8a <tcp_input+0x4e6>
        prev = (struct tcp_pcb *)lpcb;
 8010f84:	697b      	ldr	r3, [r7, #20]
 8010f86:	61fb      	str	r3, [r7, #28]
        continue;
 8010f88:	e016      	b.n	8010fb8 <tcp_input+0x514>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8010f8a:	697b      	ldr	r3, [r7, #20]
 8010f8c:	8ada      	ldrh	r2, [r3, #22]
 8010f8e:	4b16      	ldr	r3, [pc, #88]	; (8010fe8 <tcp_input+0x544>)
 8010f90:	681b      	ldr	r3, [r3, #0]
 8010f92:	885b      	ldrh	r3, [r3, #2]
 8010f94:	b29b      	uxth	r3, r3
 8010f96:	429a      	cmp	r2, r3
 8010f98:	d10c      	bne.n	8010fb4 <tcp_input+0x510>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8010f9a:	697b      	ldr	r3, [r7, #20]
 8010f9c:	681a      	ldr	r2, [r3, #0]
 8010f9e:	4b11      	ldr	r3, [pc, #68]	; (8010fe4 <tcp_input+0x540>)
 8010fa0:	695b      	ldr	r3, [r3, #20]
 8010fa2:	429a      	cmp	r2, r3
 8010fa4:	d02e      	beq.n	8011004 <tcp_input+0x560>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8010fa6:	697b      	ldr	r3, [r7, #20]
 8010fa8:	2b00      	cmp	r3, #0
 8010faa:	d02c      	beq.n	8011006 <tcp_input+0x562>
 8010fac:	697b      	ldr	r3, [r7, #20]
 8010fae:	681b      	ldr	r3, [r3, #0]
 8010fb0:	2b00      	cmp	r3, #0
 8010fb2:	d028      	beq.n	8011006 <tcp_input+0x562>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8010fb4:	697b      	ldr	r3, [r7, #20]
 8010fb6:	61fb      	str	r3, [r7, #28]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8010fb8:	697b      	ldr	r3, [r7, #20]
 8010fba:	68db      	ldr	r3, [r3, #12]
 8010fbc:	617b      	str	r3, [r7, #20]
 8010fbe:	697b      	ldr	r3, [r7, #20]
 8010fc0:	2b00      	cmp	r3, #0
 8010fc2:	d1d1      	bne.n	8010f68 <tcp_input+0x4c4>
 8010fc4:	e01f      	b.n	8011006 <tcp_input+0x562>
 8010fc6:	bf00      	nop
 8010fc8:	20010c80 	.word	0x20010c80
 8010fcc:	0801eaa0 	.word	0x0801eaa0
 8010fd0:	0801ea0c 	.word	0x0801ea0c
 8010fd4:	0801ea2c 	.word	0x0801ea2c
 8010fd8:	0801ea60 	.word	0x0801ea60
 8010fdc:	0801eac8 	.word	0x0801eac8
 8010fe0:	0801eaf4 	.word	0x0801eaf4
 8010fe4:	2000d40c 	.word	0x2000d40c
 8010fe8:	20009fa4 	.word	0x20009fa4
 8010fec:	0801eb1c 	.word	0x0801eb1c
 8010ff0:	20010b7c 	.word	0x20010b7c
 8010ff4:	0801eb48 	.word	0x0801eb48
 8010ff8:	20010c90 	.word	0x20010c90
 8010ffc:	0801eb74 	.word	0x0801eb74
 8011000:	20010c88 	.word	0x20010c88
            break;
 8011004:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8011006:	697b      	ldr	r3, [r7, #20]
 8011008:	2b00      	cmp	r3, #0
 801100a:	d01d      	beq.n	8011048 <tcp_input+0x5a4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 801100c:	69fb      	ldr	r3, [r7, #28]
 801100e:	2b00      	cmp	r3, #0
 8011010:	d00b      	beq.n	801102a <tcp_input+0x586>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8011012:	697b      	ldr	r3, [r7, #20]
 8011014:	68da      	ldr	r2, [r3, #12]
 8011016:	69fb      	ldr	r3, [r7, #28]
 8011018:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 801101a:	4ba7      	ldr	r3, [pc, #668]	; (80112b8 <tcp_input+0x814>)
 801101c:	681a      	ldr	r2, [r3, #0]
 801101e:	697b      	ldr	r3, [r7, #20]
 8011020:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8011022:	4aa5      	ldr	r2, [pc, #660]	; (80112b8 <tcp_input+0x814>)
 8011024:	697b      	ldr	r3, [r7, #20]
 8011026:	6013      	str	r3, [r2, #0]
 8011028:	e007      	b.n	801103a <tcp_input+0x596>
      } else {
        TCP_STATS_INC(tcp.cachehit);
 801102a:	4ba4      	ldr	r3, [pc, #656]	; (80112bc <tcp_input+0x818>)
 801102c:	f8b3 30a6 	ldrh.w	r3, [r3, #166]	; 0xa6
 8011030:	3301      	adds	r3, #1
 8011032:	b29a      	uxth	r2, r3
 8011034:	4ba1      	ldr	r3, [pc, #644]	; (80112bc <tcp_input+0x818>)
 8011036:	f8a3 20a6 	strh.w	r2, [r3, #166]	; 0xa6
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 801103a:	6978      	ldr	r0, [r7, #20]
 801103c:	f000 fa12 	bl	8011464 <tcp_listen_input>
      }
      pbuf_free(p);
 8011040:	6878      	ldr	r0, [r7, #4]
 8011042:	f7fd fb95 	bl	800e770 <pbuf_free>
      return;
 8011046:	e1b0      	b.n	80113aa <tcp_input+0x906>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8011048:	69bb      	ldr	r3, [r7, #24]
 801104a:	2b00      	cmp	r3, #0
 801104c:	f000 8166 	beq.w	801131c <tcp_input+0x878>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8011050:	4b9b      	ldr	r3, [pc, #620]	; (80112c0 <tcp_input+0x81c>)
 8011052:	2200      	movs	r2, #0
 8011054:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8011056:	687b      	ldr	r3, [r7, #4]
 8011058:	891a      	ldrh	r2, [r3, #8]
 801105a:	4b99      	ldr	r3, [pc, #612]	; (80112c0 <tcp_input+0x81c>)
 801105c:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 801105e:	4a98      	ldr	r2, [pc, #608]	; (80112c0 <tcp_input+0x81c>)
 8011060:	687b      	ldr	r3, [r7, #4]
 8011062:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8011064:	4b97      	ldr	r3, [pc, #604]	; (80112c4 <tcp_input+0x820>)
 8011066:	681b      	ldr	r3, [r3, #0]
 8011068:	4a95      	ldr	r2, [pc, #596]	; (80112c0 <tcp_input+0x81c>)
 801106a:	6113      	str	r3, [r2, #16]

    recv_data = NULL;
 801106c:	4b96      	ldr	r3, [pc, #600]	; (80112c8 <tcp_input+0x824>)
 801106e:	2200      	movs	r2, #0
 8011070:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8011072:	4b96      	ldr	r3, [pc, #600]	; (80112cc <tcp_input+0x828>)
 8011074:	2200      	movs	r2, #0
 8011076:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8011078:	4b95      	ldr	r3, [pc, #596]	; (80112d0 <tcp_input+0x82c>)
 801107a:	2200      	movs	r2, #0
 801107c:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 801107e:	4b95      	ldr	r3, [pc, #596]	; (80112d4 <tcp_input+0x830>)
 8011080:	781b      	ldrb	r3, [r3, #0]
 8011082:	f003 0308 	and.w	r3, r3, #8
 8011086:	2b00      	cmp	r3, #0
 8011088:	d006      	beq.n	8011098 <tcp_input+0x5f4>
      p->flags |= PBUF_FLAG_PUSH;
 801108a:	687b      	ldr	r3, [r7, #4]
 801108c:	7b5b      	ldrb	r3, [r3, #13]
 801108e:	f043 0301 	orr.w	r3, r3, #1
 8011092:	b2da      	uxtb	r2, r3
 8011094:	687b      	ldr	r3, [r7, #4]
 8011096:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8011098:	69bb      	ldr	r3, [r7, #24]
 801109a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801109c:	2b00      	cmp	r3, #0
 801109e:	d01e      	beq.n	80110de <tcp_input+0x63a>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80110a0:	69b8      	ldr	r0, [r7, #24]
 80110a2:	f7fe ff67 	bl	800ff74 <tcp_process_refused_data>
 80110a6:	4603      	mov	r3, r0
 80110a8:	f113 0f0d 	cmn.w	r3, #13
 80110ac:	d007      	beq.n	80110be <tcp_input+0x61a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80110ae:	69bb      	ldr	r3, [r7, #24]
 80110b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80110b2:	2b00      	cmp	r3, #0
 80110b4:	d013      	beq.n	80110de <tcp_input+0x63a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80110b6:	4b88      	ldr	r3, [pc, #544]	; (80112d8 <tcp_input+0x834>)
 80110b8:	881b      	ldrh	r3, [r3, #0]
 80110ba:	2b00      	cmp	r3, #0
 80110bc:	d00f      	beq.n	80110de <tcp_input+0x63a>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 80110be:	69bb      	ldr	r3, [r7, #24]
 80110c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80110c2:	2b00      	cmp	r3, #0
 80110c4:	d102      	bne.n	80110cc <tcp_input+0x628>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 80110c6:	69b8      	ldr	r0, [r7, #24]
 80110c8:	f004 f85a 	bl	8015180 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
 80110cc:	4b7b      	ldr	r3, [pc, #492]	; (80112bc <tcp_input+0x818>)
 80110ce:	f8b3 3096 	ldrh.w	r3, [r3, #150]	; 0x96
 80110d2:	3301      	adds	r3, #1
 80110d4:	b29a      	uxth	r2, r3
 80110d6:	4b79      	ldr	r3, [pc, #484]	; (80112bc <tcp_input+0x818>)
 80110d8:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 80110dc:	e10b      	b.n	80112f6 <tcp_input+0x852>
      }
    }
    tcp_input_pcb = pcb;
 80110de:	4a7f      	ldr	r2, [pc, #508]	; (80112dc <tcp_input+0x838>)
 80110e0:	69bb      	ldr	r3, [r7, #24]
 80110e2:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 80110e4:	69b8      	ldr	r0, [r7, #24]
 80110e6:	f000 fb4b 	bl	8011780 <tcp_process>
 80110ea:	4603      	mov	r3, r0
 80110ec:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 80110ee:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80110f2:	f113 0f0d 	cmn.w	r3, #13
 80110f6:	f000 80d5 	beq.w	80112a4 <tcp_input+0x800>
      if (recv_flags & TF_RESET) {
 80110fa:	4b74      	ldr	r3, [pc, #464]	; (80112cc <tcp_input+0x828>)
 80110fc:	781b      	ldrb	r3, [r3, #0]
 80110fe:	f003 0308 	and.w	r3, r3, #8
 8011102:	2b00      	cmp	r3, #0
 8011104:	d015      	beq.n	8011132 <tcp_input+0x68e>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8011106:	69bb      	ldr	r3, [r7, #24]
 8011108:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801110c:	2b00      	cmp	r3, #0
 801110e:	d008      	beq.n	8011122 <tcp_input+0x67e>
 8011110:	69bb      	ldr	r3, [r7, #24]
 8011112:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011116:	69ba      	ldr	r2, [r7, #24]
 8011118:	6912      	ldr	r2, [r2, #16]
 801111a:	f06f 010d 	mvn.w	r1, #13
 801111e:	4610      	mov	r0, r2
 8011120:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8011122:	69b9      	ldr	r1, [r7, #24]
 8011124:	486e      	ldr	r0, [pc, #440]	; (80112e0 <tcp_input+0x83c>)
 8011126:	f7ff fb1d 	bl	8010764 <tcp_pcb_remove>
        tcp_free(pcb);
 801112a:	69b8      	ldr	r0, [r7, #24]
 801112c:	f7fd fe2a 	bl	800ed84 <tcp_free>
 8011130:	e0e1      	b.n	80112f6 <tcp_input+0x852>
      } else {
        err = ERR_OK;
 8011132:	2300      	movs	r3, #0
 8011134:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8011136:	4b66      	ldr	r3, [pc, #408]	; (80112d0 <tcp_input+0x82c>)
 8011138:	881b      	ldrh	r3, [r3, #0]
 801113a:	2b00      	cmp	r3, #0
 801113c:	d01d      	beq.n	801117a <tcp_input+0x6d6>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 801113e:	4b64      	ldr	r3, [pc, #400]	; (80112d0 <tcp_input+0x82c>)
 8011140:	881b      	ldrh	r3, [r3, #0]
 8011142:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8011144:	69bb      	ldr	r3, [r7, #24]
 8011146:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801114a:	2b00      	cmp	r3, #0
 801114c:	d00a      	beq.n	8011164 <tcp_input+0x6c0>
 801114e:	69bb      	ldr	r3, [r7, #24]
 8011150:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8011154:	69ba      	ldr	r2, [r7, #24]
 8011156:	6910      	ldr	r0, [r2, #16]
 8011158:	89fa      	ldrh	r2, [r7, #14]
 801115a:	69b9      	ldr	r1, [r7, #24]
 801115c:	4798      	blx	r3
 801115e:	4603      	mov	r3, r0
 8011160:	74fb      	strb	r3, [r7, #19]
 8011162:	e001      	b.n	8011168 <tcp_input+0x6c4>
 8011164:	2300      	movs	r3, #0
 8011166:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8011168:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801116c:	f113 0f0d 	cmn.w	r3, #13
 8011170:	f000 809a 	beq.w	80112a8 <tcp_input+0x804>
              goto aborted;
            }
          }
          recv_acked = 0;
 8011174:	4b56      	ldr	r3, [pc, #344]	; (80112d0 <tcp_input+0x82c>)
 8011176:	2200      	movs	r2, #0
 8011178:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 801117a:	69b8      	ldr	r0, [r7, #24]
 801117c:	f000 f92c 	bl	80113d8 <tcp_input_delayed_close>
 8011180:	4603      	mov	r3, r0
 8011182:	2b00      	cmp	r3, #0
 8011184:	f040 8092 	bne.w	80112ac <tcp_input+0x808>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8011188:	4b4f      	ldr	r3, [pc, #316]	; (80112c8 <tcp_input+0x824>)
 801118a:	681b      	ldr	r3, [r3, #0]
 801118c:	2b00      	cmp	r3, #0
 801118e:	d045      	beq.n	801121c <tcp_input+0x778>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8011190:	69bb      	ldr	r3, [r7, #24]
 8011192:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011194:	2b00      	cmp	r3, #0
 8011196:	d00a      	beq.n	80111ae <tcp_input+0x70a>
 8011198:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 801119c:	4951      	ldr	r1, [pc, #324]	; (80112e4 <tcp_input+0x840>)
 801119e:	4852      	ldr	r0, [pc, #328]	; (80112e8 <tcp_input+0x844>)
 80111a0:	f009 ffb8 	bl	801b114 <trace_printf>
 80111a4:	4951      	ldr	r1, [pc, #324]	; (80112ec <tcp_input+0x848>)
 80111a6:	4852      	ldr	r0, [pc, #328]	; (80112f0 <tcp_input+0x84c>)
 80111a8:	f009 ffb4 	bl	801b114 <trace_printf>
 80111ac:	e7fe      	b.n	80111ac <tcp_input+0x708>
          if (pcb->flags & TF_RXCLOSED) {
 80111ae:	69bb      	ldr	r3, [r7, #24]
 80111b0:	8b5b      	ldrh	r3, [r3, #26]
 80111b2:	f003 0310 	and.w	r3, r3, #16
 80111b6:	2b00      	cmp	r3, #0
 80111b8:	d008      	beq.n	80111cc <tcp_input+0x728>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 80111ba:	4b43      	ldr	r3, [pc, #268]	; (80112c8 <tcp_input+0x824>)
 80111bc:	681b      	ldr	r3, [r3, #0]
 80111be:	4618      	mov	r0, r3
 80111c0:	f7fd fad6 	bl	800e770 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 80111c4:	69b8      	ldr	r0, [r7, #24]
 80111c6:	f7fe f959 	bl	800f47c <tcp_abort>
            goto aborted;
 80111ca:	e094      	b.n	80112f6 <tcp_input+0x852>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 80111cc:	69bb      	ldr	r3, [r7, #24]
 80111ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80111d2:	2b00      	cmp	r3, #0
 80111d4:	d00c      	beq.n	80111f0 <tcp_input+0x74c>
 80111d6:	69bb      	ldr	r3, [r7, #24]
 80111d8:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80111dc:	69bb      	ldr	r3, [r7, #24]
 80111de:	6918      	ldr	r0, [r3, #16]
 80111e0:	4b39      	ldr	r3, [pc, #228]	; (80112c8 <tcp_input+0x824>)
 80111e2:	681a      	ldr	r2, [r3, #0]
 80111e4:	2300      	movs	r3, #0
 80111e6:	69b9      	ldr	r1, [r7, #24]
 80111e8:	47a0      	blx	r4
 80111ea:	4603      	mov	r3, r0
 80111ec:	74fb      	strb	r3, [r7, #19]
 80111ee:	e008      	b.n	8011202 <tcp_input+0x75e>
 80111f0:	4b35      	ldr	r3, [pc, #212]	; (80112c8 <tcp_input+0x824>)
 80111f2:	681a      	ldr	r2, [r3, #0]
 80111f4:	2300      	movs	r3, #0
 80111f6:	69b9      	ldr	r1, [r7, #24]
 80111f8:	2000      	movs	r0, #0
 80111fa:	f7fe ff9b 	bl	8010134 <tcp_recv_null>
 80111fe:	4603      	mov	r3, r0
 8011200:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8011202:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011206:	f113 0f0d 	cmn.w	r3, #13
 801120a:	d051      	beq.n	80112b0 <tcp_input+0x80c>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 801120c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011210:	2b00      	cmp	r3, #0
 8011212:	d003      	beq.n	801121c <tcp_input+0x778>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8011214:	4b2c      	ldr	r3, [pc, #176]	; (80112c8 <tcp_input+0x824>)
 8011216:	681a      	ldr	r2, [r3, #0]
 8011218:	69bb      	ldr	r3, [r7, #24]
 801121a:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 801121c:	4b2b      	ldr	r3, [pc, #172]	; (80112cc <tcp_input+0x828>)
 801121e:	781b      	ldrb	r3, [r3, #0]
 8011220:	f003 0320 	and.w	r3, r3, #32
 8011224:	2b00      	cmp	r3, #0
 8011226:	d030      	beq.n	801128a <tcp_input+0x7e6>
          if (pcb->refused_data != NULL) {
 8011228:	69bb      	ldr	r3, [r7, #24]
 801122a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801122c:	2b00      	cmp	r3, #0
 801122e:	d009      	beq.n	8011244 <tcp_input+0x7a0>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8011230:	69bb      	ldr	r3, [r7, #24]
 8011232:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011234:	7b5a      	ldrb	r2, [r3, #13]
 8011236:	69bb      	ldr	r3, [r7, #24]
 8011238:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801123a:	f042 0220 	orr.w	r2, r2, #32
 801123e:	b2d2      	uxtb	r2, r2
 8011240:	735a      	strb	r2, [r3, #13]
 8011242:	e022      	b.n	801128a <tcp_input+0x7e6>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8011244:	69bb      	ldr	r3, [r7, #24]
 8011246:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011248:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 801124c:	d005      	beq.n	801125a <tcp_input+0x7b6>
              pcb->rcv_wnd++;
 801124e:	69bb      	ldr	r3, [r7, #24]
 8011250:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011252:	3301      	adds	r3, #1
 8011254:	b29a      	uxth	r2, r3
 8011256:	69bb      	ldr	r3, [r7, #24]
 8011258:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 801125a:	69bb      	ldr	r3, [r7, #24]
 801125c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011260:	2b00      	cmp	r3, #0
 8011262:	d00b      	beq.n	801127c <tcp_input+0x7d8>
 8011264:	69bb      	ldr	r3, [r7, #24]
 8011266:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 801126a:	69bb      	ldr	r3, [r7, #24]
 801126c:	6918      	ldr	r0, [r3, #16]
 801126e:	2300      	movs	r3, #0
 8011270:	2200      	movs	r2, #0
 8011272:	69b9      	ldr	r1, [r7, #24]
 8011274:	47a0      	blx	r4
 8011276:	4603      	mov	r3, r0
 8011278:	74fb      	strb	r3, [r7, #19]
 801127a:	e001      	b.n	8011280 <tcp_input+0x7dc>
 801127c:	2300      	movs	r3, #0
 801127e:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8011280:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011284:	f113 0f0d 	cmn.w	r3, #13
 8011288:	d014      	beq.n	80112b4 <tcp_input+0x810>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 801128a:	4b14      	ldr	r3, [pc, #80]	; (80112dc <tcp_input+0x838>)
 801128c:	2200      	movs	r2, #0
 801128e:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8011290:	69b8      	ldr	r0, [r7, #24]
 8011292:	f000 f8a1 	bl	80113d8 <tcp_input_delayed_close>
 8011296:	4603      	mov	r3, r0
 8011298:	2b00      	cmp	r3, #0
 801129a:	d12b      	bne.n	80112f4 <tcp_input+0x850>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 801129c:	69b8      	ldr	r0, [r7, #24]
 801129e:	f003 f8df 	bl	8014460 <tcp_output>
 80112a2:	e028      	b.n	80112f6 <tcp_input+0x852>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 80112a4:	bf00      	nop
 80112a6:	e026      	b.n	80112f6 <tcp_input+0x852>
              goto aborted;
 80112a8:	bf00      	nop
 80112aa:	e024      	b.n	80112f6 <tcp_input+0x852>
          goto aborted;
 80112ac:	bf00      	nop
 80112ae:	e022      	b.n	80112f6 <tcp_input+0x852>
            goto aborted;
 80112b0:	bf00      	nop
 80112b2:	e020      	b.n	80112f6 <tcp_input+0x852>
              goto aborted;
 80112b4:	bf00      	nop
 80112b6:	e01e      	b.n	80112f6 <tcp_input+0x852>
 80112b8:	20010c88 	.word	0x20010c88
 80112bc:	20010b7c 	.word	0x20010b7c
 80112c0:	20009f90 	.word	0x20009f90
 80112c4:	20009fa4 	.word	0x20009fa4
 80112c8:	20009fc4 	.word	0x20009fc4
 80112cc:	20009fc1 	.word	0x20009fc1
 80112d0:	20009fbc 	.word	0x20009fbc
 80112d4:	20009fc0 	.word	0x20009fc0
 80112d8:	20009fbe 	.word	0x20009fbe
 80112dc:	20010c94 	.word	0x20010c94
 80112e0:	20010c80 	.word	0x20010c80
 80112e4:	0801eba4 	.word	0x0801eba4
 80112e8:	0801ea0c 	.word	0x0801ea0c
 80112ec:	0801ea2c 	.word	0x0801ea2c
 80112f0:	0801ea60 	.word	0x0801ea60
          goto aborted;
 80112f4:	bf00      	nop
    tcp_input_pcb = NULL;
 80112f6:	4b2e      	ldr	r3, [pc, #184]	; (80113b0 <tcp_input+0x90c>)
 80112f8:	2200      	movs	r2, #0
 80112fa:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 80112fc:	4b2d      	ldr	r3, [pc, #180]	; (80113b4 <tcp_input+0x910>)
 80112fe:	2200      	movs	r2, #0
 8011300:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8011302:	4b2d      	ldr	r3, [pc, #180]	; (80113b8 <tcp_input+0x914>)
 8011304:	685b      	ldr	r3, [r3, #4]
 8011306:	2b00      	cmp	r3, #0
 8011308:	d04e      	beq.n	80113a8 <tcp_input+0x904>
      pbuf_free(inseg.p);
 801130a:	4b2b      	ldr	r3, [pc, #172]	; (80113b8 <tcp_input+0x914>)
 801130c:	685b      	ldr	r3, [r3, #4]
 801130e:	4618      	mov	r0, r3
 8011310:	f7fd fa2e 	bl	800e770 <pbuf_free>
      inseg.p = NULL;
 8011314:	4b28      	ldr	r3, [pc, #160]	; (80113b8 <tcp_input+0x914>)
 8011316:	2200      	movs	r2, #0
 8011318:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 801131a:	e045      	b.n	80113a8 <tcp_input+0x904>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 801131c:	4b27      	ldr	r3, [pc, #156]	; (80113bc <tcp_input+0x918>)
 801131e:	681b      	ldr	r3, [r3, #0]
 8011320:	899b      	ldrh	r3, [r3, #12]
 8011322:	b29b      	uxth	r3, r3
 8011324:	4618      	mov	r0, r3
 8011326:	f7fb fd0d 	bl	800cd44 <lwip_htons>
 801132a:	4603      	mov	r3, r0
 801132c:	b2db      	uxtb	r3, r3
 801132e:	f003 0304 	and.w	r3, r3, #4
 8011332:	2b00      	cmp	r3, #0
 8011334:	d128      	bne.n	8011388 <tcp_input+0x8e4>
      TCP_STATS_INC(tcp.proterr);
 8011336:	4b22      	ldr	r3, [pc, #136]	; (80113c0 <tcp_input+0x91c>)
 8011338:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 801133c:	3301      	adds	r3, #1
 801133e:	b29a      	uxth	r2, r3
 8011340:	4b1f      	ldr	r3, [pc, #124]	; (80113c0 <tcp_input+0x91c>)
 8011342:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
      TCP_STATS_INC(tcp.drop);
 8011346:	4b1e      	ldr	r3, [pc, #120]	; (80113c0 <tcp_input+0x91c>)
 8011348:	f8b3 3096 	ldrh.w	r3, [r3, #150]	; 0x96
 801134c:	3301      	adds	r3, #1
 801134e:	b29a      	uxth	r2, r3
 8011350:	4b1b      	ldr	r3, [pc, #108]	; (80113c0 <tcp_input+0x91c>)
 8011352:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011356:	4b1b      	ldr	r3, [pc, #108]	; (80113c4 <tcp_input+0x920>)
 8011358:	6819      	ldr	r1, [r3, #0]
 801135a:	4b1b      	ldr	r3, [pc, #108]	; (80113c8 <tcp_input+0x924>)
 801135c:	881b      	ldrh	r3, [r3, #0]
 801135e:	461a      	mov	r2, r3
 8011360:	4b1a      	ldr	r3, [pc, #104]	; (80113cc <tcp_input+0x928>)
 8011362:	681b      	ldr	r3, [r3, #0]
 8011364:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011366:	4b15      	ldr	r3, [pc, #84]	; (80113bc <tcp_input+0x918>)
 8011368:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801136a:	885b      	ldrh	r3, [r3, #2]
 801136c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801136e:	4a13      	ldr	r2, [pc, #76]	; (80113bc <tcp_input+0x918>)
 8011370:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011372:	8812      	ldrh	r2, [r2, #0]
 8011374:	b292      	uxth	r2, r2
 8011376:	9202      	str	r2, [sp, #8]
 8011378:	9301      	str	r3, [sp, #4]
 801137a:	4b15      	ldr	r3, [pc, #84]	; (80113d0 <tcp_input+0x92c>)
 801137c:	9300      	str	r3, [sp, #0]
 801137e:	4b15      	ldr	r3, [pc, #84]	; (80113d4 <tcp_input+0x930>)
 8011380:	4602      	mov	r2, r0
 8011382:	2000      	movs	r0, #0
 8011384:	f003 fea0 	bl	80150c8 <tcp_rst>
    pbuf_free(p);
 8011388:	6878      	ldr	r0, [r7, #4]
 801138a:	f7fd f9f1 	bl	800e770 <pbuf_free>
  return;
 801138e:	e00b      	b.n	80113a8 <tcp_input+0x904>
dropped:
  TCP_STATS_INC(tcp.drop);
 8011390:	4b0b      	ldr	r3, [pc, #44]	; (80113c0 <tcp_input+0x91c>)
 8011392:	f8b3 3096 	ldrh.w	r3, [r3, #150]	; 0x96
 8011396:	3301      	adds	r3, #1
 8011398:	b29a      	uxth	r2, r3
 801139a:	4b09      	ldr	r3, [pc, #36]	; (80113c0 <tcp_input+0x91c>)
 801139c:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 80113a0:	6878      	ldr	r0, [r7, #4]
 80113a2:	f7fd f9e5 	bl	800e770 <pbuf_free>
 80113a6:	e000      	b.n	80113aa <tcp_input+0x906>
  return;
 80113a8:	bf00      	nop
}
 80113aa:	3724      	adds	r7, #36	; 0x24
 80113ac:	46bd      	mov	sp, r7
 80113ae:	bd90      	pop	{r4, r7, pc}
 80113b0:	20010c94 	.word	0x20010c94
 80113b4:	20009fc4 	.word	0x20009fc4
 80113b8:	20009f90 	.word	0x20009f90
 80113bc:	20009fa4 	.word	0x20009fa4
 80113c0:	20010b7c 	.word	0x20010b7c
 80113c4:	20009fb8 	.word	0x20009fb8
 80113c8:	20009fbe 	.word	0x20009fbe
 80113cc:	20009fb4 	.word	0x20009fb4
 80113d0:	2000d41c 	.word	0x2000d41c
 80113d4:	2000d420 	.word	0x2000d420

080113d8 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 80113d8:	b580      	push	{r7, lr}
 80113da:	b082      	sub	sp, #8
 80113dc:	af00      	add	r7, sp, #0
 80113de:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 80113e0:	687b      	ldr	r3, [r7, #4]
 80113e2:	2b00      	cmp	r3, #0
 80113e4:	d10a      	bne.n	80113fc <tcp_input_delayed_close+0x24>
 80113e6:	f240 225a 	movw	r2, #602	; 0x25a
 80113ea:	4918      	ldr	r1, [pc, #96]	; (801144c <tcp_input_delayed_close+0x74>)
 80113ec:	4818      	ldr	r0, [pc, #96]	; (8011450 <tcp_input_delayed_close+0x78>)
 80113ee:	f009 fe91 	bl	801b114 <trace_printf>
 80113f2:	4918      	ldr	r1, [pc, #96]	; (8011454 <tcp_input_delayed_close+0x7c>)
 80113f4:	4818      	ldr	r0, [pc, #96]	; (8011458 <tcp_input_delayed_close+0x80>)
 80113f6:	f009 fe8d 	bl	801b114 <trace_printf>
 80113fa:	e7fe      	b.n	80113fa <tcp_input_delayed_close+0x22>

  if (recv_flags & TF_CLOSED) {
 80113fc:	4b17      	ldr	r3, [pc, #92]	; (801145c <tcp_input_delayed_close+0x84>)
 80113fe:	781b      	ldrb	r3, [r3, #0]
 8011400:	f003 0310 	and.w	r3, r3, #16
 8011404:	2b00      	cmp	r3, #0
 8011406:	d01c      	beq.n	8011442 <tcp_input_delayed_close+0x6a>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8011408:	687b      	ldr	r3, [r7, #4]
 801140a:	8b5b      	ldrh	r3, [r3, #26]
 801140c:	f003 0310 	and.w	r3, r3, #16
 8011410:	2b00      	cmp	r3, #0
 8011412:	d10d      	bne.n	8011430 <tcp_input_delayed_close+0x58>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8011414:	687b      	ldr	r3, [r7, #4]
 8011416:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801141a:	2b00      	cmp	r3, #0
 801141c:	d008      	beq.n	8011430 <tcp_input_delayed_close+0x58>
 801141e:	687b      	ldr	r3, [r7, #4]
 8011420:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011424:	687a      	ldr	r2, [r7, #4]
 8011426:	6912      	ldr	r2, [r2, #16]
 8011428:	f06f 010e 	mvn.w	r1, #14
 801142c:	4610      	mov	r0, r2
 801142e:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8011430:	6879      	ldr	r1, [r7, #4]
 8011432:	480b      	ldr	r0, [pc, #44]	; (8011460 <tcp_input_delayed_close+0x88>)
 8011434:	f7ff f996 	bl	8010764 <tcp_pcb_remove>
    tcp_free(pcb);
 8011438:	6878      	ldr	r0, [r7, #4]
 801143a:	f7fd fca3 	bl	800ed84 <tcp_free>
    return 1;
 801143e:	2301      	movs	r3, #1
 8011440:	e000      	b.n	8011444 <tcp_input_delayed_close+0x6c>
  }
  return 0;
 8011442:	2300      	movs	r3, #0
}
 8011444:	4618      	mov	r0, r3
 8011446:	3708      	adds	r7, #8
 8011448:	46bd      	mov	sp, r7
 801144a:	bd80      	pop	{r7, pc}
 801144c:	0801ebc0 	.word	0x0801ebc0
 8011450:	0801ea0c 	.word	0x0801ea0c
 8011454:	0801ea2c 	.word	0x0801ea2c
 8011458:	0801ea60 	.word	0x0801ea60
 801145c:	20009fc1 	.word	0x20009fc1
 8011460:	20010c80 	.word	0x20010c80

08011464 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8011464:	b590      	push	{r4, r7, lr}
 8011466:	b08b      	sub	sp, #44	; 0x2c
 8011468:	af04      	add	r7, sp, #16
 801146a:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 801146c:	4b75      	ldr	r3, [pc, #468]	; (8011644 <tcp_listen_input+0x1e0>)
 801146e:	781b      	ldrb	r3, [r3, #0]
 8011470:	f003 0304 	and.w	r3, r3, #4
 8011474:	2b00      	cmp	r3, #0
 8011476:	f040 80de 	bne.w	8011636 <tcp_listen_input+0x1d2>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 801147a:	687b      	ldr	r3, [r7, #4]
 801147c:	2b00      	cmp	r3, #0
 801147e:	d10a      	bne.n	8011496 <tcp_listen_input+0x32>
 8011480:	f240 2281 	movw	r2, #641	; 0x281
 8011484:	4970      	ldr	r1, [pc, #448]	; (8011648 <tcp_listen_input+0x1e4>)
 8011486:	4871      	ldr	r0, [pc, #452]	; (801164c <tcp_listen_input+0x1e8>)
 8011488:	f009 fe44 	bl	801b114 <trace_printf>
 801148c:	4970      	ldr	r1, [pc, #448]	; (8011650 <tcp_listen_input+0x1ec>)
 801148e:	4871      	ldr	r0, [pc, #452]	; (8011654 <tcp_listen_input+0x1f0>)
 8011490:	f009 fe40 	bl	801b114 <trace_printf>
 8011494:	e7fe      	b.n	8011494 <tcp_listen_input+0x30>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8011496:	4b6b      	ldr	r3, [pc, #428]	; (8011644 <tcp_listen_input+0x1e0>)
 8011498:	781b      	ldrb	r3, [r3, #0]
 801149a:	f003 0310 	and.w	r3, r3, #16
 801149e:	2b00      	cmp	r3, #0
 80114a0:	d019      	beq.n	80114d6 <tcp_listen_input+0x72>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80114a2:	4b6d      	ldr	r3, [pc, #436]	; (8011658 <tcp_listen_input+0x1f4>)
 80114a4:	6819      	ldr	r1, [r3, #0]
 80114a6:	4b6d      	ldr	r3, [pc, #436]	; (801165c <tcp_listen_input+0x1f8>)
 80114a8:	881b      	ldrh	r3, [r3, #0]
 80114aa:	461a      	mov	r2, r3
 80114ac:	4b6c      	ldr	r3, [pc, #432]	; (8011660 <tcp_listen_input+0x1fc>)
 80114ae:	681b      	ldr	r3, [r3, #0]
 80114b0:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80114b2:	4b6c      	ldr	r3, [pc, #432]	; (8011664 <tcp_listen_input+0x200>)
 80114b4:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80114b6:	885b      	ldrh	r3, [r3, #2]
 80114b8:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80114ba:	4a6a      	ldr	r2, [pc, #424]	; (8011664 <tcp_listen_input+0x200>)
 80114bc:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80114be:	8812      	ldrh	r2, [r2, #0]
 80114c0:	b292      	uxth	r2, r2
 80114c2:	9202      	str	r2, [sp, #8]
 80114c4:	9301      	str	r3, [sp, #4]
 80114c6:	4b68      	ldr	r3, [pc, #416]	; (8011668 <tcp_listen_input+0x204>)
 80114c8:	9300      	str	r3, [sp, #0]
 80114ca:	4b68      	ldr	r3, [pc, #416]	; (801166c <tcp_listen_input+0x208>)
 80114cc:	4602      	mov	r2, r0
 80114ce:	6878      	ldr	r0, [r7, #4]
 80114d0:	f003 fdfa 	bl	80150c8 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 80114d4:	e0b1      	b.n	801163a <tcp_listen_input+0x1d6>
  } else if (flags & TCP_SYN) {
 80114d6:	4b5b      	ldr	r3, [pc, #364]	; (8011644 <tcp_listen_input+0x1e0>)
 80114d8:	781b      	ldrb	r3, [r3, #0]
 80114da:	f003 0302 	and.w	r3, r3, #2
 80114de:	2b00      	cmp	r3, #0
 80114e0:	f000 80ab 	beq.w	801163a <tcp_listen_input+0x1d6>
    npcb = tcp_alloc(pcb->prio);
 80114e4:	687b      	ldr	r3, [r7, #4]
 80114e6:	7d5b      	ldrb	r3, [r3, #21]
 80114e8:	4618      	mov	r0, r3
 80114ea:	f7fe ff4f 	bl	801038c <tcp_alloc>
 80114ee:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 80114f0:	697b      	ldr	r3, [r7, #20]
 80114f2:	2b00      	cmp	r3, #0
 80114f4:	d119      	bne.n	801152a <tcp_listen_input+0xc6>
      TCP_STATS_INC(tcp.memerr);
 80114f6:	4b5e      	ldr	r3, [pc, #376]	; (8011670 <tcp_listen_input+0x20c>)
 80114f8:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 80114fc:	3301      	adds	r3, #1
 80114fe:	b29a      	uxth	r2, r3
 8011500:	4b5b      	ldr	r3, [pc, #364]	; (8011670 <tcp_listen_input+0x20c>)
 8011502:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8011506:	687b      	ldr	r3, [r7, #4]
 8011508:	699b      	ldr	r3, [r3, #24]
 801150a:	2b00      	cmp	r3, #0
 801150c:	d00a      	beq.n	8011524 <tcp_listen_input+0xc0>
 801150e:	687b      	ldr	r3, [r7, #4]
 8011510:	699b      	ldr	r3, [r3, #24]
 8011512:	687a      	ldr	r2, [r7, #4]
 8011514:	6910      	ldr	r0, [r2, #16]
 8011516:	f04f 32ff 	mov.w	r2, #4294967295
 801151a:	2100      	movs	r1, #0
 801151c:	4798      	blx	r3
 801151e:	4603      	mov	r3, r0
 8011520:	73bb      	strb	r3, [r7, #14]
      return;
 8011522:	e08b      	b.n	801163c <tcp_listen_input+0x1d8>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8011524:	23f0      	movs	r3, #240	; 0xf0
 8011526:	73bb      	strb	r3, [r7, #14]
      return;
 8011528:	e088      	b.n	801163c <tcp_listen_input+0x1d8>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 801152a:	4b52      	ldr	r3, [pc, #328]	; (8011674 <tcp_listen_input+0x210>)
 801152c:	695a      	ldr	r2, [r3, #20]
 801152e:	697b      	ldr	r3, [r7, #20]
 8011530:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8011532:	4b50      	ldr	r3, [pc, #320]	; (8011674 <tcp_listen_input+0x210>)
 8011534:	691a      	ldr	r2, [r3, #16]
 8011536:	697b      	ldr	r3, [r7, #20]
 8011538:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 801153a:	687b      	ldr	r3, [r7, #4]
 801153c:	8ada      	ldrh	r2, [r3, #22]
 801153e:	697b      	ldr	r3, [r7, #20]
 8011540:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8011542:	4b48      	ldr	r3, [pc, #288]	; (8011664 <tcp_listen_input+0x200>)
 8011544:	681b      	ldr	r3, [r3, #0]
 8011546:	881b      	ldrh	r3, [r3, #0]
 8011548:	b29a      	uxth	r2, r3
 801154a:	697b      	ldr	r3, [r7, #20]
 801154c:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 801154e:	697b      	ldr	r3, [r7, #20]
 8011550:	2203      	movs	r2, #3
 8011552:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8011554:	4b42      	ldr	r3, [pc, #264]	; (8011660 <tcp_listen_input+0x1fc>)
 8011556:	681b      	ldr	r3, [r3, #0]
 8011558:	1c5a      	adds	r2, r3, #1
 801155a:	697b      	ldr	r3, [r7, #20]
 801155c:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 801155e:	697b      	ldr	r3, [r7, #20]
 8011560:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011562:	697b      	ldr	r3, [r7, #20]
 8011564:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8011566:	6978      	ldr	r0, [r7, #20]
 8011568:	f7ff f9a6 	bl	80108b8 <tcp_next_iss>
 801156c:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 801156e:	697b      	ldr	r3, [r7, #20]
 8011570:	693a      	ldr	r2, [r7, #16]
 8011572:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8011574:	697b      	ldr	r3, [r7, #20]
 8011576:	693a      	ldr	r2, [r7, #16]
 8011578:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 801157a:	697b      	ldr	r3, [r7, #20]
 801157c:	693a      	ldr	r2, [r7, #16]
 801157e:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8011580:	697b      	ldr	r3, [r7, #20]
 8011582:	693a      	ldr	r2, [r7, #16]
 8011584:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8011586:	4b36      	ldr	r3, [pc, #216]	; (8011660 <tcp_listen_input+0x1fc>)
 8011588:	681b      	ldr	r3, [r3, #0]
 801158a:	1e5a      	subs	r2, r3, #1
 801158c:	697b      	ldr	r3, [r7, #20]
 801158e:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8011590:	687b      	ldr	r3, [r7, #4]
 8011592:	691a      	ldr	r2, [r3, #16]
 8011594:	697b      	ldr	r3, [r7, #20]
 8011596:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8011598:	697b      	ldr	r3, [r7, #20]
 801159a:	687a      	ldr	r2, [r7, #4]
 801159c:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 801159e:	687b      	ldr	r3, [r7, #4]
 80115a0:	7a5b      	ldrb	r3, [r3, #9]
 80115a2:	f003 030c 	and.w	r3, r3, #12
 80115a6:	b2da      	uxtb	r2, r3
 80115a8:	697b      	ldr	r3, [r7, #20]
 80115aa:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 80115ac:	687b      	ldr	r3, [r7, #4]
 80115ae:	7a1a      	ldrb	r2, [r3, #8]
 80115b0:	697b      	ldr	r3, [r7, #20]
 80115b2:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 80115b4:	4b30      	ldr	r3, [pc, #192]	; (8011678 <tcp_listen_input+0x214>)
 80115b6:	681a      	ldr	r2, [r3, #0]
 80115b8:	697b      	ldr	r3, [r7, #20]
 80115ba:	60da      	str	r2, [r3, #12]
 80115bc:	4a2e      	ldr	r2, [pc, #184]	; (8011678 <tcp_listen_input+0x214>)
 80115be:	697b      	ldr	r3, [r7, #20]
 80115c0:	6013      	str	r3, [r2, #0]
 80115c2:	f003 ff5f 	bl	8015484 <tcp_timer_needed>
 80115c6:	4b2d      	ldr	r3, [pc, #180]	; (801167c <tcp_listen_input+0x218>)
 80115c8:	2201      	movs	r2, #1
 80115ca:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 80115cc:	6978      	ldr	r0, [r7, #20]
 80115ce:	f001 fdef 	bl	80131b0 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 80115d2:	4b24      	ldr	r3, [pc, #144]	; (8011664 <tcp_listen_input+0x200>)
 80115d4:	681b      	ldr	r3, [r3, #0]
 80115d6:	89db      	ldrh	r3, [r3, #14]
 80115d8:	b29a      	uxth	r2, r3
 80115da:	697b      	ldr	r3, [r7, #20]
 80115dc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 80115e0:	697b      	ldr	r3, [r7, #20]
 80115e2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80115e6:	697b      	ldr	r3, [r7, #20]
 80115e8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 80115ec:	697b      	ldr	r3, [r7, #20]
 80115ee:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 80115f0:	697b      	ldr	r3, [r7, #20]
 80115f2:	3304      	adds	r3, #4
 80115f4:	4618      	mov	r0, r3
 80115f6:	f007 ff9d 	bl	8019534 <ip4_route>
 80115fa:	4601      	mov	r1, r0
 80115fc:	697b      	ldr	r3, [r7, #20]
 80115fe:	3304      	adds	r3, #4
 8011600:	461a      	mov	r2, r3
 8011602:	4620      	mov	r0, r4
 8011604:	f7ff f984 	bl	8010910 <tcp_eff_send_mss_netif>
 8011608:	4603      	mov	r3, r0
 801160a:	461a      	mov	r2, r3
 801160c:	697b      	ldr	r3, [r7, #20]
 801160e:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8011610:	2112      	movs	r1, #18
 8011612:	6978      	ldr	r0, [r7, #20]
 8011614:	f002 fe0a 	bl	801422c <tcp_enqueue_flags>
 8011618:	4603      	mov	r3, r0
 801161a:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 801161c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011620:	2b00      	cmp	r3, #0
 8011622:	d004      	beq.n	801162e <tcp_listen_input+0x1ca>
      tcp_abandon(npcb, 0);
 8011624:	2100      	movs	r1, #0
 8011626:	6978      	ldr	r0, [r7, #20]
 8011628:	f7fd fe62 	bl	800f2f0 <tcp_abandon>
      return;
 801162c:	e006      	b.n	801163c <tcp_listen_input+0x1d8>
    tcp_output(npcb);
 801162e:	6978      	ldr	r0, [r7, #20]
 8011630:	f002 ff16 	bl	8014460 <tcp_output>
  return;
 8011634:	e001      	b.n	801163a <tcp_listen_input+0x1d6>
    return;
 8011636:	bf00      	nop
 8011638:	e000      	b.n	801163c <tcp_listen_input+0x1d8>
  return;
 801163a:	bf00      	nop
}
 801163c:	371c      	adds	r7, #28
 801163e:	46bd      	mov	sp, r7
 8011640:	bd90      	pop	{r4, r7, pc}
 8011642:	bf00      	nop
 8011644:	20009fc0 	.word	0x20009fc0
 8011648:	0801ebe8 	.word	0x0801ebe8
 801164c:	0801ea0c 	.word	0x0801ea0c
 8011650:	0801ea2c 	.word	0x0801ea2c
 8011654:	0801ea60 	.word	0x0801ea60
 8011658:	20009fb8 	.word	0x20009fb8
 801165c:	20009fbe 	.word	0x20009fbe
 8011660:	20009fb4 	.word	0x20009fb4
 8011664:	20009fa4 	.word	0x20009fa4
 8011668:	2000d41c 	.word	0x2000d41c
 801166c:	2000d420 	.word	0x2000d420
 8011670:	20010b7c 	.word	0x20010b7c
 8011674:	2000d40c 	.word	0x2000d40c
 8011678:	20010c80 	.word	0x20010c80
 801167c:	20010c7c 	.word	0x20010c7c

08011680 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8011680:	b580      	push	{r7, lr}
 8011682:	b086      	sub	sp, #24
 8011684:	af04      	add	r7, sp, #16
 8011686:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8011688:	4b31      	ldr	r3, [pc, #196]	; (8011750 <tcp_timewait_input+0xd0>)
 801168a:	781b      	ldrb	r3, [r3, #0]
 801168c:	f003 0304 	and.w	r3, r3, #4
 8011690:	2b00      	cmp	r3, #0
 8011692:	d157      	bne.n	8011744 <tcp_timewait_input+0xc4>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8011694:	687b      	ldr	r3, [r7, #4]
 8011696:	2b00      	cmp	r3, #0
 8011698:	d10a      	bne.n	80116b0 <tcp_timewait_input+0x30>
 801169a:	f240 22ee 	movw	r2, #750	; 0x2ee
 801169e:	492d      	ldr	r1, [pc, #180]	; (8011754 <tcp_timewait_input+0xd4>)
 80116a0:	482d      	ldr	r0, [pc, #180]	; (8011758 <tcp_timewait_input+0xd8>)
 80116a2:	f009 fd37 	bl	801b114 <trace_printf>
 80116a6:	492d      	ldr	r1, [pc, #180]	; (801175c <tcp_timewait_input+0xdc>)
 80116a8:	482d      	ldr	r0, [pc, #180]	; (8011760 <tcp_timewait_input+0xe0>)
 80116aa:	f009 fd33 	bl	801b114 <trace_printf>
 80116ae:	e7fe      	b.n	80116ae <tcp_timewait_input+0x2e>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 80116b0:	4b27      	ldr	r3, [pc, #156]	; (8011750 <tcp_timewait_input+0xd0>)
 80116b2:	781b      	ldrb	r3, [r3, #0]
 80116b4:	f003 0302 	and.w	r3, r3, #2
 80116b8:	2b00      	cmp	r3, #0
 80116ba:	d02a      	beq.n	8011712 <tcp_timewait_input+0x92>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 80116bc:	4b29      	ldr	r3, [pc, #164]	; (8011764 <tcp_timewait_input+0xe4>)
 80116be:	681a      	ldr	r2, [r3, #0]
 80116c0:	687b      	ldr	r3, [r7, #4]
 80116c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80116c4:	1ad3      	subs	r3, r2, r3
 80116c6:	2b00      	cmp	r3, #0
 80116c8:	db2d      	blt.n	8011726 <tcp_timewait_input+0xa6>
 80116ca:	4b26      	ldr	r3, [pc, #152]	; (8011764 <tcp_timewait_input+0xe4>)
 80116cc:	681a      	ldr	r2, [r3, #0]
 80116ce:	687b      	ldr	r3, [r7, #4]
 80116d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80116d2:	6879      	ldr	r1, [r7, #4]
 80116d4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80116d6:	440b      	add	r3, r1
 80116d8:	1ad3      	subs	r3, r2, r3
 80116da:	2b00      	cmp	r3, #0
 80116dc:	dc23      	bgt.n	8011726 <tcp_timewait_input+0xa6>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80116de:	4b22      	ldr	r3, [pc, #136]	; (8011768 <tcp_timewait_input+0xe8>)
 80116e0:	6819      	ldr	r1, [r3, #0]
 80116e2:	4b22      	ldr	r3, [pc, #136]	; (801176c <tcp_timewait_input+0xec>)
 80116e4:	881b      	ldrh	r3, [r3, #0]
 80116e6:	461a      	mov	r2, r3
 80116e8:	4b1e      	ldr	r3, [pc, #120]	; (8011764 <tcp_timewait_input+0xe4>)
 80116ea:	681b      	ldr	r3, [r3, #0]
 80116ec:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80116ee:	4b20      	ldr	r3, [pc, #128]	; (8011770 <tcp_timewait_input+0xf0>)
 80116f0:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80116f2:	885b      	ldrh	r3, [r3, #2]
 80116f4:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80116f6:	4a1e      	ldr	r2, [pc, #120]	; (8011770 <tcp_timewait_input+0xf0>)
 80116f8:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80116fa:	8812      	ldrh	r2, [r2, #0]
 80116fc:	b292      	uxth	r2, r2
 80116fe:	9202      	str	r2, [sp, #8]
 8011700:	9301      	str	r3, [sp, #4]
 8011702:	4b1c      	ldr	r3, [pc, #112]	; (8011774 <tcp_timewait_input+0xf4>)
 8011704:	9300      	str	r3, [sp, #0]
 8011706:	4b1c      	ldr	r3, [pc, #112]	; (8011778 <tcp_timewait_input+0xf8>)
 8011708:	4602      	mov	r2, r0
 801170a:	6878      	ldr	r0, [r7, #4]
 801170c:	f003 fcdc 	bl	80150c8 <tcp_rst>
      return;
 8011710:	e01b      	b.n	801174a <tcp_timewait_input+0xca>
    }
  } else if (flags & TCP_FIN) {
 8011712:	4b0f      	ldr	r3, [pc, #60]	; (8011750 <tcp_timewait_input+0xd0>)
 8011714:	781b      	ldrb	r3, [r3, #0]
 8011716:	f003 0301 	and.w	r3, r3, #1
 801171a:	2b00      	cmp	r3, #0
 801171c:	d003      	beq.n	8011726 <tcp_timewait_input+0xa6>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 801171e:	4b17      	ldr	r3, [pc, #92]	; (801177c <tcp_timewait_input+0xfc>)
 8011720:	681a      	ldr	r2, [r3, #0]
 8011722:	687b      	ldr	r3, [r7, #4]
 8011724:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8011726:	4b11      	ldr	r3, [pc, #68]	; (801176c <tcp_timewait_input+0xec>)
 8011728:	881b      	ldrh	r3, [r3, #0]
 801172a:	2b00      	cmp	r3, #0
 801172c:	d00c      	beq.n	8011748 <tcp_timewait_input+0xc8>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 801172e:	687b      	ldr	r3, [r7, #4]
 8011730:	8b5b      	ldrh	r3, [r3, #26]
 8011732:	f043 0302 	orr.w	r3, r3, #2
 8011736:	b29a      	uxth	r2, r3
 8011738:	687b      	ldr	r3, [r7, #4]
 801173a:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 801173c:	6878      	ldr	r0, [r7, #4]
 801173e:	f002 fe8f 	bl	8014460 <tcp_output>
  }
  return;
 8011742:	e001      	b.n	8011748 <tcp_timewait_input+0xc8>
    return;
 8011744:	bf00      	nop
 8011746:	e000      	b.n	801174a <tcp_timewait_input+0xca>
  return;
 8011748:	bf00      	nop
}
 801174a:	3708      	adds	r7, #8
 801174c:	46bd      	mov	sp, r7
 801174e:	bd80      	pop	{r7, pc}
 8011750:	20009fc0 	.word	0x20009fc0
 8011754:	0801ec08 	.word	0x0801ec08
 8011758:	0801ea0c 	.word	0x0801ea0c
 801175c:	0801ea2c 	.word	0x0801ea2c
 8011760:	0801ea60 	.word	0x0801ea60
 8011764:	20009fb4 	.word	0x20009fb4
 8011768:	20009fb8 	.word	0x20009fb8
 801176c:	20009fbe 	.word	0x20009fbe
 8011770:	20009fa4 	.word	0x20009fa4
 8011774:	2000d41c 	.word	0x2000d41c
 8011778:	2000d420 	.word	0x2000d420
 801177c:	20010c84 	.word	0x20010c84

08011780 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8011780:	b590      	push	{r4, r7, lr}
 8011782:	b08d      	sub	sp, #52	; 0x34
 8011784:	af04      	add	r7, sp, #16
 8011786:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8011788:	2300      	movs	r3, #0
 801178a:	76bb      	strb	r3, [r7, #26]
  err_t err;

  err = ERR_OK;
 801178c:	2300      	movs	r3, #0
 801178e:	76fb      	strb	r3, [r7, #27]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8011790:	687b      	ldr	r3, [r7, #4]
 8011792:	2b00      	cmp	r3, #0
 8011794:	d10a      	bne.n	80117ac <tcp_process+0x2c>
 8011796:	f44f 7247 	mov.w	r2, #796	; 0x31c
 801179a:	49a4      	ldr	r1, [pc, #656]	; (8011a2c <tcp_process+0x2ac>)
 801179c:	48a4      	ldr	r0, [pc, #656]	; (8011a30 <tcp_process+0x2b0>)
 801179e:	f009 fcb9 	bl	801b114 <trace_printf>
 80117a2:	49a4      	ldr	r1, [pc, #656]	; (8011a34 <tcp_process+0x2b4>)
 80117a4:	48a4      	ldr	r0, [pc, #656]	; (8011a38 <tcp_process+0x2b8>)
 80117a6:	f009 fcb5 	bl	801b114 <trace_printf>
 80117aa:	e7fe      	b.n	80117aa <tcp_process+0x2a>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 80117ac:	4ba3      	ldr	r3, [pc, #652]	; (8011a3c <tcp_process+0x2bc>)
 80117ae:	781b      	ldrb	r3, [r3, #0]
 80117b0:	f003 0304 	and.w	r3, r3, #4
 80117b4:	2b00      	cmp	r3, #0
 80117b6:	d052      	beq.n	801185e <tcp_process+0xde>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 80117b8:	687b      	ldr	r3, [r7, #4]
 80117ba:	7d1b      	ldrb	r3, [r3, #20]
 80117bc:	2b02      	cmp	r3, #2
 80117be:	d108      	bne.n	80117d2 <tcp_process+0x52>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 80117c0:	687b      	ldr	r3, [r7, #4]
 80117c2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80117c4:	4b9e      	ldr	r3, [pc, #632]	; (8011a40 <tcp_process+0x2c0>)
 80117c6:	681b      	ldr	r3, [r3, #0]
 80117c8:	429a      	cmp	r2, r3
 80117ca:	d123      	bne.n	8011814 <tcp_process+0x94>
        acceptable = 1;
 80117cc:	2301      	movs	r3, #1
 80117ce:	76bb      	strb	r3, [r7, #26]
 80117d0:	e020      	b.n	8011814 <tcp_process+0x94>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 80117d2:	687b      	ldr	r3, [r7, #4]
 80117d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80117d6:	4b9b      	ldr	r3, [pc, #620]	; (8011a44 <tcp_process+0x2c4>)
 80117d8:	681b      	ldr	r3, [r3, #0]
 80117da:	429a      	cmp	r2, r3
 80117dc:	d102      	bne.n	80117e4 <tcp_process+0x64>
        acceptable = 1;
 80117de:	2301      	movs	r3, #1
 80117e0:	76bb      	strb	r3, [r7, #26]
 80117e2:	e017      	b.n	8011814 <tcp_process+0x94>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80117e4:	4b97      	ldr	r3, [pc, #604]	; (8011a44 <tcp_process+0x2c4>)
 80117e6:	681a      	ldr	r2, [r3, #0]
 80117e8:	687b      	ldr	r3, [r7, #4]
 80117ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80117ec:	1ad3      	subs	r3, r2, r3
 80117ee:	2b00      	cmp	r3, #0
 80117f0:	db10      	blt.n	8011814 <tcp_process+0x94>
 80117f2:	4b94      	ldr	r3, [pc, #592]	; (8011a44 <tcp_process+0x2c4>)
 80117f4:	681a      	ldr	r2, [r3, #0]
 80117f6:	687b      	ldr	r3, [r7, #4]
 80117f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80117fa:	6879      	ldr	r1, [r7, #4]
 80117fc:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80117fe:	440b      	add	r3, r1
 8011800:	1ad3      	subs	r3, r2, r3
 8011802:	2b00      	cmp	r3, #0
 8011804:	dc06      	bgt.n	8011814 <tcp_process+0x94>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8011806:	687b      	ldr	r3, [r7, #4]
 8011808:	8b5b      	ldrh	r3, [r3, #26]
 801180a:	f043 0302 	orr.w	r3, r3, #2
 801180e:	b29a      	uxth	r2, r3
 8011810:	687b      	ldr	r3, [r7, #4]
 8011812:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8011814:	7ebb      	ldrb	r3, [r7, #26]
 8011816:	2b00      	cmp	r3, #0
 8011818:	d01f      	beq.n	801185a <tcp_process+0xda>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 801181a:	687b      	ldr	r3, [r7, #4]
 801181c:	7d1b      	ldrb	r3, [r3, #20]
 801181e:	2b00      	cmp	r3, #0
 8011820:	d10a      	bne.n	8011838 <tcp_process+0xb8>
 8011822:	f44f 724e 	mov.w	r2, #824	; 0x338
 8011826:	4988      	ldr	r1, [pc, #544]	; (8011a48 <tcp_process+0x2c8>)
 8011828:	4881      	ldr	r0, [pc, #516]	; (8011a30 <tcp_process+0x2b0>)
 801182a:	f009 fc73 	bl	801b114 <trace_printf>
 801182e:	4981      	ldr	r1, [pc, #516]	; (8011a34 <tcp_process+0x2b4>)
 8011830:	4881      	ldr	r0, [pc, #516]	; (8011a38 <tcp_process+0x2b8>)
 8011832:	f009 fc6f 	bl	801b114 <trace_printf>
 8011836:	e7fe      	b.n	8011836 <tcp_process+0xb6>
      recv_flags |= TF_RESET;
 8011838:	4b84      	ldr	r3, [pc, #528]	; (8011a4c <tcp_process+0x2cc>)
 801183a:	781b      	ldrb	r3, [r3, #0]
 801183c:	f043 0308 	orr.w	r3, r3, #8
 8011840:	b2da      	uxtb	r2, r3
 8011842:	4b82      	ldr	r3, [pc, #520]	; (8011a4c <tcp_process+0x2cc>)
 8011844:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8011846:	687b      	ldr	r3, [r7, #4]
 8011848:	8b5b      	ldrh	r3, [r3, #26]
 801184a:	f023 0301 	bic.w	r3, r3, #1
 801184e:	b29a      	uxth	r2, r3
 8011850:	687b      	ldr	r3, [r7, #4]
 8011852:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8011854:	f06f 030d 	mvn.w	r3, #13
 8011858:	e38a      	b.n	8011f70 <tcp_process+0x7f0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 801185a:	2300      	movs	r3, #0
 801185c:	e388      	b.n	8011f70 <tcp_process+0x7f0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 801185e:	4b77      	ldr	r3, [pc, #476]	; (8011a3c <tcp_process+0x2bc>)
 8011860:	781b      	ldrb	r3, [r3, #0]
 8011862:	f003 0302 	and.w	r3, r3, #2
 8011866:	2b00      	cmp	r3, #0
 8011868:	d010      	beq.n	801188c <tcp_process+0x10c>
 801186a:	687b      	ldr	r3, [r7, #4]
 801186c:	7d1b      	ldrb	r3, [r3, #20]
 801186e:	2b02      	cmp	r3, #2
 8011870:	d00c      	beq.n	801188c <tcp_process+0x10c>
 8011872:	687b      	ldr	r3, [r7, #4]
 8011874:	7d1b      	ldrb	r3, [r3, #20]
 8011876:	2b03      	cmp	r3, #3
 8011878:	d008      	beq.n	801188c <tcp_process+0x10c>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 801187a:	687b      	ldr	r3, [r7, #4]
 801187c:	8b5b      	ldrh	r3, [r3, #26]
 801187e:	f043 0302 	orr.w	r3, r3, #2
 8011882:	b29a      	uxth	r2, r3
 8011884:	687b      	ldr	r3, [r7, #4]
 8011886:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8011888:	2300      	movs	r3, #0
 801188a:	e371      	b.n	8011f70 <tcp_process+0x7f0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 801188c:	687b      	ldr	r3, [r7, #4]
 801188e:	8b5b      	ldrh	r3, [r3, #26]
 8011890:	f003 0310 	and.w	r3, r3, #16
 8011894:	2b00      	cmp	r3, #0
 8011896:	d103      	bne.n	80118a0 <tcp_process+0x120>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8011898:	4b6d      	ldr	r3, [pc, #436]	; (8011a50 <tcp_process+0x2d0>)
 801189a:	681a      	ldr	r2, [r3, #0]
 801189c:	687b      	ldr	r3, [r7, #4]
 801189e:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 80118a0:	687b      	ldr	r3, [r7, #4]
 80118a2:	2200      	movs	r2, #0
 80118a4:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 80118a8:	687b      	ldr	r3, [r7, #4]
 80118aa:	2200      	movs	r2, #0
 80118ac:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 80118b0:	6878      	ldr	r0, [r7, #4]
 80118b2:	f001 fc7d 	bl	80131b0 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 80118b6:	687b      	ldr	r3, [r7, #4]
 80118b8:	7d1b      	ldrb	r3, [r3, #20]
 80118ba:	3b02      	subs	r3, #2
 80118bc:	2b07      	cmp	r3, #7
 80118be:	f200 8347 	bhi.w	8011f50 <tcp_process+0x7d0>
 80118c2:	a201      	add	r2, pc, #4	; (adr r2, 80118c8 <tcp_process+0x148>)
 80118c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80118c8:	080118e9 	.word	0x080118e9
 80118cc:	08011b2d 	.word	0x08011b2d
 80118d0:	08011caf 	.word	0x08011caf
 80118d4:	08011cd9 	.word	0x08011cd9
 80118d8:	08011dff 	.word	0x08011dff
 80118dc:	08011caf 	.word	0x08011caf
 80118e0:	08011e8b 	.word	0x08011e8b
 80118e4:	08011f1b 	.word	0x08011f1b
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 80118e8:	4b54      	ldr	r3, [pc, #336]	; (8011a3c <tcp_process+0x2bc>)
 80118ea:	781b      	ldrb	r3, [r3, #0]
 80118ec:	f003 0310 	and.w	r3, r3, #16
 80118f0:	2b00      	cmp	r3, #0
 80118f2:	f000 80ee 	beq.w	8011ad2 <tcp_process+0x352>
 80118f6:	4b51      	ldr	r3, [pc, #324]	; (8011a3c <tcp_process+0x2bc>)
 80118f8:	781b      	ldrb	r3, [r3, #0]
 80118fa:	f003 0302 	and.w	r3, r3, #2
 80118fe:	2b00      	cmp	r3, #0
 8011900:	f000 80e7 	beq.w	8011ad2 <tcp_process+0x352>
          && (ackno == pcb->lastack + 1)) {
 8011904:	687b      	ldr	r3, [r7, #4]
 8011906:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011908:	1c5a      	adds	r2, r3, #1
 801190a:	4b4d      	ldr	r3, [pc, #308]	; (8011a40 <tcp_process+0x2c0>)
 801190c:	681b      	ldr	r3, [r3, #0]
 801190e:	429a      	cmp	r2, r3
 8011910:	f040 80df 	bne.w	8011ad2 <tcp_process+0x352>
        pcb->rcv_nxt = seqno + 1;
 8011914:	4b4b      	ldr	r3, [pc, #300]	; (8011a44 <tcp_process+0x2c4>)
 8011916:	681b      	ldr	r3, [r3, #0]
 8011918:	1c5a      	adds	r2, r3, #1
 801191a:	687b      	ldr	r3, [r7, #4]
 801191c:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 801191e:	687b      	ldr	r3, [r7, #4]
 8011920:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011922:	687b      	ldr	r3, [r7, #4]
 8011924:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8011926:	4b46      	ldr	r3, [pc, #280]	; (8011a40 <tcp_process+0x2c0>)
 8011928:	681a      	ldr	r2, [r3, #0]
 801192a:	687b      	ldr	r3, [r7, #4]
 801192c:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 801192e:	4b49      	ldr	r3, [pc, #292]	; (8011a54 <tcp_process+0x2d4>)
 8011930:	681b      	ldr	r3, [r3, #0]
 8011932:	89db      	ldrh	r3, [r3, #14]
 8011934:	b29a      	uxth	r2, r3
 8011936:	687b      	ldr	r3, [r7, #4]
 8011938:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 801193c:	687b      	ldr	r3, [r7, #4]
 801193e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8011942:	687b      	ldr	r3, [r7, #4]
 8011944:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8011948:	4b3e      	ldr	r3, [pc, #248]	; (8011a44 <tcp_process+0x2c4>)
 801194a:	681b      	ldr	r3, [r3, #0]
 801194c:	1e5a      	subs	r2, r3, #1
 801194e:	687b      	ldr	r3, [r7, #4]
 8011950:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8011952:	687b      	ldr	r3, [r7, #4]
 8011954:	2204      	movs	r2, #4
 8011956:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8011958:	687b      	ldr	r3, [r7, #4]
 801195a:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 801195c:	687b      	ldr	r3, [r7, #4]
 801195e:	3304      	adds	r3, #4
 8011960:	4618      	mov	r0, r3
 8011962:	f007 fde7 	bl	8019534 <ip4_route>
 8011966:	4601      	mov	r1, r0
 8011968:	687b      	ldr	r3, [r7, #4]
 801196a:	3304      	adds	r3, #4
 801196c:	461a      	mov	r2, r3
 801196e:	4620      	mov	r0, r4
 8011970:	f7fe ffce 	bl	8010910 <tcp_eff_send_mss_netif>
 8011974:	4603      	mov	r3, r0
 8011976:	461a      	mov	r2, r3
 8011978:	687b      	ldr	r3, [r7, #4]
 801197a:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801197c:	687b      	ldr	r3, [r7, #4]
 801197e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011980:	009a      	lsls	r2, r3, #2
 8011982:	687b      	ldr	r3, [r7, #4]
 8011984:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011986:	005b      	lsls	r3, r3, #1
 8011988:	f241 111c 	movw	r1, #4380	; 0x111c
 801198c:	428b      	cmp	r3, r1
 801198e:	bf38      	it	cc
 8011990:	460b      	movcc	r3, r1
 8011992:	429a      	cmp	r2, r3
 8011994:	d204      	bcs.n	80119a0 <tcp_process+0x220>
 8011996:	687b      	ldr	r3, [r7, #4]
 8011998:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801199a:	009b      	lsls	r3, r3, #2
 801199c:	b29b      	uxth	r3, r3
 801199e:	e00d      	b.n	80119bc <tcp_process+0x23c>
 80119a0:	687b      	ldr	r3, [r7, #4]
 80119a2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80119a4:	005b      	lsls	r3, r3, #1
 80119a6:	f241 121c 	movw	r2, #4380	; 0x111c
 80119aa:	4293      	cmp	r3, r2
 80119ac:	d904      	bls.n	80119b8 <tcp_process+0x238>
 80119ae:	687b      	ldr	r3, [r7, #4]
 80119b0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80119b2:	005b      	lsls	r3, r3, #1
 80119b4:	b29b      	uxth	r3, r3
 80119b6:	e001      	b.n	80119bc <tcp_process+0x23c>
 80119b8:	f241 131c 	movw	r3, #4380	; 0x111c
 80119bc:	687a      	ldr	r2, [r7, #4]
 80119be:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 80119c2:	687b      	ldr	r3, [r7, #4]
 80119c4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80119c8:	2b00      	cmp	r3, #0
 80119ca:	d10a      	bne.n	80119e2 <tcp_process+0x262>
 80119cc:	f44f 725b 	mov.w	r2, #876	; 0x36c
 80119d0:	4921      	ldr	r1, [pc, #132]	; (8011a58 <tcp_process+0x2d8>)
 80119d2:	4817      	ldr	r0, [pc, #92]	; (8011a30 <tcp_process+0x2b0>)
 80119d4:	f009 fb9e 	bl	801b114 <trace_printf>
 80119d8:	4916      	ldr	r1, [pc, #88]	; (8011a34 <tcp_process+0x2b4>)
 80119da:	4817      	ldr	r0, [pc, #92]	; (8011a38 <tcp_process+0x2b8>)
 80119dc:	f009 fb9a 	bl	801b114 <trace_printf>
 80119e0:	e7fe      	b.n	80119e0 <tcp_process+0x260>
        --pcb->snd_queuelen;
 80119e2:	687b      	ldr	r3, [r7, #4]
 80119e4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80119e8:	3b01      	subs	r3, #1
 80119ea:	b29a      	uxth	r2, r3
 80119ec:	687b      	ldr	r3, [r7, #4]
 80119ee:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 80119f2:	687b      	ldr	r3, [r7, #4]
 80119f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80119f6:	617b      	str	r3, [r7, #20]
        if (rseg == NULL) {
 80119f8:	697b      	ldr	r3, [r7, #20]
 80119fa:	2b00      	cmp	r3, #0
 80119fc:	d130      	bne.n	8011a60 <tcp_process+0x2e0>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 80119fe:	687b      	ldr	r3, [r7, #4]
 8011a00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011a02:	617b      	str	r3, [r7, #20]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8011a04:	697b      	ldr	r3, [r7, #20]
 8011a06:	2b00      	cmp	r3, #0
 8011a08:	d10a      	bne.n	8011a20 <tcp_process+0x2a0>
 8011a0a:	f44f 725d 	mov.w	r2, #884	; 0x374
 8011a0e:	4913      	ldr	r1, [pc, #76]	; (8011a5c <tcp_process+0x2dc>)
 8011a10:	4807      	ldr	r0, [pc, #28]	; (8011a30 <tcp_process+0x2b0>)
 8011a12:	f009 fb7f 	bl	801b114 <trace_printf>
 8011a16:	4907      	ldr	r1, [pc, #28]	; (8011a34 <tcp_process+0x2b4>)
 8011a18:	4807      	ldr	r0, [pc, #28]	; (8011a38 <tcp_process+0x2b8>)
 8011a1a:	f009 fb7b 	bl	801b114 <trace_printf>
 8011a1e:	e7fe      	b.n	8011a1e <tcp_process+0x29e>
          pcb->unsent = rseg->next;
 8011a20:	697b      	ldr	r3, [r7, #20]
 8011a22:	681a      	ldr	r2, [r3, #0]
 8011a24:	687b      	ldr	r3, [r7, #4]
 8011a26:	66da      	str	r2, [r3, #108]	; 0x6c
 8011a28:	e01e      	b.n	8011a68 <tcp_process+0x2e8>
 8011a2a:	bf00      	nop
 8011a2c:	0801ec28 	.word	0x0801ec28
 8011a30:	0801ea0c 	.word	0x0801ea0c
 8011a34:	0801ea2c 	.word	0x0801ea2c
 8011a38:	0801ea60 	.word	0x0801ea60
 8011a3c:	20009fc0 	.word	0x20009fc0
 8011a40:	20009fb8 	.word	0x20009fb8
 8011a44:	20009fb4 	.word	0x20009fb4
 8011a48:	0801ec44 	.word	0x0801ec44
 8011a4c:	20009fc1 	.word	0x20009fc1
 8011a50:	20010c84 	.word	0x20010c84
 8011a54:	20009fa4 	.word	0x20009fa4
 8011a58:	0801ec64 	.word	0x0801ec64
 8011a5c:	0801ec7c 	.word	0x0801ec7c
        } else {
          pcb->unacked = rseg->next;
 8011a60:	697b      	ldr	r3, [r7, #20]
 8011a62:	681a      	ldr	r2, [r3, #0]
 8011a64:	687b      	ldr	r3, [r7, #4]
 8011a66:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8011a68:	6978      	ldr	r0, [r7, #20]
 8011a6a:	f7fe fb18 	bl	801009e <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8011a6e:	687b      	ldr	r3, [r7, #4]
 8011a70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011a72:	2b00      	cmp	r3, #0
 8011a74:	d104      	bne.n	8011a80 <tcp_process+0x300>
          pcb->rtime = -1;
 8011a76:	687b      	ldr	r3, [r7, #4]
 8011a78:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011a7c:	861a      	strh	r2, [r3, #48]	; 0x30
 8011a7e:	e006      	b.n	8011a8e <tcp_process+0x30e>
        } else {
          pcb->rtime = 0;
 8011a80:	687b      	ldr	r3, [r7, #4]
 8011a82:	2200      	movs	r2, #0
 8011a84:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 8011a86:	687b      	ldr	r3, [r7, #4]
 8011a88:	2200      	movs	r2, #0
 8011a8a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8011a8e:	687b      	ldr	r3, [r7, #4]
 8011a90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011a94:	2b00      	cmp	r3, #0
 8011a96:	d00a      	beq.n	8011aae <tcp_process+0x32e>
 8011a98:	687b      	ldr	r3, [r7, #4]
 8011a9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011a9e:	687a      	ldr	r2, [r7, #4]
 8011aa0:	6910      	ldr	r0, [r2, #16]
 8011aa2:	2200      	movs	r2, #0
 8011aa4:	6879      	ldr	r1, [r7, #4]
 8011aa6:	4798      	blx	r3
 8011aa8:	4603      	mov	r3, r0
 8011aaa:	76fb      	strb	r3, [r7, #27]
 8011aac:	e001      	b.n	8011ab2 <tcp_process+0x332>
 8011aae:	2300      	movs	r3, #0
 8011ab0:	76fb      	strb	r3, [r7, #27]
        if (err == ERR_ABRT) {
 8011ab2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8011ab6:	f113 0f0d 	cmn.w	r3, #13
 8011aba:	d102      	bne.n	8011ac2 <tcp_process+0x342>
          return ERR_ABRT;
 8011abc:	f06f 030c 	mvn.w	r3, #12
 8011ac0:	e256      	b.n	8011f70 <tcp_process+0x7f0>
        }
        tcp_ack_now(pcb);
 8011ac2:	687b      	ldr	r3, [r7, #4]
 8011ac4:	8b5b      	ldrh	r3, [r3, #26]
 8011ac6:	f043 0302 	orr.w	r3, r3, #2
 8011aca:	b29a      	uxth	r2, r3
 8011acc:	687b      	ldr	r3, [r7, #4]
 8011ace:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8011ad0:	e240      	b.n	8011f54 <tcp_process+0x7d4>
      else if (flags & TCP_ACK) {
 8011ad2:	4b9f      	ldr	r3, [pc, #636]	; (8011d50 <tcp_process+0x5d0>)
 8011ad4:	781b      	ldrb	r3, [r3, #0]
 8011ad6:	f003 0310 	and.w	r3, r3, #16
 8011ada:	2b00      	cmp	r3, #0
 8011adc:	f000 823a 	beq.w	8011f54 <tcp_process+0x7d4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011ae0:	4b9c      	ldr	r3, [pc, #624]	; (8011d54 <tcp_process+0x5d4>)
 8011ae2:	6819      	ldr	r1, [r3, #0]
 8011ae4:	4b9c      	ldr	r3, [pc, #624]	; (8011d58 <tcp_process+0x5d8>)
 8011ae6:	881b      	ldrh	r3, [r3, #0]
 8011ae8:	461a      	mov	r2, r3
 8011aea:	4b9c      	ldr	r3, [pc, #624]	; (8011d5c <tcp_process+0x5dc>)
 8011aec:	681b      	ldr	r3, [r3, #0]
 8011aee:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011af0:	4b9b      	ldr	r3, [pc, #620]	; (8011d60 <tcp_process+0x5e0>)
 8011af2:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011af4:	885b      	ldrh	r3, [r3, #2]
 8011af6:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011af8:	4a99      	ldr	r2, [pc, #612]	; (8011d60 <tcp_process+0x5e0>)
 8011afa:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011afc:	8812      	ldrh	r2, [r2, #0]
 8011afe:	b292      	uxth	r2, r2
 8011b00:	9202      	str	r2, [sp, #8]
 8011b02:	9301      	str	r3, [sp, #4]
 8011b04:	4b97      	ldr	r3, [pc, #604]	; (8011d64 <tcp_process+0x5e4>)
 8011b06:	9300      	str	r3, [sp, #0]
 8011b08:	4b97      	ldr	r3, [pc, #604]	; (8011d68 <tcp_process+0x5e8>)
 8011b0a:	4602      	mov	r2, r0
 8011b0c:	6878      	ldr	r0, [r7, #4]
 8011b0e:	f003 fadb 	bl	80150c8 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8011b12:	687b      	ldr	r3, [r7, #4]
 8011b14:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011b18:	2b05      	cmp	r3, #5
 8011b1a:	f200 821b 	bhi.w	8011f54 <tcp_process+0x7d4>
          pcb->rtime = 0;
 8011b1e:	687b      	ldr	r3, [r7, #4]
 8011b20:	2200      	movs	r2, #0
 8011b22:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8011b24:	6878      	ldr	r0, [r7, #4]
 8011b26:	f003 f86d 	bl	8014c04 <tcp_rexmit_rto>
      break;
 8011b2a:	e213      	b.n	8011f54 <tcp_process+0x7d4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8011b2c:	4b88      	ldr	r3, [pc, #544]	; (8011d50 <tcp_process+0x5d0>)
 8011b2e:	781b      	ldrb	r3, [r3, #0]
 8011b30:	f003 0310 	and.w	r3, r3, #16
 8011b34:	2b00      	cmp	r3, #0
 8011b36:	f000 80a6 	beq.w	8011c86 <tcp_process+0x506>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8011b3a:	4b86      	ldr	r3, [pc, #536]	; (8011d54 <tcp_process+0x5d4>)
 8011b3c:	681a      	ldr	r2, [r3, #0]
 8011b3e:	687b      	ldr	r3, [r7, #4]
 8011b40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011b42:	1ad3      	subs	r3, r2, r3
 8011b44:	3b01      	subs	r3, #1
 8011b46:	2b00      	cmp	r3, #0
 8011b48:	f2c0 8083 	blt.w	8011c52 <tcp_process+0x4d2>
 8011b4c:	4b81      	ldr	r3, [pc, #516]	; (8011d54 <tcp_process+0x5d4>)
 8011b4e:	681a      	ldr	r2, [r3, #0]
 8011b50:	687b      	ldr	r3, [r7, #4]
 8011b52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011b54:	1ad3      	subs	r3, r2, r3
 8011b56:	2b00      	cmp	r3, #0
 8011b58:	dc7b      	bgt.n	8011c52 <tcp_process+0x4d2>
          pcb->state = ESTABLISHED;
 8011b5a:	687b      	ldr	r3, [r7, #4]
 8011b5c:	2204      	movs	r2, #4
 8011b5e:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8011b60:	687b      	ldr	r3, [r7, #4]
 8011b62:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011b64:	2b00      	cmp	r3, #0
 8011b66:	d102      	bne.n	8011b6e <tcp_process+0x3ee>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8011b68:	23fa      	movs	r3, #250	; 0xfa
 8011b6a:	76fb      	strb	r3, [r7, #27]
 8011b6c:	e021      	b.n	8011bb2 <tcp_process+0x432>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8011b6e:	687b      	ldr	r3, [r7, #4]
 8011b70:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011b72:	699b      	ldr	r3, [r3, #24]
 8011b74:	2b00      	cmp	r3, #0
 8011b76:	d10a      	bne.n	8011b8e <tcp_process+0x40e>
 8011b78:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8011b7c:	497b      	ldr	r1, [pc, #492]	; (8011d6c <tcp_process+0x5ec>)
 8011b7e:	487c      	ldr	r0, [pc, #496]	; (8011d70 <tcp_process+0x5f0>)
 8011b80:	f009 fac8 	bl	801b114 <trace_printf>
 8011b84:	497b      	ldr	r1, [pc, #492]	; (8011d74 <tcp_process+0x5f4>)
 8011b86:	487c      	ldr	r0, [pc, #496]	; (8011d78 <tcp_process+0x5f8>)
 8011b88:	f009 fac4 	bl	801b114 <trace_printf>
 8011b8c:	e7fe      	b.n	8011b8c <tcp_process+0x40c>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8011b8e:	687b      	ldr	r3, [r7, #4]
 8011b90:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011b92:	699b      	ldr	r3, [r3, #24]
 8011b94:	2b00      	cmp	r3, #0
 8011b96:	d00a      	beq.n	8011bae <tcp_process+0x42e>
 8011b98:	687b      	ldr	r3, [r7, #4]
 8011b9a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011b9c:	699b      	ldr	r3, [r3, #24]
 8011b9e:	687a      	ldr	r2, [r7, #4]
 8011ba0:	6910      	ldr	r0, [r2, #16]
 8011ba2:	2200      	movs	r2, #0
 8011ba4:	6879      	ldr	r1, [r7, #4]
 8011ba6:	4798      	blx	r3
 8011ba8:	4603      	mov	r3, r0
 8011baa:	76fb      	strb	r3, [r7, #27]
 8011bac:	e001      	b.n	8011bb2 <tcp_process+0x432>
 8011bae:	23f0      	movs	r3, #240	; 0xf0
 8011bb0:	76fb      	strb	r3, [r7, #27]
          }
          if (err != ERR_OK) {
 8011bb2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8011bb6:	2b00      	cmp	r3, #0
 8011bb8:	d00a      	beq.n	8011bd0 <tcp_process+0x450>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8011bba:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8011bbe:	f113 0f0d 	cmn.w	r3, #13
 8011bc2:	d002      	beq.n	8011bca <tcp_process+0x44a>
              tcp_abort(pcb);
 8011bc4:	6878      	ldr	r0, [r7, #4]
 8011bc6:	f7fd fc59 	bl	800f47c <tcp_abort>
            }
            return ERR_ABRT;
 8011bca:	f06f 030c 	mvn.w	r3, #12
 8011bce:	e1cf      	b.n	8011f70 <tcp_process+0x7f0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8011bd0:	6878      	ldr	r0, [r7, #4]
 8011bd2:	f000 faf1 	bl	80121b8 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8011bd6:	4b69      	ldr	r3, [pc, #420]	; (8011d7c <tcp_process+0x5fc>)
 8011bd8:	881b      	ldrh	r3, [r3, #0]
 8011bda:	2b00      	cmp	r3, #0
 8011bdc:	d005      	beq.n	8011bea <tcp_process+0x46a>
            recv_acked--;
 8011bde:	4b67      	ldr	r3, [pc, #412]	; (8011d7c <tcp_process+0x5fc>)
 8011be0:	881b      	ldrh	r3, [r3, #0]
 8011be2:	3b01      	subs	r3, #1
 8011be4:	b29a      	uxth	r2, r3
 8011be6:	4b65      	ldr	r3, [pc, #404]	; (8011d7c <tcp_process+0x5fc>)
 8011be8:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8011bea:	687b      	ldr	r3, [r7, #4]
 8011bec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011bee:	009a      	lsls	r2, r3, #2
 8011bf0:	687b      	ldr	r3, [r7, #4]
 8011bf2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011bf4:	005b      	lsls	r3, r3, #1
 8011bf6:	f241 111c 	movw	r1, #4380	; 0x111c
 8011bfa:	428b      	cmp	r3, r1
 8011bfc:	bf38      	it	cc
 8011bfe:	460b      	movcc	r3, r1
 8011c00:	429a      	cmp	r2, r3
 8011c02:	d204      	bcs.n	8011c0e <tcp_process+0x48e>
 8011c04:	687b      	ldr	r3, [r7, #4]
 8011c06:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011c08:	009b      	lsls	r3, r3, #2
 8011c0a:	b29b      	uxth	r3, r3
 8011c0c:	e00d      	b.n	8011c2a <tcp_process+0x4aa>
 8011c0e:	687b      	ldr	r3, [r7, #4]
 8011c10:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011c12:	005b      	lsls	r3, r3, #1
 8011c14:	f241 121c 	movw	r2, #4380	; 0x111c
 8011c18:	4293      	cmp	r3, r2
 8011c1a:	d904      	bls.n	8011c26 <tcp_process+0x4a6>
 8011c1c:	687b      	ldr	r3, [r7, #4]
 8011c1e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011c20:	005b      	lsls	r3, r3, #1
 8011c22:	b29b      	uxth	r3, r3
 8011c24:	e001      	b.n	8011c2a <tcp_process+0x4aa>
 8011c26:	f241 131c 	movw	r3, #4380	; 0x111c
 8011c2a:	687a      	ldr	r2, [r7, #4]
 8011c2c:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8011c30:	4b53      	ldr	r3, [pc, #332]	; (8011d80 <tcp_process+0x600>)
 8011c32:	781b      	ldrb	r3, [r3, #0]
 8011c34:	f003 0320 	and.w	r3, r3, #32
 8011c38:	2b00      	cmp	r3, #0
 8011c3a:	d037      	beq.n	8011cac <tcp_process+0x52c>
            tcp_ack_now(pcb);
 8011c3c:	687b      	ldr	r3, [r7, #4]
 8011c3e:	8b5b      	ldrh	r3, [r3, #26]
 8011c40:	f043 0302 	orr.w	r3, r3, #2
 8011c44:	b29a      	uxth	r2, r3
 8011c46:	687b      	ldr	r3, [r7, #4]
 8011c48:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8011c4a:	687b      	ldr	r3, [r7, #4]
 8011c4c:	2207      	movs	r2, #7
 8011c4e:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8011c50:	e02c      	b.n	8011cac <tcp_process+0x52c>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011c52:	4b40      	ldr	r3, [pc, #256]	; (8011d54 <tcp_process+0x5d4>)
 8011c54:	6819      	ldr	r1, [r3, #0]
 8011c56:	4b40      	ldr	r3, [pc, #256]	; (8011d58 <tcp_process+0x5d8>)
 8011c58:	881b      	ldrh	r3, [r3, #0]
 8011c5a:	461a      	mov	r2, r3
 8011c5c:	4b3f      	ldr	r3, [pc, #252]	; (8011d5c <tcp_process+0x5dc>)
 8011c5e:	681b      	ldr	r3, [r3, #0]
 8011c60:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011c62:	4b3f      	ldr	r3, [pc, #252]	; (8011d60 <tcp_process+0x5e0>)
 8011c64:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011c66:	885b      	ldrh	r3, [r3, #2]
 8011c68:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011c6a:	4a3d      	ldr	r2, [pc, #244]	; (8011d60 <tcp_process+0x5e0>)
 8011c6c:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011c6e:	8812      	ldrh	r2, [r2, #0]
 8011c70:	b292      	uxth	r2, r2
 8011c72:	9202      	str	r2, [sp, #8]
 8011c74:	9301      	str	r3, [sp, #4]
 8011c76:	4b3b      	ldr	r3, [pc, #236]	; (8011d64 <tcp_process+0x5e4>)
 8011c78:	9300      	str	r3, [sp, #0]
 8011c7a:	4b3b      	ldr	r3, [pc, #236]	; (8011d68 <tcp_process+0x5e8>)
 8011c7c:	4602      	mov	r2, r0
 8011c7e:	6878      	ldr	r0, [r7, #4]
 8011c80:	f003 fa22 	bl	80150c8 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8011c84:	e168      	b.n	8011f58 <tcp_process+0x7d8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8011c86:	4b32      	ldr	r3, [pc, #200]	; (8011d50 <tcp_process+0x5d0>)
 8011c88:	781b      	ldrb	r3, [r3, #0]
 8011c8a:	f003 0302 	and.w	r3, r3, #2
 8011c8e:	2b00      	cmp	r3, #0
 8011c90:	f000 8162 	beq.w	8011f58 <tcp_process+0x7d8>
 8011c94:	687b      	ldr	r3, [r7, #4]
 8011c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011c98:	1e5a      	subs	r2, r3, #1
 8011c9a:	4b30      	ldr	r3, [pc, #192]	; (8011d5c <tcp_process+0x5dc>)
 8011c9c:	681b      	ldr	r3, [r3, #0]
 8011c9e:	429a      	cmp	r2, r3
 8011ca0:	f040 815a 	bne.w	8011f58 <tcp_process+0x7d8>
        tcp_rexmit(pcb);
 8011ca4:	6878      	ldr	r0, [r7, #4]
 8011ca6:	f002 ffd5 	bl	8014c54 <tcp_rexmit>
      break;
 8011caa:	e155      	b.n	8011f58 <tcp_process+0x7d8>
 8011cac:	e154      	b.n	8011f58 <tcp_process+0x7d8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8011cae:	6878      	ldr	r0, [r7, #4]
 8011cb0:	f000 fa82 	bl	80121b8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8011cb4:	4b32      	ldr	r3, [pc, #200]	; (8011d80 <tcp_process+0x600>)
 8011cb6:	781b      	ldrb	r3, [r3, #0]
 8011cb8:	f003 0320 	and.w	r3, r3, #32
 8011cbc:	2b00      	cmp	r3, #0
 8011cbe:	f000 814d 	beq.w	8011f5c <tcp_process+0x7dc>
        tcp_ack_now(pcb);
 8011cc2:	687b      	ldr	r3, [r7, #4]
 8011cc4:	8b5b      	ldrh	r3, [r3, #26]
 8011cc6:	f043 0302 	orr.w	r3, r3, #2
 8011cca:	b29a      	uxth	r2, r3
 8011ccc:	687b      	ldr	r3, [r7, #4]
 8011cce:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8011cd0:	687b      	ldr	r3, [r7, #4]
 8011cd2:	2207      	movs	r2, #7
 8011cd4:	751a      	strb	r2, [r3, #20]
      }
      break;
 8011cd6:	e141      	b.n	8011f5c <tcp_process+0x7dc>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8011cd8:	6878      	ldr	r0, [r7, #4]
 8011cda:	f000 fa6d 	bl	80121b8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8011cde:	4b28      	ldr	r3, [pc, #160]	; (8011d80 <tcp_process+0x600>)
 8011ce0:	781b      	ldrb	r3, [r3, #0]
 8011ce2:	f003 0320 	and.w	r3, r3, #32
 8011ce6:	2b00      	cmp	r3, #0
 8011ce8:	d072      	beq.n	8011dd0 <tcp_process+0x650>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8011cea:	4b19      	ldr	r3, [pc, #100]	; (8011d50 <tcp_process+0x5d0>)
 8011cec:	781b      	ldrb	r3, [r3, #0]
 8011cee:	f003 0310 	and.w	r3, r3, #16
 8011cf2:	2b00      	cmp	r3, #0
 8011cf4:	d061      	beq.n	8011dba <tcp_process+0x63a>
 8011cf6:	687b      	ldr	r3, [r7, #4]
 8011cf8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011cfa:	4b16      	ldr	r3, [pc, #88]	; (8011d54 <tcp_process+0x5d4>)
 8011cfc:	681b      	ldr	r3, [r3, #0]
 8011cfe:	429a      	cmp	r2, r3
 8011d00:	d15b      	bne.n	8011dba <tcp_process+0x63a>
            pcb->unsent == NULL) {
 8011d02:	687b      	ldr	r3, [r7, #4]
 8011d04:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8011d06:	2b00      	cmp	r3, #0
 8011d08:	d157      	bne.n	8011dba <tcp_process+0x63a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8011d0a:	687b      	ldr	r3, [r7, #4]
 8011d0c:	8b5b      	ldrh	r3, [r3, #26]
 8011d0e:	f043 0302 	orr.w	r3, r3, #2
 8011d12:	b29a      	uxth	r2, r3
 8011d14:	687b      	ldr	r3, [r7, #4]
 8011d16:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8011d18:	6878      	ldr	r0, [r7, #4]
 8011d1a:	f7fe fccd 	bl	80106b8 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8011d1e:	4b19      	ldr	r3, [pc, #100]	; (8011d84 <tcp_process+0x604>)
 8011d20:	681b      	ldr	r3, [r3, #0]
 8011d22:	687a      	ldr	r2, [r7, #4]
 8011d24:	429a      	cmp	r2, r3
 8011d26:	d105      	bne.n	8011d34 <tcp_process+0x5b4>
 8011d28:	4b16      	ldr	r3, [pc, #88]	; (8011d84 <tcp_process+0x604>)
 8011d2a:	681b      	ldr	r3, [r3, #0]
 8011d2c:	68db      	ldr	r3, [r3, #12]
 8011d2e:	4a15      	ldr	r2, [pc, #84]	; (8011d84 <tcp_process+0x604>)
 8011d30:	6013      	str	r3, [r2, #0]
 8011d32:	e02f      	b.n	8011d94 <tcp_process+0x614>
 8011d34:	4b13      	ldr	r3, [pc, #76]	; (8011d84 <tcp_process+0x604>)
 8011d36:	681b      	ldr	r3, [r3, #0]
 8011d38:	613b      	str	r3, [r7, #16]
 8011d3a:	e028      	b.n	8011d8e <tcp_process+0x60e>
 8011d3c:	693b      	ldr	r3, [r7, #16]
 8011d3e:	68db      	ldr	r3, [r3, #12]
 8011d40:	687a      	ldr	r2, [r7, #4]
 8011d42:	429a      	cmp	r2, r3
 8011d44:	d120      	bne.n	8011d88 <tcp_process+0x608>
 8011d46:	687b      	ldr	r3, [r7, #4]
 8011d48:	68da      	ldr	r2, [r3, #12]
 8011d4a:	693b      	ldr	r3, [r7, #16]
 8011d4c:	60da      	str	r2, [r3, #12]
 8011d4e:	e021      	b.n	8011d94 <tcp_process+0x614>
 8011d50:	20009fc0 	.word	0x20009fc0
 8011d54:	20009fb8 	.word	0x20009fb8
 8011d58:	20009fbe 	.word	0x20009fbe
 8011d5c:	20009fb4 	.word	0x20009fb4
 8011d60:	20009fa4 	.word	0x20009fa4
 8011d64:	2000d41c 	.word	0x2000d41c
 8011d68:	2000d420 	.word	0x2000d420
 8011d6c:	0801ec90 	.word	0x0801ec90
 8011d70:	0801ea0c 	.word	0x0801ea0c
 8011d74:	0801ea2c 	.word	0x0801ea2c
 8011d78:	0801ea60 	.word	0x0801ea60
 8011d7c:	20009fbc 	.word	0x20009fbc
 8011d80:	20009fc1 	.word	0x20009fc1
 8011d84:	20010c80 	.word	0x20010c80
 8011d88:	693b      	ldr	r3, [r7, #16]
 8011d8a:	68db      	ldr	r3, [r3, #12]
 8011d8c:	613b      	str	r3, [r7, #16]
 8011d8e:	693b      	ldr	r3, [r7, #16]
 8011d90:	2b00      	cmp	r3, #0
 8011d92:	d1d3      	bne.n	8011d3c <tcp_process+0x5bc>
 8011d94:	687b      	ldr	r3, [r7, #4]
 8011d96:	2200      	movs	r2, #0
 8011d98:	60da      	str	r2, [r3, #12]
 8011d9a:	4b77      	ldr	r3, [pc, #476]	; (8011f78 <tcp_process+0x7f8>)
 8011d9c:	2201      	movs	r2, #1
 8011d9e:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8011da0:	687b      	ldr	r3, [r7, #4]
 8011da2:	220a      	movs	r2, #10
 8011da4:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8011da6:	4b75      	ldr	r3, [pc, #468]	; (8011f7c <tcp_process+0x7fc>)
 8011da8:	681a      	ldr	r2, [r3, #0]
 8011daa:	687b      	ldr	r3, [r7, #4]
 8011dac:	60da      	str	r2, [r3, #12]
 8011dae:	4a73      	ldr	r2, [pc, #460]	; (8011f7c <tcp_process+0x7fc>)
 8011db0:	687b      	ldr	r3, [r7, #4]
 8011db2:	6013      	str	r3, [r2, #0]
 8011db4:	f003 fb66 	bl	8015484 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8011db8:	e0d2      	b.n	8011f60 <tcp_process+0x7e0>
          tcp_ack_now(pcb);
 8011dba:	687b      	ldr	r3, [r7, #4]
 8011dbc:	8b5b      	ldrh	r3, [r3, #26]
 8011dbe:	f043 0302 	orr.w	r3, r3, #2
 8011dc2:	b29a      	uxth	r2, r3
 8011dc4:	687b      	ldr	r3, [r7, #4]
 8011dc6:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8011dc8:	687b      	ldr	r3, [r7, #4]
 8011dca:	2208      	movs	r2, #8
 8011dcc:	751a      	strb	r2, [r3, #20]
      break;
 8011dce:	e0c7      	b.n	8011f60 <tcp_process+0x7e0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8011dd0:	4b6b      	ldr	r3, [pc, #428]	; (8011f80 <tcp_process+0x800>)
 8011dd2:	781b      	ldrb	r3, [r3, #0]
 8011dd4:	f003 0310 	and.w	r3, r3, #16
 8011dd8:	2b00      	cmp	r3, #0
 8011dda:	f000 80c1 	beq.w	8011f60 <tcp_process+0x7e0>
 8011dde:	687b      	ldr	r3, [r7, #4]
 8011de0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011de2:	4b68      	ldr	r3, [pc, #416]	; (8011f84 <tcp_process+0x804>)
 8011de4:	681b      	ldr	r3, [r3, #0]
 8011de6:	429a      	cmp	r2, r3
 8011de8:	f040 80ba 	bne.w	8011f60 <tcp_process+0x7e0>
                 pcb->unsent == NULL) {
 8011dec:	687b      	ldr	r3, [r7, #4]
 8011dee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8011df0:	2b00      	cmp	r3, #0
 8011df2:	f040 80b5 	bne.w	8011f60 <tcp_process+0x7e0>
        pcb->state = FIN_WAIT_2;
 8011df6:	687b      	ldr	r3, [r7, #4]
 8011df8:	2206      	movs	r2, #6
 8011dfa:	751a      	strb	r2, [r3, #20]
      break;
 8011dfc:	e0b0      	b.n	8011f60 <tcp_process+0x7e0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8011dfe:	6878      	ldr	r0, [r7, #4]
 8011e00:	f000 f9da 	bl	80121b8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8011e04:	4b60      	ldr	r3, [pc, #384]	; (8011f88 <tcp_process+0x808>)
 8011e06:	781b      	ldrb	r3, [r3, #0]
 8011e08:	f003 0320 	and.w	r3, r3, #32
 8011e0c:	2b00      	cmp	r3, #0
 8011e0e:	f000 80a9 	beq.w	8011f64 <tcp_process+0x7e4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8011e12:	687b      	ldr	r3, [r7, #4]
 8011e14:	8b5b      	ldrh	r3, [r3, #26]
 8011e16:	f043 0302 	orr.w	r3, r3, #2
 8011e1a:	b29a      	uxth	r2, r3
 8011e1c:	687b      	ldr	r3, [r7, #4]
 8011e1e:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8011e20:	6878      	ldr	r0, [r7, #4]
 8011e22:	f7fe fc49 	bl	80106b8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8011e26:	4b59      	ldr	r3, [pc, #356]	; (8011f8c <tcp_process+0x80c>)
 8011e28:	681b      	ldr	r3, [r3, #0]
 8011e2a:	687a      	ldr	r2, [r7, #4]
 8011e2c:	429a      	cmp	r2, r3
 8011e2e:	d105      	bne.n	8011e3c <tcp_process+0x6bc>
 8011e30:	4b56      	ldr	r3, [pc, #344]	; (8011f8c <tcp_process+0x80c>)
 8011e32:	681b      	ldr	r3, [r3, #0]
 8011e34:	68db      	ldr	r3, [r3, #12]
 8011e36:	4a55      	ldr	r2, [pc, #340]	; (8011f8c <tcp_process+0x80c>)
 8011e38:	6013      	str	r3, [r2, #0]
 8011e3a:	e013      	b.n	8011e64 <tcp_process+0x6e4>
 8011e3c:	4b53      	ldr	r3, [pc, #332]	; (8011f8c <tcp_process+0x80c>)
 8011e3e:	681b      	ldr	r3, [r3, #0]
 8011e40:	60fb      	str	r3, [r7, #12]
 8011e42:	e00c      	b.n	8011e5e <tcp_process+0x6de>
 8011e44:	68fb      	ldr	r3, [r7, #12]
 8011e46:	68db      	ldr	r3, [r3, #12]
 8011e48:	687a      	ldr	r2, [r7, #4]
 8011e4a:	429a      	cmp	r2, r3
 8011e4c:	d104      	bne.n	8011e58 <tcp_process+0x6d8>
 8011e4e:	687b      	ldr	r3, [r7, #4]
 8011e50:	68da      	ldr	r2, [r3, #12]
 8011e52:	68fb      	ldr	r3, [r7, #12]
 8011e54:	60da      	str	r2, [r3, #12]
 8011e56:	e005      	b.n	8011e64 <tcp_process+0x6e4>
 8011e58:	68fb      	ldr	r3, [r7, #12]
 8011e5a:	68db      	ldr	r3, [r3, #12]
 8011e5c:	60fb      	str	r3, [r7, #12]
 8011e5e:	68fb      	ldr	r3, [r7, #12]
 8011e60:	2b00      	cmp	r3, #0
 8011e62:	d1ef      	bne.n	8011e44 <tcp_process+0x6c4>
 8011e64:	687b      	ldr	r3, [r7, #4]
 8011e66:	2200      	movs	r2, #0
 8011e68:	60da      	str	r2, [r3, #12]
 8011e6a:	4b43      	ldr	r3, [pc, #268]	; (8011f78 <tcp_process+0x7f8>)
 8011e6c:	2201      	movs	r2, #1
 8011e6e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8011e70:	687b      	ldr	r3, [r7, #4]
 8011e72:	220a      	movs	r2, #10
 8011e74:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8011e76:	4b41      	ldr	r3, [pc, #260]	; (8011f7c <tcp_process+0x7fc>)
 8011e78:	681a      	ldr	r2, [r3, #0]
 8011e7a:	687b      	ldr	r3, [r7, #4]
 8011e7c:	60da      	str	r2, [r3, #12]
 8011e7e:	4a3f      	ldr	r2, [pc, #252]	; (8011f7c <tcp_process+0x7fc>)
 8011e80:	687b      	ldr	r3, [r7, #4]
 8011e82:	6013      	str	r3, [r2, #0]
 8011e84:	f003 fafe 	bl	8015484 <tcp_timer_needed>
      }
      break;
 8011e88:	e06c      	b.n	8011f64 <tcp_process+0x7e4>
    case CLOSING:
      tcp_receive(pcb);
 8011e8a:	6878      	ldr	r0, [r7, #4]
 8011e8c:	f000 f994 	bl	80121b8 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8011e90:	4b3b      	ldr	r3, [pc, #236]	; (8011f80 <tcp_process+0x800>)
 8011e92:	781b      	ldrb	r3, [r3, #0]
 8011e94:	f003 0310 	and.w	r3, r3, #16
 8011e98:	2b00      	cmp	r3, #0
 8011e9a:	d065      	beq.n	8011f68 <tcp_process+0x7e8>
 8011e9c:	687b      	ldr	r3, [r7, #4]
 8011e9e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011ea0:	4b38      	ldr	r3, [pc, #224]	; (8011f84 <tcp_process+0x804>)
 8011ea2:	681b      	ldr	r3, [r3, #0]
 8011ea4:	429a      	cmp	r2, r3
 8011ea6:	d15f      	bne.n	8011f68 <tcp_process+0x7e8>
 8011ea8:	687b      	ldr	r3, [r7, #4]
 8011eaa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011eac:	2b00      	cmp	r3, #0
 8011eae:	d15b      	bne.n	8011f68 <tcp_process+0x7e8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8011eb0:	6878      	ldr	r0, [r7, #4]
 8011eb2:	f7fe fc01 	bl	80106b8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8011eb6:	4b35      	ldr	r3, [pc, #212]	; (8011f8c <tcp_process+0x80c>)
 8011eb8:	681b      	ldr	r3, [r3, #0]
 8011eba:	687a      	ldr	r2, [r7, #4]
 8011ebc:	429a      	cmp	r2, r3
 8011ebe:	d105      	bne.n	8011ecc <tcp_process+0x74c>
 8011ec0:	4b32      	ldr	r3, [pc, #200]	; (8011f8c <tcp_process+0x80c>)
 8011ec2:	681b      	ldr	r3, [r3, #0]
 8011ec4:	68db      	ldr	r3, [r3, #12]
 8011ec6:	4a31      	ldr	r2, [pc, #196]	; (8011f8c <tcp_process+0x80c>)
 8011ec8:	6013      	str	r3, [r2, #0]
 8011eca:	e013      	b.n	8011ef4 <tcp_process+0x774>
 8011ecc:	4b2f      	ldr	r3, [pc, #188]	; (8011f8c <tcp_process+0x80c>)
 8011ece:	681b      	ldr	r3, [r3, #0]
 8011ed0:	61fb      	str	r3, [r7, #28]
 8011ed2:	e00c      	b.n	8011eee <tcp_process+0x76e>
 8011ed4:	69fb      	ldr	r3, [r7, #28]
 8011ed6:	68db      	ldr	r3, [r3, #12]
 8011ed8:	687a      	ldr	r2, [r7, #4]
 8011eda:	429a      	cmp	r2, r3
 8011edc:	d104      	bne.n	8011ee8 <tcp_process+0x768>
 8011ede:	687b      	ldr	r3, [r7, #4]
 8011ee0:	68da      	ldr	r2, [r3, #12]
 8011ee2:	69fb      	ldr	r3, [r7, #28]
 8011ee4:	60da      	str	r2, [r3, #12]
 8011ee6:	e005      	b.n	8011ef4 <tcp_process+0x774>
 8011ee8:	69fb      	ldr	r3, [r7, #28]
 8011eea:	68db      	ldr	r3, [r3, #12]
 8011eec:	61fb      	str	r3, [r7, #28]
 8011eee:	69fb      	ldr	r3, [r7, #28]
 8011ef0:	2b00      	cmp	r3, #0
 8011ef2:	d1ef      	bne.n	8011ed4 <tcp_process+0x754>
 8011ef4:	687b      	ldr	r3, [r7, #4]
 8011ef6:	2200      	movs	r2, #0
 8011ef8:	60da      	str	r2, [r3, #12]
 8011efa:	4b1f      	ldr	r3, [pc, #124]	; (8011f78 <tcp_process+0x7f8>)
 8011efc:	2201      	movs	r2, #1
 8011efe:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8011f00:	687b      	ldr	r3, [r7, #4]
 8011f02:	220a      	movs	r2, #10
 8011f04:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8011f06:	4b1d      	ldr	r3, [pc, #116]	; (8011f7c <tcp_process+0x7fc>)
 8011f08:	681a      	ldr	r2, [r3, #0]
 8011f0a:	687b      	ldr	r3, [r7, #4]
 8011f0c:	60da      	str	r2, [r3, #12]
 8011f0e:	4a1b      	ldr	r2, [pc, #108]	; (8011f7c <tcp_process+0x7fc>)
 8011f10:	687b      	ldr	r3, [r7, #4]
 8011f12:	6013      	str	r3, [r2, #0]
 8011f14:	f003 fab6 	bl	8015484 <tcp_timer_needed>
      }
      break;
 8011f18:	e026      	b.n	8011f68 <tcp_process+0x7e8>
    case LAST_ACK:
      tcp_receive(pcb);
 8011f1a:	6878      	ldr	r0, [r7, #4]
 8011f1c:	f000 f94c 	bl	80121b8 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8011f20:	4b17      	ldr	r3, [pc, #92]	; (8011f80 <tcp_process+0x800>)
 8011f22:	781b      	ldrb	r3, [r3, #0]
 8011f24:	f003 0310 	and.w	r3, r3, #16
 8011f28:	2b00      	cmp	r3, #0
 8011f2a:	d01f      	beq.n	8011f6c <tcp_process+0x7ec>
 8011f2c:	687b      	ldr	r3, [r7, #4]
 8011f2e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011f30:	4b14      	ldr	r3, [pc, #80]	; (8011f84 <tcp_process+0x804>)
 8011f32:	681b      	ldr	r3, [r3, #0]
 8011f34:	429a      	cmp	r2, r3
 8011f36:	d119      	bne.n	8011f6c <tcp_process+0x7ec>
 8011f38:	687b      	ldr	r3, [r7, #4]
 8011f3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011f3c:	2b00      	cmp	r3, #0
 8011f3e:	d115      	bne.n	8011f6c <tcp_process+0x7ec>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8011f40:	4b11      	ldr	r3, [pc, #68]	; (8011f88 <tcp_process+0x808>)
 8011f42:	781b      	ldrb	r3, [r3, #0]
 8011f44:	f043 0310 	orr.w	r3, r3, #16
 8011f48:	b2da      	uxtb	r2, r3
 8011f4a:	4b0f      	ldr	r3, [pc, #60]	; (8011f88 <tcp_process+0x808>)
 8011f4c:	701a      	strb	r2, [r3, #0]
      }
      break;
 8011f4e:	e00d      	b.n	8011f6c <tcp_process+0x7ec>
    default:
      break;
 8011f50:	bf00      	nop
 8011f52:	e00c      	b.n	8011f6e <tcp_process+0x7ee>
      break;
 8011f54:	bf00      	nop
 8011f56:	e00a      	b.n	8011f6e <tcp_process+0x7ee>
      break;
 8011f58:	bf00      	nop
 8011f5a:	e008      	b.n	8011f6e <tcp_process+0x7ee>
      break;
 8011f5c:	bf00      	nop
 8011f5e:	e006      	b.n	8011f6e <tcp_process+0x7ee>
      break;
 8011f60:	bf00      	nop
 8011f62:	e004      	b.n	8011f6e <tcp_process+0x7ee>
      break;
 8011f64:	bf00      	nop
 8011f66:	e002      	b.n	8011f6e <tcp_process+0x7ee>
      break;
 8011f68:	bf00      	nop
 8011f6a:	e000      	b.n	8011f6e <tcp_process+0x7ee>
      break;
 8011f6c:	bf00      	nop
  }
  return ERR_OK;
 8011f6e:	2300      	movs	r3, #0
}
 8011f70:	4618      	mov	r0, r3
 8011f72:	3724      	adds	r7, #36	; 0x24
 8011f74:	46bd      	mov	sp, r7
 8011f76:	bd90      	pop	{r4, r7, pc}
 8011f78:	20010c7c 	.word	0x20010c7c
 8011f7c:	20010c90 	.word	0x20010c90
 8011f80:	20009fc0 	.word	0x20009fc0
 8011f84:	20009fb8 	.word	0x20009fb8
 8011f88:	20009fc1 	.word	0x20009fc1
 8011f8c:	20010c80 	.word	0x20010c80

08011f90 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8011f90:	b590      	push	{r4, r7, lr}
 8011f92:	b085      	sub	sp, #20
 8011f94:	af00      	add	r7, sp, #0
 8011f96:	6078      	str	r0, [r7, #4]
 8011f98:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8011f9a:	687b      	ldr	r3, [r7, #4]
 8011f9c:	2b00      	cmp	r3, #0
 8011f9e:	d10a      	bne.n	8011fb6 <tcp_oos_insert_segment+0x26>
 8011fa0:	f240 421f 	movw	r2, #1055	; 0x41f
 8011fa4:	493c      	ldr	r1, [pc, #240]	; (8012098 <tcp_oos_insert_segment+0x108>)
 8011fa6:	483d      	ldr	r0, [pc, #244]	; (801209c <tcp_oos_insert_segment+0x10c>)
 8011fa8:	f009 f8b4 	bl	801b114 <trace_printf>
 8011fac:	493c      	ldr	r1, [pc, #240]	; (80120a0 <tcp_oos_insert_segment+0x110>)
 8011fae:	483d      	ldr	r0, [pc, #244]	; (80120a4 <tcp_oos_insert_segment+0x114>)
 8011fb0:	f009 f8b0 	bl	801b114 <trace_printf>
 8011fb4:	e7fe      	b.n	8011fb4 <tcp_oos_insert_segment+0x24>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8011fb6:	687b      	ldr	r3, [r7, #4]
 8011fb8:	691b      	ldr	r3, [r3, #16]
 8011fba:	899b      	ldrh	r3, [r3, #12]
 8011fbc:	b29b      	uxth	r3, r3
 8011fbe:	4618      	mov	r0, r3
 8011fc0:	f7fa fec0 	bl	800cd44 <lwip_htons>
 8011fc4:	4603      	mov	r3, r0
 8011fc6:	b2db      	uxtb	r3, r3
 8011fc8:	f003 0301 	and.w	r3, r3, #1
 8011fcc:	2b00      	cmp	r3, #0
 8011fce:	d028      	beq.n	8012022 <tcp_oos_insert_segment+0x92>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8011fd0:	6838      	ldr	r0, [r7, #0]
 8011fd2:	f7fe f84f 	bl	8010074 <tcp_segs_free>
    next = NULL;
 8011fd6:	2300      	movs	r3, #0
 8011fd8:	603b      	str	r3, [r7, #0]
 8011fda:	e056      	b.n	801208a <tcp_oos_insert_segment+0xfa>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8011fdc:	683b      	ldr	r3, [r7, #0]
 8011fde:	691b      	ldr	r3, [r3, #16]
 8011fe0:	899b      	ldrh	r3, [r3, #12]
 8011fe2:	b29b      	uxth	r3, r3
 8011fe4:	4618      	mov	r0, r3
 8011fe6:	f7fa fead 	bl	800cd44 <lwip_htons>
 8011fea:	4603      	mov	r3, r0
 8011fec:	b2db      	uxtb	r3, r3
 8011fee:	f003 0301 	and.w	r3, r3, #1
 8011ff2:	2b00      	cmp	r3, #0
 8011ff4:	d00d      	beq.n	8012012 <tcp_oos_insert_segment+0x82>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8011ff6:	687b      	ldr	r3, [r7, #4]
 8011ff8:	691b      	ldr	r3, [r3, #16]
 8011ffa:	899b      	ldrh	r3, [r3, #12]
 8011ffc:	b29c      	uxth	r4, r3
 8011ffe:	2001      	movs	r0, #1
 8012000:	f7fa fea0 	bl	800cd44 <lwip_htons>
 8012004:	4603      	mov	r3, r0
 8012006:	461a      	mov	r2, r3
 8012008:	687b      	ldr	r3, [r7, #4]
 801200a:	691b      	ldr	r3, [r3, #16]
 801200c:	4322      	orrs	r2, r4
 801200e:	b292      	uxth	r2, r2
 8012010:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8012012:	683b      	ldr	r3, [r7, #0]
 8012014:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8012016:	683b      	ldr	r3, [r7, #0]
 8012018:	681b      	ldr	r3, [r3, #0]
 801201a:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 801201c:	68f8      	ldr	r0, [r7, #12]
 801201e:	f7fe f83e 	bl	801009e <tcp_seg_free>
    while (next &&
 8012022:	683b      	ldr	r3, [r7, #0]
 8012024:	2b00      	cmp	r3, #0
 8012026:	d00e      	beq.n	8012046 <tcp_oos_insert_segment+0xb6>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8012028:	687b      	ldr	r3, [r7, #4]
 801202a:	891b      	ldrh	r3, [r3, #8]
 801202c:	461a      	mov	r2, r3
 801202e:	4b1e      	ldr	r3, [pc, #120]	; (80120a8 <tcp_oos_insert_segment+0x118>)
 8012030:	681b      	ldr	r3, [r3, #0]
 8012032:	441a      	add	r2, r3
 8012034:	683b      	ldr	r3, [r7, #0]
 8012036:	691b      	ldr	r3, [r3, #16]
 8012038:	685b      	ldr	r3, [r3, #4]
 801203a:	6839      	ldr	r1, [r7, #0]
 801203c:	8909      	ldrh	r1, [r1, #8]
 801203e:	440b      	add	r3, r1
 8012040:	1ad3      	subs	r3, r2, r3
    while (next &&
 8012042:	2b00      	cmp	r3, #0
 8012044:	daca      	bge.n	8011fdc <tcp_oos_insert_segment+0x4c>
    }
    if (next &&
 8012046:	683b      	ldr	r3, [r7, #0]
 8012048:	2b00      	cmp	r3, #0
 801204a:	d01e      	beq.n	801208a <tcp_oos_insert_segment+0xfa>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 801204c:	687b      	ldr	r3, [r7, #4]
 801204e:	891b      	ldrh	r3, [r3, #8]
 8012050:	461a      	mov	r2, r3
 8012052:	4b15      	ldr	r3, [pc, #84]	; (80120a8 <tcp_oos_insert_segment+0x118>)
 8012054:	681b      	ldr	r3, [r3, #0]
 8012056:	441a      	add	r2, r3
 8012058:	683b      	ldr	r3, [r7, #0]
 801205a:	691b      	ldr	r3, [r3, #16]
 801205c:	685b      	ldr	r3, [r3, #4]
 801205e:	1ad3      	subs	r3, r2, r3
    if (next &&
 8012060:	2b00      	cmp	r3, #0
 8012062:	dd12      	ble.n	801208a <tcp_oos_insert_segment+0xfa>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8012064:	683b      	ldr	r3, [r7, #0]
 8012066:	691b      	ldr	r3, [r3, #16]
 8012068:	685b      	ldr	r3, [r3, #4]
 801206a:	b29a      	uxth	r2, r3
 801206c:	4b0e      	ldr	r3, [pc, #56]	; (80120a8 <tcp_oos_insert_segment+0x118>)
 801206e:	681b      	ldr	r3, [r3, #0]
 8012070:	b29b      	uxth	r3, r3
 8012072:	1ad3      	subs	r3, r2, r3
 8012074:	b29a      	uxth	r2, r3
 8012076:	687b      	ldr	r3, [r7, #4]
 8012078:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 801207a:	687b      	ldr	r3, [r7, #4]
 801207c:	685a      	ldr	r2, [r3, #4]
 801207e:	687b      	ldr	r3, [r7, #4]
 8012080:	891b      	ldrh	r3, [r3, #8]
 8012082:	4619      	mov	r1, r3
 8012084:	4610      	mov	r0, r2
 8012086:	f7fc f9d1 	bl	800e42c <pbuf_realloc>
    }
  }
  cseg->next = next;
 801208a:	687b      	ldr	r3, [r7, #4]
 801208c:	683a      	ldr	r2, [r7, #0]
 801208e:	601a      	str	r2, [r3, #0]
}
 8012090:	bf00      	nop
 8012092:	3714      	adds	r7, #20
 8012094:	46bd      	mov	sp, r7
 8012096:	bd90      	pop	{r4, r7, pc}
 8012098:	0801ecb0 	.word	0x0801ecb0
 801209c:	0801ea0c 	.word	0x0801ea0c
 80120a0:	0801ea2c 	.word	0x0801ea2c
 80120a4:	0801ea60 	.word	0x0801ea60
 80120a8:	20009fb4 	.word	0x20009fb4

080120ac <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 80120ac:	b5b0      	push	{r4, r5, r7, lr}
 80120ae:	b086      	sub	sp, #24
 80120b0:	af00      	add	r7, sp, #0
 80120b2:	60f8      	str	r0, [r7, #12]
 80120b4:	60b9      	str	r1, [r7, #8]
 80120b6:	607a      	str	r2, [r7, #4]
 80120b8:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 80120ba:	e046      	b.n	801214a <tcp_free_acked_segments+0x9e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 80120bc:	68bb      	ldr	r3, [r7, #8]
 80120be:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 80120c0:	68bb      	ldr	r3, [r7, #8]
 80120c2:	681b      	ldr	r3, [r3, #0]
 80120c4:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 80120c6:	697b      	ldr	r3, [r7, #20]
 80120c8:	685b      	ldr	r3, [r3, #4]
 80120ca:	4618      	mov	r0, r3
 80120cc:	f7fc fbf0 	bl	800e8b0 <pbuf_clen>
 80120d0:	4603      	mov	r3, r0
 80120d2:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 80120d4:	68fb      	ldr	r3, [r7, #12]
 80120d6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80120da:	8a7a      	ldrh	r2, [r7, #18]
 80120dc:	429a      	cmp	r2, r3
 80120de:	d90a      	bls.n	80120f6 <tcp_free_acked_segments+0x4a>
 80120e0:	f240 4257 	movw	r2, #1111	; 0x457
 80120e4:	492d      	ldr	r1, [pc, #180]	; (801219c <tcp_free_acked_segments+0xf0>)
 80120e6:	482e      	ldr	r0, [pc, #184]	; (80121a0 <tcp_free_acked_segments+0xf4>)
 80120e8:	f009 f814 	bl	801b114 <trace_printf>
 80120ec:	492d      	ldr	r1, [pc, #180]	; (80121a4 <tcp_free_acked_segments+0xf8>)
 80120ee:	482e      	ldr	r0, [pc, #184]	; (80121a8 <tcp_free_acked_segments+0xfc>)
 80120f0:	f009 f810 	bl	801b114 <trace_printf>
 80120f4:	e7fe      	b.n	80120f4 <tcp_free_acked_segments+0x48>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 80120f6:	68fb      	ldr	r3, [r7, #12]
 80120f8:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 80120fc:	8a7b      	ldrh	r3, [r7, #18]
 80120fe:	1ad3      	subs	r3, r2, r3
 8012100:	b29a      	uxth	r2, r3
 8012102:	68fb      	ldr	r3, [r7, #12]
 8012104:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8012108:	697b      	ldr	r3, [r7, #20]
 801210a:	891a      	ldrh	r2, [r3, #8]
 801210c:	4b27      	ldr	r3, [pc, #156]	; (80121ac <tcp_free_acked_segments+0x100>)
 801210e:	881b      	ldrh	r3, [r3, #0]
 8012110:	4413      	add	r3, r2
 8012112:	b29a      	uxth	r2, r3
 8012114:	4b25      	ldr	r3, [pc, #148]	; (80121ac <tcp_free_acked_segments+0x100>)
 8012116:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8012118:	6978      	ldr	r0, [r7, #20]
 801211a:	f7fd ffc0 	bl	801009e <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 801211e:	68fb      	ldr	r3, [r7, #12]
 8012120:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012124:	2b00      	cmp	r3, #0
 8012126:	d010      	beq.n	801214a <tcp_free_acked_segments+0x9e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8012128:	68bb      	ldr	r3, [r7, #8]
 801212a:	2b00      	cmp	r3, #0
 801212c:	d10d      	bne.n	801214a <tcp_free_acked_segments+0x9e>
 801212e:	683b      	ldr	r3, [r7, #0]
 8012130:	2b00      	cmp	r3, #0
 8012132:	d10a      	bne.n	801214a <tcp_free_acked_segments+0x9e>
 8012134:	f240 4261 	movw	r2, #1121	; 0x461
 8012138:	491d      	ldr	r1, [pc, #116]	; (80121b0 <tcp_free_acked_segments+0x104>)
 801213a:	4819      	ldr	r0, [pc, #100]	; (80121a0 <tcp_free_acked_segments+0xf4>)
 801213c:	f008 ffea 	bl	801b114 <trace_printf>
 8012140:	4918      	ldr	r1, [pc, #96]	; (80121a4 <tcp_free_acked_segments+0xf8>)
 8012142:	4819      	ldr	r0, [pc, #100]	; (80121a8 <tcp_free_acked_segments+0xfc>)
 8012144:	f008 ffe6 	bl	801b114 <trace_printf>
 8012148:	e7fe      	b.n	8012148 <tcp_free_acked_segments+0x9c>
  while (seg_list != NULL &&
 801214a:	68bb      	ldr	r3, [r7, #8]
 801214c:	2b00      	cmp	r3, #0
 801214e:	d020      	beq.n	8012192 <tcp_free_acked_segments+0xe6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8012150:	68bb      	ldr	r3, [r7, #8]
 8012152:	691b      	ldr	r3, [r3, #16]
 8012154:	685b      	ldr	r3, [r3, #4]
 8012156:	4618      	mov	r0, r3
 8012158:	f7fa fe09 	bl	800cd6e <lwip_htonl>
 801215c:	4604      	mov	r4, r0
 801215e:	68bb      	ldr	r3, [r7, #8]
 8012160:	891b      	ldrh	r3, [r3, #8]
 8012162:	461d      	mov	r5, r3
 8012164:	68bb      	ldr	r3, [r7, #8]
 8012166:	691b      	ldr	r3, [r3, #16]
 8012168:	899b      	ldrh	r3, [r3, #12]
 801216a:	b29b      	uxth	r3, r3
 801216c:	4618      	mov	r0, r3
 801216e:	f7fa fde9 	bl	800cd44 <lwip_htons>
 8012172:	4603      	mov	r3, r0
 8012174:	b2db      	uxtb	r3, r3
 8012176:	f003 0303 	and.w	r3, r3, #3
 801217a:	2b00      	cmp	r3, #0
 801217c:	d001      	beq.n	8012182 <tcp_free_acked_segments+0xd6>
 801217e:	2301      	movs	r3, #1
 8012180:	e000      	b.n	8012184 <tcp_free_acked_segments+0xd8>
 8012182:	2300      	movs	r3, #0
 8012184:	442b      	add	r3, r5
 8012186:	18e2      	adds	r2, r4, r3
 8012188:	4b0a      	ldr	r3, [pc, #40]	; (80121b4 <tcp_free_acked_segments+0x108>)
 801218a:	681b      	ldr	r3, [r3, #0]
 801218c:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 801218e:	2b00      	cmp	r3, #0
 8012190:	dd94      	ble.n	80120bc <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8012192:	68bb      	ldr	r3, [r7, #8]
}
 8012194:	4618      	mov	r0, r3
 8012196:	3718      	adds	r7, #24
 8012198:	46bd      	mov	sp, r7
 801219a:	bdb0      	pop	{r4, r5, r7, pc}
 801219c:	0801ecd8 	.word	0x0801ecd8
 80121a0:	0801ea0c 	.word	0x0801ea0c
 80121a4:	0801ea2c 	.word	0x0801ea2c
 80121a8:	0801ea60 	.word	0x0801ea60
 80121ac:	20009fbc 	.word	0x20009fbc
 80121b0:	0801ed00 	.word	0x0801ed00
 80121b4:	20009fb8 	.word	0x20009fb8

080121b8 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 80121b8:	b5b0      	push	{r4, r5, r7, lr}
 80121ba:	b094      	sub	sp, #80	; 0x50
 80121bc:	af00      	add	r7, sp, #0
 80121be:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 80121c0:	2300      	movs	r3, #0
 80121c2:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 80121c4:	687b      	ldr	r3, [r7, #4]
 80121c6:	2b00      	cmp	r3, #0
 80121c8:	d10a      	bne.n	80121e0 <tcp_receive+0x28>
 80121ca:	f240 427b 	movw	r2, #1147	; 0x47b
 80121ce:	49a6      	ldr	r1, [pc, #664]	; (8012468 <tcp_receive+0x2b0>)
 80121d0:	48a6      	ldr	r0, [pc, #664]	; (801246c <tcp_receive+0x2b4>)
 80121d2:	f008 ff9f 	bl	801b114 <trace_printf>
 80121d6:	49a6      	ldr	r1, [pc, #664]	; (8012470 <tcp_receive+0x2b8>)
 80121d8:	48a6      	ldr	r0, [pc, #664]	; (8012474 <tcp_receive+0x2bc>)
 80121da:	f008 ff9b 	bl	801b114 <trace_printf>
 80121de:	e7fe      	b.n	80121de <tcp_receive+0x26>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 80121e0:	687b      	ldr	r3, [r7, #4]
 80121e2:	7d1b      	ldrb	r3, [r3, #20]
 80121e4:	2b03      	cmp	r3, #3
 80121e6:	d80a      	bhi.n	80121fe <tcp_receive+0x46>
 80121e8:	f240 427c 	movw	r2, #1148	; 0x47c
 80121ec:	49a2      	ldr	r1, [pc, #648]	; (8012478 <tcp_receive+0x2c0>)
 80121ee:	489f      	ldr	r0, [pc, #636]	; (801246c <tcp_receive+0x2b4>)
 80121f0:	f008 ff90 	bl	801b114 <trace_printf>
 80121f4:	499e      	ldr	r1, [pc, #632]	; (8012470 <tcp_receive+0x2b8>)
 80121f6:	489f      	ldr	r0, [pc, #636]	; (8012474 <tcp_receive+0x2bc>)
 80121f8:	f008 ff8c 	bl	801b114 <trace_printf>
 80121fc:	e7fe      	b.n	80121fc <tcp_receive+0x44>

  if (flags & TCP_ACK) {
 80121fe:	4b9f      	ldr	r3, [pc, #636]	; (801247c <tcp_receive+0x2c4>)
 8012200:	781b      	ldrb	r3, [r3, #0]
 8012202:	f003 0310 	and.w	r3, r3, #16
 8012206:	2b00      	cmp	r3, #0
 8012208:	f000 8265 	beq.w	80126d6 <tcp_receive+0x51e>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 801220c:	687b      	ldr	r3, [r7, #4]
 801220e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8012212:	461a      	mov	r2, r3
 8012214:	687b      	ldr	r3, [r7, #4]
 8012216:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012218:	4413      	add	r3, r2
 801221a:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801221c:	687b      	ldr	r3, [r7, #4]
 801221e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8012220:	4b97      	ldr	r3, [pc, #604]	; (8012480 <tcp_receive+0x2c8>)
 8012222:	681b      	ldr	r3, [r3, #0]
 8012224:	1ad3      	subs	r3, r2, r3
 8012226:	2b00      	cmp	r3, #0
 8012228:	db1b      	blt.n	8012262 <tcp_receive+0xaa>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801222a:	687b      	ldr	r3, [r7, #4]
 801222c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801222e:	4b94      	ldr	r3, [pc, #592]	; (8012480 <tcp_receive+0x2c8>)
 8012230:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8012232:	429a      	cmp	r2, r3
 8012234:	d106      	bne.n	8012244 <tcp_receive+0x8c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8012236:	687b      	ldr	r3, [r7, #4]
 8012238:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801223a:	4b92      	ldr	r3, [pc, #584]	; (8012484 <tcp_receive+0x2cc>)
 801223c:	681b      	ldr	r3, [r3, #0]
 801223e:	1ad3      	subs	r3, r2, r3
 8012240:	2b00      	cmp	r3, #0
 8012242:	db0e      	blt.n	8012262 <tcp_receive+0xaa>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8012244:	687b      	ldr	r3, [r7, #4]
 8012246:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8012248:	4b8e      	ldr	r3, [pc, #568]	; (8012484 <tcp_receive+0x2cc>)
 801224a:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801224c:	429a      	cmp	r2, r3
 801224e:	d125      	bne.n	801229c <tcp_receive+0xe4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8012250:	4b8d      	ldr	r3, [pc, #564]	; (8012488 <tcp_receive+0x2d0>)
 8012252:	681b      	ldr	r3, [r3, #0]
 8012254:	89db      	ldrh	r3, [r3, #14]
 8012256:	b29a      	uxth	r2, r3
 8012258:	687b      	ldr	r3, [r7, #4]
 801225a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801225e:	429a      	cmp	r2, r3
 8012260:	d91c      	bls.n	801229c <tcp_receive+0xe4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8012262:	4b89      	ldr	r3, [pc, #548]	; (8012488 <tcp_receive+0x2d0>)
 8012264:	681b      	ldr	r3, [r3, #0]
 8012266:	89db      	ldrh	r3, [r3, #14]
 8012268:	b29a      	uxth	r2, r3
 801226a:	687b      	ldr	r3, [r7, #4]
 801226c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8012270:	687b      	ldr	r3, [r7, #4]
 8012272:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8012276:	687b      	ldr	r3, [r7, #4]
 8012278:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801227c:	429a      	cmp	r2, r3
 801227e:	d205      	bcs.n	801228c <tcp_receive+0xd4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8012280:	687b      	ldr	r3, [r7, #4]
 8012282:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8012286:	687b      	ldr	r3, [r7, #4]
 8012288:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 801228c:	4b7c      	ldr	r3, [pc, #496]	; (8012480 <tcp_receive+0x2c8>)
 801228e:	681a      	ldr	r2, [r3, #0]
 8012290:	687b      	ldr	r3, [r7, #4]
 8012292:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8012294:	4b7b      	ldr	r3, [pc, #492]	; (8012484 <tcp_receive+0x2cc>)
 8012296:	681a      	ldr	r2, [r3, #0]
 8012298:	687b      	ldr	r3, [r7, #4]
 801229a:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 801229c:	4b79      	ldr	r3, [pc, #484]	; (8012484 <tcp_receive+0x2cc>)
 801229e:	681a      	ldr	r2, [r3, #0]
 80122a0:	687b      	ldr	r3, [r7, #4]
 80122a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80122a4:	1ad3      	subs	r3, r2, r3
 80122a6:	2b00      	cmp	r3, #0
 80122a8:	dc58      	bgt.n	801235c <tcp_receive+0x1a4>
      /* Clause 2 */
      if (tcplen == 0) {
 80122aa:	4b78      	ldr	r3, [pc, #480]	; (801248c <tcp_receive+0x2d4>)
 80122ac:	881b      	ldrh	r3, [r3, #0]
 80122ae:	2b00      	cmp	r3, #0
 80122b0:	d14b      	bne.n	801234a <tcp_receive+0x192>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 80122b2:	687b      	ldr	r3, [r7, #4]
 80122b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80122b6:	687a      	ldr	r2, [r7, #4]
 80122b8:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 80122bc:	4413      	add	r3, r2
 80122be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80122c0:	429a      	cmp	r2, r3
 80122c2:	d142      	bne.n	801234a <tcp_receive+0x192>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 80122c4:	687b      	ldr	r3, [r7, #4]
 80122c6:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80122ca:	2b00      	cmp	r3, #0
 80122cc:	db3d      	blt.n	801234a <tcp_receive+0x192>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 80122ce:	687b      	ldr	r3, [r7, #4]
 80122d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80122d2:	4b6c      	ldr	r3, [pc, #432]	; (8012484 <tcp_receive+0x2cc>)
 80122d4:	681b      	ldr	r3, [r3, #0]
 80122d6:	429a      	cmp	r2, r3
 80122d8:	d137      	bne.n	801234a <tcp_receive+0x192>
              found_dupack = 1;
 80122da:	2301      	movs	r3, #1
 80122dc:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 80122de:	687b      	ldr	r3, [r7, #4]
 80122e0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80122e4:	2bff      	cmp	r3, #255	; 0xff
 80122e6:	d007      	beq.n	80122f8 <tcp_receive+0x140>
                ++pcb->dupacks;
 80122e8:	687b      	ldr	r3, [r7, #4]
 80122ea:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80122ee:	3301      	adds	r3, #1
 80122f0:	b2da      	uxtb	r2, r3
 80122f2:	687b      	ldr	r3, [r7, #4]
 80122f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 80122f8:	687b      	ldr	r3, [r7, #4]
 80122fa:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80122fe:	2b03      	cmp	r3, #3
 8012300:	d91b      	bls.n	801233a <tcp_receive+0x182>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8012302:	687b      	ldr	r3, [r7, #4]
 8012304:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8012308:	687b      	ldr	r3, [r7, #4]
 801230a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801230c:	4413      	add	r3, r2
 801230e:	b29a      	uxth	r2, r3
 8012310:	687b      	ldr	r3, [r7, #4]
 8012312:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8012316:	429a      	cmp	r2, r3
 8012318:	d30a      	bcc.n	8012330 <tcp_receive+0x178>
 801231a:	687b      	ldr	r3, [r7, #4]
 801231c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8012320:	687b      	ldr	r3, [r7, #4]
 8012322:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012324:	4413      	add	r3, r2
 8012326:	b29a      	uxth	r2, r3
 8012328:	687b      	ldr	r3, [r7, #4]
 801232a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801232e:	e004      	b.n	801233a <tcp_receive+0x182>
 8012330:	687b      	ldr	r3, [r7, #4]
 8012332:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012336:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 801233a:	687b      	ldr	r3, [r7, #4]
 801233c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8012340:	2b02      	cmp	r3, #2
 8012342:	d902      	bls.n	801234a <tcp_receive+0x192>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8012344:	6878      	ldr	r0, [r7, #4]
 8012346:	f002 fcf7 	bl	8014d38 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 801234a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801234c:	2b00      	cmp	r3, #0
 801234e:	f040 8162 	bne.w	8012616 <tcp_receive+0x45e>
        pcb->dupacks = 0;
 8012352:	687b      	ldr	r3, [r7, #4]
 8012354:	2200      	movs	r2, #0
 8012356:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801235a:	e15c      	b.n	8012616 <tcp_receive+0x45e>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801235c:	4b49      	ldr	r3, [pc, #292]	; (8012484 <tcp_receive+0x2cc>)
 801235e:	681a      	ldr	r2, [r3, #0]
 8012360:	687b      	ldr	r3, [r7, #4]
 8012362:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012364:	1ad3      	subs	r3, r2, r3
 8012366:	3b01      	subs	r3, #1
 8012368:	2b00      	cmp	r3, #0
 801236a:	f2c0 814f 	blt.w	801260c <tcp_receive+0x454>
 801236e:	4b45      	ldr	r3, [pc, #276]	; (8012484 <tcp_receive+0x2cc>)
 8012370:	681a      	ldr	r2, [r3, #0]
 8012372:	687b      	ldr	r3, [r7, #4]
 8012374:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012376:	1ad3      	subs	r3, r2, r3
 8012378:	2b00      	cmp	r3, #0
 801237a:	f300 8147 	bgt.w	801260c <tcp_receive+0x454>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 801237e:	687b      	ldr	r3, [r7, #4]
 8012380:	8b5b      	ldrh	r3, [r3, #26]
 8012382:	f003 0304 	and.w	r3, r3, #4
 8012386:	2b00      	cmp	r3, #0
 8012388:	d010      	beq.n	80123ac <tcp_receive+0x1f4>
        tcp_clear_flags(pcb, TF_INFR);
 801238a:	687b      	ldr	r3, [r7, #4]
 801238c:	8b5b      	ldrh	r3, [r3, #26]
 801238e:	f023 0304 	bic.w	r3, r3, #4
 8012392:	b29a      	uxth	r2, r3
 8012394:	687b      	ldr	r3, [r7, #4]
 8012396:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8012398:	687b      	ldr	r3, [r7, #4]
 801239a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801239e:	687b      	ldr	r3, [r7, #4]
 80123a0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 80123a4:	687b      	ldr	r3, [r7, #4]
 80123a6:	2200      	movs	r2, #0
 80123a8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 80123ac:	687b      	ldr	r3, [r7, #4]
 80123ae:	2200      	movs	r2, #0
 80123b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80123b4:	687b      	ldr	r3, [r7, #4]
 80123b6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80123ba:	10db      	asrs	r3, r3, #3
 80123bc:	b21b      	sxth	r3, r3
 80123be:	b29a      	uxth	r2, r3
 80123c0:	687b      	ldr	r3, [r7, #4]
 80123c2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80123c6:	b29b      	uxth	r3, r3
 80123c8:	4413      	add	r3, r2
 80123ca:	b29b      	uxth	r3, r3
 80123cc:	b21a      	sxth	r2, r3
 80123ce:	687b      	ldr	r3, [r7, #4]
 80123d0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 80123d4:	4b2b      	ldr	r3, [pc, #172]	; (8012484 <tcp_receive+0x2cc>)
 80123d6:	681b      	ldr	r3, [r3, #0]
 80123d8:	b29a      	uxth	r2, r3
 80123da:	687b      	ldr	r3, [r7, #4]
 80123dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80123de:	b29b      	uxth	r3, r3
 80123e0:	1ad3      	subs	r3, r2, r3
 80123e2:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 80123e4:	687b      	ldr	r3, [r7, #4]
 80123e6:	2200      	movs	r2, #0
 80123e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 80123ec:	4b25      	ldr	r3, [pc, #148]	; (8012484 <tcp_receive+0x2cc>)
 80123ee:	681a      	ldr	r2, [r3, #0]
 80123f0:	687b      	ldr	r3, [r7, #4]
 80123f2:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 80123f4:	687b      	ldr	r3, [r7, #4]
 80123f6:	7d1b      	ldrb	r3, [r3, #20]
 80123f8:	2b03      	cmp	r3, #3
 80123fa:	f240 8098 	bls.w	801252e <tcp_receive+0x376>
        if (pcb->cwnd < pcb->ssthresh) {
 80123fe:	687b      	ldr	r3, [r7, #4]
 8012400:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8012404:	687b      	ldr	r3, [r7, #4]
 8012406:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 801240a:	429a      	cmp	r2, r3
 801240c:	d246      	bcs.n	801249c <tcp_receive+0x2e4>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 801240e:	687b      	ldr	r3, [r7, #4]
 8012410:	8b5b      	ldrh	r3, [r3, #26]
 8012412:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8012416:	2b00      	cmp	r3, #0
 8012418:	d001      	beq.n	801241e <tcp_receive+0x266>
 801241a:	2301      	movs	r3, #1
 801241c:	e000      	b.n	8012420 <tcp_receive+0x268>
 801241e:	2302      	movs	r3, #2
 8012420:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8012424:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8012428:	b29a      	uxth	r2, r3
 801242a:	687b      	ldr	r3, [r7, #4]
 801242c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801242e:	fb12 f303 	smulbb	r3, r2, r3
 8012432:	b29b      	uxth	r3, r3
 8012434:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8012436:	4293      	cmp	r3, r2
 8012438:	bf28      	it	cs
 801243a:	4613      	movcs	r3, r2
 801243c:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 801243e:	687b      	ldr	r3, [r7, #4]
 8012440:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8012444:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8012446:	4413      	add	r3, r2
 8012448:	b29a      	uxth	r2, r3
 801244a:	687b      	ldr	r3, [r7, #4]
 801244c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8012450:	429a      	cmp	r2, r3
 8012452:	d31d      	bcc.n	8012490 <tcp_receive+0x2d8>
 8012454:	687b      	ldr	r3, [r7, #4]
 8012456:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801245a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801245c:	4413      	add	r3, r2
 801245e:	b29a      	uxth	r2, r3
 8012460:	687b      	ldr	r3, [r7, #4]
 8012462:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8012466:	e062      	b.n	801252e <tcp_receive+0x376>
 8012468:	0801ed20 	.word	0x0801ed20
 801246c:	0801ea0c 	.word	0x0801ea0c
 8012470:	0801ea2c 	.word	0x0801ea2c
 8012474:	0801ea60 	.word	0x0801ea60
 8012478:	0801ed3c 	.word	0x0801ed3c
 801247c:	20009fc0 	.word	0x20009fc0
 8012480:	20009fb4 	.word	0x20009fb4
 8012484:	20009fb8 	.word	0x20009fb8
 8012488:	20009fa4 	.word	0x20009fa4
 801248c:	20009fbe 	.word	0x20009fbe
 8012490:	687b      	ldr	r3, [r7, #4]
 8012492:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012496:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801249a:	e048      	b.n	801252e <tcp_receive+0x376>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 801249c:	687b      	ldr	r3, [r7, #4]
 801249e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80124a2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80124a4:	4413      	add	r3, r2
 80124a6:	b29a      	uxth	r2, r3
 80124a8:	687b      	ldr	r3, [r7, #4]
 80124aa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80124ae:	429a      	cmp	r2, r3
 80124b0:	d309      	bcc.n	80124c6 <tcp_receive+0x30e>
 80124b2:	687b      	ldr	r3, [r7, #4]
 80124b4:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80124b8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80124ba:	4413      	add	r3, r2
 80124bc:	b29a      	uxth	r2, r3
 80124be:	687b      	ldr	r3, [r7, #4]
 80124c0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80124c4:	e004      	b.n	80124d0 <tcp_receive+0x318>
 80124c6:	687b      	ldr	r3, [r7, #4]
 80124c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80124cc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 80124d0:	687b      	ldr	r3, [r7, #4]
 80124d2:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80124d6:	687b      	ldr	r3, [r7, #4]
 80124d8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80124dc:	429a      	cmp	r2, r3
 80124de:	d326      	bcc.n	801252e <tcp_receive+0x376>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 80124e0:	687b      	ldr	r3, [r7, #4]
 80124e2:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80124e6:	687b      	ldr	r3, [r7, #4]
 80124e8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80124ec:	1ad3      	subs	r3, r2, r3
 80124ee:	b29a      	uxth	r2, r3
 80124f0:	687b      	ldr	r3, [r7, #4]
 80124f2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 80124f6:	687b      	ldr	r3, [r7, #4]
 80124f8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80124fc:	687b      	ldr	r3, [r7, #4]
 80124fe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012500:	4413      	add	r3, r2
 8012502:	b29a      	uxth	r2, r3
 8012504:	687b      	ldr	r3, [r7, #4]
 8012506:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801250a:	429a      	cmp	r2, r3
 801250c:	d30a      	bcc.n	8012524 <tcp_receive+0x36c>
 801250e:	687b      	ldr	r3, [r7, #4]
 8012510:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8012514:	687b      	ldr	r3, [r7, #4]
 8012516:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012518:	4413      	add	r3, r2
 801251a:	b29a      	uxth	r2, r3
 801251c:	687b      	ldr	r3, [r7, #4]
 801251e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8012522:	e004      	b.n	801252e <tcp_receive+0x376>
 8012524:	687b      	ldr	r3, [r7, #4]
 8012526:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801252a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 801252e:	687b      	ldr	r3, [r7, #4]
 8012530:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8012532:	687b      	ldr	r3, [r7, #4]
 8012534:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012536:	4a9e      	ldr	r2, [pc, #632]	; (80127b0 <tcp_receive+0x5f8>)
 8012538:	6878      	ldr	r0, [r7, #4]
 801253a:	f7ff fdb7 	bl	80120ac <tcp_free_acked_segments>
 801253e:	4602      	mov	r2, r0
 8012540:	687b      	ldr	r3, [r7, #4]
 8012542:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8012544:	687b      	ldr	r3, [r7, #4]
 8012546:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8012548:	687b      	ldr	r3, [r7, #4]
 801254a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801254c:	4a99      	ldr	r2, [pc, #612]	; (80127b4 <tcp_receive+0x5fc>)
 801254e:	6878      	ldr	r0, [r7, #4]
 8012550:	f7ff fdac 	bl	80120ac <tcp_free_acked_segments>
 8012554:	4602      	mov	r2, r0
 8012556:	687b      	ldr	r3, [r7, #4]
 8012558:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 801255a:	687b      	ldr	r3, [r7, #4]
 801255c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801255e:	2b00      	cmp	r3, #0
 8012560:	d104      	bne.n	801256c <tcp_receive+0x3b4>
        pcb->rtime = -1;
 8012562:	687b      	ldr	r3, [r7, #4]
 8012564:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012568:	861a      	strh	r2, [r3, #48]	; 0x30
 801256a:	e002      	b.n	8012572 <tcp_receive+0x3ba>
      } else {
        pcb->rtime = 0;
 801256c:	687b      	ldr	r3, [r7, #4]
 801256e:	2200      	movs	r2, #0
 8012570:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8012572:	687b      	ldr	r3, [r7, #4]
 8012574:	2200      	movs	r2, #0
 8012576:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8012578:	687b      	ldr	r3, [r7, #4]
 801257a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801257c:	2b00      	cmp	r3, #0
 801257e:	d103      	bne.n	8012588 <tcp_receive+0x3d0>
        pcb->unsent_oversize = 0;
 8012580:	687b      	ldr	r3, [r7, #4]
 8012582:	2200      	movs	r2, #0
 8012584:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8012588:	687b      	ldr	r3, [r7, #4]
 801258a:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 801258e:	4b8a      	ldr	r3, [pc, #552]	; (80127b8 <tcp_receive+0x600>)
 8012590:	881b      	ldrh	r3, [r3, #0]
 8012592:	4413      	add	r3, r2
 8012594:	b29a      	uxth	r2, r3
 8012596:	687b      	ldr	r3, [r7, #4]
 8012598:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 801259c:	687b      	ldr	r3, [r7, #4]
 801259e:	8b5b      	ldrh	r3, [r3, #26]
 80125a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80125a4:	2b00      	cmp	r3, #0
 80125a6:	d035      	beq.n	8012614 <tcp_receive+0x45c>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 80125a8:	687b      	ldr	r3, [r7, #4]
 80125aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80125ac:	2b00      	cmp	r3, #0
 80125ae:	d118      	bne.n	80125e2 <tcp_receive+0x42a>
          if ((pcb->unsent == NULL) ||
 80125b0:	687b      	ldr	r3, [r7, #4]
 80125b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80125b4:	2b00      	cmp	r3, #0
 80125b6:	d00c      	beq.n	80125d2 <tcp_receive+0x41a>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 80125b8:	687b      	ldr	r3, [r7, #4]
 80125ba:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 80125bc:	687b      	ldr	r3, [r7, #4]
 80125be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80125c0:	691b      	ldr	r3, [r3, #16]
 80125c2:	685b      	ldr	r3, [r3, #4]
 80125c4:	4618      	mov	r0, r3
 80125c6:	f7fa fbd2 	bl	800cd6e <lwip_htonl>
 80125ca:	4603      	mov	r3, r0
 80125cc:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 80125ce:	2b00      	cmp	r3, #0
 80125d0:	dc20      	bgt.n	8012614 <tcp_receive+0x45c>
            tcp_clear_flags(pcb, TF_RTO);
 80125d2:	687b      	ldr	r3, [r7, #4]
 80125d4:	8b5b      	ldrh	r3, [r3, #26]
 80125d6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80125da:	b29a      	uxth	r2, r3
 80125dc:	687b      	ldr	r3, [r7, #4]
 80125de:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80125e0:	e018      	b.n	8012614 <tcp_receive+0x45c>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 80125e2:	687b      	ldr	r3, [r7, #4]
 80125e4:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 80125e6:	687b      	ldr	r3, [r7, #4]
 80125e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80125ea:	691b      	ldr	r3, [r3, #16]
 80125ec:	685b      	ldr	r3, [r3, #4]
 80125ee:	4618      	mov	r0, r3
 80125f0:	f7fa fbbd 	bl	800cd6e <lwip_htonl>
 80125f4:	4603      	mov	r3, r0
 80125f6:	1ae3      	subs	r3, r4, r3
 80125f8:	2b00      	cmp	r3, #0
 80125fa:	dc0b      	bgt.n	8012614 <tcp_receive+0x45c>
          tcp_clear_flags(pcb, TF_RTO);
 80125fc:	687b      	ldr	r3, [r7, #4]
 80125fe:	8b5b      	ldrh	r3, [r3, #26]
 8012600:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8012604:	b29a      	uxth	r2, r3
 8012606:	687b      	ldr	r3, [r7, #4]
 8012608:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801260a:	e003      	b.n	8012614 <tcp_receive+0x45c>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 801260c:	6878      	ldr	r0, [r7, #4]
 801260e:	f002 fdb7 	bl	8015180 <tcp_send_empty_ack>
 8012612:	e000      	b.n	8012616 <tcp_receive+0x45e>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8012614:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8012616:	687b      	ldr	r3, [r7, #4]
 8012618:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801261a:	2b00      	cmp	r3, #0
 801261c:	d05b      	beq.n	80126d6 <tcp_receive+0x51e>
 801261e:	687b      	ldr	r3, [r7, #4]
 8012620:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012622:	4b66      	ldr	r3, [pc, #408]	; (80127bc <tcp_receive+0x604>)
 8012624:	681b      	ldr	r3, [r3, #0]
 8012626:	1ad3      	subs	r3, r2, r3
 8012628:	2b00      	cmp	r3, #0
 801262a:	da54      	bge.n	80126d6 <tcp_receive+0x51e>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 801262c:	4b64      	ldr	r3, [pc, #400]	; (80127c0 <tcp_receive+0x608>)
 801262e:	681b      	ldr	r3, [r3, #0]
 8012630:	b29a      	uxth	r2, r3
 8012632:	687b      	ldr	r3, [r7, #4]
 8012634:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012636:	b29b      	uxth	r3, r3
 8012638:	1ad3      	subs	r3, r2, r3
 801263a:	b29b      	uxth	r3, r3
 801263c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8012640:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8012644:	687b      	ldr	r3, [r7, #4]
 8012646:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801264a:	10db      	asrs	r3, r3, #3
 801264c:	b21b      	sxth	r3, r3
 801264e:	b29b      	uxth	r3, r3
 8012650:	1ad3      	subs	r3, r2, r3
 8012652:	b29b      	uxth	r3, r3
 8012654:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8012658:	687b      	ldr	r3, [r7, #4]
 801265a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801265e:	b29a      	uxth	r2, r3
 8012660:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8012664:	4413      	add	r3, r2
 8012666:	b29b      	uxth	r3, r3
 8012668:	b21a      	sxth	r2, r3
 801266a:	687b      	ldr	r3, [r7, #4]
 801266c:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 801266e:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8012672:	2b00      	cmp	r3, #0
 8012674:	da05      	bge.n	8012682 <tcp_receive+0x4ca>
        m = (s16_t) - m;
 8012676:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 801267a:	425b      	negs	r3, r3
 801267c:	b29b      	uxth	r3, r3
 801267e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8012682:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8012686:	687b      	ldr	r3, [r7, #4]
 8012688:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801268c:	109b      	asrs	r3, r3, #2
 801268e:	b21b      	sxth	r3, r3
 8012690:	b29b      	uxth	r3, r3
 8012692:	1ad3      	subs	r3, r2, r3
 8012694:	b29b      	uxth	r3, r3
 8012696:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 801269a:	687b      	ldr	r3, [r7, #4]
 801269c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80126a0:	b29a      	uxth	r2, r3
 80126a2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80126a6:	4413      	add	r3, r2
 80126a8:	b29b      	uxth	r3, r3
 80126aa:	b21a      	sxth	r2, r3
 80126ac:	687b      	ldr	r3, [r7, #4]
 80126ae:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80126b0:	687b      	ldr	r3, [r7, #4]
 80126b2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80126b6:	10db      	asrs	r3, r3, #3
 80126b8:	b21b      	sxth	r3, r3
 80126ba:	b29a      	uxth	r2, r3
 80126bc:	687b      	ldr	r3, [r7, #4]
 80126be:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80126c2:	b29b      	uxth	r3, r3
 80126c4:	4413      	add	r3, r2
 80126c6:	b29b      	uxth	r3, r3
 80126c8:	b21a      	sxth	r2, r3
 80126ca:	687b      	ldr	r3, [r7, #4]
 80126cc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 80126d0:	687b      	ldr	r3, [r7, #4]
 80126d2:	2200      	movs	r2, #0
 80126d4:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 80126d6:	4b3b      	ldr	r3, [pc, #236]	; (80127c4 <tcp_receive+0x60c>)
 80126d8:	881b      	ldrh	r3, [r3, #0]
 80126da:	2b00      	cmp	r3, #0
 80126dc:	f000 8506 	beq.w	80130ec <tcp_receive+0xf34>
 80126e0:	687b      	ldr	r3, [r7, #4]
 80126e2:	7d1b      	ldrb	r3, [r3, #20]
 80126e4:	2b06      	cmp	r3, #6
 80126e6:	f200 8501 	bhi.w	80130ec <tcp_receive+0xf34>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80126ea:	687b      	ldr	r3, [r7, #4]
 80126ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80126ee:	4b36      	ldr	r3, [pc, #216]	; (80127c8 <tcp_receive+0x610>)
 80126f0:	681b      	ldr	r3, [r3, #0]
 80126f2:	1ad3      	subs	r3, r2, r3
 80126f4:	3b01      	subs	r3, #1
 80126f6:	2b00      	cmp	r3, #0
 80126f8:	f2c0 809c 	blt.w	8012834 <tcp_receive+0x67c>
 80126fc:	687b      	ldr	r3, [r7, #4]
 80126fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012700:	4b30      	ldr	r3, [pc, #192]	; (80127c4 <tcp_receive+0x60c>)
 8012702:	881b      	ldrh	r3, [r3, #0]
 8012704:	4619      	mov	r1, r3
 8012706:	4b30      	ldr	r3, [pc, #192]	; (80127c8 <tcp_receive+0x610>)
 8012708:	681b      	ldr	r3, [r3, #0]
 801270a:	440b      	add	r3, r1
 801270c:	1ad3      	subs	r3, r2, r3
 801270e:	3301      	adds	r3, #1
 8012710:	2b00      	cmp	r3, #0
 8012712:	f300 808f 	bgt.w	8012834 <tcp_receive+0x67c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8012716:	4b2d      	ldr	r3, [pc, #180]	; (80127cc <tcp_receive+0x614>)
 8012718:	685b      	ldr	r3, [r3, #4]
 801271a:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 801271c:	687b      	ldr	r3, [r7, #4]
 801271e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012720:	4b29      	ldr	r3, [pc, #164]	; (80127c8 <tcp_receive+0x610>)
 8012722:	681b      	ldr	r3, [r3, #0]
 8012724:	1ad3      	subs	r3, r2, r3
 8012726:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8012728:	4b28      	ldr	r3, [pc, #160]	; (80127cc <tcp_receive+0x614>)
 801272a:	685b      	ldr	r3, [r3, #4]
 801272c:	2b00      	cmp	r3, #0
 801272e:	d10a      	bne.n	8012746 <tcp_receive+0x58e>
 8012730:	f240 5294 	movw	r2, #1428	; 0x594
 8012734:	4926      	ldr	r1, [pc, #152]	; (80127d0 <tcp_receive+0x618>)
 8012736:	4827      	ldr	r0, [pc, #156]	; (80127d4 <tcp_receive+0x61c>)
 8012738:	f008 fcec 	bl	801b114 <trace_printf>
 801273c:	4926      	ldr	r1, [pc, #152]	; (80127d8 <tcp_receive+0x620>)
 801273e:	4827      	ldr	r0, [pc, #156]	; (80127dc <tcp_receive+0x624>)
 8012740:	f008 fce8 	bl	801b114 <trace_printf>
 8012744:	e7fe      	b.n	8012744 <tcp_receive+0x58c>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8012746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012748:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801274c:	4293      	cmp	r3, r2
 801274e:	d90a      	bls.n	8012766 <tcp_receive+0x5ae>
 8012750:	f240 5295 	movw	r2, #1429	; 0x595
 8012754:	4922      	ldr	r1, [pc, #136]	; (80127e0 <tcp_receive+0x628>)
 8012756:	481f      	ldr	r0, [pc, #124]	; (80127d4 <tcp_receive+0x61c>)
 8012758:	f008 fcdc 	bl	801b114 <trace_printf>
 801275c:	491e      	ldr	r1, [pc, #120]	; (80127d8 <tcp_receive+0x620>)
 801275e:	481f      	ldr	r0, [pc, #124]	; (80127dc <tcp_receive+0x624>)
 8012760:	f008 fcd8 	bl	801b114 <trace_printf>
 8012764:	e7fe      	b.n	8012764 <tcp_receive+0x5ac>
      off = (u16_t)off32;
 8012766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012768:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 801276c:	4b17      	ldr	r3, [pc, #92]	; (80127cc <tcp_receive+0x614>)
 801276e:	685b      	ldr	r3, [r3, #4]
 8012770:	891b      	ldrh	r3, [r3, #8]
 8012772:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012776:	429a      	cmp	r2, r3
 8012778:	d90a      	bls.n	8012790 <tcp_receive+0x5d8>
 801277a:	f240 5297 	movw	r2, #1431	; 0x597
 801277e:	4919      	ldr	r1, [pc, #100]	; (80127e4 <tcp_receive+0x62c>)
 8012780:	4814      	ldr	r0, [pc, #80]	; (80127d4 <tcp_receive+0x61c>)
 8012782:	f008 fcc7 	bl	801b114 <trace_printf>
 8012786:	4914      	ldr	r1, [pc, #80]	; (80127d8 <tcp_receive+0x620>)
 8012788:	4814      	ldr	r0, [pc, #80]	; (80127dc <tcp_receive+0x624>)
 801278a:	f008 fcc3 	bl	801b114 <trace_printf>
 801278e:	e7fe      	b.n	801278e <tcp_receive+0x5d6>
      inseg.len -= off;
 8012790:	4b0e      	ldr	r3, [pc, #56]	; (80127cc <tcp_receive+0x614>)
 8012792:	891a      	ldrh	r2, [r3, #8]
 8012794:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012798:	1ad3      	subs	r3, r2, r3
 801279a:	b29a      	uxth	r2, r3
 801279c:	4b0b      	ldr	r3, [pc, #44]	; (80127cc <tcp_receive+0x614>)
 801279e:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 80127a0:	4b0a      	ldr	r3, [pc, #40]	; (80127cc <tcp_receive+0x614>)
 80127a2:	685b      	ldr	r3, [r3, #4]
 80127a4:	891a      	ldrh	r2, [r3, #8]
 80127a6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80127aa:	1ad3      	subs	r3, r2, r3
 80127ac:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 80127ae:	e02b      	b.n	8012808 <tcp_receive+0x650>
 80127b0:	0801ed58 	.word	0x0801ed58
 80127b4:	0801ed60 	.word	0x0801ed60
 80127b8:	20009fbc 	.word	0x20009fbc
 80127bc:	20009fb8 	.word	0x20009fb8
 80127c0:	20010c84 	.word	0x20010c84
 80127c4:	20009fbe 	.word	0x20009fbe
 80127c8:	20009fb4 	.word	0x20009fb4
 80127cc:	20009f90 	.word	0x20009f90
 80127d0:	0801ed68 	.word	0x0801ed68
 80127d4:	0801ea0c 	.word	0x0801ea0c
 80127d8:	0801ea2c 	.word	0x0801ea2c
 80127dc:	0801ea60 	.word	0x0801ea60
 80127e0:	0801ed78 	.word	0x0801ed78
 80127e4:	0801ed88 	.word	0x0801ed88
        off -= p->len;
 80127e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80127ea:	895b      	ldrh	r3, [r3, #10]
 80127ec:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80127f0:	1ad3      	subs	r3, r2, r3
 80127f2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 80127f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80127f8:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80127fa:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 80127fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80127fe:	2200      	movs	r2, #0
 8012800:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8012802:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012804:	681b      	ldr	r3, [r3, #0]
 8012806:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8012808:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801280a:	895b      	ldrh	r3, [r3, #10]
 801280c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012810:	429a      	cmp	r2, r3
 8012812:	d8e9      	bhi.n	80127e8 <tcp_receive+0x630>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8012814:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012818:	4619      	mov	r1, r3
 801281a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801281c:	f7fb ff1a 	bl	800e654 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8012820:	687b      	ldr	r3, [r7, #4]
 8012822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012824:	4a93      	ldr	r2, [pc, #588]	; (8012a74 <tcp_receive+0x8bc>)
 8012826:	6013      	str	r3, [r2, #0]
 8012828:	4b93      	ldr	r3, [pc, #588]	; (8012a78 <tcp_receive+0x8c0>)
 801282a:	691b      	ldr	r3, [r3, #16]
 801282c:	4a91      	ldr	r2, [pc, #580]	; (8012a74 <tcp_receive+0x8bc>)
 801282e:	6812      	ldr	r2, [r2, #0]
 8012830:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8012832:	e00d      	b.n	8012850 <tcp_receive+0x698>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8012834:	4b8f      	ldr	r3, [pc, #572]	; (8012a74 <tcp_receive+0x8bc>)
 8012836:	681a      	ldr	r2, [r3, #0]
 8012838:	687b      	ldr	r3, [r7, #4]
 801283a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801283c:	1ad3      	subs	r3, r2, r3
 801283e:	2b00      	cmp	r3, #0
 8012840:	da06      	bge.n	8012850 <tcp_receive+0x698>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8012842:	687b      	ldr	r3, [r7, #4]
 8012844:	8b5b      	ldrh	r3, [r3, #26]
 8012846:	f043 0302 	orr.w	r3, r3, #2
 801284a:	b29a      	uxth	r2, r3
 801284c:	687b      	ldr	r3, [r7, #4]
 801284e:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8012850:	4b88      	ldr	r3, [pc, #544]	; (8012a74 <tcp_receive+0x8bc>)
 8012852:	681a      	ldr	r2, [r3, #0]
 8012854:	687b      	ldr	r3, [r7, #4]
 8012856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012858:	1ad3      	subs	r3, r2, r3
 801285a:	2b00      	cmp	r3, #0
 801285c:	f2c0 8441 	blt.w	80130e2 <tcp_receive+0xf2a>
 8012860:	4b84      	ldr	r3, [pc, #528]	; (8012a74 <tcp_receive+0x8bc>)
 8012862:	681a      	ldr	r2, [r3, #0]
 8012864:	687b      	ldr	r3, [r7, #4]
 8012866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012868:	6879      	ldr	r1, [r7, #4]
 801286a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801286c:	440b      	add	r3, r1
 801286e:	1ad3      	subs	r3, r2, r3
 8012870:	3301      	adds	r3, #1
 8012872:	2b00      	cmp	r3, #0
 8012874:	f300 8435 	bgt.w	80130e2 <tcp_receive+0xf2a>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8012878:	687b      	ldr	r3, [r7, #4]
 801287a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801287c:	4b7d      	ldr	r3, [pc, #500]	; (8012a74 <tcp_receive+0x8bc>)
 801287e:	681b      	ldr	r3, [r3, #0]
 8012880:	429a      	cmp	r2, r3
 8012882:	f040 82ae 	bne.w	8012de2 <tcp_receive+0xc2a>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8012886:	4b7c      	ldr	r3, [pc, #496]	; (8012a78 <tcp_receive+0x8c0>)
 8012888:	891c      	ldrh	r4, [r3, #8]
 801288a:	4b7b      	ldr	r3, [pc, #492]	; (8012a78 <tcp_receive+0x8c0>)
 801288c:	691b      	ldr	r3, [r3, #16]
 801288e:	899b      	ldrh	r3, [r3, #12]
 8012890:	b29b      	uxth	r3, r3
 8012892:	4618      	mov	r0, r3
 8012894:	f7fa fa56 	bl	800cd44 <lwip_htons>
 8012898:	4603      	mov	r3, r0
 801289a:	b2db      	uxtb	r3, r3
 801289c:	f003 0303 	and.w	r3, r3, #3
 80128a0:	2b00      	cmp	r3, #0
 80128a2:	d001      	beq.n	80128a8 <tcp_receive+0x6f0>
 80128a4:	2301      	movs	r3, #1
 80128a6:	e000      	b.n	80128aa <tcp_receive+0x6f2>
 80128a8:	2300      	movs	r3, #0
 80128aa:	4423      	add	r3, r4
 80128ac:	b29a      	uxth	r2, r3
 80128ae:	4b73      	ldr	r3, [pc, #460]	; (8012a7c <tcp_receive+0x8c4>)
 80128b0:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 80128b2:	687b      	ldr	r3, [r7, #4]
 80128b4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80128b6:	4b71      	ldr	r3, [pc, #452]	; (8012a7c <tcp_receive+0x8c4>)
 80128b8:	881b      	ldrh	r3, [r3, #0]
 80128ba:	429a      	cmp	r2, r3
 80128bc:	d279      	bcs.n	80129b2 <tcp_receive+0x7fa>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80128be:	4b6e      	ldr	r3, [pc, #440]	; (8012a78 <tcp_receive+0x8c0>)
 80128c0:	691b      	ldr	r3, [r3, #16]
 80128c2:	899b      	ldrh	r3, [r3, #12]
 80128c4:	b29b      	uxth	r3, r3
 80128c6:	4618      	mov	r0, r3
 80128c8:	f7fa fa3c 	bl	800cd44 <lwip_htons>
 80128cc:	4603      	mov	r3, r0
 80128ce:	b2db      	uxtb	r3, r3
 80128d0:	f003 0301 	and.w	r3, r3, #1
 80128d4:	2b00      	cmp	r3, #0
 80128d6:	d01f      	beq.n	8012918 <tcp_receive+0x760>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 80128d8:	4b67      	ldr	r3, [pc, #412]	; (8012a78 <tcp_receive+0x8c0>)
 80128da:	691b      	ldr	r3, [r3, #16]
 80128dc:	899b      	ldrh	r3, [r3, #12]
 80128de:	b29b      	uxth	r3, r3
 80128e0:	b21b      	sxth	r3, r3
 80128e2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80128e6:	b21c      	sxth	r4, r3
 80128e8:	4b63      	ldr	r3, [pc, #396]	; (8012a78 <tcp_receive+0x8c0>)
 80128ea:	691b      	ldr	r3, [r3, #16]
 80128ec:	899b      	ldrh	r3, [r3, #12]
 80128ee:	b29b      	uxth	r3, r3
 80128f0:	4618      	mov	r0, r3
 80128f2:	f7fa fa27 	bl	800cd44 <lwip_htons>
 80128f6:	4603      	mov	r3, r0
 80128f8:	b2db      	uxtb	r3, r3
 80128fa:	b29b      	uxth	r3, r3
 80128fc:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8012900:	b29b      	uxth	r3, r3
 8012902:	4618      	mov	r0, r3
 8012904:	f7fa fa1e 	bl	800cd44 <lwip_htons>
 8012908:	4603      	mov	r3, r0
 801290a:	b21b      	sxth	r3, r3
 801290c:	4323      	orrs	r3, r4
 801290e:	b21a      	sxth	r2, r3
 8012910:	4b59      	ldr	r3, [pc, #356]	; (8012a78 <tcp_receive+0x8c0>)
 8012912:	691b      	ldr	r3, [r3, #16]
 8012914:	b292      	uxth	r2, r2
 8012916:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8012918:	687b      	ldr	r3, [r7, #4]
 801291a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801291c:	4b56      	ldr	r3, [pc, #344]	; (8012a78 <tcp_receive+0x8c0>)
 801291e:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8012920:	4b55      	ldr	r3, [pc, #340]	; (8012a78 <tcp_receive+0x8c0>)
 8012922:	691b      	ldr	r3, [r3, #16]
 8012924:	899b      	ldrh	r3, [r3, #12]
 8012926:	b29b      	uxth	r3, r3
 8012928:	4618      	mov	r0, r3
 801292a:	f7fa fa0b 	bl	800cd44 <lwip_htons>
 801292e:	4603      	mov	r3, r0
 8012930:	b2db      	uxtb	r3, r3
 8012932:	f003 0302 	and.w	r3, r3, #2
 8012936:	2b00      	cmp	r3, #0
 8012938:	d005      	beq.n	8012946 <tcp_receive+0x78e>
            inseg.len -= 1;
 801293a:	4b4f      	ldr	r3, [pc, #316]	; (8012a78 <tcp_receive+0x8c0>)
 801293c:	891b      	ldrh	r3, [r3, #8]
 801293e:	3b01      	subs	r3, #1
 8012940:	b29a      	uxth	r2, r3
 8012942:	4b4d      	ldr	r3, [pc, #308]	; (8012a78 <tcp_receive+0x8c0>)
 8012944:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8012946:	4b4c      	ldr	r3, [pc, #304]	; (8012a78 <tcp_receive+0x8c0>)
 8012948:	685b      	ldr	r3, [r3, #4]
 801294a:	4a4b      	ldr	r2, [pc, #300]	; (8012a78 <tcp_receive+0x8c0>)
 801294c:	8912      	ldrh	r2, [r2, #8]
 801294e:	4611      	mov	r1, r2
 8012950:	4618      	mov	r0, r3
 8012952:	f7fb fd6b 	bl	800e42c <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8012956:	4b48      	ldr	r3, [pc, #288]	; (8012a78 <tcp_receive+0x8c0>)
 8012958:	891c      	ldrh	r4, [r3, #8]
 801295a:	4b47      	ldr	r3, [pc, #284]	; (8012a78 <tcp_receive+0x8c0>)
 801295c:	691b      	ldr	r3, [r3, #16]
 801295e:	899b      	ldrh	r3, [r3, #12]
 8012960:	b29b      	uxth	r3, r3
 8012962:	4618      	mov	r0, r3
 8012964:	f7fa f9ee 	bl	800cd44 <lwip_htons>
 8012968:	4603      	mov	r3, r0
 801296a:	b2db      	uxtb	r3, r3
 801296c:	f003 0303 	and.w	r3, r3, #3
 8012970:	2b00      	cmp	r3, #0
 8012972:	d001      	beq.n	8012978 <tcp_receive+0x7c0>
 8012974:	2301      	movs	r3, #1
 8012976:	e000      	b.n	801297a <tcp_receive+0x7c2>
 8012978:	2300      	movs	r3, #0
 801297a:	4423      	add	r3, r4
 801297c:	b29a      	uxth	r2, r3
 801297e:	4b3f      	ldr	r3, [pc, #252]	; (8012a7c <tcp_receive+0x8c4>)
 8012980:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8012982:	4b3e      	ldr	r3, [pc, #248]	; (8012a7c <tcp_receive+0x8c4>)
 8012984:	881b      	ldrh	r3, [r3, #0]
 8012986:	461a      	mov	r2, r3
 8012988:	4b3a      	ldr	r3, [pc, #232]	; (8012a74 <tcp_receive+0x8bc>)
 801298a:	681b      	ldr	r3, [r3, #0]
 801298c:	441a      	add	r2, r3
 801298e:	687b      	ldr	r3, [r7, #4]
 8012990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012992:	6879      	ldr	r1, [r7, #4]
 8012994:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8012996:	440b      	add	r3, r1
 8012998:	429a      	cmp	r2, r3
 801299a:	d00a      	beq.n	80129b2 <tcp_receive+0x7fa>
 801299c:	f240 52cb 	movw	r2, #1483	; 0x5cb
 80129a0:	4937      	ldr	r1, [pc, #220]	; (8012a80 <tcp_receive+0x8c8>)
 80129a2:	4838      	ldr	r0, [pc, #224]	; (8012a84 <tcp_receive+0x8cc>)
 80129a4:	f008 fbb6 	bl	801b114 <trace_printf>
 80129a8:	4937      	ldr	r1, [pc, #220]	; (8012a88 <tcp_receive+0x8d0>)
 80129aa:	4838      	ldr	r0, [pc, #224]	; (8012a8c <tcp_receive+0x8d4>)
 80129ac:	f008 fbb2 	bl	801b114 <trace_printf>
 80129b0:	e7fe      	b.n	80129b0 <tcp_receive+0x7f8>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 80129b2:	687b      	ldr	r3, [r7, #4]
 80129b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80129b6:	2b00      	cmp	r3, #0
 80129b8:	f000 80ed 	beq.w	8012b96 <tcp_receive+0x9de>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80129bc:	4b2e      	ldr	r3, [pc, #184]	; (8012a78 <tcp_receive+0x8c0>)
 80129be:	691b      	ldr	r3, [r3, #16]
 80129c0:	899b      	ldrh	r3, [r3, #12]
 80129c2:	b29b      	uxth	r3, r3
 80129c4:	4618      	mov	r0, r3
 80129c6:	f7fa f9bd 	bl	800cd44 <lwip_htons>
 80129ca:	4603      	mov	r3, r0
 80129cc:	b2db      	uxtb	r3, r3
 80129ce:	f003 0301 	and.w	r3, r3, #1
 80129d2:	2b00      	cmp	r3, #0
 80129d4:	d010      	beq.n	80129f8 <tcp_receive+0x840>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 80129d6:	e00a      	b.n	80129ee <tcp_receive+0x836>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 80129d8:	687b      	ldr	r3, [r7, #4]
 80129da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80129dc:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 80129de:	687b      	ldr	r3, [r7, #4]
 80129e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80129e2:	681a      	ldr	r2, [r3, #0]
 80129e4:	687b      	ldr	r3, [r7, #4]
 80129e6:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 80129e8:	68f8      	ldr	r0, [r7, #12]
 80129ea:	f7fd fb58 	bl	801009e <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 80129ee:	687b      	ldr	r3, [r7, #4]
 80129f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80129f2:	2b00      	cmp	r3, #0
 80129f4:	d1f0      	bne.n	80129d8 <tcp_receive+0x820>
 80129f6:	e0ce      	b.n	8012b96 <tcp_receive+0x9de>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 80129f8:	687b      	ldr	r3, [r7, #4]
 80129fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80129fc:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 80129fe:	e054      	b.n	8012aaa <tcp_receive+0x8f2>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8012a00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012a02:	691b      	ldr	r3, [r3, #16]
 8012a04:	899b      	ldrh	r3, [r3, #12]
 8012a06:	b29b      	uxth	r3, r3
 8012a08:	4618      	mov	r0, r3
 8012a0a:	f7fa f99b 	bl	800cd44 <lwip_htons>
 8012a0e:	4603      	mov	r3, r0
 8012a10:	b2db      	uxtb	r3, r3
 8012a12:	f003 0301 	and.w	r3, r3, #1
 8012a16:	2b00      	cmp	r3, #0
 8012a18:	d03f      	beq.n	8012a9a <tcp_receive+0x8e2>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8012a1a:	4b17      	ldr	r3, [pc, #92]	; (8012a78 <tcp_receive+0x8c0>)
 8012a1c:	691b      	ldr	r3, [r3, #16]
 8012a1e:	899b      	ldrh	r3, [r3, #12]
 8012a20:	b29b      	uxth	r3, r3
 8012a22:	4618      	mov	r0, r3
 8012a24:	f7fa f98e 	bl	800cd44 <lwip_htons>
 8012a28:	4603      	mov	r3, r0
 8012a2a:	b2db      	uxtb	r3, r3
 8012a2c:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8012a30:	2b00      	cmp	r3, #0
 8012a32:	d132      	bne.n	8012a9a <tcp_receive+0x8e2>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8012a34:	4b10      	ldr	r3, [pc, #64]	; (8012a78 <tcp_receive+0x8c0>)
 8012a36:	691b      	ldr	r3, [r3, #16]
 8012a38:	899b      	ldrh	r3, [r3, #12]
 8012a3a:	b29c      	uxth	r4, r3
 8012a3c:	2001      	movs	r0, #1
 8012a3e:	f7fa f981 	bl	800cd44 <lwip_htons>
 8012a42:	4603      	mov	r3, r0
 8012a44:	461a      	mov	r2, r3
 8012a46:	4b0c      	ldr	r3, [pc, #48]	; (8012a78 <tcp_receive+0x8c0>)
 8012a48:	691b      	ldr	r3, [r3, #16]
 8012a4a:	4322      	orrs	r2, r4
 8012a4c:	b292      	uxth	r2, r2
 8012a4e:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8012a50:	4b09      	ldr	r3, [pc, #36]	; (8012a78 <tcp_receive+0x8c0>)
 8012a52:	891c      	ldrh	r4, [r3, #8]
 8012a54:	4b08      	ldr	r3, [pc, #32]	; (8012a78 <tcp_receive+0x8c0>)
 8012a56:	691b      	ldr	r3, [r3, #16]
 8012a58:	899b      	ldrh	r3, [r3, #12]
 8012a5a:	b29b      	uxth	r3, r3
 8012a5c:	4618      	mov	r0, r3
 8012a5e:	f7fa f971 	bl	800cd44 <lwip_htons>
 8012a62:	4603      	mov	r3, r0
 8012a64:	b2db      	uxtb	r3, r3
 8012a66:	f003 0303 	and.w	r3, r3, #3
 8012a6a:	2b00      	cmp	r3, #0
 8012a6c:	d010      	beq.n	8012a90 <tcp_receive+0x8d8>
 8012a6e:	2301      	movs	r3, #1
 8012a70:	e00f      	b.n	8012a92 <tcp_receive+0x8da>
 8012a72:	bf00      	nop
 8012a74:	20009fb4 	.word	0x20009fb4
 8012a78:	20009f90 	.word	0x20009f90
 8012a7c:	20009fbe 	.word	0x20009fbe
 8012a80:	0801ed98 	.word	0x0801ed98
 8012a84:	0801ea0c 	.word	0x0801ea0c
 8012a88:	0801ea2c 	.word	0x0801ea2c
 8012a8c:	0801ea60 	.word	0x0801ea60
 8012a90:	2300      	movs	r3, #0
 8012a92:	4423      	add	r3, r4
 8012a94:	b29a      	uxth	r2, r3
 8012a96:	4b9e      	ldr	r3, [pc, #632]	; (8012d10 <tcp_receive+0xb58>)
 8012a98:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8012a9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012a9c:	613b      	str	r3, [r7, #16]
              next = next->next;
 8012a9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012aa0:	681b      	ldr	r3, [r3, #0]
 8012aa2:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8012aa4:	6938      	ldr	r0, [r7, #16]
 8012aa6:	f7fd fafa 	bl	801009e <tcp_seg_free>
            while (next &&
 8012aaa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012aac:	2b00      	cmp	r3, #0
 8012aae:	d00e      	beq.n	8012ace <tcp_receive+0x916>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8012ab0:	4b97      	ldr	r3, [pc, #604]	; (8012d10 <tcp_receive+0xb58>)
 8012ab2:	881b      	ldrh	r3, [r3, #0]
 8012ab4:	461a      	mov	r2, r3
 8012ab6:	4b97      	ldr	r3, [pc, #604]	; (8012d14 <tcp_receive+0xb5c>)
 8012ab8:	681b      	ldr	r3, [r3, #0]
 8012aba:	441a      	add	r2, r3
 8012abc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012abe:	691b      	ldr	r3, [r3, #16]
 8012ac0:	685b      	ldr	r3, [r3, #4]
 8012ac2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8012ac4:	8909      	ldrh	r1, [r1, #8]
 8012ac6:	440b      	add	r3, r1
 8012ac8:	1ad3      	subs	r3, r2, r3
            while (next &&
 8012aca:	2b00      	cmp	r3, #0
 8012acc:	da98      	bge.n	8012a00 <tcp_receive+0x848>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8012ace:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012ad0:	2b00      	cmp	r3, #0
 8012ad2:	d05d      	beq.n	8012b90 <tcp_receive+0x9d8>
                TCP_SEQ_GT(seqno + tcplen,
 8012ad4:	4b8e      	ldr	r3, [pc, #568]	; (8012d10 <tcp_receive+0xb58>)
 8012ad6:	881b      	ldrh	r3, [r3, #0]
 8012ad8:	461a      	mov	r2, r3
 8012ada:	4b8e      	ldr	r3, [pc, #568]	; (8012d14 <tcp_receive+0xb5c>)
 8012adc:	681b      	ldr	r3, [r3, #0]
 8012ade:	441a      	add	r2, r3
 8012ae0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012ae2:	691b      	ldr	r3, [r3, #16]
 8012ae4:	685b      	ldr	r3, [r3, #4]
 8012ae6:	1ad3      	subs	r3, r2, r3
            if (next &&
 8012ae8:	2b00      	cmp	r3, #0
 8012aea:	dd51      	ble.n	8012b90 <tcp_receive+0x9d8>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8012aec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012aee:	691b      	ldr	r3, [r3, #16]
 8012af0:	685b      	ldr	r3, [r3, #4]
 8012af2:	b29a      	uxth	r2, r3
 8012af4:	4b87      	ldr	r3, [pc, #540]	; (8012d14 <tcp_receive+0xb5c>)
 8012af6:	681b      	ldr	r3, [r3, #0]
 8012af8:	b29b      	uxth	r3, r3
 8012afa:	1ad3      	subs	r3, r2, r3
 8012afc:	b29a      	uxth	r2, r3
 8012afe:	4b86      	ldr	r3, [pc, #536]	; (8012d18 <tcp_receive+0xb60>)
 8012b00:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8012b02:	4b85      	ldr	r3, [pc, #532]	; (8012d18 <tcp_receive+0xb60>)
 8012b04:	691b      	ldr	r3, [r3, #16]
 8012b06:	899b      	ldrh	r3, [r3, #12]
 8012b08:	b29b      	uxth	r3, r3
 8012b0a:	4618      	mov	r0, r3
 8012b0c:	f7fa f91a 	bl	800cd44 <lwip_htons>
 8012b10:	4603      	mov	r3, r0
 8012b12:	b2db      	uxtb	r3, r3
 8012b14:	f003 0302 	and.w	r3, r3, #2
 8012b18:	2b00      	cmp	r3, #0
 8012b1a:	d005      	beq.n	8012b28 <tcp_receive+0x970>
                inseg.len -= 1;
 8012b1c:	4b7e      	ldr	r3, [pc, #504]	; (8012d18 <tcp_receive+0xb60>)
 8012b1e:	891b      	ldrh	r3, [r3, #8]
 8012b20:	3b01      	subs	r3, #1
 8012b22:	b29a      	uxth	r2, r3
 8012b24:	4b7c      	ldr	r3, [pc, #496]	; (8012d18 <tcp_receive+0xb60>)
 8012b26:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8012b28:	4b7b      	ldr	r3, [pc, #492]	; (8012d18 <tcp_receive+0xb60>)
 8012b2a:	685b      	ldr	r3, [r3, #4]
 8012b2c:	4a7a      	ldr	r2, [pc, #488]	; (8012d18 <tcp_receive+0xb60>)
 8012b2e:	8912      	ldrh	r2, [r2, #8]
 8012b30:	4611      	mov	r1, r2
 8012b32:	4618      	mov	r0, r3
 8012b34:	f7fb fc7a 	bl	800e42c <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8012b38:	4b77      	ldr	r3, [pc, #476]	; (8012d18 <tcp_receive+0xb60>)
 8012b3a:	891c      	ldrh	r4, [r3, #8]
 8012b3c:	4b76      	ldr	r3, [pc, #472]	; (8012d18 <tcp_receive+0xb60>)
 8012b3e:	691b      	ldr	r3, [r3, #16]
 8012b40:	899b      	ldrh	r3, [r3, #12]
 8012b42:	b29b      	uxth	r3, r3
 8012b44:	4618      	mov	r0, r3
 8012b46:	f7fa f8fd 	bl	800cd44 <lwip_htons>
 8012b4a:	4603      	mov	r3, r0
 8012b4c:	b2db      	uxtb	r3, r3
 8012b4e:	f003 0303 	and.w	r3, r3, #3
 8012b52:	2b00      	cmp	r3, #0
 8012b54:	d001      	beq.n	8012b5a <tcp_receive+0x9a2>
 8012b56:	2301      	movs	r3, #1
 8012b58:	e000      	b.n	8012b5c <tcp_receive+0x9a4>
 8012b5a:	2300      	movs	r3, #0
 8012b5c:	4423      	add	r3, r4
 8012b5e:	b29a      	uxth	r2, r3
 8012b60:	4b6b      	ldr	r3, [pc, #428]	; (8012d10 <tcp_receive+0xb58>)
 8012b62:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8012b64:	4b6a      	ldr	r3, [pc, #424]	; (8012d10 <tcp_receive+0xb58>)
 8012b66:	881b      	ldrh	r3, [r3, #0]
 8012b68:	461a      	mov	r2, r3
 8012b6a:	4b6a      	ldr	r3, [pc, #424]	; (8012d14 <tcp_receive+0xb5c>)
 8012b6c:	681b      	ldr	r3, [r3, #0]
 8012b6e:	441a      	add	r2, r3
 8012b70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012b72:	691b      	ldr	r3, [r3, #16]
 8012b74:	685b      	ldr	r3, [r3, #4]
 8012b76:	429a      	cmp	r2, r3
 8012b78:	d00a      	beq.n	8012b90 <tcp_receive+0x9d8>
 8012b7a:	f240 52fc 	movw	r2, #1532	; 0x5fc
 8012b7e:	4967      	ldr	r1, [pc, #412]	; (8012d1c <tcp_receive+0xb64>)
 8012b80:	4867      	ldr	r0, [pc, #412]	; (8012d20 <tcp_receive+0xb68>)
 8012b82:	f008 fac7 	bl	801b114 <trace_printf>
 8012b86:	4967      	ldr	r1, [pc, #412]	; (8012d24 <tcp_receive+0xb6c>)
 8012b88:	4867      	ldr	r0, [pc, #412]	; (8012d28 <tcp_receive+0xb70>)
 8012b8a:	f008 fac3 	bl	801b114 <trace_printf>
 8012b8e:	e7fe      	b.n	8012b8e <tcp_receive+0x9d6>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8012b90:	687b      	ldr	r3, [r7, #4]
 8012b92:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012b94:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8012b96:	4b5e      	ldr	r3, [pc, #376]	; (8012d10 <tcp_receive+0xb58>)
 8012b98:	881b      	ldrh	r3, [r3, #0]
 8012b9a:	461a      	mov	r2, r3
 8012b9c:	4b5d      	ldr	r3, [pc, #372]	; (8012d14 <tcp_receive+0xb5c>)
 8012b9e:	681b      	ldr	r3, [r3, #0]
 8012ba0:	441a      	add	r2, r3
 8012ba2:	687b      	ldr	r3, [r7, #4]
 8012ba4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8012ba6:	687b      	ldr	r3, [r7, #4]
 8012ba8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8012baa:	4b59      	ldr	r3, [pc, #356]	; (8012d10 <tcp_receive+0xb58>)
 8012bac:	881b      	ldrh	r3, [r3, #0]
 8012bae:	429a      	cmp	r2, r3
 8012bb0:	d20a      	bcs.n	8012bc8 <tcp_receive+0xa10>
 8012bb2:	f240 6207 	movw	r2, #1543	; 0x607
 8012bb6:	495d      	ldr	r1, [pc, #372]	; (8012d2c <tcp_receive+0xb74>)
 8012bb8:	4859      	ldr	r0, [pc, #356]	; (8012d20 <tcp_receive+0xb68>)
 8012bba:	f008 faab 	bl	801b114 <trace_printf>
 8012bbe:	4959      	ldr	r1, [pc, #356]	; (8012d24 <tcp_receive+0xb6c>)
 8012bc0:	4859      	ldr	r0, [pc, #356]	; (8012d28 <tcp_receive+0xb70>)
 8012bc2:	f008 faa7 	bl	801b114 <trace_printf>
 8012bc6:	e7fe      	b.n	8012bc6 <tcp_receive+0xa0e>
        pcb->rcv_wnd -= tcplen;
 8012bc8:	687b      	ldr	r3, [r7, #4]
 8012bca:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8012bcc:	4b50      	ldr	r3, [pc, #320]	; (8012d10 <tcp_receive+0xb58>)
 8012bce:	881b      	ldrh	r3, [r3, #0]
 8012bd0:	1ad3      	subs	r3, r2, r3
 8012bd2:	b29a      	uxth	r2, r3
 8012bd4:	687b      	ldr	r3, [r7, #4]
 8012bd6:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8012bd8:	6878      	ldr	r0, [r7, #4]
 8012bda:	f7fc fcf7 	bl	800f5cc <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8012bde:	4b4e      	ldr	r3, [pc, #312]	; (8012d18 <tcp_receive+0xb60>)
 8012be0:	685b      	ldr	r3, [r3, #4]
 8012be2:	891b      	ldrh	r3, [r3, #8]
 8012be4:	2b00      	cmp	r3, #0
 8012be6:	d006      	beq.n	8012bf6 <tcp_receive+0xa3e>
          recv_data = inseg.p;
 8012be8:	4b4b      	ldr	r3, [pc, #300]	; (8012d18 <tcp_receive+0xb60>)
 8012bea:	685b      	ldr	r3, [r3, #4]
 8012bec:	4a50      	ldr	r2, [pc, #320]	; (8012d30 <tcp_receive+0xb78>)
 8012bee:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8012bf0:	4b49      	ldr	r3, [pc, #292]	; (8012d18 <tcp_receive+0xb60>)
 8012bf2:	2200      	movs	r2, #0
 8012bf4:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8012bf6:	4b48      	ldr	r3, [pc, #288]	; (8012d18 <tcp_receive+0xb60>)
 8012bf8:	691b      	ldr	r3, [r3, #16]
 8012bfa:	899b      	ldrh	r3, [r3, #12]
 8012bfc:	b29b      	uxth	r3, r3
 8012bfe:	4618      	mov	r0, r3
 8012c00:	f7fa f8a0 	bl	800cd44 <lwip_htons>
 8012c04:	4603      	mov	r3, r0
 8012c06:	b2db      	uxtb	r3, r3
 8012c08:	f003 0301 	and.w	r3, r3, #1
 8012c0c:	2b00      	cmp	r3, #0
 8012c0e:	f000 80be 	beq.w	8012d8e <tcp_receive+0xbd6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8012c12:	4b48      	ldr	r3, [pc, #288]	; (8012d34 <tcp_receive+0xb7c>)
 8012c14:	781b      	ldrb	r3, [r3, #0]
 8012c16:	f043 0320 	orr.w	r3, r3, #32
 8012c1a:	b2da      	uxtb	r2, r3
 8012c1c:	4b45      	ldr	r3, [pc, #276]	; (8012d34 <tcp_receive+0xb7c>)
 8012c1e:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8012c20:	e0b5      	b.n	8012d8e <tcp_receive+0xbd6>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8012c22:	687b      	ldr	r3, [r7, #4]
 8012c24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012c26:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8012c28:	687b      	ldr	r3, [r7, #4]
 8012c2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012c2c:	691b      	ldr	r3, [r3, #16]
 8012c2e:	685b      	ldr	r3, [r3, #4]
 8012c30:	4a38      	ldr	r2, [pc, #224]	; (8012d14 <tcp_receive+0xb5c>)
 8012c32:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8012c34:	68bb      	ldr	r3, [r7, #8]
 8012c36:	891b      	ldrh	r3, [r3, #8]
 8012c38:	461c      	mov	r4, r3
 8012c3a:	68bb      	ldr	r3, [r7, #8]
 8012c3c:	691b      	ldr	r3, [r3, #16]
 8012c3e:	899b      	ldrh	r3, [r3, #12]
 8012c40:	b29b      	uxth	r3, r3
 8012c42:	4618      	mov	r0, r3
 8012c44:	f7fa f87e 	bl	800cd44 <lwip_htons>
 8012c48:	4603      	mov	r3, r0
 8012c4a:	b2db      	uxtb	r3, r3
 8012c4c:	f003 0303 	and.w	r3, r3, #3
 8012c50:	2b00      	cmp	r3, #0
 8012c52:	d001      	beq.n	8012c58 <tcp_receive+0xaa0>
 8012c54:	2301      	movs	r3, #1
 8012c56:	e000      	b.n	8012c5a <tcp_receive+0xaa2>
 8012c58:	2300      	movs	r3, #0
 8012c5a:	191a      	adds	r2, r3, r4
 8012c5c:	687b      	ldr	r3, [r7, #4]
 8012c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012c60:	441a      	add	r2, r3
 8012c62:	687b      	ldr	r3, [r7, #4]
 8012c64:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8012c66:	687b      	ldr	r3, [r7, #4]
 8012c68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012c6a:	461c      	mov	r4, r3
 8012c6c:	68bb      	ldr	r3, [r7, #8]
 8012c6e:	891b      	ldrh	r3, [r3, #8]
 8012c70:	461d      	mov	r5, r3
 8012c72:	68bb      	ldr	r3, [r7, #8]
 8012c74:	691b      	ldr	r3, [r3, #16]
 8012c76:	899b      	ldrh	r3, [r3, #12]
 8012c78:	b29b      	uxth	r3, r3
 8012c7a:	4618      	mov	r0, r3
 8012c7c:	f7fa f862 	bl	800cd44 <lwip_htons>
 8012c80:	4603      	mov	r3, r0
 8012c82:	b2db      	uxtb	r3, r3
 8012c84:	f003 0303 	and.w	r3, r3, #3
 8012c88:	2b00      	cmp	r3, #0
 8012c8a:	d001      	beq.n	8012c90 <tcp_receive+0xad8>
 8012c8c:	2301      	movs	r3, #1
 8012c8e:	e000      	b.n	8012c92 <tcp_receive+0xada>
 8012c90:	2300      	movs	r3, #0
 8012c92:	442b      	add	r3, r5
 8012c94:	429c      	cmp	r4, r3
 8012c96:	d20a      	bcs.n	8012cae <tcp_receive+0xaf6>
 8012c98:	f240 622b 	movw	r2, #1579	; 0x62b
 8012c9c:	4926      	ldr	r1, [pc, #152]	; (8012d38 <tcp_receive+0xb80>)
 8012c9e:	4820      	ldr	r0, [pc, #128]	; (8012d20 <tcp_receive+0xb68>)
 8012ca0:	f008 fa38 	bl	801b114 <trace_printf>
 8012ca4:	491f      	ldr	r1, [pc, #124]	; (8012d24 <tcp_receive+0xb6c>)
 8012ca6:	4820      	ldr	r0, [pc, #128]	; (8012d28 <tcp_receive+0xb70>)
 8012ca8:	f008 fa34 	bl	801b114 <trace_printf>
 8012cac:	e7fe      	b.n	8012cac <tcp_receive+0xaf4>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8012cae:	68bb      	ldr	r3, [r7, #8]
 8012cb0:	891b      	ldrh	r3, [r3, #8]
 8012cb2:	461c      	mov	r4, r3
 8012cb4:	68bb      	ldr	r3, [r7, #8]
 8012cb6:	691b      	ldr	r3, [r3, #16]
 8012cb8:	899b      	ldrh	r3, [r3, #12]
 8012cba:	b29b      	uxth	r3, r3
 8012cbc:	4618      	mov	r0, r3
 8012cbe:	f7fa f841 	bl	800cd44 <lwip_htons>
 8012cc2:	4603      	mov	r3, r0
 8012cc4:	b2db      	uxtb	r3, r3
 8012cc6:	f003 0303 	and.w	r3, r3, #3
 8012cca:	2b00      	cmp	r3, #0
 8012ccc:	d001      	beq.n	8012cd2 <tcp_receive+0xb1a>
 8012cce:	2301      	movs	r3, #1
 8012cd0:	e000      	b.n	8012cd4 <tcp_receive+0xb1c>
 8012cd2:	2300      	movs	r3, #0
 8012cd4:	1919      	adds	r1, r3, r4
 8012cd6:	687b      	ldr	r3, [r7, #4]
 8012cd8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8012cda:	b28b      	uxth	r3, r1
 8012cdc:	1ad3      	subs	r3, r2, r3
 8012cde:	b29a      	uxth	r2, r3
 8012ce0:	687b      	ldr	r3, [r7, #4]
 8012ce2:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8012ce4:	6878      	ldr	r0, [r7, #4]
 8012ce6:	f7fc fc71 	bl	800f5cc <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8012cea:	68bb      	ldr	r3, [r7, #8]
 8012cec:	685b      	ldr	r3, [r3, #4]
 8012cee:	891b      	ldrh	r3, [r3, #8]
 8012cf0:	2b00      	cmp	r3, #0
 8012cf2:	d02a      	beq.n	8012d4a <tcp_receive+0xb92>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8012cf4:	4b0e      	ldr	r3, [pc, #56]	; (8012d30 <tcp_receive+0xb78>)
 8012cf6:	681b      	ldr	r3, [r3, #0]
 8012cf8:	2b00      	cmp	r3, #0
 8012cfa:	d01f      	beq.n	8012d3c <tcp_receive+0xb84>
              pbuf_cat(recv_data, cseg->p);
 8012cfc:	4b0c      	ldr	r3, [pc, #48]	; (8012d30 <tcp_receive+0xb78>)
 8012cfe:	681a      	ldr	r2, [r3, #0]
 8012d00:	68bb      	ldr	r3, [r7, #8]
 8012d02:	685b      	ldr	r3, [r3, #4]
 8012d04:	4619      	mov	r1, r3
 8012d06:	4610      	mov	r0, r2
 8012d08:	f7fb fe18 	bl	800e93c <pbuf_cat>
 8012d0c:	e01a      	b.n	8012d44 <tcp_receive+0xb8c>
 8012d0e:	bf00      	nop
 8012d10:	20009fbe 	.word	0x20009fbe
 8012d14:	20009fb4 	.word	0x20009fb4
 8012d18:	20009f90 	.word	0x20009f90
 8012d1c:	0801edd0 	.word	0x0801edd0
 8012d20:	0801ea0c 	.word	0x0801ea0c
 8012d24:	0801ea2c 	.word	0x0801ea2c
 8012d28:	0801ea60 	.word	0x0801ea60
 8012d2c:	0801ee0c 	.word	0x0801ee0c
 8012d30:	20009fc4 	.word	0x20009fc4
 8012d34:	20009fc1 	.word	0x20009fc1
 8012d38:	0801ee2c 	.word	0x0801ee2c
            } else {
              recv_data = cseg->p;
 8012d3c:	68bb      	ldr	r3, [r7, #8]
 8012d3e:	685b      	ldr	r3, [r3, #4]
 8012d40:	4a70      	ldr	r2, [pc, #448]	; (8012f04 <tcp_receive+0xd4c>)
 8012d42:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8012d44:	68bb      	ldr	r3, [r7, #8]
 8012d46:	2200      	movs	r2, #0
 8012d48:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8012d4a:	68bb      	ldr	r3, [r7, #8]
 8012d4c:	691b      	ldr	r3, [r3, #16]
 8012d4e:	899b      	ldrh	r3, [r3, #12]
 8012d50:	b29b      	uxth	r3, r3
 8012d52:	4618      	mov	r0, r3
 8012d54:	f7f9 fff6 	bl	800cd44 <lwip_htons>
 8012d58:	4603      	mov	r3, r0
 8012d5a:	b2db      	uxtb	r3, r3
 8012d5c:	f003 0301 	and.w	r3, r3, #1
 8012d60:	2b00      	cmp	r3, #0
 8012d62:	d00d      	beq.n	8012d80 <tcp_receive+0xbc8>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8012d64:	4b68      	ldr	r3, [pc, #416]	; (8012f08 <tcp_receive+0xd50>)
 8012d66:	781b      	ldrb	r3, [r3, #0]
 8012d68:	f043 0320 	orr.w	r3, r3, #32
 8012d6c:	b2da      	uxtb	r2, r3
 8012d6e:	4b66      	ldr	r3, [pc, #408]	; (8012f08 <tcp_receive+0xd50>)
 8012d70:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8012d72:	687b      	ldr	r3, [r7, #4]
 8012d74:	7d1b      	ldrb	r3, [r3, #20]
 8012d76:	2b04      	cmp	r3, #4
 8012d78:	d102      	bne.n	8012d80 <tcp_receive+0xbc8>
              pcb->state = CLOSE_WAIT;
 8012d7a:	687b      	ldr	r3, [r7, #4]
 8012d7c:	2207      	movs	r2, #7
 8012d7e:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8012d80:	68bb      	ldr	r3, [r7, #8]
 8012d82:	681a      	ldr	r2, [r3, #0]
 8012d84:	687b      	ldr	r3, [r7, #4]
 8012d86:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8012d88:	68b8      	ldr	r0, [r7, #8]
 8012d8a:	f7fd f988 	bl	801009e <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8012d8e:	687b      	ldr	r3, [r7, #4]
 8012d90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012d92:	2b00      	cmp	r3, #0
 8012d94:	d008      	beq.n	8012da8 <tcp_receive+0xbf0>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8012d96:	687b      	ldr	r3, [r7, #4]
 8012d98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012d9a:	691b      	ldr	r3, [r3, #16]
 8012d9c:	685a      	ldr	r2, [r3, #4]
 8012d9e:	687b      	ldr	r3, [r7, #4]
 8012da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8012da2:	429a      	cmp	r2, r3
 8012da4:	f43f af3d 	beq.w	8012c22 <tcp_receive+0xa6a>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8012da8:	687b      	ldr	r3, [r7, #4]
 8012daa:	8b5b      	ldrh	r3, [r3, #26]
 8012dac:	f003 0301 	and.w	r3, r3, #1
 8012db0:	2b00      	cmp	r3, #0
 8012db2:	d00e      	beq.n	8012dd2 <tcp_receive+0xc1a>
 8012db4:	687b      	ldr	r3, [r7, #4]
 8012db6:	8b5b      	ldrh	r3, [r3, #26]
 8012db8:	f023 0301 	bic.w	r3, r3, #1
 8012dbc:	b29a      	uxth	r2, r3
 8012dbe:	687b      	ldr	r3, [r7, #4]
 8012dc0:	835a      	strh	r2, [r3, #26]
 8012dc2:	687b      	ldr	r3, [r7, #4]
 8012dc4:	8b5b      	ldrh	r3, [r3, #26]
 8012dc6:	f043 0302 	orr.w	r3, r3, #2
 8012dca:	b29a      	uxth	r2, r3
 8012dcc:	687b      	ldr	r3, [r7, #4]
 8012dce:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8012dd0:	e18b      	b.n	80130ea <tcp_receive+0xf32>
        tcp_ack(pcb);
 8012dd2:	687b      	ldr	r3, [r7, #4]
 8012dd4:	8b5b      	ldrh	r3, [r3, #26]
 8012dd6:	f043 0301 	orr.w	r3, r3, #1
 8012dda:	b29a      	uxth	r2, r3
 8012ddc:	687b      	ldr	r3, [r7, #4]
 8012dde:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8012de0:	e183      	b.n	80130ea <tcp_receive+0xf32>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8012de2:	687b      	ldr	r3, [r7, #4]
 8012de4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012de6:	2b00      	cmp	r3, #0
 8012de8:	d106      	bne.n	8012df8 <tcp_receive+0xc40>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8012dea:	4848      	ldr	r0, [pc, #288]	; (8012f0c <tcp_receive+0xd54>)
 8012dec:	f7fd f970 	bl	80100d0 <tcp_seg_copy>
 8012df0:	4602      	mov	r2, r0
 8012df2:	687b      	ldr	r3, [r7, #4]
 8012df4:	675a      	str	r2, [r3, #116]	; 0x74
 8012df6:	e170      	b.n	80130da <tcp_receive+0xf22>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8012df8:	2300      	movs	r3, #0
 8012dfa:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8012dfc:	687b      	ldr	r3, [r7, #4]
 8012dfe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012e00:	63bb      	str	r3, [r7, #56]	; 0x38
 8012e02:	e15a      	b.n	80130ba <tcp_receive+0xf02>
            if (seqno == next->tcphdr->seqno) {
 8012e04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e06:	691b      	ldr	r3, [r3, #16]
 8012e08:	685a      	ldr	r2, [r3, #4]
 8012e0a:	4b41      	ldr	r3, [pc, #260]	; (8012f10 <tcp_receive+0xd58>)
 8012e0c:	681b      	ldr	r3, [r3, #0]
 8012e0e:	429a      	cmp	r2, r3
 8012e10:	d11d      	bne.n	8012e4e <tcp_receive+0xc96>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8012e12:	4b3e      	ldr	r3, [pc, #248]	; (8012f0c <tcp_receive+0xd54>)
 8012e14:	891a      	ldrh	r2, [r3, #8]
 8012e16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e18:	891b      	ldrh	r3, [r3, #8]
 8012e1a:	429a      	cmp	r2, r3
 8012e1c:	f240 8152 	bls.w	80130c4 <tcp_receive+0xf0c>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8012e20:	483a      	ldr	r0, [pc, #232]	; (8012f0c <tcp_receive+0xd54>)
 8012e22:	f7fd f955 	bl	80100d0 <tcp_seg_copy>
 8012e26:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8012e28:	697b      	ldr	r3, [r7, #20]
 8012e2a:	2b00      	cmp	r3, #0
 8012e2c:	f000 814c 	beq.w	80130c8 <tcp_receive+0xf10>
                  if (prev != NULL) {
 8012e30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012e32:	2b00      	cmp	r3, #0
 8012e34:	d003      	beq.n	8012e3e <tcp_receive+0xc86>
                    prev->next = cseg;
 8012e36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012e38:	697a      	ldr	r2, [r7, #20]
 8012e3a:	601a      	str	r2, [r3, #0]
 8012e3c:	e002      	b.n	8012e44 <tcp_receive+0xc8c>
                  } else {
                    pcb->ooseq = cseg;
 8012e3e:	687b      	ldr	r3, [r7, #4]
 8012e40:	697a      	ldr	r2, [r7, #20]
 8012e42:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8012e44:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012e46:	6978      	ldr	r0, [r7, #20]
 8012e48:	f7ff f8a2 	bl	8011f90 <tcp_oos_insert_segment>
                }
                break;
 8012e4c:	e13c      	b.n	80130c8 <tcp_receive+0xf10>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8012e4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012e50:	2b00      	cmp	r3, #0
 8012e52:	d117      	bne.n	8012e84 <tcp_receive+0xccc>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8012e54:	4b2e      	ldr	r3, [pc, #184]	; (8012f10 <tcp_receive+0xd58>)
 8012e56:	681a      	ldr	r2, [r3, #0]
 8012e58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e5a:	691b      	ldr	r3, [r3, #16]
 8012e5c:	685b      	ldr	r3, [r3, #4]
 8012e5e:	1ad3      	subs	r3, r2, r3
 8012e60:	2b00      	cmp	r3, #0
 8012e62:	da57      	bge.n	8012f14 <tcp_receive+0xd5c>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8012e64:	4829      	ldr	r0, [pc, #164]	; (8012f0c <tcp_receive+0xd54>)
 8012e66:	f7fd f933 	bl	80100d0 <tcp_seg_copy>
 8012e6a:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8012e6c:	69bb      	ldr	r3, [r7, #24]
 8012e6e:	2b00      	cmp	r3, #0
 8012e70:	f000 812c 	beq.w	80130cc <tcp_receive+0xf14>
                    pcb->ooseq = cseg;
 8012e74:	687b      	ldr	r3, [r7, #4]
 8012e76:	69ba      	ldr	r2, [r7, #24]
 8012e78:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 8012e7a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012e7c:	69b8      	ldr	r0, [r7, #24]
 8012e7e:	f7ff f887 	bl	8011f90 <tcp_oos_insert_segment>
                  }
                  break;
 8012e82:	e123      	b.n	80130cc <tcp_receive+0xf14>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8012e84:	4b22      	ldr	r3, [pc, #136]	; (8012f10 <tcp_receive+0xd58>)
 8012e86:	681a      	ldr	r2, [r3, #0]
 8012e88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012e8a:	691b      	ldr	r3, [r3, #16]
 8012e8c:	685b      	ldr	r3, [r3, #4]
 8012e8e:	1ad3      	subs	r3, r2, r3
 8012e90:	3b01      	subs	r3, #1
 8012e92:	2b00      	cmp	r3, #0
 8012e94:	db3e      	blt.n	8012f14 <tcp_receive+0xd5c>
 8012e96:	4b1e      	ldr	r3, [pc, #120]	; (8012f10 <tcp_receive+0xd58>)
 8012e98:	681a      	ldr	r2, [r3, #0]
 8012e9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e9c:	691b      	ldr	r3, [r3, #16]
 8012e9e:	685b      	ldr	r3, [r3, #4]
 8012ea0:	1ad3      	subs	r3, r2, r3
 8012ea2:	3301      	adds	r3, #1
 8012ea4:	2b00      	cmp	r3, #0
 8012ea6:	dc35      	bgt.n	8012f14 <tcp_receive+0xd5c>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8012ea8:	4818      	ldr	r0, [pc, #96]	; (8012f0c <tcp_receive+0xd54>)
 8012eaa:	f7fd f911 	bl	80100d0 <tcp_seg_copy>
 8012eae:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8012eb0:	69fb      	ldr	r3, [r7, #28]
 8012eb2:	2b00      	cmp	r3, #0
 8012eb4:	f000 810c 	beq.w	80130d0 <tcp_receive+0xf18>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8012eb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012eba:	691b      	ldr	r3, [r3, #16]
 8012ebc:	685b      	ldr	r3, [r3, #4]
 8012ebe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012ec0:	8912      	ldrh	r2, [r2, #8]
 8012ec2:	441a      	add	r2, r3
 8012ec4:	4b12      	ldr	r3, [pc, #72]	; (8012f10 <tcp_receive+0xd58>)
 8012ec6:	681b      	ldr	r3, [r3, #0]
 8012ec8:	1ad3      	subs	r3, r2, r3
 8012eca:	2b00      	cmp	r3, #0
 8012ecc:	dd12      	ble.n	8012ef4 <tcp_receive+0xd3c>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8012ece:	4b10      	ldr	r3, [pc, #64]	; (8012f10 <tcp_receive+0xd58>)
 8012ed0:	681b      	ldr	r3, [r3, #0]
 8012ed2:	b29a      	uxth	r2, r3
 8012ed4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012ed6:	691b      	ldr	r3, [r3, #16]
 8012ed8:	685b      	ldr	r3, [r3, #4]
 8012eda:	b29b      	uxth	r3, r3
 8012edc:	1ad3      	subs	r3, r2, r3
 8012ede:	b29a      	uxth	r2, r3
 8012ee0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012ee2:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8012ee4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012ee6:	685a      	ldr	r2, [r3, #4]
 8012ee8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012eea:	891b      	ldrh	r3, [r3, #8]
 8012eec:	4619      	mov	r1, r3
 8012eee:	4610      	mov	r0, r2
 8012ef0:	f7fb fa9c 	bl	800e42c <pbuf_realloc>
                    }
                    prev->next = cseg;
 8012ef4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012ef6:	69fa      	ldr	r2, [r7, #28]
 8012ef8:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8012efa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012efc:	69f8      	ldr	r0, [r7, #28]
 8012efe:	f7ff f847 	bl	8011f90 <tcp_oos_insert_segment>
                  }
                  break;
 8012f02:	e0e5      	b.n	80130d0 <tcp_receive+0xf18>
 8012f04:	20009fc4 	.word	0x20009fc4
 8012f08:	20009fc1 	.word	0x20009fc1
 8012f0c:	20009f90 	.word	0x20009f90
 8012f10:	20009fb4 	.word	0x20009fb4
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8012f14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f16:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8012f18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f1a:	681b      	ldr	r3, [r3, #0]
 8012f1c:	2b00      	cmp	r3, #0
 8012f1e:	f040 80c9 	bne.w	80130b4 <tcp_receive+0xefc>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8012f22:	4b81      	ldr	r3, [pc, #516]	; (8013128 <tcp_receive+0xf70>)
 8012f24:	681a      	ldr	r2, [r3, #0]
 8012f26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f28:	691b      	ldr	r3, [r3, #16]
 8012f2a:	685b      	ldr	r3, [r3, #4]
 8012f2c:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8012f2e:	2b00      	cmp	r3, #0
 8012f30:	f340 80c0 	ble.w	80130b4 <tcp_receive+0xefc>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8012f34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f36:	691b      	ldr	r3, [r3, #16]
 8012f38:	899b      	ldrh	r3, [r3, #12]
 8012f3a:	b29b      	uxth	r3, r3
 8012f3c:	4618      	mov	r0, r3
 8012f3e:	f7f9 ff01 	bl	800cd44 <lwip_htons>
 8012f42:	4603      	mov	r3, r0
 8012f44:	b2db      	uxtb	r3, r3
 8012f46:	f003 0301 	and.w	r3, r3, #1
 8012f4a:	2b00      	cmp	r3, #0
 8012f4c:	f040 80c2 	bne.w	80130d4 <tcp_receive+0xf1c>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8012f50:	4876      	ldr	r0, [pc, #472]	; (801312c <tcp_receive+0xf74>)
 8012f52:	f7fd f8bd 	bl	80100d0 <tcp_seg_copy>
 8012f56:	4602      	mov	r2, r0
 8012f58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f5a:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8012f5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f5e:	681b      	ldr	r3, [r3, #0]
 8012f60:	2b00      	cmp	r3, #0
 8012f62:	f000 80b9 	beq.w	80130d8 <tcp_receive+0xf20>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8012f66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f68:	691b      	ldr	r3, [r3, #16]
 8012f6a:	685b      	ldr	r3, [r3, #4]
 8012f6c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012f6e:	8912      	ldrh	r2, [r2, #8]
 8012f70:	441a      	add	r2, r3
 8012f72:	4b6d      	ldr	r3, [pc, #436]	; (8013128 <tcp_receive+0xf70>)
 8012f74:	681b      	ldr	r3, [r3, #0]
 8012f76:	1ad3      	subs	r3, r2, r3
 8012f78:	2b00      	cmp	r3, #0
 8012f7a:	dd12      	ble.n	8012fa2 <tcp_receive+0xdea>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8012f7c:	4b6a      	ldr	r3, [pc, #424]	; (8013128 <tcp_receive+0xf70>)
 8012f7e:	681b      	ldr	r3, [r3, #0]
 8012f80:	b29a      	uxth	r2, r3
 8012f82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f84:	691b      	ldr	r3, [r3, #16]
 8012f86:	685b      	ldr	r3, [r3, #4]
 8012f88:	b29b      	uxth	r3, r3
 8012f8a:	1ad3      	subs	r3, r2, r3
 8012f8c:	b29a      	uxth	r2, r3
 8012f8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f90:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8012f92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f94:	685a      	ldr	r2, [r3, #4]
 8012f96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f98:	891b      	ldrh	r3, [r3, #8]
 8012f9a:	4619      	mov	r1, r3
 8012f9c:	4610      	mov	r0, r2
 8012f9e:	f7fb fa45 	bl	800e42c <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8012fa2:	4b63      	ldr	r3, [pc, #396]	; (8013130 <tcp_receive+0xf78>)
 8012fa4:	881b      	ldrh	r3, [r3, #0]
 8012fa6:	461a      	mov	r2, r3
 8012fa8:	4b5f      	ldr	r3, [pc, #380]	; (8013128 <tcp_receive+0xf70>)
 8012faa:	681b      	ldr	r3, [r3, #0]
 8012fac:	441a      	add	r2, r3
 8012fae:	687b      	ldr	r3, [r7, #4]
 8012fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012fb2:	6879      	ldr	r1, [r7, #4]
 8012fb4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8012fb6:	440b      	add	r3, r1
 8012fb8:	1ad3      	subs	r3, r2, r3
 8012fba:	2b00      	cmp	r3, #0
 8012fbc:	f340 808c 	ble.w	80130d8 <tcp_receive+0xf20>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8012fc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012fc2:	681b      	ldr	r3, [r3, #0]
 8012fc4:	691b      	ldr	r3, [r3, #16]
 8012fc6:	899b      	ldrh	r3, [r3, #12]
 8012fc8:	b29b      	uxth	r3, r3
 8012fca:	4618      	mov	r0, r3
 8012fcc:	f7f9 feba 	bl	800cd44 <lwip_htons>
 8012fd0:	4603      	mov	r3, r0
 8012fd2:	b2db      	uxtb	r3, r3
 8012fd4:	f003 0301 	and.w	r3, r3, #1
 8012fd8:	2b00      	cmp	r3, #0
 8012fda:	d022      	beq.n	8013022 <tcp_receive+0xe6a>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8012fdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012fde:	681b      	ldr	r3, [r3, #0]
 8012fe0:	691b      	ldr	r3, [r3, #16]
 8012fe2:	899b      	ldrh	r3, [r3, #12]
 8012fe4:	b29b      	uxth	r3, r3
 8012fe6:	b21b      	sxth	r3, r3
 8012fe8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8012fec:	b21c      	sxth	r4, r3
 8012fee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ff0:	681b      	ldr	r3, [r3, #0]
 8012ff2:	691b      	ldr	r3, [r3, #16]
 8012ff4:	899b      	ldrh	r3, [r3, #12]
 8012ff6:	b29b      	uxth	r3, r3
 8012ff8:	4618      	mov	r0, r3
 8012ffa:	f7f9 fea3 	bl	800cd44 <lwip_htons>
 8012ffe:	4603      	mov	r3, r0
 8013000:	b2db      	uxtb	r3, r3
 8013002:	b29b      	uxth	r3, r3
 8013004:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8013008:	b29b      	uxth	r3, r3
 801300a:	4618      	mov	r0, r3
 801300c:	f7f9 fe9a 	bl	800cd44 <lwip_htons>
 8013010:	4603      	mov	r3, r0
 8013012:	b21b      	sxth	r3, r3
 8013014:	4323      	orrs	r3, r4
 8013016:	b21a      	sxth	r2, r3
 8013018:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801301a:	681b      	ldr	r3, [r3, #0]
 801301c:	691b      	ldr	r3, [r3, #16]
 801301e:	b292      	uxth	r2, r2
 8013020:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8013022:	687b      	ldr	r3, [r7, #4]
 8013024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013026:	b29a      	uxth	r2, r3
 8013028:	687b      	ldr	r3, [r7, #4]
 801302a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801302c:	4413      	add	r3, r2
 801302e:	b299      	uxth	r1, r3
 8013030:	4b3d      	ldr	r3, [pc, #244]	; (8013128 <tcp_receive+0xf70>)
 8013032:	681b      	ldr	r3, [r3, #0]
 8013034:	b29a      	uxth	r2, r3
 8013036:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013038:	681b      	ldr	r3, [r3, #0]
 801303a:	1a8a      	subs	r2, r1, r2
 801303c:	b292      	uxth	r2, r2
 801303e:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8013040:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013042:	681b      	ldr	r3, [r3, #0]
 8013044:	685a      	ldr	r2, [r3, #4]
 8013046:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013048:	681b      	ldr	r3, [r3, #0]
 801304a:	891b      	ldrh	r3, [r3, #8]
 801304c:	4619      	mov	r1, r3
 801304e:	4610      	mov	r0, r2
 8013050:	f7fb f9ec 	bl	800e42c <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8013054:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013056:	681b      	ldr	r3, [r3, #0]
 8013058:	891c      	ldrh	r4, [r3, #8]
 801305a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801305c:	681b      	ldr	r3, [r3, #0]
 801305e:	691b      	ldr	r3, [r3, #16]
 8013060:	899b      	ldrh	r3, [r3, #12]
 8013062:	b29b      	uxth	r3, r3
 8013064:	4618      	mov	r0, r3
 8013066:	f7f9 fe6d 	bl	800cd44 <lwip_htons>
 801306a:	4603      	mov	r3, r0
 801306c:	b2db      	uxtb	r3, r3
 801306e:	f003 0303 	and.w	r3, r3, #3
 8013072:	2b00      	cmp	r3, #0
 8013074:	d001      	beq.n	801307a <tcp_receive+0xec2>
 8013076:	2301      	movs	r3, #1
 8013078:	e000      	b.n	801307c <tcp_receive+0xec4>
 801307a:	2300      	movs	r3, #0
 801307c:	4423      	add	r3, r4
 801307e:	b29a      	uxth	r2, r3
 8013080:	4b2b      	ldr	r3, [pc, #172]	; (8013130 <tcp_receive+0xf78>)
 8013082:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8013084:	4b2a      	ldr	r3, [pc, #168]	; (8013130 <tcp_receive+0xf78>)
 8013086:	881b      	ldrh	r3, [r3, #0]
 8013088:	461a      	mov	r2, r3
 801308a:	4b27      	ldr	r3, [pc, #156]	; (8013128 <tcp_receive+0xf70>)
 801308c:	681b      	ldr	r3, [r3, #0]
 801308e:	441a      	add	r2, r3
 8013090:	687b      	ldr	r3, [r7, #4]
 8013092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013094:	6879      	ldr	r1, [r7, #4]
 8013096:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8013098:	440b      	add	r3, r1
 801309a:	429a      	cmp	r2, r3
 801309c:	d01c      	beq.n	80130d8 <tcp_receive+0xf20>
 801309e:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 80130a2:	4924      	ldr	r1, [pc, #144]	; (8013134 <tcp_receive+0xf7c>)
 80130a4:	4824      	ldr	r0, [pc, #144]	; (8013138 <tcp_receive+0xf80>)
 80130a6:	f008 f835 	bl	801b114 <trace_printf>
 80130aa:	4924      	ldr	r1, [pc, #144]	; (801313c <tcp_receive+0xf84>)
 80130ac:	4824      	ldr	r0, [pc, #144]	; (8013140 <tcp_receive+0xf88>)
 80130ae:	f008 f831 	bl	801b114 <trace_printf>
 80130b2:	e7fe      	b.n	80130b2 <tcp_receive+0xefa>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80130b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80130b6:	681b      	ldr	r3, [r3, #0]
 80130b8:	63bb      	str	r3, [r7, #56]	; 0x38
 80130ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80130bc:	2b00      	cmp	r3, #0
 80130be:	f47f aea1 	bne.w	8012e04 <tcp_receive+0xc4c>
 80130c2:	e00a      	b.n	80130da <tcp_receive+0xf22>
                break;
 80130c4:	bf00      	nop
 80130c6:	e008      	b.n	80130da <tcp_receive+0xf22>
                break;
 80130c8:	bf00      	nop
 80130ca:	e006      	b.n	80130da <tcp_receive+0xf22>
                  break;
 80130cc:	bf00      	nop
 80130ce:	e004      	b.n	80130da <tcp_receive+0xf22>
                  break;
 80130d0:	bf00      	nop
 80130d2:	e002      	b.n	80130da <tcp_receive+0xf22>
                  break;
 80130d4:	bf00      	nop
 80130d6:	e000      	b.n	80130da <tcp_receive+0xf22>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 80130d8:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 80130da:	6878      	ldr	r0, [r7, #4]
 80130dc:	f002 f850 	bl	8015180 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 80130e0:	e003      	b.n	80130ea <tcp_receive+0xf32>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 80130e2:	6878      	ldr	r0, [r7, #4]
 80130e4:	f002 f84c 	bl	8015180 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80130e8:	e01a      	b.n	8013120 <tcp_receive+0xf68>
 80130ea:	e019      	b.n	8013120 <tcp_receive+0xf68>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 80130ec:	4b0e      	ldr	r3, [pc, #56]	; (8013128 <tcp_receive+0xf70>)
 80130ee:	681a      	ldr	r2, [r3, #0]
 80130f0:	687b      	ldr	r3, [r7, #4]
 80130f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80130f4:	1ad3      	subs	r3, r2, r3
 80130f6:	2b00      	cmp	r3, #0
 80130f8:	db0a      	blt.n	8013110 <tcp_receive+0xf58>
 80130fa:	4b0b      	ldr	r3, [pc, #44]	; (8013128 <tcp_receive+0xf70>)
 80130fc:	681a      	ldr	r2, [r3, #0]
 80130fe:	687b      	ldr	r3, [r7, #4]
 8013100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013102:	6879      	ldr	r1, [r7, #4]
 8013104:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8013106:	440b      	add	r3, r1
 8013108:	1ad3      	subs	r3, r2, r3
 801310a:	3301      	adds	r3, #1
 801310c:	2b00      	cmp	r3, #0
 801310e:	dd07      	ble.n	8013120 <tcp_receive+0xf68>
      tcp_ack_now(pcb);
 8013110:	687b      	ldr	r3, [r7, #4]
 8013112:	8b5b      	ldrh	r3, [r3, #26]
 8013114:	f043 0302 	orr.w	r3, r3, #2
 8013118:	b29a      	uxth	r2, r3
 801311a:	687b      	ldr	r3, [r7, #4]
 801311c:	835a      	strh	r2, [r3, #26]
    }
  }
}
 801311e:	e7ff      	b.n	8013120 <tcp_receive+0xf68>
 8013120:	bf00      	nop
 8013122:	3750      	adds	r7, #80	; 0x50
 8013124:	46bd      	mov	sp, r7
 8013126:	bdb0      	pop	{r4, r5, r7, pc}
 8013128:	20009fb4 	.word	0x20009fb4
 801312c:	20009f90 	.word	0x20009f90
 8013130:	20009fbe 	.word	0x20009fbe
 8013134:	0801ed98 	.word	0x0801ed98
 8013138:	0801ea0c 	.word	0x0801ea0c
 801313c:	0801ea2c 	.word	0x0801ea2c
 8013140:	0801ea60 	.word	0x0801ea60

08013144 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8013144:	b480      	push	{r7}
 8013146:	b083      	sub	sp, #12
 8013148:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 801314a:	4b15      	ldr	r3, [pc, #84]	; (80131a0 <tcp_get_next_optbyte+0x5c>)
 801314c:	881b      	ldrh	r3, [r3, #0]
 801314e:	1c5a      	adds	r2, r3, #1
 8013150:	b291      	uxth	r1, r2
 8013152:	4a13      	ldr	r2, [pc, #76]	; (80131a0 <tcp_get_next_optbyte+0x5c>)
 8013154:	8011      	strh	r1, [r2, #0]
 8013156:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8013158:	4b12      	ldr	r3, [pc, #72]	; (80131a4 <tcp_get_next_optbyte+0x60>)
 801315a:	681b      	ldr	r3, [r3, #0]
 801315c:	2b00      	cmp	r3, #0
 801315e:	d004      	beq.n	801316a <tcp_get_next_optbyte+0x26>
 8013160:	4b11      	ldr	r3, [pc, #68]	; (80131a8 <tcp_get_next_optbyte+0x64>)
 8013162:	881b      	ldrh	r3, [r3, #0]
 8013164:	88fa      	ldrh	r2, [r7, #6]
 8013166:	429a      	cmp	r2, r3
 8013168:	d208      	bcs.n	801317c <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 801316a:	4b10      	ldr	r3, [pc, #64]	; (80131ac <tcp_get_next_optbyte+0x68>)
 801316c:	681b      	ldr	r3, [r3, #0]
 801316e:	3314      	adds	r3, #20
 8013170:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8013172:	88fb      	ldrh	r3, [r7, #6]
 8013174:	683a      	ldr	r2, [r7, #0]
 8013176:	4413      	add	r3, r2
 8013178:	781b      	ldrb	r3, [r3, #0]
 801317a:	e00b      	b.n	8013194 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 801317c:	88fb      	ldrh	r3, [r7, #6]
 801317e:	b2da      	uxtb	r2, r3
 8013180:	4b09      	ldr	r3, [pc, #36]	; (80131a8 <tcp_get_next_optbyte+0x64>)
 8013182:	881b      	ldrh	r3, [r3, #0]
 8013184:	b2db      	uxtb	r3, r3
 8013186:	1ad3      	subs	r3, r2, r3
 8013188:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 801318a:	4b06      	ldr	r3, [pc, #24]	; (80131a4 <tcp_get_next_optbyte+0x60>)
 801318c:	681a      	ldr	r2, [r3, #0]
 801318e:	797b      	ldrb	r3, [r7, #5]
 8013190:	4413      	add	r3, r2
 8013192:	781b      	ldrb	r3, [r3, #0]
  }
}
 8013194:	4618      	mov	r0, r3
 8013196:	370c      	adds	r7, #12
 8013198:	46bd      	mov	sp, r7
 801319a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801319e:	4770      	bx	lr
 80131a0:	20009fb0 	.word	0x20009fb0
 80131a4:	20009fac 	.word	0x20009fac
 80131a8:	20009faa 	.word	0x20009faa
 80131ac:	20009fa4 	.word	0x20009fa4

080131b0 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 80131b0:	b580      	push	{r7, lr}
 80131b2:	b084      	sub	sp, #16
 80131b4:	af00      	add	r7, sp, #0
 80131b6:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 80131b8:	687b      	ldr	r3, [r7, #4]
 80131ba:	2b00      	cmp	r3, #0
 80131bc:	d10a      	bne.n	80131d4 <tcp_parseopt+0x24>
 80131be:	f240 727d 	movw	r2, #1917	; 0x77d
 80131c2:	4933      	ldr	r1, [pc, #204]	; (8013290 <tcp_parseopt+0xe0>)
 80131c4:	4833      	ldr	r0, [pc, #204]	; (8013294 <tcp_parseopt+0xe4>)
 80131c6:	f007 ffa5 	bl	801b114 <trace_printf>
 80131ca:	4933      	ldr	r1, [pc, #204]	; (8013298 <tcp_parseopt+0xe8>)
 80131cc:	4833      	ldr	r0, [pc, #204]	; (801329c <tcp_parseopt+0xec>)
 80131ce:	f007 ffa1 	bl	801b114 <trace_printf>
 80131d2:	e7fe      	b.n	80131d2 <tcp_parseopt+0x22>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 80131d4:	4b32      	ldr	r3, [pc, #200]	; (80132a0 <tcp_parseopt+0xf0>)
 80131d6:	881b      	ldrh	r3, [r3, #0]
 80131d8:	2b00      	cmp	r3, #0
 80131da:	d055      	beq.n	8013288 <tcp_parseopt+0xd8>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80131dc:	4b31      	ldr	r3, [pc, #196]	; (80132a4 <tcp_parseopt+0xf4>)
 80131de:	2200      	movs	r2, #0
 80131e0:	801a      	strh	r2, [r3, #0]
 80131e2:	e045      	b.n	8013270 <tcp_parseopt+0xc0>
      u8_t opt = tcp_get_next_optbyte();
 80131e4:	f7ff ffae 	bl	8013144 <tcp_get_next_optbyte>
 80131e8:	4603      	mov	r3, r0
 80131ea:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 80131ec:	7bfb      	ldrb	r3, [r7, #15]
 80131ee:	2b02      	cmp	r3, #2
 80131f0:	d006      	beq.n	8013200 <tcp_parseopt+0x50>
 80131f2:	2b02      	cmp	r3, #2
 80131f4:	dc2b      	bgt.n	801324e <tcp_parseopt+0x9e>
 80131f6:	2b00      	cmp	r3, #0
 80131f8:	d041      	beq.n	801327e <tcp_parseopt+0xce>
 80131fa:	2b01      	cmp	r3, #1
 80131fc:	d127      	bne.n	801324e <tcp_parseopt+0x9e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 80131fe:	e037      	b.n	8013270 <tcp_parseopt+0xc0>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8013200:	f7ff ffa0 	bl	8013144 <tcp_get_next_optbyte>
 8013204:	4603      	mov	r3, r0
 8013206:	2b04      	cmp	r3, #4
 8013208:	d13b      	bne.n	8013282 <tcp_parseopt+0xd2>
 801320a:	4b26      	ldr	r3, [pc, #152]	; (80132a4 <tcp_parseopt+0xf4>)
 801320c:	881b      	ldrh	r3, [r3, #0]
 801320e:	3301      	adds	r3, #1
 8013210:	4a23      	ldr	r2, [pc, #140]	; (80132a0 <tcp_parseopt+0xf0>)
 8013212:	8812      	ldrh	r2, [r2, #0]
 8013214:	4293      	cmp	r3, r2
 8013216:	da34      	bge.n	8013282 <tcp_parseopt+0xd2>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8013218:	f7ff ff94 	bl	8013144 <tcp_get_next_optbyte>
 801321c:	4603      	mov	r3, r0
 801321e:	b29b      	uxth	r3, r3
 8013220:	021b      	lsls	r3, r3, #8
 8013222:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8013224:	f7ff ff8e 	bl	8013144 <tcp_get_next_optbyte>
 8013228:	4603      	mov	r3, r0
 801322a:	b29a      	uxth	r2, r3
 801322c:	89bb      	ldrh	r3, [r7, #12]
 801322e:	4313      	orrs	r3, r2
 8013230:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8013232:	89bb      	ldrh	r3, [r7, #12]
 8013234:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8013238:	d804      	bhi.n	8013244 <tcp_parseopt+0x94>
 801323a:	89bb      	ldrh	r3, [r7, #12]
 801323c:	2b00      	cmp	r3, #0
 801323e:	d001      	beq.n	8013244 <tcp_parseopt+0x94>
 8013240:	89ba      	ldrh	r2, [r7, #12]
 8013242:	e001      	b.n	8013248 <tcp_parseopt+0x98>
 8013244:	f44f 7206 	mov.w	r2, #536	; 0x218
 8013248:	687b      	ldr	r3, [r7, #4]
 801324a:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 801324c:	e010      	b.n	8013270 <tcp_parseopt+0xc0>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 801324e:	f7ff ff79 	bl	8013144 <tcp_get_next_optbyte>
 8013252:	4603      	mov	r3, r0
 8013254:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8013256:	7afb      	ldrb	r3, [r7, #11]
 8013258:	2b01      	cmp	r3, #1
 801325a:	d914      	bls.n	8013286 <tcp_parseopt+0xd6>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 801325c:	7afb      	ldrb	r3, [r7, #11]
 801325e:	b29a      	uxth	r2, r3
 8013260:	4b10      	ldr	r3, [pc, #64]	; (80132a4 <tcp_parseopt+0xf4>)
 8013262:	881b      	ldrh	r3, [r3, #0]
 8013264:	4413      	add	r3, r2
 8013266:	b29b      	uxth	r3, r3
 8013268:	3b02      	subs	r3, #2
 801326a:	b29a      	uxth	r2, r3
 801326c:	4b0d      	ldr	r3, [pc, #52]	; (80132a4 <tcp_parseopt+0xf4>)
 801326e:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8013270:	4b0c      	ldr	r3, [pc, #48]	; (80132a4 <tcp_parseopt+0xf4>)
 8013272:	881a      	ldrh	r2, [r3, #0]
 8013274:	4b0a      	ldr	r3, [pc, #40]	; (80132a0 <tcp_parseopt+0xf0>)
 8013276:	881b      	ldrh	r3, [r3, #0]
 8013278:	429a      	cmp	r2, r3
 801327a:	d3b3      	bcc.n	80131e4 <tcp_parseopt+0x34>
 801327c:	e004      	b.n	8013288 <tcp_parseopt+0xd8>
          return;
 801327e:	bf00      	nop
 8013280:	e002      	b.n	8013288 <tcp_parseopt+0xd8>
            return;
 8013282:	bf00      	nop
 8013284:	e000      	b.n	8013288 <tcp_parseopt+0xd8>
            return;
 8013286:	bf00      	nop
      }
    }
  }
}
 8013288:	3710      	adds	r7, #16
 801328a:	46bd      	mov	sp, r7
 801328c:	bd80      	pop	{r7, pc}
 801328e:	bf00      	nop
 8013290:	0801ee54 	.word	0x0801ee54
 8013294:	0801ea0c 	.word	0x0801ea0c
 8013298:	0801ea2c 	.word	0x0801ea2c
 801329c:	0801ea60 	.word	0x0801ea60
 80132a0:	20009fa8 	.word	0x20009fa8
 80132a4:	20009fb0 	.word	0x20009fb0

080132a8 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 80132a8:	b480      	push	{r7}
 80132aa:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 80132ac:	4b05      	ldr	r3, [pc, #20]	; (80132c4 <tcp_trigger_input_pcb_close+0x1c>)
 80132ae:	781b      	ldrb	r3, [r3, #0]
 80132b0:	f043 0310 	orr.w	r3, r3, #16
 80132b4:	b2da      	uxtb	r2, r3
 80132b6:	4b03      	ldr	r3, [pc, #12]	; (80132c4 <tcp_trigger_input_pcb_close+0x1c>)
 80132b8:	701a      	strb	r2, [r3, #0]
}
 80132ba:	bf00      	nop
 80132bc:	46bd      	mov	sp, r7
 80132be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132c2:	4770      	bx	lr
 80132c4:	20009fc1 	.word	0x20009fc1

080132c8 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 80132c8:	b580      	push	{r7, lr}
 80132ca:	b084      	sub	sp, #16
 80132cc:	af00      	add	r7, sp, #0
 80132ce:	60f8      	str	r0, [r7, #12]
 80132d0:	60b9      	str	r1, [r7, #8]
 80132d2:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 80132d4:	68fb      	ldr	r3, [r7, #12]
 80132d6:	2b00      	cmp	r3, #0
 80132d8:	d00a      	beq.n	80132f0 <tcp_route+0x28>
 80132da:	68fb      	ldr	r3, [r7, #12]
 80132dc:	7a1b      	ldrb	r3, [r3, #8]
 80132de:	2b00      	cmp	r3, #0
 80132e0:	d006      	beq.n	80132f0 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 80132e2:	68fb      	ldr	r3, [r7, #12]
 80132e4:	7a1b      	ldrb	r3, [r3, #8]
 80132e6:	4618      	mov	r0, r3
 80132e8:	f7fa fe82 	bl	800dff0 <netif_get_by_index>
 80132ec:	4603      	mov	r3, r0
 80132ee:	e003      	b.n	80132f8 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 80132f0:	6878      	ldr	r0, [r7, #4]
 80132f2:	f006 f91f 	bl	8019534 <ip4_route>
 80132f6:	4603      	mov	r3, r0
  }
}
 80132f8:	4618      	mov	r0, r3
 80132fa:	3710      	adds	r7, #16
 80132fc:	46bd      	mov	sp, r7
 80132fe:	bd80      	pop	{r7, pc}

08013300 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8013300:	b590      	push	{r4, r7, lr}
 8013302:	b087      	sub	sp, #28
 8013304:	af00      	add	r7, sp, #0
 8013306:	60f8      	str	r0, [r7, #12]
 8013308:	60b9      	str	r1, [r7, #8]
 801330a:	603b      	str	r3, [r7, #0]
 801330c:	4613      	mov	r3, r2
 801330e:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8013310:	68fb      	ldr	r3, [r7, #12]
 8013312:	2b00      	cmp	r3, #0
 8013314:	d109      	bne.n	801332a <tcp_create_segment+0x2a>
 8013316:	22a3      	movs	r2, #163	; 0xa3
 8013318:	494e      	ldr	r1, [pc, #312]	; (8013454 <tcp_create_segment+0x154>)
 801331a:	484f      	ldr	r0, [pc, #316]	; (8013458 <tcp_create_segment+0x158>)
 801331c:	f007 fefa 	bl	801b114 <trace_printf>
 8013320:	494e      	ldr	r1, [pc, #312]	; (801345c <tcp_create_segment+0x15c>)
 8013322:	484f      	ldr	r0, [pc, #316]	; (8013460 <tcp_create_segment+0x160>)
 8013324:	f007 fef6 	bl	801b114 <trace_printf>
 8013328:	e7fe      	b.n	8013328 <tcp_create_segment+0x28>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 801332a:	68bb      	ldr	r3, [r7, #8]
 801332c:	2b00      	cmp	r3, #0
 801332e:	d109      	bne.n	8013344 <tcp_create_segment+0x44>
 8013330:	22a4      	movs	r2, #164	; 0xa4
 8013332:	494c      	ldr	r1, [pc, #304]	; (8013464 <tcp_create_segment+0x164>)
 8013334:	4848      	ldr	r0, [pc, #288]	; (8013458 <tcp_create_segment+0x158>)
 8013336:	f007 feed 	bl	801b114 <trace_printf>
 801333a:	4948      	ldr	r1, [pc, #288]	; (801345c <tcp_create_segment+0x15c>)
 801333c:	4848      	ldr	r0, [pc, #288]	; (8013460 <tcp_create_segment+0x160>)
 801333e:	f007 fee9 	bl	801b114 <trace_printf>
 8013342:	e7fe      	b.n	8013342 <tcp_create_segment+0x42>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8013344:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8013348:	009b      	lsls	r3, r3, #2
 801334a:	b2db      	uxtb	r3, r3
 801334c:	f003 0304 	and.w	r3, r3, #4
 8013350:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8013352:	2003      	movs	r0, #3
 8013354:	f7fa fa90 	bl	800d878 <memp_malloc>
 8013358:	6138      	str	r0, [r7, #16]
 801335a:	693b      	ldr	r3, [r7, #16]
 801335c:	2b00      	cmp	r3, #0
 801335e:	d104      	bne.n	801336a <tcp_create_segment+0x6a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8013360:	68b8      	ldr	r0, [r7, #8]
 8013362:	f7fb fa05 	bl	800e770 <pbuf_free>
    return NULL;
 8013366:	2300      	movs	r3, #0
 8013368:	e070      	b.n	801344c <tcp_create_segment+0x14c>
  }
  seg->flags = optflags;
 801336a:	693b      	ldr	r3, [r7, #16]
 801336c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8013370:	731a      	strb	r2, [r3, #12]
  seg->next = NULL;
 8013372:	693b      	ldr	r3, [r7, #16]
 8013374:	2200      	movs	r2, #0
 8013376:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8013378:	693b      	ldr	r3, [r7, #16]
 801337a:	68ba      	ldr	r2, [r7, #8]
 801337c:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801337e:	68bb      	ldr	r3, [r7, #8]
 8013380:	891a      	ldrh	r2, [r3, #8]
 8013382:	7dfb      	ldrb	r3, [r7, #23]
 8013384:	b29b      	uxth	r3, r3
 8013386:	429a      	cmp	r2, r3
 8013388:	d209      	bcs.n	801339e <tcp_create_segment+0x9e>
 801338a:	22b0      	movs	r2, #176	; 0xb0
 801338c:	4936      	ldr	r1, [pc, #216]	; (8013468 <tcp_create_segment+0x168>)
 801338e:	4832      	ldr	r0, [pc, #200]	; (8013458 <tcp_create_segment+0x158>)
 8013390:	f007 fec0 	bl	801b114 <trace_printf>
 8013394:	4931      	ldr	r1, [pc, #196]	; (801345c <tcp_create_segment+0x15c>)
 8013396:	4832      	ldr	r0, [pc, #200]	; (8013460 <tcp_create_segment+0x160>)
 8013398:	f007 febc 	bl	801b114 <trace_printf>
 801339c:	e7fe      	b.n	801339c <tcp_create_segment+0x9c>
  seg->len = p->tot_len - optlen;
 801339e:	68bb      	ldr	r3, [r7, #8]
 80133a0:	891a      	ldrh	r2, [r3, #8]
 80133a2:	7dfb      	ldrb	r3, [r7, #23]
 80133a4:	b29b      	uxth	r3, r3
 80133a6:	1ad3      	subs	r3, r2, r3
 80133a8:	b29a      	uxth	r2, r3
 80133aa:	693b      	ldr	r3, [r7, #16]
 80133ac:	811a      	strh	r2, [r3, #8]
#if TCP_OVERSIZE_DBGCHECK
  seg->oversize_left = 0;
 80133ae:	693b      	ldr	r3, [r7, #16]
 80133b0:	2200      	movs	r2, #0
 80133b2:	815a      	strh	r2, [r3, #10]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 80133b4:	2114      	movs	r1, #20
 80133b6:	68b8      	ldr	r0, [r7, #8]
 80133b8:	f7fb f93c 	bl	800e634 <pbuf_add_header>
 80133bc:	4603      	mov	r3, r0
 80133be:	2b00      	cmp	r3, #0
 80133c0:	d00c      	beq.n	80133dc <tcp_create_segment+0xdc>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
 80133c2:	4b2a      	ldr	r3, [pc, #168]	; (801346c <tcp_create_segment+0x16c>)
 80133c4:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	; 0xa4
 80133c8:	3301      	adds	r3, #1
 80133ca:	b29a      	uxth	r2, r3
 80133cc:	4b27      	ldr	r3, [pc, #156]	; (801346c <tcp_create_segment+0x16c>)
 80133ce:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
    tcp_seg_free(seg);
 80133d2:	6938      	ldr	r0, [r7, #16]
 80133d4:	f7fc fe63 	bl	801009e <tcp_seg_free>
    return NULL;
 80133d8:	2300      	movs	r3, #0
 80133da:	e037      	b.n	801344c <tcp_create_segment+0x14c>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 80133dc:	693b      	ldr	r3, [r7, #16]
 80133de:	685b      	ldr	r3, [r3, #4]
 80133e0:	685a      	ldr	r2, [r3, #4]
 80133e2:	693b      	ldr	r3, [r7, #16]
 80133e4:	611a      	str	r2, [r3, #16]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 80133e6:	68fb      	ldr	r3, [r7, #12]
 80133e8:	8ada      	ldrh	r2, [r3, #22]
 80133ea:	693b      	ldr	r3, [r7, #16]
 80133ec:	691c      	ldr	r4, [r3, #16]
 80133ee:	4610      	mov	r0, r2
 80133f0:	f7f9 fca8 	bl	800cd44 <lwip_htons>
 80133f4:	4603      	mov	r3, r0
 80133f6:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 80133f8:	68fb      	ldr	r3, [r7, #12]
 80133fa:	8b1a      	ldrh	r2, [r3, #24]
 80133fc:	693b      	ldr	r3, [r7, #16]
 80133fe:	691c      	ldr	r4, [r3, #16]
 8013400:	4610      	mov	r0, r2
 8013402:	f7f9 fc9f 	bl	800cd44 <lwip_htons>
 8013406:	4603      	mov	r3, r0
 8013408:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 801340a:	693b      	ldr	r3, [r7, #16]
 801340c:	691c      	ldr	r4, [r3, #16]
 801340e:	6838      	ldr	r0, [r7, #0]
 8013410:	f7f9 fcad 	bl	800cd6e <lwip_htonl>
 8013414:	4603      	mov	r3, r0
 8013416:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8013418:	7dfb      	ldrb	r3, [r7, #23]
 801341a:	089b      	lsrs	r3, r3, #2
 801341c:	b2db      	uxtb	r3, r3
 801341e:	b29b      	uxth	r3, r3
 8013420:	3305      	adds	r3, #5
 8013422:	b29b      	uxth	r3, r3
 8013424:	031b      	lsls	r3, r3, #12
 8013426:	b29a      	uxth	r2, r3
 8013428:	79fb      	ldrb	r3, [r7, #7]
 801342a:	b29b      	uxth	r3, r3
 801342c:	4313      	orrs	r3, r2
 801342e:	b29a      	uxth	r2, r3
 8013430:	693b      	ldr	r3, [r7, #16]
 8013432:	691c      	ldr	r4, [r3, #16]
 8013434:	4610      	mov	r0, r2
 8013436:	f7f9 fc85 	bl	800cd44 <lwip_htons>
 801343a:	4603      	mov	r3, r0
 801343c:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 801343e:	693b      	ldr	r3, [r7, #16]
 8013440:	691b      	ldr	r3, [r3, #16]
 8013442:	2200      	movs	r2, #0
 8013444:	749a      	strb	r2, [r3, #18]
 8013446:	2200      	movs	r2, #0
 8013448:	74da      	strb	r2, [r3, #19]
  return seg;
 801344a:	693b      	ldr	r3, [r7, #16]
}
 801344c:	4618      	mov	r0, r3
 801344e:	371c      	adds	r7, #28
 8013450:	46bd      	mov	sp, r7
 8013452:	bd90      	pop	{r4, r7, pc}
 8013454:	0801ee70 	.word	0x0801ee70
 8013458:	0801ee90 	.word	0x0801ee90
 801345c:	0801eeb0 	.word	0x0801eeb0
 8013460:	0801eee4 	.word	0x0801eee4
 8013464:	0801eee8 	.word	0x0801eee8
 8013468:	0801ef0c 	.word	0x0801ef0c
 801346c:	20010b7c 	.word	0x20010b7c

08013470 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8013470:	b580      	push	{r7, lr}
 8013472:	b086      	sub	sp, #24
 8013474:	af00      	add	r7, sp, #0
 8013476:	607b      	str	r3, [r7, #4]
 8013478:	4603      	mov	r3, r0
 801347a:	73fb      	strb	r3, [r7, #15]
 801347c:	460b      	mov	r3, r1
 801347e:	81bb      	strh	r3, [r7, #12]
 8013480:	4613      	mov	r3, r2
 8013482:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8013484:	89bb      	ldrh	r3, [r7, #12]
 8013486:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8013488:	687b      	ldr	r3, [r7, #4]
 801348a:	2b00      	cmp	r3, #0
 801348c:	d109      	bne.n	80134a2 <tcp_pbuf_prealloc+0x32>
 801348e:	22e8      	movs	r2, #232	; 0xe8
 8013490:	4935      	ldr	r1, [pc, #212]	; (8013568 <tcp_pbuf_prealloc+0xf8>)
 8013492:	4836      	ldr	r0, [pc, #216]	; (801356c <tcp_pbuf_prealloc+0xfc>)
 8013494:	f007 fe3e 	bl	801b114 <trace_printf>
 8013498:	4935      	ldr	r1, [pc, #212]	; (8013570 <tcp_pbuf_prealloc+0x100>)
 801349a:	4836      	ldr	r0, [pc, #216]	; (8013574 <tcp_pbuf_prealloc+0x104>)
 801349c:	f007 fe3a 	bl	801b114 <trace_printf>
 80134a0:	e7fe      	b.n	80134a0 <tcp_pbuf_prealloc+0x30>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 80134a2:	6a3b      	ldr	r3, [r7, #32]
 80134a4:	2b00      	cmp	r3, #0
 80134a6:	d109      	bne.n	80134bc <tcp_pbuf_prealloc+0x4c>
 80134a8:	22e9      	movs	r2, #233	; 0xe9
 80134aa:	4933      	ldr	r1, [pc, #204]	; (8013578 <tcp_pbuf_prealloc+0x108>)
 80134ac:	482f      	ldr	r0, [pc, #188]	; (801356c <tcp_pbuf_prealloc+0xfc>)
 80134ae:	f007 fe31 	bl	801b114 <trace_printf>
 80134b2:	492f      	ldr	r1, [pc, #188]	; (8013570 <tcp_pbuf_prealloc+0x100>)
 80134b4:	482f      	ldr	r0, [pc, #188]	; (8013574 <tcp_pbuf_prealloc+0x104>)
 80134b6:	f007 fe2d 	bl	801b114 <trace_printf>
 80134ba:	e7fe      	b.n	80134ba <tcp_pbuf_prealloc+0x4a>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 80134bc:	89ba      	ldrh	r2, [r7, #12]
 80134be:	897b      	ldrh	r3, [r7, #10]
 80134c0:	429a      	cmp	r2, r3
 80134c2:	d221      	bcs.n	8013508 <tcp_pbuf_prealloc+0x98>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 80134c4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80134c8:	f003 0302 	and.w	r3, r3, #2
 80134cc:	2b00      	cmp	r3, #0
 80134ce:	d111      	bne.n	80134f4 <tcp_pbuf_prealloc+0x84>
        (!(pcb->flags & TF_NODELAY) &&
 80134d0:	6a3b      	ldr	r3, [r7, #32]
 80134d2:	8b5b      	ldrh	r3, [r3, #26]
 80134d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 80134d8:	2b00      	cmp	r3, #0
 80134da:	d115      	bne.n	8013508 <tcp_pbuf_prealloc+0x98>
        (!(pcb->flags & TF_NODELAY) &&
 80134dc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80134e0:	2b00      	cmp	r3, #0
 80134e2:	d007      	beq.n	80134f4 <tcp_pbuf_prealloc+0x84>
         (!first_seg ||
          pcb->unsent != NULL ||
 80134e4:	6a3b      	ldr	r3, [r7, #32]
 80134e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 80134e8:	2b00      	cmp	r3, #0
 80134ea:	d103      	bne.n	80134f4 <tcp_pbuf_prealloc+0x84>
          pcb->unacked != NULL))) {
 80134ec:	6a3b      	ldr	r3, [r7, #32]
 80134ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 80134f0:	2b00      	cmp	r3, #0
 80134f2:	d009      	beq.n	8013508 <tcp_pbuf_prealloc+0x98>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 80134f4:	89bb      	ldrh	r3, [r7, #12]
 80134f6:	f203 231b 	addw	r3, r3, #539	; 0x21b
 80134fa:	f023 0203 	bic.w	r2, r3, #3
 80134fe:	897b      	ldrh	r3, [r7, #10]
 8013500:	4293      	cmp	r3, r2
 8013502:	bf28      	it	cs
 8013504:	4613      	movcs	r3, r2
 8013506:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8013508:	8af9      	ldrh	r1, [r7, #22]
 801350a:	7bfb      	ldrb	r3, [r7, #15]
 801350c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013510:	4618      	mov	r0, r3
 8013512:	f7fa fe17 	bl	800e144 <pbuf_alloc>
 8013516:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8013518:	693b      	ldr	r3, [r7, #16]
 801351a:	2b00      	cmp	r3, #0
 801351c:	d101      	bne.n	8013522 <tcp_pbuf_prealloc+0xb2>
    return NULL;
 801351e:	2300      	movs	r3, #0
 8013520:	e01d      	b.n	801355e <tcp_pbuf_prealloc+0xee>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8013522:	693b      	ldr	r3, [r7, #16]
 8013524:	681b      	ldr	r3, [r3, #0]
 8013526:	2b00      	cmp	r3, #0
 8013528:	d00a      	beq.n	8013540 <tcp_pbuf_prealloc+0xd0>
 801352a:	f240 120b 	movw	r2, #267	; 0x10b
 801352e:	4913      	ldr	r1, [pc, #76]	; (801357c <tcp_pbuf_prealloc+0x10c>)
 8013530:	480e      	ldr	r0, [pc, #56]	; (801356c <tcp_pbuf_prealloc+0xfc>)
 8013532:	f007 fdef 	bl	801b114 <trace_printf>
 8013536:	490e      	ldr	r1, [pc, #56]	; (8013570 <tcp_pbuf_prealloc+0x100>)
 8013538:	480e      	ldr	r0, [pc, #56]	; (8013574 <tcp_pbuf_prealloc+0x104>)
 801353a:	f007 fdeb 	bl	801b114 <trace_printf>
 801353e:	e7fe      	b.n	801353e <tcp_pbuf_prealloc+0xce>
  *oversize = p->len - length;
 8013540:	693b      	ldr	r3, [r7, #16]
 8013542:	895a      	ldrh	r2, [r3, #10]
 8013544:	89bb      	ldrh	r3, [r7, #12]
 8013546:	1ad3      	subs	r3, r2, r3
 8013548:	b29a      	uxth	r2, r3
 801354a:	687b      	ldr	r3, [r7, #4]
 801354c:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 801354e:	693b      	ldr	r3, [r7, #16]
 8013550:	89ba      	ldrh	r2, [r7, #12]
 8013552:	811a      	strh	r2, [r3, #8]
 8013554:	693b      	ldr	r3, [r7, #16]
 8013556:	891a      	ldrh	r2, [r3, #8]
 8013558:	693b      	ldr	r3, [r7, #16]
 801355a:	815a      	strh	r2, [r3, #10]
  return p;
 801355c:	693b      	ldr	r3, [r7, #16]
}
 801355e:	4618      	mov	r0, r3
 8013560:	3718      	adds	r7, #24
 8013562:	46bd      	mov	sp, r7
 8013564:	bd80      	pop	{r7, pc}
 8013566:	bf00      	nop
 8013568:	0801ef24 	.word	0x0801ef24
 801356c:	0801ee90 	.word	0x0801ee90
 8013570:	0801eeb0 	.word	0x0801eeb0
 8013574:	0801eee4 	.word	0x0801eee4
 8013578:	0801ef48 	.word	0x0801ef48
 801357c:	0801ef68 	.word	0x0801ef68

08013580 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8013580:	b580      	push	{r7, lr}
 8013582:	b082      	sub	sp, #8
 8013584:	af00      	add	r7, sp, #0
 8013586:	6078      	str	r0, [r7, #4]
 8013588:	460b      	mov	r3, r1
 801358a:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 801358c:	687b      	ldr	r3, [r7, #4]
 801358e:	2b00      	cmp	r3, #0
 8013590:	d10a      	bne.n	80135a8 <tcp_write_checks+0x28>
 8013592:	f240 1233 	movw	r2, #307	; 0x133
 8013596:	493c      	ldr	r1, [pc, #240]	; (8013688 <tcp_write_checks+0x108>)
 8013598:	483c      	ldr	r0, [pc, #240]	; (801368c <tcp_write_checks+0x10c>)
 801359a:	f007 fdbb 	bl	801b114 <trace_printf>
 801359e:	493c      	ldr	r1, [pc, #240]	; (8013690 <tcp_write_checks+0x110>)
 80135a0:	483c      	ldr	r0, [pc, #240]	; (8013694 <tcp_write_checks+0x114>)
 80135a2:	f007 fdb7 	bl	801b114 <trace_printf>
 80135a6:	e7fe      	b.n	80135a6 <tcp_write_checks+0x26>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 80135a8:	687b      	ldr	r3, [r7, #4]
 80135aa:	7d1b      	ldrb	r3, [r3, #20]
 80135ac:	2b04      	cmp	r3, #4
 80135ae:	d00e      	beq.n	80135ce <tcp_write_checks+0x4e>
      (pcb->state != CLOSE_WAIT) &&
 80135b0:	687b      	ldr	r3, [r7, #4]
 80135b2:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 80135b4:	2b07      	cmp	r3, #7
 80135b6:	d00a      	beq.n	80135ce <tcp_write_checks+0x4e>
      (pcb->state != SYN_SENT) &&
 80135b8:	687b      	ldr	r3, [r7, #4]
 80135ba:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 80135bc:	2b02      	cmp	r3, #2
 80135be:	d006      	beq.n	80135ce <tcp_write_checks+0x4e>
      (pcb->state != SYN_RCVD)) {
 80135c0:	687b      	ldr	r3, [r7, #4]
 80135c2:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 80135c4:	2b03      	cmp	r3, #3
 80135c6:	d002      	beq.n	80135ce <tcp_write_checks+0x4e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 80135c8:	f06f 030a 	mvn.w	r3, #10
 80135cc:	e057      	b.n	801367e <tcp_write_checks+0xfe>
  } else if (len == 0) {
 80135ce:	887b      	ldrh	r3, [r7, #2]
 80135d0:	2b00      	cmp	r3, #0
 80135d2:	d101      	bne.n	80135d8 <tcp_write_checks+0x58>
    return ERR_OK;
 80135d4:	2300      	movs	r3, #0
 80135d6:	e052      	b.n	801367e <tcp_write_checks+0xfe>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 80135d8:	687b      	ldr	r3, [r7, #4]
 80135da:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80135de:	887a      	ldrh	r2, [r7, #2]
 80135e0:	429a      	cmp	r2, r3
 80135e2:	d909      	bls.n	80135f8 <tcp_write_checks+0x78>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80135e4:	687b      	ldr	r3, [r7, #4]
 80135e6:	8b5b      	ldrh	r3, [r3, #26]
 80135e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80135ec:	b29a      	uxth	r2, r3
 80135ee:	687b      	ldr	r3, [r7, #4]
 80135f0:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 80135f2:	f04f 33ff 	mov.w	r3, #4294967295
 80135f6:	e042      	b.n	801367e <tcp_write_checks+0xfe>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 80135f8:	687b      	ldr	r3, [r7, #4]
 80135fa:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80135fe:	2b08      	cmp	r3, #8
 8013600:	d911      	bls.n	8013626 <tcp_write_checks+0xa6>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
 8013602:	4b25      	ldr	r3, [pc, #148]	; (8013698 <tcp_write_checks+0x118>)
 8013604:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 8013608:	3301      	adds	r3, #1
 801360a:	b29a      	uxth	r2, r3
 801360c:	4b22      	ldr	r3, [pc, #136]	; (8013698 <tcp_write_checks+0x118>)
 801360e:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8013612:	687b      	ldr	r3, [r7, #4]
 8013614:	8b5b      	ldrh	r3, [r3, #26]
 8013616:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801361a:	b29a      	uxth	r2, r3
 801361c:	687b      	ldr	r3, [r7, #4]
 801361e:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8013620:	f04f 33ff 	mov.w	r3, #4294967295
 8013624:	e02b      	b.n	801367e <tcp_write_checks+0xfe>
  }
  if (pcb->snd_queuelen != 0) {
 8013626:	687b      	ldr	r3, [r7, #4]
 8013628:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801362c:	2b00      	cmp	r3, #0
 801362e:	d012      	beq.n	8013656 <tcp_write_checks+0xd6>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8013630:	687b      	ldr	r3, [r7, #4]
 8013632:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013634:	2b00      	cmp	r3, #0
 8013636:	d121      	bne.n	801367c <tcp_write_checks+0xfc>
 8013638:	687b      	ldr	r3, [r7, #4]
 801363a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801363c:	2b00      	cmp	r3, #0
 801363e:	d11d      	bne.n	801367c <tcp_write_checks+0xfc>
 8013640:	f240 1255 	movw	r2, #341	; 0x155
 8013644:	4915      	ldr	r1, [pc, #84]	; (801369c <tcp_write_checks+0x11c>)
 8013646:	4811      	ldr	r0, [pc, #68]	; (801368c <tcp_write_checks+0x10c>)
 8013648:	f007 fd64 	bl	801b114 <trace_printf>
 801364c:	4910      	ldr	r1, [pc, #64]	; (8013690 <tcp_write_checks+0x110>)
 801364e:	4811      	ldr	r0, [pc, #68]	; (8013694 <tcp_write_checks+0x114>)
 8013650:	f007 fd60 	bl	801b114 <trace_printf>
 8013654:	e7fe      	b.n	8013654 <tcp_write_checks+0xd4>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8013656:	687b      	ldr	r3, [r7, #4]
 8013658:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801365a:	2b00      	cmp	r3, #0
 801365c:	d103      	bne.n	8013666 <tcp_write_checks+0xe6>
 801365e:	687b      	ldr	r3, [r7, #4]
 8013660:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013662:	2b00      	cmp	r3, #0
 8013664:	d00a      	beq.n	801367c <tcp_write_checks+0xfc>
 8013666:	f44f 72ac 	mov.w	r2, #344	; 0x158
 801366a:	490d      	ldr	r1, [pc, #52]	; (80136a0 <tcp_write_checks+0x120>)
 801366c:	4807      	ldr	r0, [pc, #28]	; (801368c <tcp_write_checks+0x10c>)
 801366e:	f007 fd51 	bl	801b114 <trace_printf>
 8013672:	4907      	ldr	r1, [pc, #28]	; (8013690 <tcp_write_checks+0x110>)
 8013674:	4807      	ldr	r0, [pc, #28]	; (8013694 <tcp_write_checks+0x114>)
 8013676:	f007 fd4d 	bl	801b114 <trace_printf>
 801367a:	e7fe      	b.n	801367a <tcp_write_checks+0xfa>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 801367c:	2300      	movs	r3, #0
}
 801367e:	4618      	mov	r0, r3
 8013680:	3708      	adds	r7, #8
 8013682:	46bd      	mov	sp, r7
 8013684:	bd80      	pop	{r7, pc}
 8013686:	bf00      	nop
 8013688:	0801ef7c 	.word	0x0801ef7c
 801368c:	0801ee90 	.word	0x0801ee90
 8013690:	0801eeb0 	.word	0x0801eeb0
 8013694:	0801eee4 	.word	0x0801eee4
 8013698:	20010b7c 	.word	0x20010b7c
 801369c:	0801ef9c 	.word	0x0801ef9c
 80136a0:	0801efd8 	.word	0x0801efd8

080136a4 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 80136a4:	b590      	push	{r4, r7, lr}
 80136a6:	b09d      	sub	sp, #116	; 0x74
 80136a8:	af04      	add	r7, sp, #16
 80136aa:	60f8      	str	r0, [r7, #12]
 80136ac:	60b9      	str	r1, [r7, #8]
 80136ae:	4611      	mov	r1, r2
 80136b0:	461a      	mov	r2, r3
 80136b2:	460b      	mov	r3, r1
 80136b4:	80fb      	strh	r3, [r7, #6]
 80136b6:	4613      	mov	r3, r2
 80136b8:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 80136ba:	2300      	movs	r3, #0
 80136bc:	63fb      	str	r3, [r7, #60]	; 0x3c
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 80136be:	2300      	movs	r3, #0
 80136c0:	643b      	str	r3, [r7, #64]	; 0x40
 80136c2:	2300      	movs	r3, #0
 80136c4:	657b      	str	r3, [r7, #84]	; 0x54
 80136c6:	2300      	movs	r3, #0
 80136c8:	653b      	str	r3, [r7, #80]	; 0x50
 80136ca:	2300      	movs	r3, #0
 80136cc:	64fb      	str	r3, [r7, #76]	; 0x4c
  u16_t pos = 0; /* position in 'arg' data */
 80136ce:	2300      	movs	r3, #0
 80136d0:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 80136d4:	2300      	movs	r3, #0
 80136d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if TCP_OVERSIZE
  u16_t oversize = 0;
 80136da:	2300      	movs	r3, #0
 80136dc:	82fb      	strh	r3, [r7, #22]
  u16_t oversize_used = 0;
 80136de:	2300      	movs	r3, #0
 80136e0:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
 80136e4:	2300      	movs	r3, #0
 80136e6:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 80136ea:	2300      	movs	r3, #0
 80136ec:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 80136f0:	68fb      	ldr	r3, [r7, #12]
 80136f2:	2b00      	cmp	r3, #0
 80136f4:	d10a      	bne.n	801370c <tcp_write+0x68>
 80136f6:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 80136fa:	49a6      	ldr	r1, [pc, #664]	; (8013994 <tcp_write+0x2f0>)
 80136fc:	48a6      	ldr	r0, [pc, #664]	; (8013998 <tcp_write+0x2f4>)
 80136fe:	f007 fd09 	bl	801b114 <trace_printf>
 8013702:	49a6      	ldr	r1, [pc, #664]	; (801399c <tcp_write+0x2f8>)
 8013704:	48a6      	ldr	r0, [pc, #664]	; (80139a0 <tcp_write+0x2fc>)
 8013706:	f007 fd05 	bl	801b114 <trace_printf>
 801370a:	e7fe      	b.n	801370a <tcp_write+0x66>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 801370c:	68fb      	ldr	r3, [r7, #12]
 801370e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8013712:	085b      	lsrs	r3, r3, #1
 8013714:	b29a      	uxth	r2, r3
 8013716:	68fb      	ldr	r3, [r7, #12]
 8013718:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801371a:	4293      	cmp	r3, r2
 801371c:	bf28      	it	cs
 801371e:	4613      	movcs	r3, r2
 8013720:	853b      	strh	r3, [r7, #40]	; 0x28
  mss_local = mss_local ? mss_local : pcb->mss;
 8013722:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8013724:	2b00      	cmp	r3, #0
 8013726:	d102      	bne.n	801372e <tcp_write+0x8a>
 8013728:	68fb      	ldr	r3, [r7, #12]
 801372a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801372c:	e000      	b.n	8013730 <tcp_write+0x8c>
 801372e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8013730:	853b      	strh	r3, [r7, #40]	; 0x28
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8013732:	68bb      	ldr	r3, [r7, #8]
 8013734:	2b00      	cmp	r3, #0
 8013736:	d10a      	bne.n	801374e <tcp_write+0xaa>
 8013738:	f240 12ad 	movw	r2, #429	; 0x1ad
 801373c:	4999      	ldr	r1, [pc, #612]	; (80139a4 <tcp_write+0x300>)
 801373e:	4896      	ldr	r0, [pc, #600]	; (8013998 <tcp_write+0x2f4>)
 8013740:	f007 fce8 	bl	801b114 <trace_printf>
 8013744:	4995      	ldr	r1, [pc, #596]	; (801399c <tcp_write+0x2f8>)
 8013746:	4896      	ldr	r0, [pc, #600]	; (80139a0 <tcp_write+0x2fc>)
 8013748:	f007 fce4 	bl	801b114 <trace_printf>
 801374c:	e7fe      	b.n	801374c <tcp_write+0xa8>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 801374e:	88fb      	ldrh	r3, [r7, #6]
 8013750:	4619      	mov	r1, r3
 8013752:	68f8      	ldr	r0, [r7, #12]
 8013754:	f7ff ff14 	bl	8013580 <tcp_write_checks>
 8013758:	4603      	mov	r3, r0
 801375a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if (err != ERR_OK) {
 801375e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8013762:	2b00      	cmp	r3, #0
 8013764:	d002      	beq.n	801376c <tcp_write+0xc8>
    return err;
 8013766:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801376a:	e391      	b.n	8013e90 <tcp_write+0x7ec>
  }
  queuelen = pcb->snd_queuelen;
 801376c:	68fb      	ldr	r3, [r7, #12]
 801376e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013772:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8013776:	2300      	movs	r3, #0
 8013778:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 801377c:	68fb      	ldr	r3, [r7, #12]
 801377e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013780:	2b00      	cmp	r3, #0
 8013782:	f000 813d 	beq.w	8013a00 <tcp_write+0x35c>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8013786:	68fb      	ldr	r3, [r7, #12]
 8013788:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801378a:	643b      	str	r3, [r7, #64]	; 0x40
 801378c:	e002      	b.n	8013794 <tcp_write+0xf0>
         last_unsent = last_unsent->next);
 801378e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013790:	681b      	ldr	r3, [r3, #0]
 8013792:	643b      	str	r3, [r7, #64]	; 0x40
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8013794:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013796:	681b      	ldr	r3, [r3, #0]
 8013798:	2b00      	cmp	r3, #0
 801379a:	d1f8      	bne.n	801378e <tcp_write+0xea>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 801379c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801379e:	7b1b      	ldrb	r3, [r3, #12]
 80137a0:	009b      	lsls	r3, r3, #2
 80137a2:	b29b      	uxth	r3, r3
 80137a4:	f003 0304 	and.w	r3, r3, #4
 80137a8:	84bb      	strh	r3, [r7, #36]	; 0x24
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 80137aa:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80137ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80137ae:	891b      	ldrh	r3, [r3, #8]
 80137b0:	4619      	mov	r1, r3
 80137b2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80137b4:	440b      	add	r3, r1
 80137b6:	429a      	cmp	r2, r3
 80137b8:	da0a      	bge.n	80137d0 <tcp_write+0x12c>
 80137ba:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 80137be:	497a      	ldr	r1, [pc, #488]	; (80139a8 <tcp_write+0x304>)
 80137c0:	4875      	ldr	r0, [pc, #468]	; (8013998 <tcp_write+0x2f4>)
 80137c2:	f007 fca7 	bl	801b114 <trace_printf>
 80137c6:	4975      	ldr	r1, [pc, #468]	; (801399c <tcp_write+0x2f8>)
 80137c8:	4875      	ldr	r0, [pc, #468]	; (80139a0 <tcp_write+0x2fc>)
 80137ca:	f007 fca3 	bl	801b114 <trace_printf>
 80137ce:	e7fe      	b.n	80137ce <tcp_write+0x12a>
    space = mss_local - (last_unsent->len + unsent_optlen);
 80137d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80137d2:	891a      	ldrh	r2, [r3, #8]
 80137d4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80137d6:	4413      	add	r3, r2
 80137d8:	b29b      	uxth	r3, r3
 80137da:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80137dc:	1ad3      	subs	r3, r2, r3
 80137de:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
     * function.
     */
#if TCP_OVERSIZE
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
 80137e2:	68fb      	ldr	r3, [r7, #12]
 80137e4:	f8b3 2068 	ldrh.w	r2, [r3, #104]	; 0x68
 80137e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80137ea:	895b      	ldrh	r3, [r3, #10]
 80137ec:	429a      	cmp	r2, r3
 80137ee:	d00a      	beq.n	8013806 <tcp_write+0x162>
 80137f0:	f240 12f3 	movw	r2, #499	; 0x1f3
 80137f4:	496d      	ldr	r1, [pc, #436]	; (80139ac <tcp_write+0x308>)
 80137f6:	4868      	ldr	r0, [pc, #416]	; (8013998 <tcp_write+0x2f4>)
 80137f8:	f007 fc8c 	bl	801b114 <trace_printf>
 80137fc:	4967      	ldr	r1, [pc, #412]	; (801399c <tcp_write+0x2f8>)
 80137fe:	4868      	ldr	r0, [pc, #416]	; (80139a0 <tcp_write+0x2fc>)
 8013800:	f007 fc88 	bl	801b114 <trace_printf>
 8013804:	e7fe      	b.n	8013804 <tcp_write+0x160>
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 8013806:	68fb      	ldr	r3, [r7, #12]
 8013808:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801380c:	82fb      	strh	r3, [r7, #22]
    if (oversize > 0) {
 801380e:	8afb      	ldrh	r3, [r7, #22]
 8013810:	2b00      	cmp	r3, #0
 8013812:	d032      	beq.n	801387a <tcp_write+0x1d6>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8013814:	8afb      	ldrh	r3, [r7, #22]
 8013816:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 801381a:	429a      	cmp	r2, r3
 801381c:	d20a      	bcs.n	8013834 <tcp_write+0x190>
 801381e:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 8013822:	4963      	ldr	r1, [pc, #396]	; (80139b0 <tcp_write+0x30c>)
 8013824:	485c      	ldr	r0, [pc, #368]	; (8013998 <tcp_write+0x2f4>)
 8013826:	f007 fc75 	bl	801b114 <trace_printf>
 801382a:	495c      	ldr	r1, [pc, #368]	; (801399c <tcp_write+0x2f8>)
 801382c:	485c      	ldr	r0, [pc, #368]	; (80139a0 <tcp_write+0x2fc>)
 801382e:	f007 fc71 	bl	801b114 <trace_printf>
 8013832:	e7fe      	b.n	8013832 <tcp_write+0x18e>
      seg = last_unsent;
 8013834:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013836:	657b      	str	r3, [r7, #84]	; 0x54
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8013838:	8afb      	ldrh	r3, [r7, #22]
 801383a:	88fa      	ldrh	r2, [r7, #6]
 801383c:	4293      	cmp	r3, r2
 801383e:	bf28      	it	cs
 8013840:	4613      	movcs	r3, r2
 8013842:	b29b      	uxth	r3, r3
 8013844:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 8013848:	4293      	cmp	r3, r2
 801384a:	bf28      	it	cs
 801384c:	4613      	movcs	r3, r2
 801384e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      pos += oversize_used;
 8013852:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 8013856:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801385a:	4413      	add	r3, r2
 801385c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
      oversize -= oversize_used;
 8013860:	8afa      	ldrh	r2, [r7, #22]
 8013862:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8013866:	1ad3      	subs	r3, r2, r3
 8013868:	b29b      	uxth	r3, r3
 801386a:	82fb      	strh	r3, [r7, #22]
      space -= oversize_used;
 801386c:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 8013870:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8013874:	1ad3      	subs	r3, r2, r3
 8013876:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 801387a:	8afb      	ldrh	r3, [r7, #22]
 801387c:	2b00      	cmp	r3, #0
 801387e:	d00f      	beq.n	80138a0 <tcp_write+0x1fc>
 8013880:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 8013884:	88fb      	ldrh	r3, [r7, #6]
 8013886:	429a      	cmp	r2, r3
 8013888:	d00a      	beq.n	80138a0 <tcp_write+0x1fc>
 801388a:	f44f 7200 	mov.w	r2, #512	; 0x200
 801388e:	4949      	ldr	r1, [pc, #292]	; (80139b4 <tcp_write+0x310>)
 8013890:	4841      	ldr	r0, [pc, #260]	; (8013998 <tcp_write+0x2f4>)
 8013892:	f007 fc3f 	bl	801b114 <trace_printf>
 8013896:	4941      	ldr	r1, [pc, #260]	; (801399c <tcp_write+0x2f8>)
 8013898:	4841      	ldr	r0, [pc, #260]	; (80139a0 <tcp_write+0x2fc>)
 801389a:	f007 fc3b 	bl	801b114 <trace_printf>
 801389e:	e7fe      	b.n	801389e <tcp_write+0x1fa>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 80138a0:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 80138a4:	88fb      	ldrh	r3, [r7, #6]
 80138a6:	429a      	cmp	r2, r3
 80138a8:	f080 8187 	bcs.w	8013bba <tcp_write+0x516>
 80138ac:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80138b0:	2b00      	cmp	r3, #0
 80138b2:	f000 8182 	beq.w	8013bba <tcp_write+0x516>
 80138b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80138b8:	891b      	ldrh	r3, [r3, #8]
 80138ba:	2b00      	cmp	r3, #0
 80138bc:	f000 817d 	beq.w	8013bba <tcp_write+0x516>
      u16_t seglen = LWIP_MIN(space, len - pos);
 80138c0:	88fa      	ldrh	r2, [r7, #6]
 80138c2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80138c6:	1ad2      	subs	r2, r2, r3
 80138c8:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80138cc:	4293      	cmp	r3, r2
 80138ce:	bfa8      	it	ge
 80138d0:	4613      	movge	r3, r2
 80138d2:	847b      	strh	r3, [r7, #34]	; 0x22
      seg = last_unsent;
 80138d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80138d6:	657b      	str	r3, [r7, #84]	; 0x54

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 80138d8:	797b      	ldrb	r3, [r7, #5]
 80138da:	f003 0301 	and.w	r3, r3, #1
 80138de:	2b00      	cmp	r3, #0
 80138e0:	d02b      	beq.n	801393a <tcp_write+0x296>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 80138e2:	f107 0016 	add.w	r0, r7, #22
 80138e6:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 80138ea:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 80138ec:	2301      	movs	r3, #1
 80138ee:	9302      	str	r3, [sp, #8]
 80138f0:	797b      	ldrb	r3, [r7, #5]
 80138f2:	9301      	str	r3, [sp, #4]
 80138f4:	68fb      	ldr	r3, [r7, #12]
 80138f6:	9300      	str	r3, [sp, #0]
 80138f8:	4603      	mov	r3, r0
 80138fa:	2000      	movs	r0, #0
 80138fc:	f7ff fdb8 	bl	8013470 <tcp_pbuf_prealloc>
 8013900:	63f8      	str	r0, [r7, #60]	; 0x3c
 8013902:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013904:	2b00      	cmp	r3, #0
 8013906:	f000 8285 	beq.w	8013e14 <tcp_write+0x770>
                      ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n",
                       seglen));
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
 801390a:	8afb      	ldrh	r3, [r7, #22]
 801390c:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8013910:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013912:	6858      	ldr	r0, [r3, #4]
 8013914:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8013918:	68ba      	ldr	r2, [r7, #8]
 801391a:	4413      	add	r3, r2
 801391c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801391e:	4619      	mov	r1, r3
 8013920:	f007 fc4c 	bl	801b1bc <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8013924:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8013926:	f7fa ffc3 	bl	800e8b0 <pbuf_clen>
 801392a:	4603      	mov	r3, r0
 801392c:	461a      	mov	r2, r3
 801392e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8013932:	4413      	add	r3, r2
 8013934:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8013938:	e05b      	b.n	80139f2 <tcp_write+0x34e>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 801393a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801393c:	685b      	ldr	r3, [r3, #4]
 801393e:	63bb      	str	r3, [r7, #56]	; 0x38
 8013940:	e002      	b.n	8013948 <tcp_write+0x2a4>
 8013942:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013944:	681b      	ldr	r3, [r3, #0]
 8013946:	63bb      	str	r3, [r7, #56]	; 0x38
 8013948:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801394a:	681b      	ldr	r3, [r3, #0]
 801394c:	2b00      	cmp	r3, #0
 801394e:	d1f8      	bne.n	8013942 <tcp_write+0x29e>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8013950:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013952:	7b1b      	ldrb	r3, [r3, #12]
 8013954:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8013958:	2b00      	cmp	r3, #0
 801395a:	d12f      	bne.n	80139bc <tcp_write+0x318>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 801395c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801395e:	685b      	ldr	r3, [r3, #4]
 8013960:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013962:	8952      	ldrh	r2, [r2, #10]
 8013964:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8013966:	68ba      	ldr	r2, [r7, #8]
 8013968:	429a      	cmp	r2, r3
 801396a:	d127      	bne.n	80139bc <tcp_write+0x318>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 801396c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8013970:	2b00      	cmp	r3, #0
 8013972:	d00a      	beq.n	801398a <tcp_write+0x2e6>
 8013974:	f240 2231 	movw	r2, #561	; 0x231
 8013978:	490f      	ldr	r1, [pc, #60]	; (80139b8 <tcp_write+0x314>)
 801397a:	4807      	ldr	r0, [pc, #28]	; (8013998 <tcp_write+0x2f4>)
 801397c:	f007 fbca 	bl	801b114 <trace_printf>
 8013980:	4906      	ldr	r1, [pc, #24]	; (801399c <tcp_write+0x2f8>)
 8013982:	4807      	ldr	r0, [pc, #28]	; (80139a0 <tcp_write+0x2fc>)
 8013984:	f007 fbc6 	bl	801b114 <trace_printf>
 8013988:	e7fe      	b.n	8013988 <tcp_write+0x2e4>
          extendlen = seglen;
 801398a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801398c:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8013990:	e02f      	b.n	80139f2 <tcp_write+0x34e>
 8013992:	bf00      	nop
 8013994:	0801f00c 	.word	0x0801f00c
 8013998:	0801ee90 	.word	0x0801ee90
 801399c:	0801eeb0 	.word	0x0801eeb0
 80139a0:	0801eee4 	.word	0x0801eee4
 80139a4:	0801f024 	.word	0x0801f024
 80139a8:	0801f058 	.word	0x0801f058
 80139ac:	0801f070 	.word	0x0801f070
 80139b0:	0801f0a0 	.word	0x0801f0a0
 80139b4:	0801f0c0 	.word	0x0801f0c0
 80139b8:	0801f0e0 	.word	0x0801f0e0
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 80139bc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80139be:	2201      	movs	r2, #1
 80139c0:	4619      	mov	r1, r3
 80139c2:	2000      	movs	r0, #0
 80139c4:	f7fa fbbe 	bl	800e144 <pbuf_alloc>
 80139c8:	63f8      	str	r0, [r7, #60]	; 0x3c
 80139ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80139cc:	2b00      	cmp	r3, #0
 80139ce:	f000 8223 	beq.w	8013e18 <tcp_write+0x774>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 80139d2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80139d6:	68ba      	ldr	r2, [r7, #8]
 80139d8:	441a      	add	r2, r3
 80139da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80139dc:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 80139de:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80139e0:	f7fa ff66 	bl	800e8b0 <pbuf_clen>
 80139e4:	4603      	mov	r3, r0
 80139e6:	461a      	mov	r2, r3
 80139e8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80139ec:	4413      	add	r3, r2
 80139ee:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 80139f2:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 80139f6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80139f8:	4413      	add	r3, r2
 80139fa:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80139fe:	e0dc      	b.n	8013bba <tcp_write+0x516>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8013a00:	68fb      	ldr	r3, [r7, #12]
 8013a02:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8013a06:	2b00      	cmp	r3, #0
 8013a08:	f000 80d7 	beq.w	8013bba <tcp_write+0x516>
 8013a0c:	f240 224a 	movw	r2, #586	; 0x24a
 8013a10:	49a6      	ldr	r1, [pc, #664]	; (8013cac <tcp_write+0x608>)
 8013a12:	48a7      	ldr	r0, [pc, #668]	; (8013cb0 <tcp_write+0x60c>)
 8013a14:	f007 fb7e 	bl	801b114 <trace_printf>
 8013a18:	49a6      	ldr	r1, [pc, #664]	; (8013cb4 <tcp_write+0x610>)
 8013a1a:	48a7      	ldr	r0, [pc, #668]	; (8013cb8 <tcp_write+0x614>)
 8013a1c:	f007 fb7a 	bl	801b114 <trace_printf>
 8013a20:	e7fe      	b.n	8013a20 <tcp_write+0x37c>
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
    struct pbuf *p;
    u16_t left = len - pos;
 8013a22:	88fa      	ldrh	r2, [r7, #6]
 8013a24:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8013a28:	1ad3      	subs	r3, r2, r3
 8013a2a:	843b      	strh	r3, [r7, #32]
    u16_t max_len = mss_local - optlen;
 8013a2c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8013a30:	b29b      	uxth	r3, r3
 8013a32:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8013a34:	1ad3      	subs	r3, r2, r3
 8013a36:	83fb      	strh	r3, [r7, #30]
    u16_t seglen = LWIP_MIN(left, max_len);
 8013a38:	8bfa      	ldrh	r2, [r7, #30]
 8013a3a:	8c3b      	ldrh	r3, [r7, #32]
 8013a3c:	4293      	cmp	r3, r2
 8013a3e:	bf28      	it	cs
 8013a40:	4613      	movcs	r3, r2
 8013a42:	83bb      	strh	r3, [r7, #28]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8013a44:	797b      	ldrb	r3, [r7, #5]
 8013a46:	f003 0301 	and.w	r3, r3, #1
 8013a4a:	2b00      	cmp	r3, #0
 8013a4c:	d03a      	beq.n	8013ac4 <tcp_write+0x420>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8013a4e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8013a52:	b29a      	uxth	r2, r3
 8013a54:	8bbb      	ldrh	r3, [r7, #28]
 8013a56:	4413      	add	r3, r2
 8013a58:	b299      	uxth	r1, r3
 8013a5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013a5c:	2b00      	cmp	r3, #0
 8013a5e:	bf0c      	ite	eq
 8013a60:	2301      	moveq	r3, #1
 8013a62:	2300      	movne	r3, #0
 8013a64:	b2db      	uxtb	r3, r3
 8013a66:	f107 0016 	add.w	r0, r7, #22
 8013a6a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8013a6c:	9302      	str	r3, [sp, #8]
 8013a6e:	797b      	ldrb	r3, [r7, #5]
 8013a70:	9301      	str	r3, [sp, #4]
 8013a72:	68fb      	ldr	r3, [r7, #12]
 8013a74:	9300      	str	r3, [sp, #0]
 8013a76:	4603      	mov	r3, r0
 8013a78:	2036      	movs	r0, #54	; 0x36
 8013a7a:	f7ff fcf9 	bl	8013470 <tcp_pbuf_prealloc>
 8013a7e:	6378      	str	r0, [r7, #52]	; 0x34
 8013a80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013a82:	2b00      	cmp	r3, #0
 8013a84:	f000 81ca 	beq.w	8013e1c <tcp_write+0x778>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 8013a88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013a8a:	895b      	ldrh	r3, [r3, #10]
 8013a8c:	8bba      	ldrh	r2, [r7, #28]
 8013a8e:	429a      	cmp	r2, r3
 8013a90:	d90a      	bls.n	8013aa8 <tcp_write+0x404>
 8013a92:	f240 2266 	movw	r2, #614	; 0x266
 8013a96:	4989      	ldr	r1, [pc, #548]	; (8013cbc <tcp_write+0x618>)
 8013a98:	4885      	ldr	r0, [pc, #532]	; (8013cb0 <tcp_write+0x60c>)
 8013a9a:	f007 fb3b 	bl	801b114 <trace_printf>
 8013a9e:	4985      	ldr	r1, [pc, #532]	; (8013cb4 <tcp_write+0x610>)
 8013aa0:	4885      	ldr	r0, [pc, #532]	; (8013cb8 <tcp_write+0x614>)
 8013aa2:	f007 fb37 	bl	801b114 <trace_printf>
 8013aa6:	e7fe      	b.n	8013aa6 <tcp_write+0x402>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 8013aa8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013aaa:	685a      	ldr	r2, [r3, #4]
 8013aac:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8013ab0:	18d0      	adds	r0, r2, r3
 8013ab2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8013ab6:	68ba      	ldr	r2, [r7, #8]
 8013ab8:	4413      	add	r3, r2
 8013aba:	8bba      	ldrh	r2, [r7, #28]
 8013abc:	4619      	mov	r1, r3
 8013abe:	f007 fb7d 	bl	801b1bc <memcpy>
 8013ac2:	e033      	b.n	8013b2c <tcp_write+0x488>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8013ac4:	8afb      	ldrh	r3, [r7, #22]
 8013ac6:	2b00      	cmp	r3, #0
 8013ac8:	d00a      	beq.n	8013ae0 <tcp_write+0x43c>
 8013aca:	f240 2271 	movw	r2, #625	; 0x271
 8013ace:	497c      	ldr	r1, [pc, #496]	; (8013cc0 <tcp_write+0x61c>)
 8013ad0:	4877      	ldr	r0, [pc, #476]	; (8013cb0 <tcp_write+0x60c>)
 8013ad2:	f007 fb1f 	bl	801b114 <trace_printf>
 8013ad6:	4977      	ldr	r1, [pc, #476]	; (8013cb4 <tcp_write+0x610>)
 8013ad8:	4877      	ldr	r0, [pc, #476]	; (8013cb8 <tcp_write+0x614>)
 8013ada:	f007 fb1b 	bl	801b114 <trace_printf>
 8013ade:	e7fe      	b.n	8013ade <tcp_write+0x43a>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 8013ae0:	8bbb      	ldrh	r3, [r7, #28]
 8013ae2:	2201      	movs	r2, #1
 8013ae4:	4619      	mov	r1, r3
 8013ae6:	2036      	movs	r0, #54	; 0x36
 8013ae8:	f7fa fb2c 	bl	800e144 <pbuf_alloc>
 8013aec:	61b8      	str	r0, [r7, #24]
 8013aee:	69bb      	ldr	r3, [r7, #24]
 8013af0:	2b00      	cmp	r3, #0
 8013af2:	f000 8195 	beq.w	8013e20 <tcp_write+0x77c>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 8013af6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8013afa:	68ba      	ldr	r2, [r7, #8]
 8013afc:	441a      	add	r2, r3
 8013afe:	69bb      	ldr	r3, [r7, #24]
 8013b00:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8013b02:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8013b06:	b29b      	uxth	r3, r3
 8013b08:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013b0c:	4619      	mov	r1, r3
 8013b0e:	2036      	movs	r0, #54	; 0x36
 8013b10:	f7fa fb18 	bl	800e144 <pbuf_alloc>
 8013b14:	6378      	str	r0, [r7, #52]	; 0x34
 8013b16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013b18:	2b00      	cmp	r3, #0
 8013b1a:	d103      	bne.n	8013b24 <tcp_write+0x480>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 8013b1c:	69b8      	ldr	r0, [r7, #24]
 8013b1e:	f7fa fe27 	bl	800e770 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8013b22:	e180      	b.n	8013e26 <tcp_write+0x782>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 8013b24:	69b9      	ldr	r1, [r7, #24]
 8013b26:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8013b28:	f7fa ff08 	bl	800e93c <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 8013b2c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8013b2e:	f7fa febf 	bl	800e8b0 <pbuf_clen>
 8013b32:	4603      	mov	r3, r0
 8013b34:	461a      	mov	r2, r3
 8013b36:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8013b3a:	4413      	add	r3, r2
 8013b3c:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 8013b40:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8013b44:	2b09      	cmp	r3, #9
 8013b46:	d903      	bls.n	8013b50 <tcp_write+0x4ac>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 8013b48:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8013b4a:	f7fa fe11 	bl	800e770 <pbuf_free>
      goto memerr;
 8013b4e:	e16a      	b.n	8013e26 <tcp_write+0x782>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8013b50:	68fb      	ldr	r3, [r7, #12]
 8013b52:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8013b54:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8013b58:	441a      	add	r2, r3
 8013b5a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8013b5e:	9300      	str	r3, [sp, #0]
 8013b60:	4613      	mov	r3, r2
 8013b62:	2200      	movs	r2, #0
 8013b64:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8013b66:	68f8      	ldr	r0, [r7, #12]
 8013b68:	f7ff fbca 	bl	8013300 <tcp_create_segment>
 8013b6c:	6578      	str	r0, [r7, #84]	; 0x54
 8013b6e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013b70:	2b00      	cmp	r3, #0
 8013b72:	f000 8157 	beq.w	8013e24 <tcp_write+0x780>
      goto memerr;
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = oversize;
 8013b76:	8afa      	ldrh	r2, [r7, #22]
 8013b78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013b7a:	815a      	strh	r2, [r3, #10]
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 8013b7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013b7e:	2b00      	cmp	r3, #0
 8013b80:	d102      	bne.n	8013b88 <tcp_write+0x4e4>
      queue = seg;
 8013b82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013b84:	64fb      	str	r3, [r7, #76]	; 0x4c
 8013b86:	e010      	b.n	8013baa <tcp_write+0x506>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8013b88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013b8a:	2b00      	cmp	r3, #0
 8013b8c:	d10a      	bne.n	8013ba4 <tcp_write+0x500>
 8013b8e:	f240 22ab 	movw	r2, #683	; 0x2ab
 8013b92:	494c      	ldr	r1, [pc, #304]	; (8013cc4 <tcp_write+0x620>)
 8013b94:	4846      	ldr	r0, [pc, #280]	; (8013cb0 <tcp_write+0x60c>)
 8013b96:	f007 fabd 	bl	801b114 <trace_printf>
 8013b9a:	4946      	ldr	r1, [pc, #280]	; (8013cb4 <tcp_write+0x610>)
 8013b9c:	4846      	ldr	r0, [pc, #280]	; (8013cb8 <tcp_write+0x614>)
 8013b9e:	f007 fab9 	bl	801b114 <trace_printf>
 8013ba2:	e7fe      	b.n	8013ba2 <tcp_write+0x4fe>
      prev_seg->next = seg;
 8013ba4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013ba6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8013ba8:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 8013baa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013bac:	653b      	str	r3, [r7, #80]	; 0x50

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 8013bae:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 8013bb2:	8bbb      	ldrh	r3, [r7, #28]
 8013bb4:	4413      	add	r3, r2
 8013bb6:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
  while (pos < len) {
 8013bba:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 8013bbe:	88fb      	ldrh	r3, [r7, #6]
 8013bc0:	429a      	cmp	r2, r3
 8013bc2:	f4ff af2e 	bcc.w	8013a22 <tcp_write+0x37e>
  /*
   * All three segmentation phases were successful. We can commit the
   * transaction.
   */
#if TCP_OVERSIZE_DBGCHECK
  if ((last_unsent != NULL) && (oversize_add != 0)) {
 8013bc6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013bc8:	2b00      	cmp	r3, #0
 8013bca:	d00b      	beq.n	8013be4 <tcp_write+0x540>
 8013bcc:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8013bd0:	2b00      	cmp	r3, #0
 8013bd2:	d007      	beq.n	8013be4 <tcp_write+0x540>
    last_unsent->oversize_left += oversize_add;
 8013bd4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013bd6:	895a      	ldrh	r2, [r3, #10]
 8013bd8:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8013bdc:	4413      	add	r3, r2
 8013bde:	b29a      	uxth	r2, r3
 8013be0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013be2:	815a      	strh	r2, [r3, #10]
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 8013be4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8013be8:	2b00      	cmp	r3, #0
 8013bea:	d049      	beq.n	8013c80 <tcp_write+0x5dc>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 8013bec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013bee:	685b      	ldr	r3, [r3, #4]
 8013bf0:	633b      	str	r3, [r7, #48]	; 0x30
 8013bf2:	e021      	b.n	8013c38 <tcp_write+0x594>
      p->tot_len += oversize_used;
 8013bf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013bf6:	891a      	ldrh	r2, [r3, #8]
 8013bf8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8013bfc:	4413      	add	r3, r2
 8013bfe:	b29a      	uxth	r2, r3
 8013c00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013c02:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 8013c04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013c06:	681b      	ldr	r3, [r3, #0]
 8013c08:	2b00      	cmp	r3, #0
 8013c0a:	d112      	bne.n	8013c32 <tcp_write+0x58e>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8013c0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013c0e:	685b      	ldr	r3, [r3, #4]
 8013c10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013c12:	8952      	ldrh	r2, [r2, #10]
 8013c14:	4413      	add	r3, r2
 8013c16:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8013c1a:	68b9      	ldr	r1, [r7, #8]
 8013c1c:	4618      	mov	r0, r3
 8013c1e:	f007 facd 	bl	801b1bc <memcpy>
        p->len += oversize_used;
 8013c22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013c24:	895a      	ldrh	r2, [r3, #10]
 8013c26:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8013c2a:	4413      	add	r3, r2
 8013c2c:	b29a      	uxth	r2, r3
 8013c2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013c30:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8013c32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013c34:	681b      	ldr	r3, [r3, #0]
 8013c36:	633b      	str	r3, [r7, #48]	; 0x30
 8013c38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013c3a:	2b00      	cmp	r3, #0
 8013c3c:	d1da      	bne.n	8013bf4 <tcp_write+0x550>
      }
    }
    last_unsent->len += oversize_used;
 8013c3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013c40:	891a      	ldrh	r2, [r3, #8]
 8013c42:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8013c46:	4413      	add	r3, r2
 8013c48:	b29a      	uxth	r2, r3
 8013c4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013c4c:	811a      	strh	r2, [r3, #8]
#if TCP_OVERSIZE_DBGCHECK
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
 8013c4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013c50:	895b      	ldrh	r3, [r3, #10]
 8013c52:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8013c56:	429a      	cmp	r2, r3
 8013c58:	d90a      	bls.n	8013c70 <tcp_write+0x5cc>
 8013c5a:	f240 22d3 	movw	r2, #723	; 0x2d3
 8013c5e:	491a      	ldr	r1, [pc, #104]	; (8013cc8 <tcp_write+0x624>)
 8013c60:	4813      	ldr	r0, [pc, #76]	; (8013cb0 <tcp_write+0x60c>)
 8013c62:	f007 fa57 	bl	801b114 <trace_printf>
 8013c66:	4913      	ldr	r1, [pc, #76]	; (8013cb4 <tcp_write+0x610>)
 8013c68:	4813      	ldr	r0, [pc, #76]	; (8013cb8 <tcp_write+0x614>)
 8013c6a:	f007 fa53 	bl	801b114 <trace_printf>
 8013c6e:	e7fe      	b.n	8013c6e <tcp_write+0x5ca>
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
 8013c70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013c72:	895a      	ldrh	r2, [r3, #10]
 8013c74:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8013c78:	1ad3      	subs	r3, r2, r3
 8013c7a:	b29a      	uxth	r2, r3
 8013c7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013c7e:	815a      	strh	r2, [r3, #10]
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 8013c80:	8afa      	ldrh	r2, [r7, #22]
 8013c82:	68fb      	ldr	r3, [r7, #12]
 8013c84:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 8013c88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013c8a:	2b00      	cmp	r3, #0
 8013c8c:	d02f      	beq.n	8013cee <tcp_write+0x64a>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8013c8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013c90:	2b00      	cmp	r3, #0
 8013c92:	d11d      	bne.n	8013cd0 <tcp_write+0x62c>
 8013c94:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 8013c98:	490c      	ldr	r1, [pc, #48]	; (8013ccc <tcp_write+0x628>)
 8013c9a:	4805      	ldr	r0, [pc, #20]	; (8013cb0 <tcp_write+0x60c>)
 8013c9c:	f007 fa3a 	bl	801b114 <trace_printf>
 8013ca0:	4904      	ldr	r1, [pc, #16]	; (8013cb4 <tcp_write+0x610>)
 8013ca2:	4805      	ldr	r0, [pc, #20]	; (8013cb8 <tcp_write+0x614>)
 8013ca4:	f007 fa36 	bl	801b114 <trace_printf>
 8013ca8:	e7fe      	b.n	8013ca8 <tcp_write+0x604>
 8013caa:	bf00      	nop
 8013cac:	0801f10c 	.word	0x0801f10c
 8013cb0:	0801ee90 	.word	0x0801ee90
 8013cb4:	0801eeb0 	.word	0x0801eeb0
 8013cb8:	0801eee4 	.word	0x0801eee4
 8013cbc:	0801f13c 	.word	0x0801f13c
 8013cc0:	0801f17c 	.word	0x0801f17c
 8013cc4:	0801f18c 	.word	0x0801f18c
 8013cc8:	0801f1a0 	.word	0x0801f1a0
 8013ccc:	0801f1cc 	.word	0x0801f1cc
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8013cd0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013cd2:	685b      	ldr	r3, [r3, #4]
 8013cd4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8013cd6:	4618      	mov	r0, r3
 8013cd8:	f7fa fe30 	bl	800e93c <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8013cdc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013cde:	891a      	ldrh	r2, [r3, #8]
 8013ce0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013ce2:	891b      	ldrh	r3, [r3, #8]
 8013ce4:	4413      	add	r3, r2
 8013ce6:	b29a      	uxth	r2, r3
 8013ce8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013cea:	811a      	strh	r2, [r3, #8]
 8013cec:	e040      	b.n	8013d70 <tcp_write+0x6cc>
  } else if (extendlen > 0) {
 8013cee:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8013cf2:	2b00      	cmp	r3, #0
 8013cf4:	d03c      	beq.n	8013d70 <tcp_write+0x6cc>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8013cf6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013cf8:	2b00      	cmp	r3, #0
 8013cfa:	d003      	beq.n	8013d04 <tcp_write+0x660>
 8013cfc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013cfe:	685b      	ldr	r3, [r3, #4]
 8013d00:	2b00      	cmp	r3, #0
 8013d02:	d10a      	bne.n	8013d1a <tcp_write+0x676>
 8013d04:	f240 22e6 	movw	r2, #742	; 0x2e6
 8013d08:	4963      	ldr	r1, [pc, #396]	; (8013e98 <tcp_write+0x7f4>)
 8013d0a:	4864      	ldr	r0, [pc, #400]	; (8013e9c <tcp_write+0x7f8>)
 8013d0c:	f007 fa02 	bl	801b114 <trace_printf>
 8013d10:	4963      	ldr	r1, [pc, #396]	; (8013ea0 <tcp_write+0x7fc>)
 8013d12:	4864      	ldr	r0, [pc, #400]	; (8013ea4 <tcp_write+0x800>)
 8013d14:	f007 f9fe 	bl	801b114 <trace_printf>
 8013d18:	e7fe      	b.n	8013d18 <tcp_write+0x674>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8013d1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013d1c:	685b      	ldr	r3, [r3, #4]
 8013d1e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013d20:	e00a      	b.n	8013d38 <tcp_write+0x694>
      p->tot_len += extendlen;
 8013d22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d24:	891a      	ldrh	r2, [r3, #8]
 8013d26:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8013d2a:	4413      	add	r3, r2
 8013d2c:	b29a      	uxth	r2, r3
 8013d2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d30:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8013d32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d34:	681b      	ldr	r3, [r3, #0]
 8013d36:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013d38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d3a:	681b      	ldr	r3, [r3, #0]
 8013d3c:	2b00      	cmp	r3, #0
 8013d3e:	d1f0      	bne.n	8013d22 <tcp_write+0x67e>
    }
    p->tot_len += extendlen;
 8013d40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d42:	891a      	ldrh	r2, [r3, #8]
 8013d44:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8013d48:	4413      	add	r3, r2
 8013d4a:	b29a      	uxth	r2, r3
 8013d4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d4e:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 8013d50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d52:	895a      	ldrh	r2, [r3, #10]
 8013d54:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8013d58:	4413      	add	r3, r2
 8013d5a:	b29a      	uxth	r2, r3
 8013d5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d5e:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8013d60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013d62:	891a      	ldrh	r2, [r3, #8]
 8013d64:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8013d68:	4413      	add	r3, r2
 8013d6a:	b29a      	uxth	r2, r3
 8013d6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013d6e:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 8013d70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013d72:	2b00      	cmp	r3, #0
 8013d74:	d103      	bne.n	8013d7e <tcp_write+0x6da>
    pcb->unsent = queue;
 8013d76:	68fb      	ldr	r3, [r7, #12]
 8013d78:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8013d7a:	66da      	str	r2, [r3, #108]	; 0x6c
 8013d7c:	e002      	b.n	8013d84 <tcp_write+0x6e0>
  } else {
    last_unsent->next = queue;
 8013d7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013d80:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8013d82:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 8013d84:	68fb      	ldr	r3, [r7, #12]
 8013d86:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8013d88:	88fb      	ldrh	r3, [r7, #6]
 8013d8a:	441a      	add	r2, r3
 8013d8c:	68fb      	ldr	r3, [r7, #12]
 8013d8e:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 8013d90:	68fb      	ldr	r3, [r7, #12]
 8013d92:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8013d96:	88fb      	ldrh	r3, [r7, #6]
 8013d98:	1ad3      	subs	r3, r2, r3
 8013d9a:	b29a      	uxth	r2, r3
 8013d9c:	68fb      	ldr	r3, [r7, #12]
 8013d9e:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 8013da2:	68fb      	ldr	r3, [r7, #12]
 8013da4:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8013da8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8013dac:	68fb      	ldr	r3, [r7, #12]
 8013dae:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013db2:	2b00      	cmp	r3, #0
 8013db4:	d012      	beq.n	8013ddc <tcp_write+0x738>
    LWIP_ASSERT("tcp_write: valid queue length",
 8013db6:	68fb      	ldr	r3, [r7, #12]
 8013db8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013dba:	2b00      	cmp	r3, #0
 8013dbc:	d10e      	bne.n	8013ddc <tcp_write+0x738>
 8013dbe:	68fb      	ldr	r3, [r7, #12]
 8013dc0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013dc2:	2b00      	cmp	r3, #0
 8013dc4:	d10a      	bne.n	8013ddc <tcp_write+0x738>
 8013dc6:	f240 3212 	movw	r2, #786	; 0x312
 8013dca:	4937      	ldr	r1, [pc, #220]	; (8013ea8 <tcp_write+0x804>)
 8013dcc:	4833      	ldr	r0, [pc, #204]	; (8013e9c <tcp_write+0x7f8>)
 8013dce:	f007 f9a1 	bl	801b114 <trace_printf>
 8013dd2:	4933      	ldr	r1, [pc, #204]	; (8013ea0 <tcp_write+0x7fc>)
 8013dd4:	4833      	ldr	r0, [pc, #204]	; (8013ea4 <tcp_write+0x800>)
 8013dd6:	f007 f99d 	bl	801b114 <trace_printf>
 8013dda:	e7fe      	b.n	8013dda <tcp_write+0x736>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 8013ddc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013dde:	2b00      	cmp	r3, #0
 8013de0:	d016      	beq.n	8013e10 <tcp_write+0x76c>
 8013de2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013de4:	691b      	ldr	r3, [r3, #16]
 8013de6:	2b00      	cmp	r3, #0
 8013de8:	d012      	beq.n	8013e10 <tcp_write+0x76c>
 8013dea:	797b      	ldrb	r3, [r7, #5]
 8013dec:	f003 0302 	and.w	r3, r3, #2
 8013df0:	2b00      	cmp	r3, #0
 8013df2:	d10d      	bne.n	8013e10 <tcp_write+0x76c>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8013df4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013df6:	691b      	ldr	r3, [r3, #16]
 8013df8:	899b      	ldrh	r3, [r3, #12]
 8013dfa:	b29c      	uxth	r4, r3
 8013dfc:	2008      	movs	r0, #8
 8013dfe:	f7f8 ffa1 	bl	800cd44 <lwip_htons>
 8013e02:	4603      	mov	r3, r0
 8013e04:	461a      	mov	r2, r3
 8013e06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013e08:	691b      	ldr	r3, [r3, #16]
 8013e0a:	4322      	orrs	r2, r4
 8013e0c:	b292      	uxth	r2, r2
 8013e0e:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 8013e10:	2300      	movs	r3, #0
 8013e12:	e03d      	b.n	8013e90 <tcp_write+0x7ec>
          goto memerr;
 8013e14:	bf00      	nop
 8013e16:	e006      	b.n	8013e26 <tcp_write+0x782>
            goto memerr;
 8013e18:	bf00      	nop
 8013e1a:	e004      	b.n	8013e26 <tcp_write+0x782>
        goto memerr;
 8013e1c:	bf00      	nop
 8013e1e:	e002      	b.n	8013e26 <tcp_write+0x782>
        goto memerr;
 8013e20:	bf00      	nop
 8013e22:	e000      	b.n	8013e26 <tcp_write+0x782>
      goto memerr;
 8013e24:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8013e26:	68fb      	ldr	r3, [r7, #12]
 8013e28:	8b5b      	ldrh	r3, [r3, #26]
 8013e2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013e2e:	b29a      	uxth	r2, r3
 8013e30:	68fb      	ldr	r3, [r7, #12]
 8013e32:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);
 8013e34:	4b1d      	ldr	r3, [pc, #116]	; (8013eac <tcp_write+0x808>)
 8013e36:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 8013e3a:	3301      	adds	r3, #1
 8013e3c:	b29a      	uxth	r2, r3
 8013e3e:	4b1b      	ldr	r3, [pc, #108]	; (8013eac <tcp_write+0x808>)
 8013e40:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c

  if (concat_p != NULL) {
 8013e44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013e46:	2b00      	cmp	r3, #0
 8013e48:	d002      	beq.n	8013e50 <tcp_write+0x7ac>
    pbuf_free(concat_p);
 8013e4a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8013e4c:	f7fa fc90 	bl	800e770 <pbuf_free>
  }
  if (queue != NULL) {
 8013e50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013e52:	2b00      	cmp	r3, #0
 8013e54:	d002      	beq.n	8013e5c <tcp_write+0x7b8>
    tcp_segs_free(queue);
 8013e56:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8013e58:	f7fc f90c 	bl	8010074 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 8013e5c:	68fb      	ldr	r3, [r7, #12]
 8013e5e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013e62:	2b00      	cmp	r3, #0
 8013e64:	d012      	beq.n	8013e8c <tcp_write+0x7e8>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8013e66:	68fb      	ldr	r3, [r7, #12]
 8013e68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013e6a:	2b00      	cmp	r3, #0
 8013e6c:	d10e      	bne.n	8013e8c <tcp_write+0x7e8>
 8013e6e:	68fb      	ldr	r3, [r7, #12]
 8013e70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013e72:	2b00      	cmp	r3, #0
 8013e74:	d10a      	bne.n	8013e8c <tcp_write+0x7e8>
 8013e76:	f240 3227 	movw	r2, #807	; 0x327
 8013e7a:	490b      	ldr	r1, [pc, #44]	; (8013ea8 <tcp_write+0x804>)
 8013e7c:	4807      	ldr	r0, [pc, #28]	; (8013e9c <tcp_write+0x7f8>)
 8013e7e:	f007 f949 	bl	801b114 <trace_printf>
 8013e82:	4907      	ldr	r1, [pc, #28]	; (8013ea0 <tcp_write+0x7fc>)
 8013e84:	4807      	ldr	r0, [pc, #28]	; (8013ea4 <tcp_write+0x800>)
 8013e86:	f007 f945 	bl	801b114 <trace_printf>
 8013e8a:	e7fe      	b.n	8013e8a <tcp_write+0x7e6>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 8013e8c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8013e90:	4618      	mov	r0, r3
 8013e92:	3764      	adds	r7, #100	; 0x64
 8013e94:	46bd      	mov	sp, r7
 8013e96:	bd90      	pop	{r4, r7, pc}
 8013e98:	0801f204 	.word	0x0801f204
 8013e9c:	0801ee90 	.word	0x0801ee90
 8013ea0:	0801eeb0 	.word	0x0801eeb0
 8013ea4:	0801eee4 	.word	0x0801eee4
 8013ea8:	0801f23c 	.word	0x0801f23c
 8013eac:	20010b7c 	.word	0x20010b7c

08013eb0 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8013eb0:	b590      	push	{r4, r7, lr}
 8013eb2:	b08b      	sub	sp, #44	; 0x2c
 8013eb4:	af02      	add	r7, sp, #8
 8013eb6:	6078      	str	r0, [r7, #4]
 8013eb8:	460b      	mov	r3, r1
 8013eba:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8013ebc:	2300      	movs	r3, #0
 8013ebe:	61bb      	str	r3, [r7, #24]
 8013ec0:	2300      	movs	r3, #0
 8013ec2:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8013ec4:	2300      	movs	r3, #0
 8013ec6:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8013ec8:	687b      	ldr	r3, [r7, #4]
 8013eca:	2b00      	cmp	r3, #0
 8013ecc:	d10a      	bne.n	8013ee4 <tcp_split_unsent_seg+0x34>
 8013ece:	f240 324b 	movw	r2, #843	; 0x34b
 8013ed2:	49a2      	ldr	r1, [pc, #648]	; (801415c <tcp_split_unsent_seg+0x2ac>)
 8013ed4:	48a2      	ldr	r0, [pc, #648]	; (8014160 <tcp_split_unsent_seg+0x2b0>)
 8013ed6:	f007 f91d 	bl	801b114 <trace_printf>
 8013eda:	49a2      	ldr	r1, [pc, #648]	; (8014164 <tcp_split_unsent_seg+0x2b4>)
 8013edc:	48a2      	ldr	r0, [pc, #648]	; (8014168 <tcp_split_unsent_seg+0x2b8>)
 8013ede:	f007 f919 	bl	801b114 <trace_printf>
 8013ee2:	e7fe      	b.n	8013ee2 <tcp_split_unsent_seg+0x32>

  useg = pcb->unsent;
 8013ee4:	687b      	ldr	r3, [r7, #4]
 8013ee6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013ee8:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8013eea:	697b      	ldr	r3, [r7, #20]
 8013eec:	2b00      	cmp	r3, #0
 8013eee:	d102      	bne.n	8013ef6 <tcp_split_unsent_seg+0x46>
    return ERR_MEM;
 8013ef0:	f04f 33ff 	mov.w	r3, #4294967295
 8013ef4:	e12e      	b.n	8014154 <tcp_split_unsent_seg+0x2a4>
  }

  if (split == 0) {
 8013ef6:	887b      	ldrh	r3, [r7, #2]
 8013ef8:	2b00      	cmp	r3, #0
 8013efa:	d10a      	bne.n	8013f12 <tcp_split_unsent_seg+0x62>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8013efc:	f240 3253 	movw	r2, #851	; 0x353
 8013f00:	499a      	ldr	r1, [pc, #616]	; (801416c <tcp_split_unsent_seg+0x2bc>)
 8013f02:	4897      	ldr	r0, [pc, #604]	; (8014160 <tcp_split_unsent_seg+0x2b0>)
 8013f04:	f007 f906 	bl	801b114 <trace_printf>
 8013f08:	4996      	ldr	r1, [pc, #600]	; (8014164 <tcp_split_unsent_seg+0x2b4>)
 8013f0a:	4897      	ldr	r0, [pc, #604]	; (8014168 <tcp_split_unsent_seg+0x2b8>)
 8013f0c:	f007 f902 	bl	801b114 <trace_printf>
 8013f10:	e7fe      	b.n	8013f10 <tcp_split_unsent_seg+0x60>
    return ERR_VAL;
  }

  if (useg->len <= split) {
 8013f12:	697b      	ldr	r3, [r7, #20]
 8013f14:	891b      	ldrh	r3, [r3, #8]
 8013f16:	887a      	ldrh	r2, [r7, #2]
 8013f18:	429a      	cmp	r2, r3
 8013f1a:	d301      	bcc.n	8013f20 <tcp_split_unsent_seg+0x70>
    return ERR_OK;
 8013f1c:	2300      	movs	r3, #0
 8013f1e:	e119      	b.n	8014154 <tcp_split_unsent_seg+0x2a4>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8013f20:	687b      	ldr	r3, [r7, #4]
 8013f22:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013f24:	887a      	ldrh	r2, [r7, #2]
 8013f26:	429a      	cmp	r2, r3
 8013f28:	d90a      	bls.n	8013f40 <tcp_split_unsent_seg+0x90>
 8013f2a:	f240 325b 	movw	r2, #859	; 0x35b
 8013f2e:	4990      	ldr	r1, [pc, #576]	; (8014170 <tcp_split_unsent_seg+0x2c0>)
 8013f30:	488b      	ldr	r0, [pc, #556]	; (8014160 <tcp_split_unsent_seg+0x2b0>)
 8013f32:	f007 f8ef 	bl	801b114 <trace_printf>
 8013f36:	498b      	ldr	r1, [pc, #556]	; (8014164 <tcp_split_unsent_seg+0x2b4>)
 8013f38:	488b      	ldr	r0, [pc, #556]	; (8014168 <tcp_split_unsent_seg+0x2b8>)
 8013f3a:	f007 f8eb 	bl	801b114 <trace_printf>
 8013f3e:	e7fe      	b.n	8013f3e <tcp_split_unsent_seg+0x8e>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8013f40:	697b      	ldr	r3, [r7, #20]
 8013f42:	891b      	ldrh	r3, [r3, #8]
 8013f44:	2b00      	cmp	r3, #0
 8013f46:	d10a      	bne.n	8013f5e <tcp_split_unsent_seg+0xae>
 8013f48:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8013f4c:	4989      	ldr	r1, [pc, #548]	; (8014174 <tcp_split_unsent_seg+0x2c4>)
 8013f4e:	4884      	ldr	r0, [pc, #528]	; (8014160 <tcp_split_unsent_seg+0x2b0>)
 8013f50:	f007 f8e0 	bl	801b114 <trace_printf>
 8013f54:	4983      	ldr	r1, [pc, #524]	; (8014164 <tcp_split_unsent_seg+0x2b4>)
 8013f56:	4884      	ldr	r0, [pc, #528]	; (8014168 <tcp_split_unsent_seg+0x2b8>)
 8013f58:	f007 f8dc 	bl	801b114 <trace_printf>
 8013f5c:	e7fe      	b.n	8013f5c <tcp_split_unsent_seg+0xac>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8013f5e:	697b      	ldr	r3, [r7, #20]
 8013f60:	7b1b      	ldrb	r3, [r3, #12]
 8013f62:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8013f64:	7bfb      	ldrb	r3, [r7, #15]
 8013f66:	009b      	lsls	r3, r3, #2
 8013f68:	b2db      	uxtb	r3, r3
 8013f6a:	f003 0304 	and.w	r3, r3, #4
 8013f6e:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8013f70:	697b      	ldr	r3, [r7, #20]
 8013f72:	891a      	ldrh	r2, [r3, #8]
 8013f74:	887b      	ldrh	r3, [r7, #2]
 8013f76:	1ad3      	subs	r3, r2, r3
 8013f78:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8013f7a:	7bbb      	ldrb	r3, [r7, #14]
 8013f7c:	b29a      	uxth	r2, r3
 8013f7e:	89bb      	ldrh	r3, [r7, #12]
 8013f80:	4413      	add	r3, r2
 8013f82:	b29b      	uxth	r3, r3
 8013f84:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013f88:	4619      	mov	r1, r3
 8013f8a:	2036      	movs	r0, #54	; 0x36
 8013f8c:	f7fa f8da 	bl	800e144 <pbuf_alloc>
 8013f90:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8013f92:	693b      	ldr	r3, [r7, #16]
 8013f94:	2b00      	cmp	r3, #0
 8013f96:	f000 80ba 	beq.w	801410e <tcp_split_unsent_seg+0x25e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8013f9a:	697b      	ldr	r3, [r7, #20]
 8013f9c:	685b      	ldr	r3, [r3, #4]
 8013f9e:	891a      	ldrh	r2, [r3, #8]
 8013fa0:	697b      	ldr	r3, [r7, #20]
 8013fa2:	891b      	ldrh	r3, [r3, #8]
 8013fa4:	1ad3      	subs	r3, r2, r3
 8013fa6:	b29a      	uxth	r2, r3
 8013fa8:	887b      	ldrh	r3, [r7, #2]
 8013faa:	4413      	add	r3, r2
 8013fac:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8013fae:	697b      	ldr	r3, [r7, #20]
 8013fb0:	6858      	ldr	r0, [r3, #4]
 8013fb2:	693b      	ldr	r3, [r7, #16]
 8013fb4:	685a      	ldr	r2, [r3, #4]
 8013fb6:	7bbb      	ldrb	r3, [r7, #14]
 8013fb8:	18d1      	adds	r1, r2, r3
 8013fba:	897b      	ldrh	r3, [r7, #10]
 8013fbc:	89ba      	ldrh	r2, [r7, #12]
 8013fbe:	f7fa fe0f 	bl	800ebe0 <pbuf_copy_partial>
 8013fc2:	4603      	mov	r3, r0
 8013fc4:	461a      	mov	r2, r3
 8013fc6:	89bb      	ldrh	r3, [r7, #12]
 8013fc8:	4293      	cmp	r3, r2
 8013fca:	f040 80a2 	bne.w	8014112 <tcp_split_unsent_seg+0x262>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8013fce:	697b      	ldr	r3, [r7, #20]
 8013fd0:	691b      	ldr	r3, [r3, #16]
 8013fd2:	899b      	ldrh	r3, [r3, #12]
 8013fd4:	b29b      	uxth	r3, r3
 8013fd6:	4618      	mov	r0, r3
 8013fd8:	f7f8 feb4 	bl	800cd44 <lwip_htons>
 8013fdc:	4603      	mov	r3, r0
 8013fde:	b2db      	uxtb	r3, r3
 8013fe0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8013fe4:	77fb      	strb	r3, [r7, #31]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8013fe6:	2300      	movs	r3, #0
 8013fe8:	77bb      	strb	r3, [r7, #30]

  if (split_flags & TCP_PSH) {
 8013fea:	7ffb      	ldrb	r3, [r7, #31]
 8013fec:	f003 0308 	and.w	r3, r3, #8
 8013ff0:	2b00      	cmp	r3, #0
 8013ff2:	d007      	beq.n	8014004 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_PSH;
 8013ff4:	7ffb      	ldrb	r3, [r7, #31]
 8013ff6:	f023 0308 	bic.w	r3, r3, #8
 8013ffa:	77fb      	strb	r3, [r7, #31]
    remainder_flags |= TCP_PSH;
 8013ffc:	7fbb      	ldrb	r3, [r7, #30]
 8013ffe:	f043 0308 	orr.w	r3, r3, #8
 8014002:	77bb      	strb	r3, [r7, #30]
  }
  if (split_flags & TCP_FIN) {
 8014004:	7ffb      	ldrb	r3, [r7, #31]
 8014006:	f003 0301 	and.w	r3, r3, #1
 801400a:	2b00      	cmp	r3, #0
 801400c:	d007      	beq.n	801401e <tcp_split_unsent_seg+0x16e>
    split_flags &= ~TCP_FIN;
 801400e:	7ffb      	ldrb	r3, [r7, #31]
 8014010:	f023 0301 	bic.w	r3, r3, #1
 8014014:	77fb      	strb	r3, [r7, #31]
    remainder_flags |= TCP_FIN;
 8014016:	7fbb      	ldrb	r3, [r7, #30]
 8014018:	f043 0301 	orr.w	r3, r3, #1
 801401c:	77bb      	strb	r3, [r7, #30]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 801401e:	697b      	ldr	r3, [r7, #20]
 8014020:	691b      	ldr	r3, [r3, #16]
 8014022:	685b      	ldr	r3, [r3, #4]
 8014024:	4618      	mov	r0, r3
 8014026:	f7f8 fea2 	bl	800cd6e <lwip_htonl>
 801402a:	4602      	mov	r2, r0
 801402c:	887b      	ldrh	r3, [r7, #2]
 801402e:	18d1      	adds	r1, r2, r3
 8014030:	7fba      	ldrb	r2, [r7, #30]
 8014032:	7bfb      	ldrb	r3, [r7, #15]
 8014034:	9300      	str	r3, [sp, #0]
 8014036:	460b      	mov	r3, r1
 8014038:	6939      	ldr	r1, [r7, #16]
 801403a:	6878      	ldr	r0, [r7, #4]
 801403c:	f7ff f960 	bl	8013300 <tcp_create_segment>
 8014040:	61b8      	str	r0, [r7, #24]
  if (seg == NULL) {
 8014042:	69bb      	ldr	r3, [r7, #24]
 8014044:	2b00      	cmp	r3, #0
 8014046:	d066      	beq.n	8014116 <tcp_split_unsent_seg+0x266>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8014048:	697b      	ldr	r3, [r7, #20]
 801404a:	685b      	ldr	r3, [r3, #4]
 801404c:	4618      	mov	r0, r3
 801404e:	f7fa fc2f 	bl	800e8b0 <pbuf_clen>
 8014052:	4603      	mov	r3, r0
 8014054:	461a      	mov	r2, r3
 8014056:	687b      	ldr	r3, [r7, #4]
 8014058:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801405c:	1a9b      	subs	r3, r3, r2
 801405e:	b29a      	uxth	r2, r3
 8014060:	687b      	ldr	r3, [r7, #4]
 8014062:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8014066:	697b      	ldr	r3, [r7, #20]
 8014068:	6858      	ldr	r0, [r3, #4]
 801406a:	697b      	ldr	r3, [r7, #20]
 801406c:	685b      	ldr	r3, [r3, #4]
 801406e:	891a      	ldrh	r2, [r3, #8]
 8014070:	89bb      	ldrh	r3, [r7, #12]
 8014072:	1ad3      	subs	r3, r2, r3
 8014074:	b29b      	uxth	r3, r3
 8014076:	4619      	mov	r1, r3
 8014078:	f7fa f9d8 	bl	800e42c <pbuf_realloc>
  useg->len -= remainder;
 801407c:	697b      	ldr	r3, [r7, #20]
 801407e:	891a      	ldrh	r2, [r3, #8]
 8014080:	89bb      	ldrh	r3, [r7, #12]
 8014082:	1ad3      	subs	r3, r2, r3
 8014084:	b29a      	uxth	r2, r3
 8014086:	697b      	ldr	r3, [r7, #20]
 8014088:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 801408a:	697b      	ldr	r3, [r7, #20]
 801408c:	691b      	ldr	r3, [r3, #16]
 801408e:	899b      	ldrh	r3, [r3, #12]
 8014090:	b29c      	uxth	r4, r3
 8014092:	7ffb      	ldrb	r3, [r7, #31]
 8014094:	b29b      	uxth	r3, r3
 8014096:	4618      	mov	r0, r3
 8014098:	f7f8 fe54 	bl	800cd44 <lwip_htons>
 801409c:	4603      	mov	r3, r0
 801409e:	461a      	mov	r2, r3
 80140a0:	697b      	ldr	r3, [r7, #20]
 80140a2:	691b      	ldr	r3, [r3, #16]
 80140a4:	4322      	orrs	r2, r4
 80140a6:	b292      	uxth	r2, r2
 80140a8:	819a      	strh	r2, [r3, #12]
#if TCP_OVERSIZE_DBGCHECK
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
 80140aa:	697b      	ldr	r3, [r7, #20]
 80140ac:	2200      	movs	r2, #0
 80140ae:	815a      	strh	r2, [r3, #10]
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 80140b0:	697b      	ldr	r3, [r7, #20]
 80140b2:	685b      	ldr	r3, [r3, #4]
 80140b4:	4618      	mov	r0, r3
 80140b6:	f7fa fbfb 	bl	800e8b0 <pbuf_clen>
 80140ba:	4603      	mov	r3, r0
 80140bc:	461a      	mov	r2, r3
 80140be:	687b      	ldr	r3, [r7, #4]
 80140c0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80140c4:	4413      	add	r3, r2
 80140c6:	b29a      	uxth	r2, r3
 80140c8:	687b      	ldr	r3, [r7, #4]
 80140ca:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80140ce:	69bb      	ldr	r3, [r7, #24]
 80140d0:	685b      	ldr	r3, [r3, #4]
 80140d2:	4618      	mov	r0, r3
 80140d4:	f7fa fbec 	bl	800e8b0 <pbuf_clen>
 80140d8:	4603      	mov	r3, r0
 80140da:	461a      	mov	r2, r3
 80140dc:	687b      	ldr	r3, [r7, #4]
 80140de:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80140e2:	4413      	add	r3, r2
 80140e4:	b29a      	uxth	r2, r3
 80140e6:	687b      	ldr	r3, [r7, #4]
 80140e8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 80140ec:	697b      	ldr	r3, [r7, #20]
 80140ee:	681a      	ldr	r2, [r3, #0]
 80140f0:	69bb      	ldr	r3, [r7, #24]
 80140f2:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 80140f4:	697b      	ldr	r3, [r7, #20]
 80140f6:	69ba      	ldr	r2, [r7, #24]
 80140f8:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 80140fa:	69bb      	ldr	r3, [r7, #24]
 80140fc:	681b      	ldr	r3, [r3, #0]
 80140fe:	2b00      	cmp	r3, #0
 8014100:	d103      	bne.n	801410a <tcp_split_unsent_seg+0x25a>
    pcb->unsent_oversize = 0;
 8014102:	687b      	ldr	r3, [r7, #4]
 8014104:	2200      	movs	r2, #0
 8014106:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 801410a:	2300      	movs	r3, #0
 801410c:	e022      	b.n	8014154 <tcp_split_unsent_seg+0x2a4>
    goto memerr;
 801410e:	bf00      	nop
 8014110:	e002      	b.n	8014118 <tcp_split_unsent_seg+0x268>
    goto memerr;
 8014112:	bf00      	nop
 8014114:	e000      	b.n	8014118 <tcp_split_unsent_seg+0x268>
    goto memerr;
 8014116:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);
 8014118:	4b17      	ldr	r3, [pc, #92]	; (8014178 <tcp_split_unsent_seg+0x2c8>)
 801411a:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 801411e:	3301      	adds	r3, #1
 8014120:	b29a      	uxth	r2, r3
 8014122:	4b15      	ldr	r3, [pc, #84]	; (8014178 <tcp_split_unsent_seg+0x2c8>)
 8014124:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8014128:	69bb      	ldr	r3, [r7, #24]
 801412a:	2b00      	cmp	r3, #0
 801412c:	d00a      	beq.n	8014144 <tcp_split_unsent_seg+0x294>
 801412e:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8014132:	4912      	ldr	r1, [pc, #72]	; (801417c <tcp_split_unsent_seg+0x2cc>)
 8014134:	480a      	ldr	r0, [pc, #40]	; (8014160 <tcp_split_unsent_seg+0x2b0>)
 8014136:	f006 ffed 	bl	801b114 <trace_printf>
 801413a:	490a      	ldr	r1, [pc, #40]	; (8014164 <tcp_split_unsent_seg+0x2b4>)
 801413c:	480a      	ldr	r0, [pc, #40]	; (8014168 <tcp_split_unsent_seg+0x2b8>)
 801413e:	f006 ffe9 	bl	801b114 <trace_printf>
 8014142:	e7fe      	b.n	8014142 <tcp_split_unsent_seg+0x292>
  if (p != NULL) {
 8014144:	693b      	ldr	r3, [r7, #16]
 8014146:	2b00      	cmp	r3, #0
 8014148:	d002      	beq.n	8014150 <tcp_split_unsent_seg+0x2a0>
    pbuf_free(p);
 801414a:	6938      	ldr	r0, [r7, #16]
 801414c:	f7fa fb10 	bl	800e770 <pbuf_free>
  }

  return ERR_MEM;
 8014150:	f04f 33ff 	mov.w	r3, #4294967295
}
 8014154:	4618      	mov	r0, r3
 8014156:	3724      	adds	r7, #36	; 0x24
 8014158:	46bd      	mov	sp, r7
 801415a:	bd90      	pop	{r4, r7, pc}
 801415c:	0801f25c 	.word	0x0801f25c
 8014160:	0801ee90 	.word	0x0801ee90
 8014164:	0801eeb0 	.word	0x0801eeb0
 8014168:	0801eee4 	.word	0x0801eee4
 801416c:	0801f280 	.word	0x0801f280
 8014170:	0801f2a4 	.word	0x0801f2a4
 8014174:	0801f2b4 	.word	0x0801f2b4
 8014178:	20010b7c 	.word	0x20010b7c
 801417c:	0801f2c4 	.word	0x0801f2c4

08014180 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8014180:	b590      	push	{r4, r7, lr}
 8014182:	b085      	sub	sp, #20
 8014184:	af00      	add	r7, sp, #0
 8014186:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8014188:	687b      	ldr	r3, [r7, #4]
 801418a:	2b00      	cmp	r3, #0
 801418c:	d10a      	bne.n	80141a4 <tcp_send_fin+0x24>
 801418e:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8014192:	4922      	ldr	r1, [pc, #136]	; (801421c <tcp_send_fin+0x9c>)
 8014194:	4822      	ldr	r0, [pc, #136]	; (8014220 <tcp_send_fin+0xa0>)
 8014196:	f006 ffbd 	bl	801b114 <trace_printf>
 801419a:	4922      	ldr	r1, [pc, #136]	; (8014224 <tcp_send_fin+0xa4>)
 801419c:	4822      	ldr	r0, [pc, #136]	; (8014228 <tcp_send_fin+0xa8>)
 801419e:	f006 ffb9 	bl	801b114 <trace_printf>
 80141a2:	e7fe      	b.n	80141a2 <tcp_send_fin+0x22>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 80141a4:	687b      	ldr	r3, [r7, #4]
 80141a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80141a8:	2b00      	cmp	r3, #0
 80141aa:	d02e      	beq.n	801420a <tcp_send_fin+0x8a>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80141ac:	687b      	ldr	r3, [r7, #4]
 80141ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80141b0:	60fb      	str	r3, [r7, #12]
 80141b2:	e002      	b.n	80141ba <tcp_send_fin+0x3a>
         last_unsent = last_unsent->next);
 80141b4:	68fb      	ldr	r3, [r7, #12]
 80141b6:	681b      	ldr	r3, [r3, #0]
 80141b8:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80141ba:	68fb      	ldr	r3, [r7, #12]
 80141bc:	681b      	ldr	r3, [r3, #0]
 80141be:	2b00      	cmp	r3, #0
 80141c0:	d1f8      	bne.n	80141b4 <tcp_send_fin+0x34>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 80141c2:	68fb      	ldr	r3, [r7, #12]
 80141c4:	691b      	ldr	r3, [r3, #16]
 80141c6:	899b      	ldrh	r3, [r3, #12]
 80141c8:	b29b      	uxth	r3, r3
 80141ca:	4618      	mov	r0, r3
 80141cc:	f7f8 fdba 	bl	800cd44 <lwip_htons>
 80141d0:	4603      	mov	r3, r0
 80141d2:	b2db      	uxtb	r3, r3
 80141d4:	f003 0307 	and.w	r3, r3, #7
 80141d8:	2b00      	cmp	r3, #0
 80141da:	d116      	bne.n	801420a <tcp_send_fin+0x8a>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 80141dc:	68fb      	ldr	r3, [r7, #12]
 80141de:	691b      	ldr	r3, [r3, #16]
 80141e0:	899b      	ldrh	r3, [r3, #12]
 80141e2:	b29c      	uxth	r4, r3
 80141e4:	2001      	movs	r0, #1
 80141e6:	f7f8 fdad 	bl	800cd44 <lwip_htons>
 80141ea:	4603      	mov	r3, r0
 80141ec:	461a      	mov	r2, r3
 80141ee:	68fb      	ldr	r3, [r7, #12]
 80141f0:	691b      	ldr	r3, [r3, #16]
 80141f2:	4322      	orrs	r2, r4
 80141f4:	b292      	uxth	r2, r2
 80141f6:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 80141f8:	687b      	ldr	r3, [r7, #4]
 80141fa:	8b5b      	ldrh	r3, [r3, #26]
 80141fc:	f043 0320 	orr.w	r3, r3, #32
 8014200:	b29a      	uxth	r2, r3
 8014202:	687b      	ldr	r3, [r7, #4]
 8014204:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8014206:	2300      	movs	r3, #0
 8014208:	e004      	b.n	8014214 <tcp_send_fin+0x94>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 801420a:	2101      	movs	r1, #1
 801420c:	6878      	ldr	r0, [r7, #4]
 801420e:	f000 f80d 	bl	801422c <tcp_enqueue_flags>
 8014212:	4603      	mov	r3, r0
}
 8014214:	4618      	mov	r0, r3
 8014216:	3714      	adds	r7, #20
 8014218:	46bd      	mov	sp, r7
 801421a:	bd90      	pop	{r4, r7, pc}
 801421c:	0801f2d0 	.word	0x0801f2d0
 8014220:	0801ee90 	.word	0x0801ee90
 8014224:	0801eeb0 	.word	0x0801eeb0
 8014228:	0801eee4 	.word	0x0801eee4

0801422c <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 801422c:	b580      	push	{r7, lr}
 801422e:	b088      	sub	sp, #32
 8014230:	af02      	add	r7, sp, #8
 8014232:	6078      	str	r0, [r7, #4]
 8014234:	460b      	mov	r3, r1
 8014236:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8014238:	2300      	movs	r3, #0
 801423a:	74fb      	strb	r3, [r7, #19]
  u8_t optlen = 0;
 801423c:	2300      	movs	r3, #0
 801423e:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8014240:	78fb      	ldrb	r3, [r7, #3]
 8014242:	f003 0303 	and.w	r3, r3, #3
 8014246:	2b00      	cmp	r3, #0
 8014248:	d10a      	bne.n	8014260 <tcp_enqueue_flags+0x34>
 801424a:	f240 4211 	movw	r2, #1041	; 0x411
 801424e:	497a      	ldr	r1, [pc, #488]	; (8014438 <tcp_enqueue_flags+0x20c>)
 8014250:	487a      	ldr	r0, [pc, #488]	; (801443c <tcp_enqueue_flags+0x210>)
 8014252:	f006 ff5f 	bl	801b114 <trace_printf>
 8014256:	497a      	ldr	r1, [pc, #488]	; (8014440 <tcp_enqueue_flags+0x214>)
 8014258:	487a      	ldr	r0, [pc, #488]	; (8014444 <tcp_enqueue_flags+0x218>)
 801425a:	f006 ff5b 	bl	801b114 <trace_printf>
 801425e:	e7fe      	b.n	801425e <tcp_enqueue_flags+0x32>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8014260:	687b      	ldr	r3, [r7, #4]
 8014262:	2b00      	cmp	r3, #0
 8014264:	d10a      	bne.n	801427c <tcp_enqueue_flags+0x50>
 8014266:	f240 4213 	movw	r2, #1043	; 0x413
 801426a:	4977      	ldr	r1, [pc, #476]	; (8014448 <tcp_enqueue_flags+0x21c>)
 801426c:	4873      	ldr	r0, [pc, #460]	; (801443c <tcp_enqueue_flags+0x210>)
 801426e:	f006 ff51 	bl	801b114 <trace_printf>
 8014272:	4973      	ldr	r1, [pc, #460]	; (8014440 <tcp_enqueue_flags+0x214>)
 8014274:	4873      	ldr	r0, [pc, #460]	; (8014444 <tcp_enqueue_flags+0x218>)
 8014276:	f006 ff4d 	bl	801b114 <trace_printf>
 801427a:	e7fe      	b.n	801427a <tcp_enqueue_flags+0x4e>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 801427c:	78fb      	ldrb	r3, [r7, #3]
 801427e:	f003 0302 	and.w	r3, r3, #2
 8014282:	2b00      	cmp	r3, #0
 8014284:	d001      	beq.n	801428a <tcp_enqueue_flags+0x5e>
    optflags = TF_SEG_OPTS_MSS;
 8014286:	2301      	movs	r3, #1
 8014288:	74fb      	strb	r3, [r7, #19]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801428a:	7cfb      	ldrb	r3, [r7, #19]
 801428c:	009b      	lsls	r3, r3, #2
 801428e:	b2db      	uxtb	r3, r3
 8014290:	f003 0304 	and.w	r3, r3, #4
 8014294:	74bb      	strb	r3, [r7, #18]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8014296:	7cbb      	ldrb	r3, [r7, #18]
 8014298:	b29b      	uxth	r3, r3
 801429a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801429e:	4619      	mov	r1, r3
 80142a0:	2036      	movs	r0, #54	; 0x36
 80142a2:	f7f9 ff4f 	bl	800e144 <pbuf_alloc>
 80142a6:	60f8      	str	r0, [r7, #12]
 80142a8:	68fb      	ldr	r3, [r7, #12]
 80142aa:	2b00      	cmp	r3, #0
 80142ac:	d111      	bne.n	80142d2 <tcp_enqueue_flags+0xa6>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80142ae:	687b      	ldr	r3, [r7, #4]
 80142b0:	8b5b      	ldrh	r3, [r3, #26]
 80142b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80142b6:	b29a      	uxth	r2, r3
 80142b8:	687b      	ldr	r3, [r7, #4]
 80142ba:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
 80142bc:	4b63      	ldr	r3, [pc, #396]	; (801444c <tcp_enqueue_flags+0x220>)
 80142be:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 80142c2:	3301      	adds	r3, #1
 80142c4:	b29a      	uxth	r2, r3
 80142c6:	4b61      	ldr	r3, [pc, #388]	; (801444c <tcp_enqueue_flags+0x220>)
 80142c8:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
    return ERR_MEM;
 80142cc:	f04f 33ff 	mov.w	r3, #4294967295
 80142d0:	e0ad      	b.n	801442e <tcp_enqueue_flags+0x202>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 80142d2:	68fb      	ldr	r3, [r7, #12]
 80142d4:	895a      	ldrh	r2, [r3, #10]
 80142d6:	7cbb      	ldrb	r3, [r7, #18]
 80142d8:	b29b      	uxth	r3, r3
 80142da:	429a      	cmp	r2, r3
 80142dc:	d20a      	bcs.n	80142f4 <tcp_enqueue_flags+0xc8>
 80142de:	f240 4239 	movw	r2, #1081	; 0x439
 80142e2:	495b      	ldr	r1, [pc, #364]	; (8014450 <tcp_enqueue_flags+0x224>)
 80142e4:	4855      	ldr	r0, [pc, #340]	; (801443c <tcp_enqueue_flags+0x210>)
 80142e6:	f006 ff15 	bl	801b114 <trace_printf>
 80142ea:	4955      	ldr	r1, [pc, #340]	; (8014440 <tcp_enqueue_flags+0x214>)
 80142ec:	4855      	ldr	r0, [pc, #340]	; (8014444 <tcp_enqueue_flags+0x218>)
 80142ee:	f006 ff11 	bl	801b114 <trace_printf>
 80142f2:	e7fe      	b.n	80142f2 <tcp_enqueue_flags+0xc6>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 80142f4:	687b      	ldr	r3, [r7, #4]
 80142f6:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 80142f8:	78fa      	ldrb	r2, [r7, #3]
 80142fa:	7cfb      	ldrb	r3, [r7, #19]
 80142fc:	9300      	str	r3, [sp, #0]
 80142fe:	460b      	mov	r3, r1
 8014300:	68f9      	ldr	r1, [r7, #12]
 8014302:	6878      	ldr	r0, [r7, #4]
 8014304:	f7fe fffc 	bl	8013300 <tcp_create_segment>
 8014308:	60b8      	str	r0, [r7, #8]
 801430a:	68bb      	ldr	r3, [r7, #8]
 801430c:	2b00      	cmp	r3, #0
 801430e:	d111      	bne.n	8014334 <tcp_enqueue_flags+0x108>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8014310:	687b      	ldr	r3, [r7, #4]
 8014312:	8b5b      	ldrh	r3, [r3, #26]
 8014314:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014318:	b29a      	uxth	r2, r3
 801431a:	687b      	ldr	r3, [r7, #4]
 801431c:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
 801431e:	4b4b      	ldr	r3, [pc, #300]	; (801444c <tcp_enqueue_flags+0x220>)
 8014320:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 8014324:	3301      	adds	r3, #1
 8014326:	b29a      	uxth	r2, r3
 8014328:	4b48      	ldr	r3, [pc, #288]	; (801444c <tcp_enqueue_flags+0x220>)
 801432a:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
    return ERR_MEM;
 801432e:	f04f 33ff 	mov.w	r3, #4294967295
 8014332:	e07c      	b.n	801442e <tcp_enqueue_flags+0x202>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8014334:	68bb      	ldr	r3, [r7, #8]
 8014336:	691b      	ldr	r3, [r3, #16]
 8014338:	f003 0303 	and.w	r3, r3, #3
 801433c:	2b00      	cmp	r3, #0
 801433e:	d00a      	beq.n	8014356 <tcp_enqueue_flags+0x12a>
 8014340:	f240 4242 	movw	r2, #1090	; 0x442
 8014344:	4943      	ldr	r1, [pc, #268]	; (8014454 <tcp_enqueue_flags+0x228>)
 8014346:	483d      	ldr	r0, [pc, #244]	; (801443c <tcp_enqueue_flags+0x210>)
 8014348:	f006 fee4 	bl	801b114 <trace_printf>
 801434c:	493c      	ldr	r1, [pc, #240]	; (8014440 <tcp_enqueue_flags+0x214>)
 801434e:	483d      	ldr	r0, [pc, #244]	; (8014444 <tcp_enqueue_flags+0x218>)
 8014350:	f006 fee0 	bl	801b114 <trace_printf>
 8014354:	e7fe      	b.n	8014354 <tcp_enqueue_flags+0x128>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8014356:	68bb      	ldr	r3, [r7, #8]
 8014358:	891b      	ldrh	r3, [r3, #8]
 801435a:	2b00      	cmp	r3, #0
 801435c:	d00a      	beq.n	8014374 <tcp_enqueue_flags+0x148>
 801435e:	f240 4243 	movw	r2, #1091	; 0x443
 8014362:	493d      	ldr	r1, [pc, #244]	; (8014458 <tcp_enqueue_flags+0x22c>)
 8014364:	4835      	ldr	r0, [pc, #212]	; (801443c <tcp_enqueue_flags+0x210>)
 8014366:	f006 fed5 	bl	801b114 <trace_printf>
 801436a:	4935      	ldr	r1, [pc, #212]	; (8014440 <tcp_enqueue_flags+0x214>)
 801436c:	4835      	ldr	r0, [pc, #212]	; (8014444 <tcp_enqueue_flags+0x218>)
 801436e:	f006 fed1 	bl	801b114 <trace_printf>
 8014372:	e7fe      	b.n	8014372 <tcp_enqueue_flags+0x146>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8014374:	687b      	ldr	r3, [r7, #4]
 8014376:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014378:	2b00      	cmp	r3, #0
 801437a:	d103      	bne.n	8014384 <tcp_enqueue_flags+0x158>
    pcb->unsent = seg;
 801437c:	687b      	ldr	r3, [r7, #4]
 801437e:	68ba      	ldr	r2, [r7, #8]
 8014380:	66da      	str	r2, [r3, #108]	; 0x6c
 8014382:	e00d      	b.n	80143a0 <tcp_enqueue_flags+0x174>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8014384:	687b      	ldr	r3, [r7, #4]
 8014386:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014388:	617b      	str	r3, [r7, #20]
 801438a:	e002      	b.n	8014392 <tcp_enqueue_flags+0x166>
 801438c:	697b      	ldr	r3, [r7, #20]
 801438e:	681b      	ldr	r3, [r3, #0]
 8014390:	617b      	str	r3, [r7, #20]
 8014392:	697b      	ldr	r3, [r7, #20]
 8014394:	681b      	ldr	r3, [r3, #0]
 8014396:	2b00      	cmp	r3, #0
 8014398:	d1f8      	bne.n	801438c <tcp_enqueue_flags+0x160>
    useg->next = seg;
 801439a:	697b      	ldr	r3, [r7, #20]
 801439c:	68ba      	ldr	r2, [r7, #8]
 801439e:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 80143a0:	687b      	ldr	r3, [r7, #4]
 80143a2:	2200      	movs	r2, #0
 80143a4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 80143a8:	78fb      	ldrb	r3, [r7, #3]
 80143aa:	f003 0302 	and.w	r3, r3, #2
 80143ae:	2b00      	cmp	r3, #0
 80143b0:	d104      	bne.n	80143bc <tcp_enqueue_flags+0x190>
 80143b2:	78fb      	ldrb	r3, [r7, #3]
 80143b4:	f003 0301 	and.w	r3, r3, #1
 80143b8:	2b00      	cmp	r3, #0
 80143ba:	d004      	beq.n	80143c6 <tcp_enqueue_flags+0x19a>
    pcb->snd_lbb++;
 80143bc:	687b      	ldr	r3, [r7, #4]
 80143be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80143c0:	1c5a      	adds	r2, r3, #1
 80143c2:	687b      	ldr	r3, [r7, #4]
 80143c4:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 80143c6:	78fb      	ldrb	r3, [r7, #3]
 80143c8:	f003 0301 	and.w	r3, r3, #1
 80143cc:	2b00      	cmp	r3, #0
 80143ce:	d006      	beq.n	80143de <tcp_enqueue_flags+0x1b2>
    tcp_set_flags(pcb, TF_FIN);
 80143d0:	687b      	ldr	r3, [r7, #4]
 80143d2:	8b5b      	ldrh	r3, [r3, #26]
 80143d4:	f043 0320 	orr.w	r3, r3, #32
 80143d8:	b29a      	uxth	r2, r3
 80143da:	687b      	ldr	r3, [r7, #4]
 80143dc:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80143de:	68bb      	ldr	r3, [r7, #8]
 80143e0:	685b      	ldr	r3, [r3, #4]
 80143e2:	4618      	mov	r0, r3
 80143e4:	f7fa fa64 	bl	800e8b0 <pbuf_clen>
 80143e8:	4603      	mov	r3, r0
 80143ea:	461a      	mov	r2, r3
 80143ec:	687b      	ldr	r3, [r7, #4]
 80143ee:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80143f2:	4413      	add	r3, r2
 80143f4:	b29a      	uxth	r2, r3
 80143f6:	687b      	ldr	r3, [r7, #4]
 80143f8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 80143fc:	687b      	ldr	r3, [r7, #4]
 80143fe:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8014402:	2b00      	cmp	r3, #0
 8014404:	d012      	beq.n	801442c <tcp_enqueue_flags+0x200>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8014406:	687b      	ldr	r3, [r7, #4]
 8014408:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801440a:	2b00      	cmp	r3, #0
 801440c:	d10e      	bne.n	801442c <tcp_enqueue_flags+0x200>
 801440e:	687b      	ldr	r3, [r7, #4]
 8014410:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014412:	2b00      	cmp	r3, #0
 8014414:	d10a      	bne.n	801442c <tcp_enqueue_flags+0x200>
 8014416:	f240 4265 	movw	r2, #1125	; 0x465
 801441a:	4910      	ldr	r1, [pc, #64]	; (801445c <tcp_enqueue_flags+0x230>)
 801441c:	4807      	ldr	r0, [pc, #28]	; (801443c <tcp_enqueue_flags+0x210>)
 801441e:	f006 fe79 	bl	801b114 <trace_printf>
 8014422:	4907      	ldr	r1, [pc, #28]	; (8014440 <tcp_enqueue_flags+0x214>)
 8014424:	4807      	ldr	r0, [pc, #28]	; (8014444 <tcp_enqueue_flags+0x218>)
 8014426:	f006 fe75 	bl	801b114 <trace_printf>
 801442a:	e7fe      	b.n	801442a <tcp_enqueue_flags+0x1fe>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 801442c:	2300      	movs	r3, #0
}
 801442e:	4618      	mov	r0, r3
 8014430:	3718      	adds	r7, #24
 8014432:	46bd      	mov	sp, r7
 8014434:	bd80      	pop	{r7, pc}
 8014436:	bf00      	nop
 8014438:	0801f2ec 	.word	0x0801f2ec
 801443c:	0801ee90 	.word	0x0801ee90
 8014440:	0801eeb0 	.word	0x0801eeb0
 8014444:	0801eee4 	.word	0x0801eee4
 8014448:	0801f344 	.word	0x0801f344
 801444c:	20010b7c 	.word	0x20010b7c
 8014450:	0801f364 	.word	0x0801f364
 8014454:	0801f3a0 	.word	0x0801f3a0
 8014458:	0801f3b8 	.word	0x0801f3b8
 801445c:	0801f3e4 	.word	0x0801f3e4

08014460 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8014460:	b5b0      	push	{r4, r5, r7, lr}
 8014462:	b08a      	sub	sp, #40	; 0x28
 8014464:	af00      	add	r7, sp, #0
 8014466:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8014468:	687b      	ldr	r3, [r7, #4]
 801446a:	2b00      	cmp	r3, #0
 801446c:	d10a      	bne.n	8014484 <tcp_output+0x24>
 801446e:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8014472:	49a4      	ldr	r1, [pc, #656]	; (8014704 <tcp_output+0x2a4>)
 8014474:	48a4      	ldr	r0, [pc, #656]	; (8014708 <tcp_output+0x2a8>)
 8014476:	f006 fe4d 	bl	801b114 <trace_printf>
 801447a:	49a4      	ldr	r1, [pc, #656]	; (801470c <tcp_output+0x2ac>)
 801447c:	48a4      	ldr	r0, [pc, #656]	; (8014710 <tcp_output+0x2b0>)
 801447e:	f006 fe49 	bl	801b114 <trace_printf>
 8014482:	e7fe      	b.n	8014482 <tcp_output+0x22>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8014484:	687b      	ldr	r3, [r7, #4]
 8014486:	7d1b      	ldrb	r3, [r3, #20]
 8014488:	2b01      	cmp	r3, #1
 801448a:	d10a      	bne.n	80144a2 <tcp_output+0x42>
 801448c:	f240 42e3 	movw	r2, #1251	; 0x4e3
 8014490:	49a0      	ldr	r1, [pc, #640]	; (8014714 <tcp_output+0x2b4>)
 8014492:	489d      	ldr	r0, [pc, #628]	; (8014708 <tcp_output+0x2a8>)
 8014494:	f006 fe3e 	bl	801b114 <trace_printf>
 8014498:	499c      	ldr	r1, [pc, #624]	; (801470c <tcp_output+0x2ac>)
 801449a:	489d      	ldr	r0, [pc, #628]	; (8014710 <tcp_output+0x2b0>)
 801449c:	f006 fe3a 	bl	801b114 <trace_printf>
 80144a0:	e7fe      	b.n	80144a0 <tcp_output+0x40>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 80144a2:	4b9d      	ldr	r3, [pc, #628]	; (8014718 <tcp_output+0x2b8>)
 80144a4:	681b      	ldr	r3, [r3, #0]
 80144a6:	687a      	ldr	r2, [r7, #4]
 80144a8:	429a      	cmp	r2, r3
 80144aa:	d101      	bne.n	80144b0 <tcp_output+0x50>
    return ERR_OK;
 80144ac:	2300      	movs	r3, #0
 80144ae:	e1d6      	b.n	801485e <tcp_output+0x3fe>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 80144b0:	687b      	ldr	r3, [r7, #4]
 80144b2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80144b6:	687b      	ldr	r3, [r7, #4]
 80144b8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80144bc:	4293      	cmp	r3, r2
 80144be:	bf28      	it	cs
 80144c0:	4613      	movcs	r3, r2
 80144c2:	b29b      	uxth	r3, r3
 80144c4:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 80144c6:	687b      	ldr	r3, [r7, #4]
 80144c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80144ca:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 80144cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80144ce:	2b00      	cmp	r3, #0
 80144d0:	d10b      	bne.n	80144ea <tcp_output+0x8a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 80144d2:	687b      	ldr	r3, [r7, #4]
 80144d4:	8b5b      	ldrh	r3, [r3, #26]
 80144d6:	f003 0302 	and.w	r3, r3, #2
 80144da:	2b00      	cmp	r3, #0
 80144dc:	f000 81b2 	beq.w	8014844 <tcp_output+0x3e4>
      return tcp_send_empty_ack(pcb);
 80144e0:	6878      	ldr	r0, [r7, #4]
 80144e2:	f000 fe4d 	bl	8015180 <tcp_send_empty_ack>
 80144e6:	4603      	mov	r3, r0
 80144e8:	e1b9      	b.n	801485e <tcp_output+0x3fe>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 80144ea:	6879      	ldr	r1, [r7, #4]
 80144ec:	687b      	ldr	r3, [r7, #4]
 80144ee:	3304      	adds	r3, #4
 80144f0:	461a      	mov	r2, r3
 80144f2:	6878      	ldr	r0, [r7, #4]
 80144f4:	f7fe fee8 	bl	80132c8 <tcp_route>
 80144f8:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 80144fa:	697b      	ldr	r3, [r7, #20]
 80144fc:	2b00      	cmp	r3, #0
 80144fe:	d102      	bne.n	8014506 <tcp_output+0xa6>
    return ERR_RTE;
 8014500:	f06f 0303 	mvn.w	r3, #3
 8014504:	e1ab      	b.n	801485e <tcp_output+0x3fe>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8014506:	687b      	ldr	r3, [r7, #4]
 8014508:	2b00      	cmp	r3, #0
 801450a:	d003      	beq.n	8014514 <tcp_output+0xb4>
 801450c:	687b      	ldr	r3, [r7, #4]
 801450e:	681b      	ldr	r3, [r3, #0]
 8014510:	2b00      	cmp	r3, #0
 8014512:	d111      	bne.n	8014538 <tcp_output+0xd8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8014514:	697b      	ldr	r3, [r7, #20]
 8014516:	2b00      	cmp	r3, #0
 8014518:	d002      	beq.n	8014520 <tcp_output+0xc0>
 801451a:	697b      	ldr	r3, [r7, #20]
 801451c:	3304      	adds	r3, #4
 801451e:	e000      	b.n	8014522 <tcp_output+0xc2>
 8014520:	2300      	movs	r3, #0
 8014522:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8014524:	693b      	ldr	r3, [r7, #16]
 8014526:	2b00      	cmp	r3, #0
 8014528:	d102      	bne.n	8014530 <tcp_output+0xd0>
      return ERR_RTE;
 801452a:	f06f 0303 	mvn.w	r3, #3
 801452e:	e196      	b.n	801485e <tcp_output+0x3fe>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8014530:	693b      	ldr	r3, [r7, #16]
 8014532:	681a      	ldr	r2, [r3, #0]
 8014534:	687b      	ldr	r3, [r7, #4]
 8014536:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8014538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801453a:	691b      	ldr	r3, [r3, #16]
 801453c:	685b      	ldr	r3, [r3, #4]
 801453e:	4618      	mov	r0, r3
 8014540:	f7f8 fc15 	bl	800cd6e <lwip_htonl>
 8014544:	4602      	mov	r2, r0
 8014546:	687b      	ldr	r3, [r7, #4]
 8014548:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801454a:	1ad3      	subs	r3, r2, r3
 801454c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801454e:	8912      	ldrh	r2, [r2, #8]
 8014550:	4413      	add	r3, r2
 8014552:	69ba      	ldr	r2, [r7, #24]
 8014554:	429a      	cmp	r2, r3
 8014556:	d227      	bcs.n	80145a8 <tcp_output+0x148>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8014558:	687b      	ldr	r3, [r7, #4]
 801455a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801455e:	461a      	mov	r2, r3
 8014560:	69bb      	ldr	r3, [r7, #24]
 8014562:	4293      	cmp	r3, r2
 8014564:	d114      	bne.n	8014590 <tcp_output+0x130>
 8014566:	687b      	ldr	r3, [r7, #4]
 8014568:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801456a:	2b00      	cmp	r3, #0
 801456c:	d110      	bne.n	8014590 <tcp_output+0x130>
 801456e:	687b      	ldr	r3, [r7, #4]
 8014570:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8014574:	2b00      	cmp	r3, #0
 8014576:	d10b      	bne.n	8014590 <tcp_output+0x130>
      pcb->persist_cnt = 0;
 8014578:	687b      	ldr	r3, [r7, #4]
 801457a:	2200      	movs	r2, #0
 801457c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8014580:	687b      	ldr	r3, [r7, #4]
 8014582:	2201      	movs	r2, #1
 8014584:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8014588:	687b      	ldr	r3, [r7, #4]
 801458a:	2200      	movs	r2, #0
 801458c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8014590:	687b      	ldr	r3, [r7, #4]
 8014592:	8b5b      	ldrh	r3, [r3, #26]
 8014594:	f003 0302 	and.w	r3, r3, #2
 8014598:	2b00      	cmp	r3, #0
 801459a:	f000 8155 	beq.w	8014848 <tcp_output+0x3e8>
      return tcp_send_empty_ack(pcb);
 801459e:	6878      	ldr	r0, [r7, #4]
 80145a0:	f000 fdee 	bl	8015180 <tcp_send_empty_ack>
 80145a4:	4603      	mov	r3, r0
 80145a6:	e15a      	b.n	801485e <tcp_output+0x3fe>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 80145a8:	687b      	ldr	r3, [r7, #4]
 80145aa:	2200      	movs	r2, #0
 80145ac:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 80145b0:	687b      	ldr	r3, [r7, #4]
 80145b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80145b4:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 80145b6:	6a3b      	ldr	r3, [r7, #32]
 80145b8:	2b00      	cmp	r3, #0
 80145ba:	f000 8124 	beq.w	8014806 <tcp_output+0x3a6>
    for (; useg->next != NULL; useg = useg->next);
 80145be:	e002      	b.n	80145c6 <tcp_output+0x166>
 80145c0:	6a3b      	ldr	r3, [r7, #32]
 80145c2:	681b      	ldr	r3, [r3, #0]
 80145c4:	623b      	str	r3, [r7, #32]
 80145c6:	6a3b      	ldr	r3, [r7, #32]
 80145c8:	681b      	ldr	r3, [r3, #0]
 80145ca:	2b00      	cmp	r3, #0
 80145cc:	d1f8      	bne.n	80145c0 <tcp_output+0x160>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 80145ce:	e11a      	b.n	8014806 <tcp_output+0x3a6>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 80145d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80145d2:	691b      	ldr	r3, [r3, #16]
 80145d4:	899b      	ldrh	r3, [r3, #12]
 80145d6:	b29b      	uxth	r3, r3
 80145d8:	4618      	mov	r0, r3
 80145da:	f7f8 fbb3 	bl	800cd44 <lwip_htons>
 80145de:	4603      	mov	r3, r0
 80145e0:	b2db      	uxtb	r3, r3
 80145e2:	f003 0304 	and.w	r3, r3, #4
 80145e6:	2b00      	cmp	r3, #0
 80145e8:	d00a      	beq.n	8014600 <tcp_output+0x1a0>
 80145ea:	f240 5236 	movw	r2, #1334	; 0x536
 80145ee:	494b      	ldr	r1, [pc, #300]	; (801471c <tcp_output+0x2bc>)
 80145f0:	4845      	ldr	r0, [pc, #276]	; (8014708 <tcp_output+0x2a8>)
 80145f2:	f006 fd8f 	bl	801b114 <trace_printf>
 80145f6:	4945      	ldr	r1, [pc, #276]	; (801470c <tcp_output+0x2ac>)
 80145f8:	4845      	ldr	r0, [pc, #276]	; (8014710 <tcp_output+0x2b0>)
 80145fa:	f006 fd8b 	bl	801b114 <trace_printf>
 80145fe:	e7fe      	b.n	80145fe <tcp_output+0x19e>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8014600:	687b      	ldr	r3, [r7, #4]
 8014602:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014604:	2b00      	cmp	r3, #0
 8014606:	d01f      	beq.n	8014648 <tcp_output+0x1e8>
 8014608:	687b      	ldr	r3, [r7, #4]
 801460a:	8b5b      	ldrh	r3, [r3, #26]
 801460c:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8014610:	2b00      	cmp	r3, #0
 8014612:	d119      	bne.n	8014648 <tcp_output+0x1e8>
 8014614:	687b      	ldr	r3, [r7, #4]
 8014616:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014618:	2b00      	cmp	r3, #0
 801461a:	d00b      	beq.n	8014634 <tcp_output+0x1d4>
 801461c:	687b      	ldr	r3, [r7, #4]
 801461e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014620:	681b      	ldr	r3, [r3, #0]
 8014622:	2b00      	cmp	r3, #0
 8014624:	d110      	bne.n	8014648 <tcp_output+0x1e8>
 8014626:	687b      	ldr	r3, [r7, #4]
 8014628:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801462a:	891a      	ldrh	r2, [r3, #8]
 801462c:	687b      	ldr	r3, [r7, #4]
 801462e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014630:	429a      	cmp	r2, r3
 8014632:	d209      	bcs.n	8014648 <tcp_output+0x1e8>
 8014634:	687b      	ldr	r3, [r7, #4]
 8014636:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801463a:	2b00      	cmp	r3, #0
 801463c:	d004      	beq.n	8014648 <tcp_output+0x1e8>
 801463e:	687b      	ldr	r3, [r7, #4]
 8014640:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8014644:	2b08      	cmp	r3, #8
 8014646:	d901      	bls.n	801464c <tcp_output+0x1ec>
 8014648:	2301      	movs	r3, #1
 801464a:	e000      	b.n	801464e <tcp_output+0x1ee>
 801464c:	2300      	movs	r3, #0
 801464e:	2b00      	cmp	r3, #0
 8014650:	d106      	bne.n	8014660 <tcp_output+0x200>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8014652:	687b      	ldr	r3, [r7, #4]
 8014654:	8b5b      	ldrh	r3, [r3, #26]
 8014656:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801465a:	2b00      	cmp	r3, #0
 801465c:	f000 80e8 	beq.w	8014830 <tcp_output+0x3d0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8014660:	687b      	ldr	r3, [r7, #4]
 8014662:	7d1b      	ldrb	r3, [r3, #20]
 8014664:	2b02      	cmp	r3, #2
 8014666:	d00d      	beq.n	8014684 <tcp_output+0x224>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8014668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801466a:	691b      	ldr	r3, [r3, #16]
 801466c:	899b      	ldrh	r3, [r3, #12]
 801466e:	b29c      	uxth	r4, r3
 8014670:	2010      	movs	r0, #16
 8014672:	f7f8 fb67 	bl	800cd44 <lwip_htons>
 8014676:	4603      	mov	r3, r0
 8014678:	461a      	mov	r2, r3
 801467a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801467c:	691b      	ldr	r3, [r3, #16]
 801467e:	4322      	orrs	r2, r4
 8014680:	b292      	uxth	r2, r2
 8014682:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8014684:	697a      	ldr	r2, [r7, #20]
 8014686:	6879      	ldr	r1, [r7, #4]
 8014688:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801468a:	f000 f913 	bl	80148b4 <tcp_output_segment>
 801468e:	4603      	mov	r3, r0
 8014690:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8014692:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014696:	2b00      	cmp	r3, #0
 8014698:	d009      	beq.n	80146ae <tcp_output+0x24e>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801469a:	687b      	ldr	r3, [r7, #4]
 801469c:	8b5b      	ldrh	r3, [r3, #26]
 801469e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80146a2:	b29a      	uxth	r2, r3
 80146a4:	687b      	ldr	r3, [r7, #4]
 80146a6:	835a      	strh	r2, [r3, #26]
      return err;
 80146a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80146ac:	e0d7      	b.n	801485e <tcp_output+0x3fe>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
 80146ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80146b0:	2200      	movs	r2, #0
 80146b2:	815a      	strh	r2, [r3, #10]
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 80146b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80146b6:	681a      	ldr	r2, [r3, #0]
 80146b8:	687b      	ldr	r3, [r7, #4]
 80146ba:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 80146bc:	687b      	ldr	r3, [r7, #4]
 80146be:	7d1b      	ldrb	r3, [r3, #20]
 80146c0:	2b02      	cmp	r3, #2
 80146c2:	d006      	beq.n	80146d2 <tcp_output+0x272>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80146c4:	687b      	ldr	r3, [r7, #4]
 80146c6:	8b5b      	ldrh	r3, [r3, #26]
 80146c8:	f023 0303 	bic.w	r3, r3, #3
 80146cc:	b29a      	uxth	r2, r3
 80146ce:	687b      	ldr	r3, [r7, #4]
 80146d0:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80146d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80146d4:	691b      	ldr	r3, [r3, #16]
 80146d6:	685b      	ldr	r3, [r3, #4]
 80146d8:	4618      	mov	r0, r3
 80146da:	f7f8 fb48 	bl	800cd6e <lwip_htonl>
 80146de:	4604      	mov	r4, r0
 80146e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80146e2:	891b      	ldrh	r3, [r3, #8]
 80146e4:	461d      	mov	r5, r3
 80146e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80146e8:	691b      	ldr	r3, [r3, #16]
 80146ea:	899b      	ldrh	r3, [r3, #12]
 80146ec:	b29b      	uxth	r3, r3
 80146ee:	4618      	mov	r0, r3
 80146f0:	f7f8 fb28 	bl	800cd44 <lwip_htons>
 80146f4:	4603      	mov	r3, r0
 80146f6:	b2db      	uxtb	r3, r3
 80146f8:	f003 0303 	and.w	r3, r3, #3
 80146fc:	2b00      	cmp	r3, #0
 80146fe:	d00f      	beq.n	8014720 <tcp_output+0x2c0>
 8014700:	2301      	movs	r3, #1
 8014702:	e00e      	b.n	8014722 <tcp_output+0x2c2>
 8014704:	0801f40c 	.word	0x0801f40c
 8014708:	0801ee90 	.word	0x0801ee90
 801470c:	0801eeb0 	.word	0x0801eeb0
 8014710:	0801eee4 	.word	0x0801eee4
 8014714:	0801f424 	.word	0x0801f424
 8014718:	20010c94 	.word	0x20010c94
 801471c:	0801f44c 	.word	0x0801f44c
 8014720:	2300      	movs	r3, #0
 8014722:	442b      	add	r3, r5
 8014724:	4423      	add	r3, r4
 8014726:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8014728:	687b      	ldr	r3, [r7, #4]
 801472a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801472c:	68bb      	ldr	r3, [r7, #8]
 801472e:	1ad3      	subs	r3, r2, r3
 8014730:	2b00      	cmp	r3, #0
 8014732:	da02      	bge.n	801473a <tcp_output+0x2da>
      pcb->snd_nxt = snd_nxt;
 8014734:	687b      	ldr	r3, [r7, #4]
 8014736:	68ba      	ldr	r2, [r7, #8]
 8014738:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 801473a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801473c:	891b      	ldrh	r3, [r3, #8]
 801473e:	461c      	mov	r4, r3
 8014740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014742:	691b      	ldr	r3, [r3, #16]
 8014744:	899b      	ldrh	r3, [r3, #12]
 8014746:	b29b      	uxth	r3, r3
 8014748:	4618      	mov	r0, r3
 801474a:	f7f8 fafb 	bl	800cd44 <lwip_htons>
 801474e:	4603      	mov	r3, r0
 8014750:	b2db      	uxtb	r3, r3
 8014752:	f003 0303 	and.w	r3, r3, #3
 8014756:	2b00      	cmp	r3, #0
 8014758:	d001      	beq.n	801475e <tcp_output+0x2fe>
 801475a:	2301      	movs	r3, #1
 801475c:	e000      	b.n	8014760 <tcp_output+0x300>
 801475e:	2300      	movs	r3, #0
 8014760:	4423      	add	r3, r4
 8014762:	2b00      	cmp	r3, #0
 8014764:	d049      	beq.n	80147fa <tcp_output+0x39a>
      seg->next = NULL;
 8014766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014768:	2200      	movs	r2, #0
 801476a:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 801476c:	687b      	ldr	r3, [r7, #4]
 801476e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014770:	2b00      	cmp	r3, #0
 8014772:	d105      	bne.n	8014780 <tcp_output+0x320>
        pcb->unacked = seg;
 8014774:	687b      	ldr	r3, [r7, #4]
 8014776:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014778:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 801477a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801477c:	623b      	str	r3, [r7, #32]
 801477e:	e03f      	b.n	8014800 <tcp_output+0x3a0>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8014780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014782:	691b      	ldr	r3, [r3, #16]
 8014784:	685b      	ldr	r3, [r3, #4]
 8014786:	4618      	mov	r0, r3
 8014788:	f7f8 faf1 	bl	800cd6e <lwip_htonl>
 801478c:	4604      	mov	r4, r0
 801478e:	6a3b      	ldr	r3, [r7, #32]
 8014790:	691b      	ldr	r3, [r3, #16]
 8014792:	685b      	ldr	r3, [r3, #4]
 8014794:	4618      	mov	r0, r3
 8014796:	f7f8 faea 	bl	800cd6e <lwip_htonl>
 801479a:	4603      	mov	r3, r0
 801479c:	1ae3      	subs	r3, r4, r3
 801479e:	2b00      	cmp	r3, #0
 80147a0:	da24      	bge.n	80147ec <tcp_output+0x38c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 80147a2:	687b      	ldr	r3, [r7, #4]
 80147a4:	3370      	adds	r3, #112	; 0x70
 80147a6:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80147a8:	e002      	b.n	80147b0 <tcp_output+0x350>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 80147aa:	69fb      	ldr	r3, [r7, #28]
 80147ac:	681b      	ldr	r3, [r3, #0]
 80147ae:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80147b0:	69fb      	ldr	r3, [r7, #28]
 80147b2:	681b      	ldr	r3, [r3, #0]
 80147b4:	2b00      	cmp	r3, #0
 80147b6:	d011      	beq.n	80147dc <tcp_output+0x37c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80147b8:	69fb      	ldr	r3, [r7, #28]
 80147ba:	681b      	ldr	r3, [r3, #0]
 80147bc:	691b      	ldr	r3, [r3, #16]
 80147be:	685b      	ldr	r3, [r3, #4]
 80147c0:	4618      	mov	r0, r3
 80147c2:	f7f8 fad4 	bl	800cd6e <lwip_htonl>
 80147c6:	4604      	mov	r4, r0
 80147c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80147ca:	691b      	ldr	r3, [r3, #16]
 80147cc:	685b      	ldr	r3, [r3, #4]
 80147ce:	4618      	mov	r0, r3
 80147d0:	f7f8 facd 	bl	800cd6e <lwip_htonl>
 80147d4:	4603      	mov	r3, r0
 80147d6:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 80147d8:	2b00      	cmp	r3, #0
 80147da:	dbe6      	blt.n	80147aa <tcp_output+0x34a>
          }
          seg->next = (*cur_seg);
 80147dc:	69fb      	ldr	r3, [r7, #28]
 80147de:	681a      	ldr	r2, [r3, #0]
 80147e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80147e2:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 80147e4:	69fb      	ldr	r3, [r7, #28]
 80147e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80147e8:	601a      	str	r2, [r3, #0]
 80147ea:	e009      	b.n	8014800 <tcp_output+0x3a0>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 80147ec:	6a3b      	ldr	r3, [r7, #32]
 80147ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80147f0:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 80147f2:	6a3b      	ldr	r3, [r7, #32]
 80147f4:	681b      	ldr	r3, [r3, #0]
 80147f6:	623b      	str	r3, [r7, #32]
 80147f8:	e002      	b.n	8014800 <tcp_output+0x3a0>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 80147fa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80147fc:	f7fb fc4f 	bl	801009e <tcp_seg_free>
    }
    seg = pcb->unsent;
 8014800:	687b      	ldr	r3, [r7, #4]
 8014802:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014804:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8014806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014808:	2b00      	cmp	r3, #0
 801480a:	d012      	beq.n	8014832 <tcp_output+0x3d2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 801480c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801480e:	691b      	ldr	r3, [r3, #16]
 8014810:	685b      	ldr	r3, [r3, #4]
 8014812:	4618      	mov	r0, r3
 8014814:	f7f8 faab 	bl	800cd6e <lwip_htonl>
 8014818:	4602      	mov	r2, r0
 801481a:	687b      	ldr	r3, [r7, #4]
 801481c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801481e:	1ad3      	subs	r3, r2, r3
 8014820:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014822:	8912      	ldrh	r2, [r2, #8]
 8014824:	4413      	add	r3, r2
  while (seg != NULL &&
 8014826:	69ba      	ldr	r2, [r7, #24]
 8014828:	429a      	cmp	r2, r3
 801482a:	f4bf aed1 	bcs.w	80145d0 <tcp_output+0x170>
 801482e:	e000      	b.n	8014832 <tcp_output+0x3d2>
      break;
 8014830:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8014832:	687b      	ldr	r3, [r7, #4]
 8014834:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014836:	2b00      	cmp	r3, #0
 8014838:	d108      	bne.n	801484c <tcp_output+0x3ec>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801483a:	687b      	ldr	r3, [r7, #4]
 801483c:	2200      	movs	r2, #0
 801483e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8014842:	e004      	b.n	801484e <tcp_output+0x3ee>
    goto output_done;
 8014844:	bf00      	nop
 8014846:	e002      	b.n	801484e <tcp_output+0x3ee>
    goto output_done;
 8014848:	bf00      	nop
 801484a:	e000      	b.n	801484e <tcp_output+0x3ee>
  }
#endif /* TCP_OVERSIZE */

output_done:
 801484c:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 801484e:	687b      	ldr	r3, [r7, #4]
 8014850:	8b5b      	ldrh	r3, [r3, #26]
 8014852:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8014856:	b29a      	uxth	r2, r3
 8014858:	687b      	ldr	r3, [r7, #4]
 801485a:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 801485c:	2300      	movs	r3, #0
}
 801485e:	4618      	mov	r0, r3
 8014860:	3728      	adds	r7, #40	; 0x28
 8014862:	46bd      	mov	sp, r7
 8014864:	bdb0      	pop	{r4, r5, r7, pc}
 8014866:	bf00      	nop

08014868 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8014868:	b580      	push	{r7, lr}
 801486a:	b082      	sub	sp, #8
 801486c:	af00      	add	r7, sp, #0
 801486e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8014870:	687b      	ldr	r3, [r7, #4]
 8014872:	2b00      	cmp	r3, #0
 8014874:	d10a      	bne.n	801488c <tcp_output_segment_busy+0x24>
 8014876:	f240 529a 	movw	r2, #1434	; 0x59a
 801487a:	490a      	ldr	r1, [pc, #40]	; (80148a4 <tcp_output_segment_busy+0x3c>)
 801487c:	480a      	ldr	r0, [pc, #40]	; (80148a8 <tcp_output_segment_busy+0x40>)
 801487e:	f006 fc49 	bl	801b114 <trace_printf>
 8014882:	490a      	ldr	r1, [pc, #40]	; (80148ac <tcp_output_segment_busy+0x44>)
 8014884:	480a      	ldr	r0, [pc, #40]	; (80148b0 <tcp_output_segment_busy+0x48>)
 8014886:	f006 fc45 	bl	801b114 <trace_printf>
 801488a:	e7fe      	b.n	801488a <tcp_output_segment_busy+0x22>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 801488c:	687b      	ldr	r3, [r7, #4]
 801488e:	685b      	ldr	r3, [r3, #4]
 8014890:	7b9b      	ldrb	r3, [r3, #14]
 8014892:	2b01      	cmp	r3, #1
 8014894:	d001      	beq.n	801489a <tcp_output_segment_busy+0x32>
    /* other reference found */
    return 1;
 8014896:	2301      	movs	r3, #1
 8014898:	e000      	b.n	801489c <tcp_output_segment_busy+0x34>
  }
  /* no other references found */
  return 0;
 801489a:	2300      	movs	r3, #0
}
 801489c:	4618      	mov	r0, r3
 801489e:	3708      	adds	r7, #8
 80148a0:	46bd      	mov	sp, r7
 80148a2:	bd80      	pop	{r7, pc}
 80148a4:	0801f464 	.word	0x0801f464
 80148a8:	0801ee90 	.word	0x0801ee90
 80148ac:	0801eeb0 	.word	0x0801eeb0
 80148b0:	0801eee4 	.word	0x0801eee4

080148b4 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 80148b4:	b5b0      	push	{r4, r5, r7, lr}
 80148b6:	b08c      	sub	sp, #48	; 0x30
 80148b8:	af04      	add	r7, sp, #16
 80148ba:	60f8      	str	r0, [r7, #12]
 80148bc:	60b9      	str	r1, [r7, #8]
 80148be:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 80148c0:	68fb      	ldr	r3, [r7, #12]
 80148c2:	2b00      	cmp	r3, #0
 80148c4:	d10a      	bne.n	80148dc <tcp_output_segment+0x28>
 80148c6:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 80148ca:	496e      	ldr	r1, [pc, #440]	; (8014a84 <tcp_output_segment+0x1d0>)
 80148cc:	486e      	ldr	r0, [pc, #440]	; (8014a88 <tcp_output_segment+0x1d4>)
 80148ce:	f006 fc21 	bl	801b114 <trace_printf>
 80148d2:	496e      	ldr	r1, [pc, #440]	; (8014a8c <tcp_output_segment+0x1d8>)
 80148d4:	486e      	ldr	r0, [pc, #440]	; (8014a90 <tcp_output_segment+0x1dc>)
 80148d6:	f006 fc1d 	bl	801b114 <trace_printf>
 80148da:	e7fe      	b.n	80148da <tcp_output_segment+0x26>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 80148dc:	68bb      	ldr	r3, [r7, #8]
 80148de:	2b00      	cmp	r3, #0
 80148e0:	d10a      	bne.n	80148f8 <tcp_output_segment+0x44>
 80148e2:	f240 52b9 	movw	r2, #1465	; 0x5b9
 80148e6:	496b      	ldr	r1, [pc, #428]	; (8014a94 <tcp_output_segment+0x1e0>)
 80148e8:	4867      	ldr	r0, [pc, #412]	; (8014a88 <tcp_output_segment+0x1d4>)
 80148ea:	f006 fc13 	bl	801b114 <trace_printf>
 80148ee:	4967      	ldr	r1, [pc, #412]	; (8014a8c <tcp_output_segment+0x1d8>)
 80148f0:	4867      	ldr	r0, [pc, #412]	; (8014a90 <tcp_output_segment+0x1dc>)
 80148f2:	f006 fc0f 	bl	801b114 <trace_printf>
 80148f6:	e7fe      	b.n	80148f6 <tcp_output_segment+0x42>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 80148f8:	687b      	ldr	r3, [r7, #4]
 80148fa:	2b00      	cmp	r3, #0
 80148fc:	d10a      	bne.n	8014914 <tcp_output_segment+0x60>
 80148fe:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8014902:	4965      	ldr	r1, [pc, #404]	; (8014a98 <tcp_output_segment+0x1e4>)
 8014904:	4860      	ldr	r0, [pc, #384]	; (8014a88 <tcp_output_segment+0x1d4>)
 8014906:	f006 fc05 	bl	801b114 <trace_printf>
 801490a:	4960      	ldr	r1, [pc, #384]	; (8014a8c <tcp_output_segment+0x1d8>)
 801490c:	4860      	ldr	r0, [pc, #384]	; (8014a90 <tcp_output_segment+0x1dc>)
 801490e:	f006 fc01 	bl	801b114 <trace_printf>
 8014912:	e7fe      	b.n	8014912 <tcp_output_segment+0x5e>

  if (tcp_output_segment_busy(seg)) {
 8014914:	68f8      	ldr	r0, [r7, #12]
 8014916:	f7ff ffa7 	bl	8014868 <tcp_output_segment_busy>
 801491a:	4603      	mov	r3, r0
 801491c:	2b00      	cmp	r3, #0
 801491e:	d001      	beq.n	8014924 <tcp_output_segment+0x70>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8014920:	2300      	movs	r3, #0
 8014922:	e0ab      	b.n	8014a7c <tcp_output_segment+0x1c8>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8014924:	68bb      	ldr	r3, [r7, #8]
 8014926:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014928:	68fb      	ldr	r3, [r7, #12]
 801492a:	691c      	ldr	r4, [r3, #16]
 801492c:	4610      	mov	r0, r2
 801492e:	f7f8 fa1e 	bl	800cd6e <lwip_htonl>
 8014932:	4603      	mov	r3, r0
 8014934:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8014936:	68bb      	ldr	r3, [r7, #8]
 8014938:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 801493a:	68fb      	ldr	r3, [r7, #12]
 801493c:	691c      	ldr	r4, [r3, #16]
 801493e:	4610      	mov	r0, r2
 8014940:	f7f8 fa00 	bl	800cd44 <lwip_htons>
 8014944:	4603      	mov	r3, r0
 8014946:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8014948:	68bb      	ldr	r3, [r7, #8]
 801494a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801494c:	68ba      	ldr	r2, [r7, #8]
 801494e:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8014950:	441a      	add	r2, r3
 8014952:	68bb      	ldr	r3, [r7, #8]
 8014954:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8014956:	68fb      	ldr	r3, [r7, #12]
 8014958:	691b      	ldr	r3, [r3, #16]
 801495a:	3314      	adds	r3, #20
 801495c:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 801495e:	68fb      	ldr	r3, [r7, #12]
 8014960:	7b1b      	ldrb	r3, [r3, #12]
 8014962:	f003 0301 	and.w	r3, r3, #1
 8014966:	2b00      	cmp	r3, #0
 8014968:	d015      	beq.n	8014996 <tcp_output_segment+0xe2>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 801496a:	68bb      	ldr	r3, [r7, #8]
 801496c:	3304      	adds	r3, #4
 801496e:	461a      	mov	r2, r3
 8014970:	6879      	ldr	r1, [r7, #4]
 8014972:	f44f 7006 	mov.w	r0, #536	; 0x218
 8014976:	f7fb ffcb 	bl	8010910 <tcp_eff_send_mss_netif>
 801497a:	4603      	mov	r3, r0
 801497c:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 801497e:	8b7b      	ldrh	r3, [r7, #26]
 8014980:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8014984:	4618      	mov	r0, r3
 8014986:	f7f8 f9f2 	bl	800cd6e <lwip_htonl>
 801498a:	4602      	mov	r2, r0
 801498c:	69fb      	ldr	r3, [r7, #28]
 801498e:	601a      	str	r2, [r3, #0]
    opts += 1;
 8014990:	69fb      	ldr	r3, [r7, #28]
 8014992:	3304      	adds	r3, #4
 8014994:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8014996:	68bb      	ldr	r3, [r7, #8]
 8014998:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801499c:	2b00      	cmp	r3, #0
 801499e:	da02      	bge.n	80149a6 <tcp_output_segment+0xf2>
    pcb->rtime = 0;
 80149a0:	68bb      	ldr	r3, [r7, #8]
 80149a2:	2200      	movs	r2, #0
 80149a4:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 80149a6:	68bb      	ldr	r3, [r7, #8]
 80149a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80149aa:	2b00      	cmp	r3, #0
 80149ac:	d10c      	bne.n	80149c8 <tcp_output_segment+0x114>
    pcb->rttest = tcp_ticks;
 80149ae:	4b3b      	ldr	r3, [pc, #236]	; (8014a9c <tcp_output_segment+0x1e8>)
 80149b0:	681a      	ldr	r2, [r3, #0]
 80149b2:	68bb      	ldr	r3, [r7, #8]
 80149b4:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 80149b6:	68fb      	ldr	r3, [r7, #12]
 80149b8:	691b      	ldr	r3, [r3, #16]
 80149ba:	685b      	ldr	r3, [r3, #4]
 80149bc:	4618      	mov	r0, r3
 80149be:	f7f8 f9d6 	bl	800cd6e <lwip_htonl>
 80149c2:	4602      	mov	r2, r0
 80149c4:	68bb      	ldr	r3, [r7, #8]
 80149c6:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 80149c8:	68fb      	ldr	r3, [r7, #12]
 80149ca:	691a      	ldr	r2, [r3, #16]
 80149cc:	68fb      	ldr	r3, [r7, #12]
 80149ce:	685b      	ldr	r3, [r3, #4]
 80149d0:	685b      	ldr	r3, [r3, #4]
 80149d2:	1ad3      	subs	r3, r2, r3
 80149d4:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 80149d6:	68fb      	ldr	r3, [r7, #12]
 80149d8:	685b      	ldr	r3, [r3, #4]
 80149da:	8959      	ldrh	r1, [r3, #10]
 80149dc:	68fb      	ldr	r3, [r7, #12]
 80149de:	685b      	ldr	r3, [r3, #4]
 80149e0:	8b3a      	ldrh	r2, [r7, #24]
 80149e2:	1a8a      	subs	r2, r1, r2
 80149e4:	b292      	uxth	r2, r2
 80149e6:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 80149e8:	68fb      	ldr	r3, [r7, #12]
 80149ea:	685b      	ldr	r3, [r3, #4]
 80149ec:	8919      	ldrh	r1, [r3, #8]
 80149ee:	68fb      	ldr	r3, [r7, #12]
 80149f0:	685b      	ldr	r3, [r3, #4]
 80149f2:	8b3a      	ldrh	r2, [r7, #24]
 80149f4:	1a8a      	subs	r2, r1, r2
 80149f6:	b292      	uxth	r2, r2
 80149f8:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 80149fa:	68fb      	ldr	r3, [r7, #12]
 80149fc:	685b      	ldr	r3, [r3, #4]
 80149fe:	68fa      	ldr	r2, [r7, #12]
 8014a00:	6912      	ldr	r2, [r2, #16]
 8014a02:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8014a04:	68fb      	ldr	r3, [r7, #12]
 8014a06:	691b      	ldr	r3, [r3, #16]
 8014a08:	2200      	movs	r2, #0
 8014a0a:	741a      	strb	r2, [r3, #16]
 8014a0c:	2200      	movs	r2, #0
 8014a0e:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8014a10:	68fb      	ldr	r3, [r7, #12]
 8014a12:	691b      	ldr	r3, [r3, #16]
 8014a14:	f103 0214 	add.w	r2, r3, #20
 8014a18:	68fb      	ldr	r3, [r7, #12]
 8014a1a:	7b1b      	ldrb	r3, [r3, #12]
 8014a1c:	009b      	lsls	r3, r3, #2
 8014a1e:	f003 0304 	and.w	r3, r3, #4
 8014a22:	4413      	add	r3, r2
 8014a24:	69fa      	ldr	r2, [r7, #28]
 8014a26:	429a      	cmp	r2, r3
 8014a28:	d00a      	beq.n	8014a40 <tcp_output_segment+0x18c>
 8014a2a:	f240 621c 	movw	r2, #1564	; 0x61c
 8014a2e:	491c      	ldr	r1, [pc, #112]	; (8014aa0 <tcp_output_segment+0x1ec>)
 8014a30:	4815      	ldr	r0, [pc, #84]	; (8014a88 <tcp_output_segment+0x1d4>)
 8014a32:	f006 fb6f 	bl	801b114 <trace_printf>
 8014a36:	4915      	ldr	r1, [pc, #84]	; (8014a8c <tcp_output_segment+0x1d8>)
 8014a38:	4815      	ldr	r0, [pc, #84]	; (8014a90 <tcp_output_segment+0x1dc>)
 8014a3a:	f006 fb6b 	bl	801b114 <trace_printf>
 8014a3e:	e7fe      	b.n	8014a3e <tcp_output_segment+0x18a>
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
                                           seg->p->tot_len, &pcb->local_ip, &pcb->remote_ip);
#endif /* TCP_CHECKSUM_ON_COPY */
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);
 8014a40:	4b18      	ldr	r3, [pc, #96]	; (8014aa4 <tcp_output_segment+0x1f0>)
 8014a42:	f8b3 3090 	ldrh.w	r3, [r3, #144]	; 0x90
 8014a46:	3301      	adds	r3, #1
 8014a48:	b29a      	uxth	r2, r3
 8014a4a:	4b16      	ldr	r3, [pc, #88]	; (8014aa4 <tcp_output_segment+0x1f0>)
 8014a4c:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8014a50:	68fb      	ldr	r3, [r7, #12]
 8014a52:	6858      	ldr	r0, [r3, #4]
 8014a54:	68b9      	ldr	r1, [r7, #8]
 8014a56:	68bb      	ldr	r3, [r7, #8]
 8014a58:	1d1c      	adds	r4, r3, #4
 8014a5a:	68bb      	ldr	r3, [r7, #8]
 8014a5c:	7add      	ldrb	r5, [r3, #11]
 8014a5e:	68bb      	ldr	r3, [r7, #8]
 8014a60:	7a9b      	ldrb	r3, [r3, #10]
 8014a62:	687a      	ldr	r2, [r7, #4]
 8014a64:	9202      	str	r2, [sp, #8]
 8014a66:	2206      	movs	r2, #6
 8014a68:	9201      	str	r2, [sp, #4]
 8014a6a:	9300      	str	r3, [sp, #0]
 8014a6c:	462b      	mov	r3, r5
 8014a6e:	4622      	mov	r2, r4
 8014a70:	f004 ff94 	bl	801999c <ip4_output_if>
 8014a74:	4603      	mov	r3, r0
 8014a76:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8014a78:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8014a7c:	4618      	mov	r0, r3
 8014a7e:	3720      	adds	r7, #32
 8014a80:	46bd      	mov	sp, r7
 8014a82:	bdb0      	pop	{r4, r5, r7, pc}
 8014a84:	0801f48c 	.word	0x0801f48c
 8014a88:	0801ee90 	.word	0x0801ee90
 8014a8c:	0801eeb0 	.word	0x0801eeb0
 8014a90:	0801eee4 	.word	0x0801eee4
 8014a94:	0801f4ac 	.word	0x0801f4ac
 8014a98:	0801f4cc 	.word	0x0801f4cc
 8014a9c:	20010c84 	.word	0x20010c84
 8014aa0:	0801f4f0 	.word	0x0801f4f0
 8014aa4:	20010b7c 	.word	0x20010b7c

08014aa8 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8014aa8:	b5b0      	push	{r4, r5, r7, lr}
 8014aaa:	b084      	sub	sp, #16
 8014aac:	af00      	add	r7, sp, #0
 8014aae:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8014ab0:	687b      	ldr	r3, [r7, #4]
 8014ab2:	2b00      	cmp	r3, #0
 8014ab4:	d10a      	bne.n	8014acc <tcp_rexmit_rto_prepare+0x24>
 8014ab6:	f240 6263 	movw	r2, #1635	; 0x663
 8014aba:	4937      	ldr	r1, [pc, #220]	; (8014b98 <tcp_rexmit_rto_prepare+0xf0>)
 8014abc:	4837      	ldr	r0, [pc, #220]	; (8014b9c <tcp_rexmit_rto_prepare+0xf4>)
 8014abe:	f006 fb29 	bl	801b114 <trace_printf>
 8014ac2:	4937      	ldr	r1, [pc, #220]	; (8014ba0 <tcp_rexmit_rto_prepare+0xf8>)
 8014ac4:	4837      	ldr	r0, [pc, #220]	; (8014ba4 <tcp_rexmit_rto_prepare+0xfc>)
 8014ac6:	f006 fb25 	bl	801b114 <trace_printf>
 8014aca:	e7fe      	b.n	8014aca <tcp_rexmit_rto_prepare+0x22>

  if (pcb->unacked == NULL) {
 8014acc:	687b      	ldr	r3, [r7, #4]
 8014ace:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014ad0:	2b00      	cmp	r3, #0
 8014ad2:	d102      	bne.n	8014ada <tcp_rexmit_rto_prepare+0x32>
    return ERR_VAL;
 8014ad4:	f06f 0305 	mvn.w	r3, #5
 8014ad8:	e059      	b.n	8014b8e <tcp_rexmit_rto_prepare+0xe6>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8014ada:	687b      	ldr	r3, [r7, #4]
 8014adc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014ade:	60fb      	str	r3, [r7, #12]
 8014ae0:	e00b      	b.n	8014afa <tcp_rexmit_rto_prepare+0x52>
    if (tcp_output_segment_busy(seg)) {
 8014ae2:	68f8      	ldr	r0, [r7, #12]
 8014ae4:	f7ff fec0 	bl	8014868 <tcp_output_segment_busy>
 8014ae8:	4603      	mov	r3, r0
 8014aea:	2b00      	cmp	r3, #0
 8014aec:	d002      	beq.n	8014af4 <tcp_rexmit_rto_prepare+0x4c>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8014aee:	f06f 0305 	mvn.w	r3, #5
 8014af2:	e04c      	b.n	8014b8e <tcp_rexmit_rto_prepare+0xe6>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8014af4:	68fb      	ldr	r3, [r7, #12]
 8014af6:	681b      	ldr	r3, [r3, #0]
 8014af8:	60fb      	str	r3, [r7, #12]
 8014afa:	68fb      	ldr	r3, [r7, #12]
 8014afc:	681b      	ldr	r3, [r3, #0]
 8014afe:	2b00      	cmp	r3, #0
 8014b00:	d1ef      	bne.n	8014ae2 <tcp_rexmit_rto_prepare+0x3a>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8014b02:	68f8      	ldr	r0, [r7, #12]
 8014b04:	f7ff feb0 	bl	8014868 <tcp_output_segment_busy>
 8014b08:	4603      	mov	r3, r0
 8014b0a:	2b00      	cmp	r3, #0
 8014b0c:	d002      	beq.n	8014b14 <tcp_rexmit_rto_prepare+0x6c>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8014b0e:	f06f 0305 	mvn.w	r3, #5
 8014b12:	e03c      	b.n	8014b8e <tcp_rexmit_rto_prepare+0xe6>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8014b14:	687b      	ldr	r3, [r7, #4]
 8014b16:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8014b18:	68fb      	ldr	r3, [r7, #12]
 8014b1a:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE_DBGCHECK
  /* if last unsent changed, we need to update unsent_oversize */
  if (pcb->unsent == NULL) {
 8014b1c:	687b      	ldr	r3, [r7, #4]
 8014b1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014b20:	2b00      	cmp	r3, #0
 8014b22:	d104      	bne.n	8014b2e <tcp_rexmit_rto_prepare+0x86>
    pcb->unsent_oversize = seg->oversize_left;
 8014b24:	68fb      	ldr	r3, [r7, #12]
 8014b26:	895a      	ldrh	r2, [r3, #10]
 8014b28:	687b      	ldr	r3, [r7, #4]
 8014b2a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8014b2e:	687b      	ldr	r3, [r7, #4]
 8014b30:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8014b32:	687b      	ldr	r3, [r7, #4]
 8014b34:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8014b36:	687b      	ldr	r3, [r7, #4]
 8014b38:	2200      	movs	r2, #0
 8014b3a:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8014b3c:	687b      	ldr	r3, [r7, #4]
 8014b3e:	8b5b      	ldrh	r3, [r3, #26]
 8014b40:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8014b44:	b29a      	uxth	r2, r3
 8014b46:	687b      	ldr	r3, [r7, #4]
 8014b48:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8014b4a:	68fb      	ldr	r3, [r7, #12]
 8014b4c:	691b      	ldr	r3, [r3, #16]
 8014b4e:	685b      	ldr	r3, [r3, #4]
 8014b50:	4618      	mov	r0, r3
 8014b52:	f7f8 f90c 	bl	800cd6e <lwip_htonl>
 8014b56:	4604      	mov	r4, r0
 8014b58:	68fb      	ldr	r3, [r7, #12]
 8014b5a:	891b      	ldrh	r3, [r3, #8]
 8014b5c:	461d      	mov	r5, r3
 8014b5e:	68fb      	ldr	r3, [r7, #12]
 8014b60:	691b      	ldr	r3, [r3, #16]
 8014b62:	899b      	ldrh	r3, [r3, #12]
 8014b64:	b29b      	uxth	r3, r3
 8014b66:	4618      	mov	r0, r3
 8014b68:	f7f8 f8ec 	bl	800cd44 <lwip_htons>
 8014b6c:	4603      	mov	r3, r0
 8014b6e:	b2db      	uxtb	r3, r3
 8014b70:	f003 0303 	and.w	r3, r3, #3
 8014b74:	2b00      	cmp	r3, #0
 8014b76:	d001      	beq.n	8014b7c <tcp_rexmit_rto_prepare+0xd4>
 8014b78:	2301      	movs	r3, #1
 8014b7a:	e000      	b.n	8014b7e <tcp_rexmit_rto_prepare+0xd6>
 8014b7c:	2300      	movs	r3, #0
 8014b7e:	442b      	add	r3, r5
 8014b80:	18e2      	adds	r2, r4, r3
 8014b82:	687b      	ldr	r3, [r7, #4]
 8014b84:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8014b86:	687b      	ldr	r3, [r7, #4]
 8014b88:	2200      	movs	r2, #0
 8014b8a:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 8014b8c:	2300      	movs	r3, #0
}
 8014b8e:	4618      	mov	r0, r3
 8014b90:	3710      	adds	r7, #16
 8014b92:	46bd      	mov	sp, r7
 8014b94:	bdb0      	pop	{r4, r5, r7, pc}
 8014b96:	bf00      	nop
 8014b98:	0801f504 	.word	0x0801f504
 8014b9c:	0801ee90 	.word	0x0801ee90
 8014ba0:	0801eeb0 	.word	0x0801eeb0
 8014ba4:	0801eee4 	.word	0x0801eee4

08014ba8 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8014ba8:	b580      	push	{r7, lr}
 8014baa:	b082      	sub	sp, #8
 8014bac:	af00      	add	r7, sp, #0
 8014bae:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8014bb0:	687b      	ldr	r3, [r7, #4]
 8014bb2:	2b00      	cmp	r3, #0
 8014bb4:	d10a      	bne.n	8014bcc <tcp_rexmit_rto_commit+0x24>
 8014bb6:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8014bba:	490e      	ldr	r1, [pc, #56]	; (8014bf4 <tcp_rexmit_rto_commit+0x4c>)
 8014bbc:	480e      	ldr	r0, [pc, #56]	; (8014bf8 <tcp_rexmit_rto_commit+0x50>)
 8014bbe:	f006 faa9 	bl	801b114 <trace_printf>
 8014bc2:	490e      	ldr	r1, [pc, #56]	; (8014bfc <tcp_rexmit_rto_commit+0x54>)
 8014bc4:	480e      	ldr	r0, [pc, #56]	; (8014c00 <tcp_rexmit_rto_commit+0x58>)
 8014bc6:	f006 faa5 	bl	801b114 <trace_printf>
 8014bca:	e7fe      	b.n	8014bca <tcp_rexmit_rto_commit+0x22>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8014bcc:	687b      	ldr	r3, [r7, #4]
 8014bce:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8014bd2:	2bff      	cmp	r3, #255	; 0xff
 8014bd4:	d007      	beq.n	8014be6 <tcp_rexmit_rto_commit+0x3e>
    ++pcb->nrtx;
 8014bd6:	687b      	ldr	r3, [r7, #4]
 8014bd8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8014bdc:	3301      	adds	r3, #1
 8014bde:	b2da      	uxtb	r2, r3
 8014be0:	687b      	ldr	r3, [r7, #4]
 8014be2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8014be6:	6878      	ldr	r0, [r7, #4]
 8014be8:	f7ff fc3a 	bl	8014460 <tcp_output>
}
 8014bec:	bf00      	nop
 8014bee:	3708      	adds	r7, #8
 8014bf0:	46bd      	mov	sp, r7
 8014bf2:	bd80      	pop	{r7, pc}
 8014bf4:	0801f528 	.word	0x0801f528
 8014bf8:	0801ee90 	.word	0x0801ee90
 8014bfc:	0801eeb0 	.word	0x0801eeb0
 8014c00:	0801eee4 	.word	0x0801eee4

08014c04 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8014c04:	b580      	push	{r7, lr}
 8014c06:	b082      	sub	sp, #8
 8014c08:	af00      	add	r7, sp, #0
 8014c0a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8014c0c:	687b      	ldr	r3, [r7, #4]
 8014c0e:	2b00      	cmp	r3, #0
 8014c10:	d10a      	bne.n	8014c28 <tcp_rexmit_rto+0x24>
 8014c12:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8014c16:	490b      	ldr	r1, [pc, #44]	; (8014c44 <tcp_rexmit_rto+0x40>)
 8014c18:	480b      	ldr	r0, [pc, #44]	; (8014c48 <tcp_rexmit_rto+0x44>)
 8014c1a:	f006 fa7b 	bl	801b114 <trace_printf>
 8014c1e:	490b      	ldr	r1, [pc, #44]	; (8014c4c <tcp_rexmit_rto+0x48>)
 8014c20:	480b      	ldr	r0, [pc, #44]	; (8014c50 <tcp_rexmit_rto+0x4c>)
 8014c22:	f006 fa77 	bl	801b114 <trace_printf>
 8014c26:	e7fe      	b.n	8014c26 <tcp_rexmit_rto+0x22>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8014c28:	6878      	ldr	r0, [r7, #4]
 8014c2a:	f7ff ff3d 	bl	8014aa8 <tcp_rexmit_rto_prepare>
 8014c2e:	4603      	mov	r3, r0
 8014c30:	2b00      	cmp	r3, #0
 8014c32:	d102      	bne.n	8014c3a <tcp_rexmit_rto+0x36>
    tcp_rexmit_rto_commit(pcb);
 8014c34:	6878      	ldr	r0, [r7, #4]
 8014c36:	f7ff ffb7 	bl	8014ba8 <tcp_rexmit_rto_commit>
  }
}
 8014c3a:	bf00      	nop
 8014c3c:	3708      	adds	r7, #8
 8014c3e:	46bd      	mov	sp, r7
 8014c40:	bd80      	pop	{r7, pc}
 8014c42:	bf00      	nop
 8014c44:	0801f54c 	.word	0x0801f54c
 8014c48:	0801ee90 	.word	0x0801ee90
 8014c4c:	0801eeb0 	.word	0x0801eeb0
 8014c50:	0801eee4 	.word	0x0801eee4

08014c54 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8014c54:	b590      	push	{r4, r7, lr}
 8014c56:	b085      	sub	sp, #20
 8014c58:	af00      	add	r7, sp, #0
 8014c5a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8014c5c:	687b      	ldr	r3, [r7, #4]
 8014c5e:	2b00      	cmp	r3, #0
 8014c60:	d10a      	bne.n	8014c78 <tcp_rexmit+0x24>
 8014c62:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8014c66:	4930      	ldr	r1, [pc, #192]	; (8014d28 <tcp_rexmit+0xd4>)
 8014c68:	4830      	ldr	r0, [pc, #192]	; (8014d2c <tcp_rexmit+0xd8>)
 8014c6a:	f006 fa53 	bl	801b114 <trace_printf>
 8014c6e:	4930      	ldr	r1, [pc, #192]	; (8014d30 <tcp_rexmit+0xdc>)
 8014c70:	4830      	ldr	r0, [pc, #192]	; (8014d34 <tcp_rexmit+0xe0>)
 8014c72:	f006 fa4f 	bl	801b114 <trace_printf>
 8014c76:	e7fe      	b.n	8014c76 <tcp_rexmit+0x22>

  if (pcb->unacked == NULL) {
 8014c78:	687b      	ldr	r3, [r7, #4]
 8014c7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014c7c:	2b00      	cmp	r3, #0
 8014c7e:	d102      	bne.n	8014c86 <tcp_rexmit+0x32>
    return ERR_VAL;
 8014c80:	f06f 0305 	mvn.w	r3, #5
 8014c84:	e04c      	b.n	8014d20 <tcp_rexmit+0xcc>
  }

  seg = pcb->unacked;
 8014c86:	687b      	ldr	r3, [r7, #4]
 8014c88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014c8a:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8014c8c:	68b8      	ldr	r0, [r7, #8]
 8014c8e:	f7ff fdeb 	bl	8014868 <tcp_output_segment_busy>
 8014c92:	4603      	mov	r3, r0
 8014c94:	2b00      	cmp	r3, #0
 8014c96:	d002      	beq.n	8014c9e <tcp_rexmit+0x4a>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8014c98:	f06f 0305 	mvn.w	r3, #5
 8014c9c:	e040      	b.n	8014d20 <tcp_rexmit+0xcc>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8014c9e:	68bb      	ldr	r3, [r7, #8]
 8014ca0:	681a      	ldr	r2, [r3, #0]
 8014ca2:	687b      	ldr	r3, [r7, #4]
 8014ca4:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 8014ca6:	687b      	ldr	r3, [r7, #4]
 8014ca8:	336c      	adds	r3, #108	; 0x6c
 8014caa:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8014cac:	e002      	b.n	8014cb4 <tcp_rexmit+0x60>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8014cae:	68fb      	ldr	r3, [r7, #12]
 8014cb0:	681b      	ldr	r3, [r3, #0]
 8014cb2:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8014cb4:	68fb      	ldr	r3, [r7, #12]
 8014cb6:	681b      	ldr	r3, [r3, #0]
 8014cb8:	2b00      	cmp	r3, #0
 8014cba:	d011      	beq.n	8014ce0 <tcp_rexmit+0x8c>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8014cbc:	68fb      	ldr	r3, [r7, #12]
 8014cbe:	681b      	ldr	r3, [r3, #0]
 8014cc0:	691b      	ldr	r3, [r3, #16]
 8014cc2:	685b      	ldr	r3, [r3, #4]
 8014cc4:	4618      	mov	r0, r3
 8014cc6:	f7f8 f852 	bl	800cd6e <lwip_htonl>
 8014cca:	4604      	mov	r4, r0
 8014ccc:	68bb      	ldr	r3, [r7, #8]
 8014cce:	691b      	ldr	r3, [r3, #16]
 8014cd0:	685b      	ldr	r3, [r3, #4]
 8014cd2:	4618      	mov	r0, r3
 8014cd4:	f7f8 f84b 	bl	800cd6e <lwip_htonl>
 8014cd8:	4603      	mov	r3, r0
 8014cda:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8014cdc:	2b00      	cmp	r3, #0
 8014cde:	dbe6      	blt.n	8014cae <tcp_rexmit+0x5a>
  }
  seg->next = *cur_seg;
 8014ce0:	68fb      	ldr	r3, [r7, #12]
 8014ce2:	681a      	ldr	r2, [r3, #0]
 8014ce4:	68bb      	ldr	r3, [r7, #8]
 8014ce6:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8014ce8:	68fb      	ldr	r3, [r7, #12]
 8014cea:	68ba      	ldr	r2, [r7, #8]
 8014cec:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8014cee:	68bb      	ldr	r3, [r7, #8]
 8014cf0:	681b      	ldr	r3, [r3, #0]
 8014cf2:	2b00      	cmp	r3, #0
 8014cf4:	d103      	bne.n	8014cfe <tcp_rexmit+0xaa>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8014cf6:	687b      	ldr	r3, [r7, #4]
 8014cf8:	2200      	movs	r2, #0
 8014cfa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8014cfe:	687b      	ldr	r3, [r7, #4]
 8014d00:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8014d04:	2bff      	cmp	r3, #255	; 0xff
 8014d06:	d007      	beq.n	8014d18 <tcp_rexmit+0xc4>
    ++pcb->nrtx;
 8014d08:	687b      	ldr	r3, [r7, #4]
 8014d0a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8014d0e:	3301      	adds	r3, #1
 8014d10:	b2da      	uxtb	r2, r3
 8014d12:	687b      	ldr	r3, [r7, #4]
 8014d14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8014d18:	687b      	ldr	r3, [r7, #4]
 8014d1a:	2200      	movs	r2, #0
 8014d1c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8014d1e:	2300      	movs	r3, #0
}
 8014d20:	4618      	mov	r0, r3
 8014d22:	3714      	adds	r7, #20
 8014d24:	46bd      	mov	sp, r7
 8014d26:	bd90      	pop	{r4, r7, pc}
 8014d28:	0801f568 	.word	0x0801f568
 8014d2c:	0801ee90 	.word	0x0801ee90
 8014d30:	0801eeb0 	.word	0x0801eeb0
 8014d34:	0801eee4 	.word	0x0801eee4

08014d38 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8014d38:	b580      	push	{r7, lr}
 8014d3a:	b082      	sub	sp, #8
 8014d3c:	af00      	add	r7, sp, #0
 8014d3e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8014d40:	687b      	ldr	r3, [r7, #4]
 8014d42:	2b00      	cmp	r3, #0
 8014d44:	d10a      	bne.n	8014d5c <tcp_rexmit_fast+0x24>
 8014d46:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8014d4a:	492b      	ldr	r1, [pc, #172]	; (8014df8 <tcp_rexmit_fast+0xc0>)
 8014d4c:	482b      	ldr	r0, [pc, #172]	; (8014dfc <tcp_rexmit_fast+0xc4>)
 8014d4e:	f006 f9e1 	bl	801b114 <trace_printf>
 8014d52:	492b      	ldr	r1, [pc, #172]	; (8014e00 <tcp_rexmit_fast+0xc8>)
 8014d54:	482b      	ldr	r0, [pc, #172]	; (8014e04 <tcp_rexmit_fast+0xcc>)
 8014d56:	f006 f9dd 	bl	801b114 <trace_printf>
 8014d5a:	e7fe      	b.n	8014d5a <tcp_rexmit_fast+0x22>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8014d5c:	687b      	ldr	r3, [r7, #4]
 8014d5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014d60:	2b00      	cmp	r3, #0
 8014d62:	d044      	beq.n	8014dee <tcp_rexmit_fast+0xb6>
 8014d64:	687b      	ldr	r3, [r7, #4]
 8014d66:	8b5b      	ldrh	r3, [r3, #26]
 8014d68:	f003 0304 	and.w	r3, r3, #4
 8014d6c:	2b00      	cmp	r3, #0
 8014d6e:	d13e      	bne.n	8014dee <tcp_rexmit_fast+0xb6>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8014d70:	6878      	ldr	r0, [r7, #4]
 8014d72:	f7ff ff6f 	bl	8014c54 <tcp_rexmit>
 8014d76:	4603      	mov	r3, r0
 8014d78:	2b00      	cmp	r3, #0
 8014d7a:	d138      	bne.n	8014dee <tcp_rexmit_fast+0xb6>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8014d7c:	687b      	ldr	r3, [r7, #4]
 8014d7e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8014d82:	687b      	ldr	r3, [r7, #4]
 8014d84:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8014d88:	4293      	cmp	r3, r2
 8014d8a:	bf28      	it	cs
 8014d8c:	4613      	movcs	r3, r2
 8014d8e:	b29b      	uxth	r3, r3
 8014d90:	0fda      	lsrs	r2, r3, #31
 8014d92:	4413      	add	r3, r2
 8014d94:	105b      	asrs	r3, r3, #1
 8014d96:	b29a      	uxth	r2, r3
 8014d98:	687b      	ldr	r3, [r7, #4]
 8014d9a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8014d9e:	687b      	ldr	r3, [r7, #4]
 8014da0:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8014da4:	461a      	mov	r2, r3
 8014da6:	687b      	ldr	r3, [r7, #4]
 8014da8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014daa:	005b      	lsls	r3, r3, #1
 8014dac:	429a      	cmp	r2, r3
 8014dae:	d206      	bcs.n	8014dbe <tcp_rexmit_fast+0x86>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8014db0:	687b      	ldr	r3, [r7, #4]
 8014db2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014db4:	005b      	lsls	r3, r3, #1
 8014db6:	b29a      	uxth	r2, r3
 8014db8:	687b      	ldr	r3, [r7, #4]
 8014dba:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8014dbe:	687b      	ldr	r3, [r7, #4]
 8014dc0:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8014dc4:	687b      	ldr	r3, [r7, #4]
 8014dc6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014dc8:	4619      	mov	r1, r3
 8014dca:	0049      	lsls	r1, r1, #1
 8014dcc:	440b      	add	r3, r1
 8014dce:	b29b      	uxth	r3, r3
 8014dd0:	4413      	add	r3, r2
 8014dd2:	b29a      	uxth	r2, r3
 8014dd4:	687b      	ldr	r3, [r7, #4]
 8014dd6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8014dda:	687b      	ldr	r3, [r7, #4]
 8014ddc:	8b5b      	ldrh	r3, [r3, #26]
 8014dde:	f043 0304 	orr.w	r3, r3, #4
 8014de2:	b29a      	uxth	r2, r3
 8014de4:	687b      	ldr	r3, [r7, #4]
 8014de6:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8014de8:	687b      	ldr	r3, [r7, #4]
 8014dea:	2200      	movs	r2, #0
 8014dec:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 8014dee:	bf00      	nop
 8014df0:	3708      	adds	r7, #8
 8014df2:	46bd      	mov	sp, r7
 8014df4:	bd80      	pop	{r7, pc}
 8014df6:	bf00      	nop
 8014df8:	0801f580 	.word	0x0801f580
 8014dfc:	0801ee90 	.word	0x0801ee90
 8014e00:	0801eeb0 	.word	0x0801eeb0
 8014e04:	0801eee4 	.word	0x0801eee4

08014e08 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8014e08:	b580      	push	{r7, lr}
 8014e0a:	b086      	sub	sp, #24
 8014e0c:	af00      	add	r7, sp, #0
 8014e0e:	60f8      	str	r0, [r7, #12]
 8014e10:	607b      	str	r3, [r7, #4]
 8014e12:	460b      	mov	r3, r1
 8014e14:	817b      	strh	r3, [r7, #10]
 8014e16:	4613      	mov	r3, r2
 8014e18:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8014e1a:	897a      	ldrh	r2, [r7, #10]
 8014e1c:	893b      	ldrh	r3, [r7, #8]
 8014e1e:	4413      	add	r3, r2
 8014e20:	b29b      	uxth	r3, r3
 8014e22:	3314      	adds	r3, #20
 8014e24:	b29b      	uxth	r3, r3
 8014e26:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014e2a:	4619      	mov	r1, r3
 8014e2c:	2022      	movs	r0, #34	; 0x22
 8014e2e:	f7f9 f989 	bl	800e144 <pbuf_alloc>
 8014e32:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8014e34:	697b      	ldr	r3, [r7, #20]
 8014e36:	2b00      	cmp	r3, #0
 8014e38:	d051      	beq.n	8014ede <tcp_output_alloc_header_common+0xd6>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8014e3a:	897b      	ldrh	r3, [r7, #10]
 8014e3c:	3313      	adds	r3, #19
 8014e3e:	697a      	ldr	r2, [r7, #20]
 8014e40:	8952      	ldrh	r2, [r2, #10]
 8014e42:	4293      	cmp	r3, r2
 8014e44:	db0a      	blt.n	8014e5c <tcp_output_alloc_header_common+0x54>
 8014e46:	f240 7223 	movw	r2, #1827	; 0x723
 8014e4a:	4927      	ldr	r1, [pc, #156]	; (8014ee8 <tcp_output_alloc_header_common+0xe0>)
 8014e4c:	4827      	ldr	r0, [pc, #156]	; (8014eec <tcp_output_alloc_header_common+0xe4>)
 8014e4e:	f006 f961 	bl	801b114 <trace_printf>
 8014e52:	4927      	ldr	r1, [pc, #156]	; (8014ef0 <tcp_output_alloc_header_common+0xe8>)
 8014e54:	4827      	ldr	r0, [pc, #156]	; (8014ef4 <tcp_output_alloc_header_common+0xec>)
 8014e56:	f006 f95d 	bl	801b114 <trace_printf>
 8014e5a:	e7fe      	b.n	8014e5a <tcp_output_alloc_header_common+0x52>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8014e5c:	697b      	ldr	r3, [r7, #20]
 8014e5e:	685b      	ldr	r3, [r3, #4]
 8014e60:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8014e62:	8c3b      	ldrh	r3, [r7, #32]
 8014e64:	4618      	mov	r0, r3
 8014e66:	f7f7 ff6d 	bl	800cd44 <lwip_htons>
 8014e6a:	4603      	mov	r3, r0
 8014e6c:	461a      	mov	r2, r3
 8014e6e:	693b      	ldr	r3, [r7, #16]
 8014e70:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8014e72:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014e74:	4618      	mov	r0, r3
 8014e76:	f7f7 ff65 	bl	800cd44 <lwip_htons>
 8014e7a:	4603      	mov	r3, r0
 8014e7c:	461a      	mov	r2, r3
 8014e7e:	693b      	ldr	r3, [r7, #16]
 8014e80:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8014e82:	693b      	ldr	r3, [r7, #16]
 8014e84:	687a      	ldr	r2, [r7, #4]
 8014e86:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8014e88:	68f8      	ldr	r0, [r7, #12]
 8014e8a:	f7f7 ff70 	bl	800cd6e <lwip_htonl>
 8014e8e:	4602      	mov	r2, r0
 8014e90:	693b      	ldr	r3, [r7, #16]
 8014e92:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8014e94:	897b      	ldrh	r3, [r7, #10]
 8014e96:	089b      	lsrs	r3, r3, #2
 8014e98:	b29b      	uxth	r3, r3
 8014e9a:	3305      	adds	r3, #5
 8014e9c:	b29b      	uxth	r3, r3
 8014e9e:	031b      	lsls	r3, r3, #12
 8014ea0:	b29a      	uxth	r2, r3
 8014ea2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8014ea6:	b29b      	uxth	r3, r3
 8014ea8:	4313      	orrs	r3, r2
 8014eaa:	b29b      	uxth	r3, r3
 8014eac:	4618      	mov	r0, r3
 8014eae:	f7f7 ff49 	bl	800cd44 <lwip_htons>
 8014eb2:	4603      	mov	r3, r0
 8014eb4:	461a      	mov	r2, r3
 8014eb6:	693b      	ldr	r3, [r7, #16]
 8014eb8:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8014eba:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8014ebc:	4618      	mov	r0, r3
 8014ebe:	f7f7 ff41 	bl	800cd44 <lwip_htons>
 8014ec2:	4603      	mov	r3, r0
 8014ec4:	461a      	mov	r2, r3
 8014ec6:	693b      	ldr	r3, [r7, #16]
 8014ec8:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8014eca:	693b      	ldr	r3, [r7, #16]
 8014ecc:	2200      	movs	r2, #0
 8014ece:	741a      	strb	r2, [r3, #16]
 8014ed0:	2200      	movs	r2, #0
 8014ed2:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8014ed4:	693b      	ldr	r3, [r7, #16]
 8014ed6:	2200      	movs	r2, #0
 8014ed8:	749a      	strb	r2, [r3, #18]
 8014eda:	2200      	movs	r2, #0
 8014edc:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8014ede:	697b      	ldr	r3, [r7, #20]
}
 8014ee0:	4618      	mov	r0, r3
 8014ee2:	3718      	adds	r7, #24
 8014ee4:	46bd      	mov	sp, r7
 8014ee6:	bd80      	pop	{r7, pc}
 8014ee8:	0801f5a0 	.word	0x0801f5a0
 8014eec:	0801ee90 	.word	0x0801ee90
 8014ef0:	0801eeb0 	.word	0x0801eeb0
 8014ef4:	0801eee4 	.word	0x0801eee4

08014ef8 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8014ef8:	b5b0      	push	{r4, r5, r7, lr}
 8014efa:	b08a      	sub	sp, #40	; 0x28
 8014efc:	af04      	add	r7, sp, #16
 8014efe:	60f8      	str	r0, [r7, #12]
 8014f00:	607b      	str	r3, [r7, #4]
 8014f02:	460b      	mov	r3, r1
 8014f04:	817b      	strh	r3, [r7, #10]
 8014f06:	4613      	mov	r3, r2
 8014f08:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8014f0a:	68fb      	ldr	r3, [r7, #12]
 8014f0c:	2b00      	cmp	r3, #0
 8014f0e:	d10a      	bne.n	8014f26 <tcp_output_alloc_header+0x2e>
 8014f10:	f240 7242 	movw	r2, #1858	; 0x742
 8014f14:	4916      	ldr	r1, [pc, #88]	; (8014f70 <tcp_output_alloc_header+0x78>)
 8014f16:	4817      	ldr	r0, [pc, #92]	; (8014f74 <tcp_output_alloc_header+0x7c>)
 8014f18:	f006 f8fc 	bl	801b114 <trace_printf>
 8014f1c:	4916      	ldr	r1, [pc, #88]	; (8014f78 <tcp_output_alloc_header+0x80>)
 8014f1e:	4817      	ldr	r0, [pc, #92]	; (8014f7c <tcp_output_alloc_header+0x84>)
 8014f20:	f006 f8f8 	bl	801b114 <trace_printf>
 8014f24:	e7fe      	b.n	8014f24 <tcp_output_alloc_header+0x2c>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8014f26:	68fb      	ldr	r3, [r7, #12]
 8014f28:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8014f2a:	68fb      	ldr	r3, [r7, #12]
 8014f2c:	8adb      	ldrh	r3, [r3, #22]
 8014f2e:	68fa      	ldr	r2, [r7, #12]
 8014f30:	8b12      	ldrh	r2, [r2, #24]
 8014f32:	68f9      	ldr	r1, [r7, #12]
 8014f34:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 8014f36:	893d      	ldrh	r5, [r7, #8]
 8014f38:	897c      	ldrh	r4, [r7, #10]
 8014f3a:	9103      	str	r1, [sp, #12]
 8014f3c:	2110      	movs	r1, #16
 8014f3e:	9102      	str	r1, [sp, #8]
 8014f40:	9201      	str	r2, [sp, #4]
 8014f42:	9300      	str	r3, [sp, #0]
 8014f44:	687b      	ldr	r3, [r7, #4]
 8014f46:	462a      	mov	r2, r5
 8014f48:	4621      	mov	r1, r4
 8014f4a:	f7ff ff5d 	bl	8014e08 <tcp_output_alloc_header_common>
 8014f4e:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8014f50:	697b      	ldr	r3, [r7, #20]
 8014f52:	2b00      	cmp	r3, #0
 8014f54:	d006      	beq.n	8014f64 <tcp_output_alloc_header+0x6c>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8014f56:	68fb      	ldr	r3, [r7, #12]
 8014f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014f5a:	68fa      	ldr	r2, [r7, #12]
 8014f5c:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8014f5e:	441a      	add	r2, r3
 8014f60:	68fb      	ldr	r3, [r7, #12]
 8014f62:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8014f64:	697b      	ldr	r3, [r7, #20]
}
 8014f66:	4618      	mov	r0, r3
 8014f68:	3718      	adds	r7, #24
 8014f6a:	46bd      	mov	sp, r7
 8014f6c:	bdb0      	pop	{r4, r5, r7, pc}
 8014f6e:	bf00      	nop
 8014f70:	0801f5d0 	.word	0x0801f5d0
 8014f74:	0801ee90 	.word	0x0801ee90
 8014f78:	0801eeb0 	.word	0x0801eeb0
 8014f7c:	0801eee4 	.word	0x0801eee4

08014f80 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8014f80:	b580      	push	{r7, lr}
 8014f82:	b088      	sub	sp, #32
 8014f84:	af00      	add	r7, sp, #0
 8014f86:	60f8      	str	r0, [r7, #12]
 8014f88:	60b9      	str	r1, [r7, #8]
 8014f8a:	4611      	mov	r1, r2
 8014f8c:	461a      	mov	r2, r3
 8014f8e:	460b      	mov	r3, r1
 8014f90:	71fb      	strb	r3, [r7, #7]
 8014f92:	4613      	mov	r3, r2
 8014f94:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8014f96:	2300      	movs	r3, #0
 8014f98:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8014f9a:	68bb      	ldr	r3, [r7, #8]
 8014f9c:	2b00      	cmp	r3, #0
 8014f9e:	d10a      	bne.n	8014fb6 <tcp_output_fill_options+0x36>
 8014fa0:	f240 7256 	movw	r2, #1878	; 0x756
 8014fa4:	4916      	ldr	r1, [pc, #88]	; (8015000 <tcp_output_fill_options+0x80>)
 8014fa6:	4817      	ldr	r0, [pc, #92]	; (8015004 <tcp_output_fill_options+0x84>)
 8014fa8:	f006 f8b4 	bl	801b114 <trace_printf>
 8014fac:	4916      	ldr	r1, [pc, #88]	; (8015008 <tcp_output_fill_options+0x88>)
 8014fae:	4817      	ldr	r0, [pc, #92]	; (801500c <tcp_output_fill_options+0x8c>)
 8014fb0:	f006 f8b0 	bl	801b114 <trace_printf>
 8014fb4:	e7fe      	b.n	8014fb4 <tcp_output_fill_options+0x34>

  tcphdr = (struct tcp_hdr *)p->payload;
 8014fb6:	68bb      	ldr	r3, [r7, #8]
 8014fb8:	685b      	ldr	r3, [r3, #4]
 8014fba:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8014fbc:	69bb      	ldr	r3, [r7, #24]
 8014fbe:	3314      	adds	r3, #20
 8014fc0:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8014fc2:	69bb      	ldr	r3, [r7, #24]
 8014fc4:	f103 0214 	add.w	r2, r3, #20
 8014fc8:	8bfb      	ldrh	r3, [r7, #30]
 8014fca:	009b      	lsls	r3, r3, #2
 8014fcc:	4619      	mov	r1, r3
 8014fce:	79fb      	ldrb	r3, [r7, #7]
 8014fd0:	009b      	lsls	r3, r3, #2
 8014fd2:	f003 0304 	and.w	r3, r3, #4
 8014fd6:	440b      	add	r3, r1
 8014fd8:	4413      	add	r3, r2
 8014fda:	697a      	ldr	r2, [r7, #20]
 8014fdc:	429a      	cmp	r2, r3
 8014fde:	d00a      	beq.n	8014ff6 <tcp_output_fill_options+0x76>
 8014fe0:	f240 7275 	movw	r2, #1909	; 0x775
 8014fe4:	490a      	ldr	r1, [pc, #40]	; (8015010 <tcp_output_fill_options+0x90>)
 8014fe6:	4807      	ldr	r0, [pc, #28]	; (8015004 <tcp_output_fill_options+0x84>)
 8014fe8:	f006 f894 	bl	801b114 <trace_printf>
 8014fec:	4906      	ldr	r1, [pc, #24]	; (8015008 <tcp_output_fill_options+0x88>)
 8014fee:	4807      	ldr	r0, [pc, #28]	; (801500c <tcp_output_fill_options+0x8c>)
 8014ff0:	f006 f890 	bl	801b114 <trace_printf>
 8014ff4:	e7fe      	b.n	8014ff4 <tcp_output_fill_options+0x74>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8014ff6:	bf00      	nop
 8014ff8:	3720      	adds	r7, #32
 8014ffa:	46bd      	mov	sp, r7
 8014ffc:	bd80      	pop	{r7, pc}
 8014ffe:	bf00      	nop
 8015000:	0801f5f8 	.word	0x0801f5f8
 8015004:	0801ee90 	.word	0x0801ee90
 8015008:	0801eeb0 	.word	0x0801eeb0
 801500c:	0801eee4 	.word	0x0801eee4
 8015010:	0801f4f0 	.word	0x0801f4f0

08015014 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8015014:	b580      	push	{r7, lr}
 8015016:	b08a      	sub	sp, #40	; 0x28
 8015018:	af04      	add	r7, sp, #16
 801501a:	60f8      	str	r0, [r7, #12]
 801501c:	60b9      	str	r1, [r7, #8]
 801501e:	607a      	str	r2, [r7, #4]
 8015020:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8015022:	68bb      	ldr	r3, [r7, #8]
 8015024:	2b00      	cmp	r3, #0
 8015026:	d10a      	bne.n	801503e <tcp_output_control_segment+0x2a>
 8015028:	f240 7287 	movw	r2, #1927	; 0x787
 801502c:	4921      	ldr	r1, [pc, #132]	; (80150b4 <tcp_output_control_segment+0xa0>)
 801502e:	4822      	ldr	r0, [pc, #136]	; (80150b8 <tcp_output_control_segment+0xa4>)
 8015030:	f006 f870 	bl	801b114 <trace_printf>
 8015034:	4921      	ldr	r1, [pc, #132]	; (80150bc <tcp_output_control_segment+0xa8>)
 8015036:	4822      	ldr	r0, [pc, #136]	; (80150c0 <tcp_output_control_segment+0xac>)
 8015038:	f006 f86c 	bl	801b114 <trace_printf>
 801503c:	e7fe      	b.n	801503c <tcp_output_control_segment+0x28>

  netif = tcp_route(pcb, src, dst);
 801503e:	683a      	ldr	r2, [r7, #0]
 8015040:	6879      	ldr	r1, [r7, #4]
 8015042:	68f8      	ldr	r0, [r7, #12]
 8015044:	f7fe f940 	bl	80132c8 <tcp_route>
 8015048:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 801504a:	693b      	ldr	r3, [r7, #16]
 801504c:	2b00      	cmp	r3, #0
 801504e:	d102      	bne.n	8015056 <tcp_output_control_segment+0x42>
    err = ERR_RTE;
 8015050:	23fc      	movs	r3, #252	; 0xfc
 8015052:	75fb      	strb	r3, [r7, #23]
 8015054:	e024      	b.n	80150a0 <tcp_output_control_segment+0x8c>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8015056:	68fb      	ldr	r3, [r7, #12]
 8015058:	2b00      	cmp	r3, #0
 801505a:	d006      	beq.n	801506a <tcp_output_control_segment+0x56>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 801505c:	68fb      	ldr	r3, [r7, #12]
 801505e:	7adb      	ldrb	r3, [r3, #11]
 8015060:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8015062:	68fb      	ldr	r3, [r7, #12]
 8015064:	7a9b      	ldrb	r3, [r3, #10]
 8015066:	757b      	strb	r3, [r7, #21]
 8015068:	e003      	b.n	8015072 <tcp_output_control_segment+0x5e>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 801506a:	23ff      	movs	r3, #255	; 0xff
 801506c:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 801506e:	2300      	movs	r3, #0
 8015070:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
 8015072:	4b14      	ldr	r3, [pc, #80]	; (80150c4 <tcp_output_control_segment+0xb0>)
 8015074:	f8b3 3090 	ldrh.w	r3, [r3, #144]	; 0x90
 8015078:	3301      	adds	r3, #1
 801507a:	b29a      	uxth	r2, r3
 801507c:	4b11      	ldr	r3, [pc, #68]	; (80150c4 <tcp_output_control_segment+0xb0>)
 801507e:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8015082:	7dba      	ldrb	r2, [r7, #22]
 8015084:	693b      	ldr	r3, [r7, #16]
 8015086:	9302      	str	r3, [sp, #8]
 8015088:	2306      	movs	r3, #6
 801508a:	9301      	str	r3, [sp, #4]
 801508c:	7d7b      	ldrb	r3, [r7, #21]
 801508e:	9300      	str	r3, [sp, #0]
 8015090:	4613      	mov	r3, r2
 8015092:	683a      	ldr	r2, [r7, #0]
 8015094:	6879      	ldr	r1, [r7, #4]
 8015096:	68b8      	ldr	r0, [r7, #8]
 8015098:	f004 fc80 	bl	801999c <ip4_output_if>
 801509c:	4603      	mov	r3, r0
 801509e:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 80150a0:	68b8      	ldr	r0, [r7, #8]
 80150a2:	f7f9 fb65 	bl	800e770 <pbuf_free>
  return err;
 80150a6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80150aa:	4618      	mov	r0, r3
 80150ac:	3718      	adds	r7, #24
 80150ae:	46bd      	mov	sp, r7
 80150b0:	bd80      	pop	{r7, pc}
 80150b2:	bf00      	nop
 80150b4:	0801f620 	.word	0x0801f620
 80150b8:	0801ee90 	.word	0x0801ee90
 80150bc:	0801eeb0 	.word	0x0801eeb0
 80150c0:	0801eee4 	.word	0x0801eee4
 80150c4:	20010b7c 	.word	0x20010b7c

080150c8 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 80150c8:	b590      	push	{r4, r7, lr}
 80150ca:	b08b      	sub	sp, #44	; 0x2c
 80150cc:	af04      	add	r7, sp, #16
 80150ce:	60f8      	str	r0, [r7, #12]
 80150d0:	60b9      	str	r1, [r7, #8]
 80150d2:	607a      	str	r2, [r7, #4]
 80150d4:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 80150d6:	683b      	ldr	r3, [r7, #0]
 80150d8:	2b00      	cmp	r3, #0
 80150da:	d10a      	bne.n	80150f2 <tcp_rst+0x2a>
 80150dc:	f240 72c4 	movw	r2, #1988	; 0x7c4
 80150e0:	4922      	ldr	r1, [pc, #136]	; (801516c <tcp_rst+0xa4>)
 80150e2:	4823      	ldr	r0, [pc, #140]	; (8015170 <tcp_rst+0xa8>)
 80150e4:	f006 f816 	bl	801b114 <trace_printf>
 80150e8:	4922      	ldr	r1, [pc, #136]	; (8015174 <tcp_rst+0xac>)
 80150ea:	4823      	ldr	r0, [pc, #140]	; (8015178 <tcp_rst+0xb0>)
 80150ec:	f006 f812 	bl	801b114 <trace_printf>
 80150f0:	e7fe      	b.n	80150f0 <tcp_rst+0x28>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 80150f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80150f4:	2b00      	cmp	r3, #0
 80150f6:	d10a      	bne.n	801510e <tcp_rst+0x46>
 80150f8:	f240 72c5 	movw	r2, #1989	; 0x7c5
 80150fc:	491f      	ldr	r1, [pc, #124]	; (801517c <tcp_rst+0xb4>)
 80150fe:	481c      	ldr	r0, [pc, #112]	; (8015170 <tcp_rst+0xa8>)
 8015100:	f006 f808 	bl	801b114 <trace_printf>
 8015104:	491b      	ldr	r1, [pc, #108]	; (8015174 <tcp_rst+0xac>)
 8015106:	481c      	ldr	r0, [pc, #112]	; (8015178 <tcp_rst+0xb0>)
 8015108:	f006 f804 	bl	801b114 <trace_printf>
 801510c:	e7fe      	b.n	801510c <tcp_rst+0x44>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801510e:	2300      	movs	r3, #0
 8015110:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8015112:	f246 0308 	movw	r3, #24584	; 0x6008
 8015116:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8015118:	7dfb      	ldrb	r3, [r7, #23]
 801511a:	b29c      	uxth	r4, r3
 801511c:	68b8      	ldr	r0, [r7, #8]
 801511e:	f7f7 fe26 	bl	800cd6e <lwip_htonl>
 8015122:	4602      	mov	r2, r0
 8015124:	8abb      	ldrh	r3, [r7, #20]
 8015126:	9303      	str	r3, [sp, #12]
 8015128:	2314      	movs	r3, #20
 801512a:	9302      	str	r3, [sp, #8]
 801512c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 801512e:	9301      	str	r3, [sp, #4]
 8015130:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8015132:	9300      	str	r3, [sp, #0]
 8015134:	4613      	mov	r3, r2
 8015136:	2200      	movs	r2, #0
 8015138:	4621      	mov	r1, r4
 801513a:	6878      	ldr	r0, [r7, #4]
 801513c:	f7ff fe64 	bl	8014e08 <tcp_output_alloc_header_common>
 8015140:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8015142:	693b      	ldr	r3, [r7, #16]
 8015144:	2b00      	cmp	r3, #0
 8015146:	d00c      	beq.n	8015162 <tcp_rst+0x9a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8015148:	7dfb      	ldrb	r3, [r7, #23]
 801514a:	2200      	movs	r2, #0
 801514c:	6939      	ldr	r1, [r7, #16]
 801514e:	68f8      	ldr	r0, [r7, #12]
 8015150:	f7ff ff16 	bl	8014f80 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8015154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015156:	683a      	ldr	r2, [r7, #0]
 8015158:	6939      	ldr	r1, [r7, #16]
 801515a:	68f8      	ldr	r0, [r7, #12]
 801515c:	f7ff ff5a 	bl	8015014 <tcp_output_control_segment>
 8015160:	e000      	b.n	8015164 <tcp_rst+0x9c>
    return;
 8015162:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8015164:	371c      	adds	r7, #28
 8015166:	46bd      	mov	sp, r7
 8015168:	bd90      	pop	{r4, r7, pc}
 801516a:	bf00      	nop
 801516c:	0801f64c 	.word	0x0801f64c
 8015170:	0801ee90 	.word	0x0801ee90
 8015174:	0801eeb0 	.word	0x0801eeb0
 8015178:	0801eee4 	.word	0x0801eee4
 801517c:	0801f668 	.word	0x0801f668

08015180 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8015180:	b590      	push	{r4, r7, lr}
 8015182:	b087      	sub	sp, #28
 8015184:	af00      	add	r7, sp, #0
 8015186:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8015188:	2300      	movs	r3, #0
 801518a:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 801518c:	2300      	movs	r3, #0
 801518e:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8015190:	687b      	ldr	r3, [r7, #4]
 8015192:	2b00      	cmp	r3, #0
 8015194:	d10a      	bne.n	80151ac <tcp_send_empty_ack+0x2c>
 8015196:	f240 72ea 	movw	r2, #2026	; 0x7ea
 801519a:	4929      	ldr	r1, [pc, #164]	; (8015240 <tcp_send_empty_ack+0xc0>)
 801519c:	4829      	ldr	r0, [pc, #164]	; (8015244 <tcp_send_empty_ack+0xc4>)
 801519e:	f005 ffb9 	bl	801b114 <trace_printf>
 80151a2:	4929      	ldr	r1, [pc, #164]	; (8015248 <tcp_send_empty_ack+0xc8>)
 80151a4:	4829      	ldr	r0, [pc, #164]	; (801524c <tcp_send_empty_ack+0xcc>)
 80151a6:	f005 ffb5 	bl	801b114 <trace_printf>
 80151aa:	e7fe      	b.n	80151aa <tcp_send_empty_ack+0x2a>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80151ac:	7dfb      	ldrb	r3, [r7, #23]
 80151ae:	009b      	lsls	r3, r3, #2
 80151b0:	b2db      	uxtb	r3, r3
 80151b2:	f003 0304 	and.w	r3, r3, #4
 80151b6:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 80151b8:	7d7b      	ldrb	r3, [r7, #21]
 80151ba:	b29c      	uxth	r4, r3
 80151bc:	687b      	ldr	r3, [r7, #4]
 80151be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80151c0:	4618      	mov	r0, r3
 80151c2:	f7f7 fdd4 	bl	800cd6e <lwip_htonl>
 80151c6:	4603      	mov	r3, r0
 80151c8:	2200      	movs	r2, #0
 80151ca:	4621      	mov	r1, r4
 80151cc:	6878      	ldr	r0, [r7, #4]
 80151ce:	f7ff fe93 	bl	8014ef8 <tcp_output_alloc_header>
 80151d2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80151d4:	693b      	ldr	r3, [r7, #16]
 80151d6:	2b00      	cmp	r3, #0
 80151d8:	d109      	bne.n	80151ee <tcp_send_empty_ack+0x6e>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80151da:	687b      	ldr	r3, [r7, #4]
 80151dc:	8b5b      	ldrh	r3, [r3, #26]
 80151de:	f043 0303 	orr.w	r3, r3, #3
 80151e2:	b29a      	uxth	r2, r3
 80151e4:	687b      	ldr	r3, [r7, #4]
 80151e6:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 80151e8:	f06f 0301 	mvn.w	r3, #1
 80151ec:	e023      	b.n	8015236 <tcp_send_empty_ack+0xb6>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 80151ee:	7dbb      	ldrb	r3, [r7, #22]
 80151f0:	7dfa      	ldrb	r2, [r7, #23]
 80151f2:	6939      	ldr	r1, [r7, #16]
 80151f4:	6878      	ldr	r0, [r7, #4]
 80151f6:	f7ff fec3 	bl	8014f80 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80151fa:	687a      	ldr	r2, [r7, #4]
 80151fc:	687b      	ldr	r3, [r7, #4]
 80151fe:	3304      	adds	r3, #4
 8015200:	6939      	ldr	r1, [r7, #16]
 8015202:	6878      	ldr	r0, [r7, #4]
 8015204:	f7ff ff06 	bl	8015014 <tcp_output_control_segment>
 8015208:	4603      	mov	r3, r0
 801520a:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 801520c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015210:	2b00      	cmp	r3, #0
 8015212:	d007      	beq.n	8015224 <tcp_send_empty_ack+0xa4>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8015214:	687b      	ldr	r3, [r7, #4]
 8015216:	8b5b      	ldrh	r3, [r3, #26]
 8015218:	f043 0303 	orr.w	r3, r3, #3
 801521c:	b29a      	uxth	r2, r3
 801521e:	687b      	ldr	r3, [r7, #4]
 8015220:	835a      	strh	r2, [r3, #26]
 8015222:	e006      	b.n	8015232 <tcp_send_empty_ack+0xb2>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8015224:	687b      	ldr	r3, [r7, #4]
 8015226:	8b5b      	ldrh	r3, [r3, #26]
 8015228:	f023 0303 	bic.w	r3, r3, #3
 801522c:	b29a      	uxth	r2, r3
 801522e:	687b      	ldr	r3, [r7, #4]
 8015230:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8015232:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8015236:	4618      	mov	r0, r3
 8015238:	371c      	adds	r7, #28
 801523a:	46bd      	mov	sp, r7
 801523c:	bd90      	pop	{r4, r7, pc}
 801523e:	bf00      	nop
 8015240:	0801f684 	.word	0x0801f684
 8015244:	0801ee90 	.word	0x0801ee90
 8015248:	0801eeb0 	.word	0x0801eeb0
 801524c:	0801eee4 	.word	0x0801eee4

08015250 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8015250:	b590      	push	{r4, r7, lr}
 8015252:	b087      	sub	sp, #28
 8015254:	af00      	add	r7, sp, #0
 8015256:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8015258:	2300      	movs	r3, #0
 801525a:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 801525c:	687b      	ldr	r3, [r7, #4]
 801525e:	2b00      	cmp	r3, #0
 8015260:	d10a      	bne.n	8015278 <tcp_keepalive+0x28>
 8015262:	f640 0224 	movw	r2, #2084	; 0x824
 8015266:	4919      	ldr	r1, [pc, #100]	; (80152cc <tcp_keepalive+0x7c>)
 8015268:	4819      	ldr	r0, [pc, #100]	; (80152d0 <tcp_keepalive+0x80>)
 801526a:	f005 ff53 	bl	801b114 <trace_printf>
 801526e:	4919      	ldr	r1, [pc, #100]	; (80152d4 <tcp_keepalive+0x84>)
 8015270:	4819      	ldr	r0, [pc, #100]	; (80152d8 <tcp_keepalive+0x88>)
 8015272:	f005 ff4f 	bl	801b114 <trace_printf>
 8015276:	e7fe      	b.n	8015276 <tcp_keepalive+0x26>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8015278:	7bfb      	ldrb	r3, [r7, #15]
 801527a:	b29c      	uxth	r4, r3
 801527c:	687b      	ldr	r3, [r7, #4]
 801527e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015280:	3b01      	subs	r3, #1
 8015282:	4618      	mov	r0, r3
 8015284:	f7f7 fd73 	bl	800cd6e <lwip_htonl>
 8015288:	4603      	mov	r3, r0
 801528a:	2200      	movs	r2, #0
 801528c:	4621      	mov	r1, r4
 801528e:	6878      	ldr	r0, [r7, #4]
 8015290:	f7ff fe32 	bl	8014ef8 <tcp_output_alloc_header>
 8015294:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8015296:	693b      	ldr	r3, [r7, #16]
 8015298:	2b00      	cmp	r3, #0
 801529a:	d102      	bne.n	80152a2 <tcp_keepalive+0x52>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 801529c:	f04f 33ff 	mov.w	r3, #4294967295
 80152a0:	e010      	b.n	80152c4 <tcp_keepalive+0x74>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80152a2:	7bfb      	ldrb	r3, [r7, #15]
 80152a4:	2200      	movs	r2, #0
 80152a6:	6939      	ldr	r1, [r7, #16]
 80152a8:	6878      	ldr	r0, [r7, #4]
 80152aa:	f7ff fe69 	bl	8014f80 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80152ae:	687a      	ldr	r2, [r7, #4]
 80152b0:	687b      	ldr	r3, [r7, #4]
 80152b2:	3304      	adds	r3, #4
 80152b4:	6939      	ldr	r1, [r7, #16]
 80152b6:	6878      	ldr	r0, [r7, #4]
 80152b8:	f7ff feac 	bl	8015014 <tcp_output_control_segment>
 80152bc:	4603      	mov	r3, r0
 80152be:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80152c0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80152c4:	4618      	mov	r0, r3
 80152c6:	371c      	adds	r7, #28
 80152c8:	46bd      	mov	sp, r7
 80152ca:	bd90      	pop	{r4, r7, pc}
 80152cc:	0801f6a4 	.word	0x0801f6a4
 80152d0:	0801ee90 	.word	0x0801ee90
 80152d4:	0801eeb0 	.word	0x0801eeb0
 80152d8:	0801eee4 	.word	0x0801eee4

080152dc <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 80152dc:	b590      	push	{r4, r7, lr}
 80152de:	b08b      	sub	sp, #44	; 0x2c
 80152e0:	af00      	add	r7, sp, #0
 80152e2:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80152e4:	2300      	movs	r3, #0
 80152e6:	74fb      	strb	r3, [r7, #19]

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 80152e8:	687b      	ldr	r3, [r7, #4]
 80152ea:	2b00      	cmp	r3, #0
 80152ec:	d10a      	bne.n	8015304 <tcp_zero_window_probe+0x28>
 80152ee:	f640 024f 	movw	r2, #2127	; 0x84f
 80152f2:	494e      	ldr	r1, [pc, #312]	; (801542c <tcp_zero_window_probe+0x150>)
 80152f4:	484e      	ldr	r0, [pc, #312]	; (8015430 <tcp_zero_window_probe+0x154>)
 80152f6:	f005 ff0d 	bl	801b114 <trace_printf>
 80152fa:	494e      	ldr	r1, [pc, #312]	; (8015434 <tcp_zero_window_probe+0x158>)
 80152fc:	484e      	ldr	r0, [pc, #312]	; (8015438 <tcp_zero_window_probe+0x15c>)
 80152fe:	f005 ff09 	bl	801b114 <trace_printf>
 8015302:	e7fe      	b.n	8015302 <tcp_zero_window_probe+0x26>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8015304:	687b      	ldr	r3, [r7, #4]
 8015306:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015308:	627b      	str	r3, [r7, #36]	; 0x24
  if (seg == NULL) {
 801530a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801530c:	2b00      	cmp	r3, #0
 801530e:	d101      	bne.n	8015314 <tcp_zero_window_probe+0x38>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8015310:	2300      	movs	r3, #0
 8015312:	e087      	b.n	8015424 <tcp_zero_window_probe+0x148>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8015314:	687b      	ldr	r3, [r7, #4]
 8015316:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801531a:	2bff      	cmp	r3, #255	; 0xff
 801531c:	d007      	beq.n	801532e <tcp_zero_window_probe+0x52>
    ++pcb->persist_probe;
 801531e:	687b      	ldr	r3, [r7, #4]
 8015320:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8015324:	3301      	adds	r3, #1
 8015326:	b2da      	uxtb	r2, r3
 8015328:	687b      	ldr	r3, [r7, #4]
 801532a:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 801532e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015330:	691b      	ldr	r3, [r3, #16]
 8015332:	899b      	ldrh	r3, [r3, #12]
 8015334:	b29b      	uxth	r3, r3
 8015336:	4618      	mov	r0, r3
 8015338:	f7f7 fd04 	bl	800cd44 <lwip_htons>
 801533c:	4603      	mov	r3, r0
 801533e:	b2db      	uxtb	r3, r3
 8015340:	f003 0301 	and.w	r3, r3, #1
 8015344:	2b00      	cmp	r3, #0
 8015346:	d005      	beq.n	8015354 <tcp_zero_window_probe+0x78>
 8015348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801534a:	891b      	ldrh	r3, [r3, #8]
 801534c:	2b00      	cmp	r3, #0
 801534e:	d101      	bne.n	8015354 <tcp_zero_window_probe+0x78>
 8015350:	2301      	movs	r3, #1
 8015352:	e000      	b.n	8015356 <tcp_zero_window_probe+0x7a>
 8015354:	2300      	movs	r3, #0
 8015356:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 801535a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801535e:	2b00      	cmp	r3, #0
 8015360:	bf0c      	ite	eq
 8015362:	2301      	moveq	r3, #1
 8015364:	2300      	movne	r3, #0
 8015366:	b2db      	uxtb	r3, r3
 8015368:	843b      	strh	r3, [r7, #32]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 801536a:	7cfb      	ldrb	r3, [r7, #19]
 801536c:	b299      	uxth	r1, r3
 801536e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015370:	691b      	ldr	r3, [r3, #16]
 8015372:	685b      	ldr	r3, [r3, #4]
 8015374:	8c3a      	ldrh	r2, [r7, #32]
 8015376:	6878      	ldr	r0, [r7, #4]
 8015378:	f7ff fdbe 	bl	8014ef8 <tcp_output_alloc_header>
 801537c:	61f8      	str	r0, [r7, #28]
  if (p == NULL) {
 801537e:	69fb      	ldr	r3, [r7, #28]
 8015380:	2b00      	cmp	r3, #0
 8015382:	d102      	bne.n	801538a <tcp_zero_window_probe+0xae>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8015384:	f04f 33ff 	mov.w	r3, #4294967295
 8015388:	e04c      	b.n	8015424 <tcp_zero_window_probe+0x148>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 801538a:	69fb      	ldr	r3, [r7, #28]
 801538c:	685b      	ldr	r3, [r3, #4]
 801538e:	61bb      	str	r3, [r7, #24]

  if (is_fin) {
 8015390:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8015394:	2b00      	cmp	r3, #0
 8015396:	d011      	beq.n	80153bc <tcp_zero_window_probe+0xe0>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8015398:	69bb      	ldr	r3, [r7, #24]
 801539a:	899b      	ldrh	r3, [r3, #12]
 801539c:	b29b      	uxth	r3, r3
 801539e:	b21b      	sxth	r3, r3
 80153a0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80153a4:	b21c      	sxth	r4, r3
 80153a6:	2011      	movs	r0, #17
 80153a8:	f7f7 fccc 	bl	800cd44 <lwip_htons>
 80153ac:	4603      	mov	r3, r0
 80153ae:	b21b      	sxth	r3, r3
 80153b0:	4323      	orrs	r3, r4
 80153b2:	b21b      	sxth	r3, r3
 80153b4:	b29a      	uxth	r2, r3
 80153b6:	69bb      	ldr	r3, [r7, #24]
 80153b8:	819a      	strh	r2, [r3, #12]
 80153ba:	e010      	b.n	80153de <tcp_zero_window_probe+0x102>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 80153bc:	69fb      	ldr	r3, [r7, #28]
 80153be:	685b      	ldr	r3, [r3, #4]
 80153c0:	3314      	adds	r3, #20
 80153c2:	617b      	str	r3, [r7, #20]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 80153c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80153c6:	6858      	ldr	r0, [r3, #4]
 80153c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80153ca:	685b      	ldr	r3, [r3, #4]
 80153cc:	891a      	ldrh	r2, [r3, #8]
 80153ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80153d0:	891b      	ldrh	r3, [r3, #8]
 80153d2:	1ad3      	subs	r3, r2, r3
 80153d4:	b29b      	uxth	r3, r3
 80153d6:	2201      	movs	r2, #1
 80153d8:	6979      	ldr	r1, [r7, #20]
 80153da:	f7f9 fc01 	bl	800ebe0 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 80153de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80153e0:	691b      	ldr	r3, [r3, #16]
 80153e2:	685b      	ldr	r3, [r3, #4]
 80153e4:	4618      	mov	r0, r3
 80153e6:	f7f7 fcc2 	bl	800cd6e <lwip_htonl>
 80153ea:	4603      	mov	r3, r0
 80153ec:	3301      	adds	r3, #1
 80153ee:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80153f0:	687b      	ldr	r3, [r7, #4]
 80153f2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80153f4:	68fb      	ldr	r3, [r7, #12]
 80153f6:	1ad3      	subs	r3, r2, r3
 80153f8:	2b00      	cmp	r3, #0
 80153fa:	da02      	bge.n	8015402 <tcp_zero_window_probe+0x126>
    pcb->snd_nxt = snd_nxt;
 80153fc:	687b      	ldr	r3, [r7, #4]
 80153fe:	68fa      	ldr	r2, [r7, #12]
 8015400:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8015402:	7cfb      	ldrb	r3, [r7, #19]
 8015404:	2200      	movs	r2, #0
 8015406:	69f9      	ldr	r1, [r7, #28]
 8015408:	6878      	ldr	r0, [r7, #4]
 801540a:	f7ff fdb9 	bl	8014f80 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801540e:	687a      	ldr	r2, [r7, #4]
 8015410:	687b      	ldr	r3, [r7, #4]
 8015412:	3304      	adds	r3, #4
 8015414:	69f9      	ldr	r1, [r7, #28]
 8015416:	6878      	ldr	r0, [r7, #4]
 8015418:	f7ff fdfc 	bl	8015014 <tcp_output_control_segment>
 801541c:	4603      	mov	r3, r0
 801541e:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8015420:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8015424:	4618      	mov	r0, r3
 8015426:	372c      	adds	r7, #44	; 0x2c
 8015428:	46bd      	mov	sp, r7
 801542a:	bd90      	pop	{r4, r7, pc}
 801542c:	0801f6c0 	.word	0x0801f6c0
 8015430:	0801ee90 	.word	0x0801ee90
 8015434:	0801eeb0 	.word	0x0801eeb0
 8015438:	0801eee4 	.word	0x0801eee4

0801543c <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 801543c:	b580      	push	{r7, lr}
 801543e:	b082      	sub	sp, #8
 8015440:	af00      	add	r7, sp, #0
 8015442:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8015444:	f7f9 fce2 	bl	800ee0c <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8015448:	4b0a      	ldr	r3, [pc, #40]	; (8015474 <tcpip_tcp_timer+0x38>)
 801544a:	681b      	ldr	r3, [r3, #0]
 801544c:	2b00      	cmp	r3, #0
 801544e:	d103      	bne.n	8015458 <tcpip_tcp_timer+0x1c>
 8015450:	4b09      	ldr	r3, [pc, #36]	; (8015478 <tcpip_tcp_timer+0x3c>)
 8015452:	681b      	ldr	r3, [r3, #0]
 8015454:	2b00      	cmp	r3, #0
 8015456:	d005      	beq.n	8015464 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8015458:	2200      	movs	r2, #0
 801545a:	4908      	ldr	r1, [pc, #32]	; (801547c <tcpip_tcp_timer+0x40>)
 801545c:	20fa      	movs	r0, #250	; 0xfa
 801545e:	f000 f8f9 	bl	8015654 <sys_timeout>
 8015462:	e003      	b.n	801546c <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8015464:	4b06      	ldr	r3, [pc, #24]	; (8015480 <tcpip_tcp_timer+0x44>)
 8015466:	2200      	movs	r2, #0
 8015468:	601a      	str	r2, [r3, #0]
  }
}
 801546a:	bf00      	nop
 801546c:	bf00      	nop
 801546e:	3708      	adds	r7, #8
 8015470:	46bd      	mov	sp, r7
 8015472:	bd80      	pop	{r7, pc}
 8015474:	20010c80 	.word	0x20010c80
 8015478:	20010c90 	.word	0x20010c90
 801547c:	0801543d 	.word	0x0801543d
 8015480:	20009fd0 	.word	0x20009fd0

08015484 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8015484:	b580      	push	{r7, lr}
 8015486:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8015488:	4b0a      	ldr	r3, [pc, #40]	; (80154b4 <tcp_timer_needed+0x30>)
 801548a:	681b      	ldr	r3, [r3, #0]
 801548c:	2b00      	cmp	r3, #0
 801548e:	d10f      	bne.n	80154b0 <tcp_timer_needed+0x2c>
 8015490:	4b09      	ldr	r3, [pc, #36]	; (80154b8 <tcp_timer_needed+0x34>)
 8015492:	681b      	ldr	r3, [r3, #0]
 8015494:	2b00      	cmp	r3, #0
 8015496:	d103      	bne.n	80154a0 <tcp_timer_needed+0x1c>
 8015498:	4b08      	ldr	r3, [pc, #32]	; (80154bc <tcp_timer_needed+0x38>)
 801549a:	681b      	ldr	r3, [r3, #0]
 801549c:	2b00      	cmp	r3, #0
 801549e:	d007      	beq.n	80154b0 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 80154a0:	4b04      	ldr	r3, [pc, #16]	; (80154b4 <tcp_timer_needed+0x30>)
 80154a2:	2201      	movs	r2, #1
 80154a4:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80154a6:	2200      	movs	r2, #0
 80154a8:	4905      	ldr	r1, [pc, #20]	; (80154c0 <tcp_timer_needed+0x3c>)
 80154aa:	20fa      	movs	r0, #250	; 0xfa
 80154ac:	f000 f8d2 	bl	8015654 <sys_timeout>
  }
}
 80154b0:	bf00      	nop
 80154b2:	bd80      	pop	{r7, pc}
 80154b4:	20009fd0 	.word	0x20009fd0
 80154b8:	20010c80 	.word	0x20010c80
 80154bc:	20010c90 	.word	0x20010c90
 80154c0:	0801543d 	.word	0x0801543d

080154c4 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 80154c4:	b580      	push	{r7, lr}
 80154c6:	b086      	sub	sp, #24
 80154c8:	af00      	add	r7, sp, #0
 80154ca:	60f8      	str	r0, [r7, #12]
 80154cc:	60b9      	str	r1, [r7, #8]
 80154ce:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 80154d0:	200a      	movs	r0, #10
 80154d2:	f7f8 f9d1 	bl	800d878 <memp_malloc>
 80154d6:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 80154d8:	693b      	ldr	r3, [r7, #16]
 80154da:	2b00      	cmp	r3, #0
 80154dc:	d10c      	bne.n	80154f8 <sys_timeout_abs+0x34>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 80154de:	693b      	ldr	r3, [r7, #16]
 80154e0:	2b00      	cmp	r3, #0
 80154e2:	d154      	bne.n	801558e <sys_timeout_abs+0xca>
 80154e4:	22be      	movs	r2, #190	; 0xbe
 80154e6:	492c      	ldr	r1, [pc, #176]	; (8015598 <sys_timeout_abs+0xd4>)
 80154e8:	482c      	ldr	r0, [pc, #176]	; (801559c <sys_timeout_abs+0xd8>)
 80154ea:	f005 fe13 	bl	801b114 <trace_printf>
 80154ee:	492c      	ldr	r1, [pc, #176]	; (80155a0 <sys_timeout_abs+0xdc>)
 80154f0:	482c      	ldr	r0, [pc, #176]	; (80155a4 <sys_timeout_abs+0xe0>)
 80154f2:	f005 fe0f 	bl	801b114 <trace_printf>
 80154f6:	e7fe      	b.n	80154f6 <sys_timeout_abs+0x32>
    return;
  }

  timeout->next = NULL;
 80154f8:	693b      	ldr	r3, [r7, #16]
 80154fa:	2200      	movs	r2, #0
 80154fc:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 80154fe:	693b      	ldr	r3, [r7, #16]
 8015500:	68ba      	ldr	r2, [r7, #8]
 8015502:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8015504:	693b      	ldr	r3, [r7, #16]
 8015506:	687a      	ldr	r2, [r7, #4]
 8015508:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 801550a:	693b      	ldr	r3, [r7, #16]
 801550c:	68fa      	ldr	r2, [r7, #12]
 801550e:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8015510:	4b25      	ldr	r3, [pc, #148]	; (80155a8 <sys_timeout_abs+0xe4>)
 8015512:	681b      	ldr	r3, [r3, #0]
 8015514:	2b00      	cmp	r3, #0
 8015516:	d103      	bne.n	8015520 <sys_timeout_abs+0x5c>
    next_timeout = timeout;
 8015518:	4a23      	ldr	r2, [pc, #140]	; (80155a8 <sys_timeout_abs+0xe4>)
 801551a:	693b      	ldr	r3, [r7, #16]
 801551c:	6013      	str	r3, [r2, #0]
    return;
 801551e:	e037      	b.n	8015590 <sys_timeout_abs+0xcc>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8015520:	693b      	ldr	r3, [r7, #16]
 8015522:	685a      	ldr	r2, [r3, #4]
 8015524:	4b20      	ldr	r3, [pc, #128]	; (80155a8 <sys_timeout_abs+0xe4>)
 8015526:	681b      	ldr	r3, [r3, #0]
 8015528:	685b      	ldr	r3, [r3, #4]
 801552a:	1ad3      	subs	r3, r2, r3
 801552c:	0fdb      	lsrs	r3, r3, #31
 801552e:	f003 0301 	and.w	r3, r3, #1
 8015532:	b2db      	uxtb	r3, r3
 8015534:	2b00      	cmp	r3, #0
 8015536:	d007      	beq.n	8015548 <sys_timeout_abs+0x84>
    timeout->next = next_timeout;
 8015538:	4b1b      	ldr	r3, [pc, #108]	; (80155a8 <sys_timeout_abs+0xe4>)
 801553a:	681a      	ldr	r2, [r3, #0]
 801553c:	693b      	ldr	r3, [r7, #16]
 801553e:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8015540:	4a19      	ldr	r2, [pc, #100]	; (80155a8 <sys_timeout_abs+0xe4>)
 8015542:	693b      	ldr	r3, [r7, #16]
 8015544:	6013      	str	r3, [r2, #0]
 8015546:	e023      	b.n	8015590 <sys_timeout_abs+0xcc>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8015548:	4b17      	ldr	r3, [pc, #92]	; (80155a8 <sys_timeout_abs+0xe4>)
 801554a:	681b      	ldr	r3, [r3, #0]
 801554c:	617b      	str	r3, [r7, #20]
 801554e:	e01a      	b.n	8015586 <sys_timeout_abs+0xc2>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8015550:	697b      	ldr	r3, [r7, #20]
 8015552:	681b      	ldr	r3, [r3, #0]
 8015554:	2b00      	cmp	r3, #0
 8015556:	d00b      	beq.n	8015570 <sys_timeout_abs+0xac>
 8015558:	693b      	ldr	r3, [r7, #16]
 801555a:	685a      	ldr	r2, [r3, #4]
 801555c:	697b      	ldr	r3, [r7, #20]
 801555e:	681b      	ldr	r3, [r3, #0]
 8015560:	685b      	ldr	r3, [r3, #4]
 8015562:	1ad3      	subs	r3, r2, r3
 8015564:	0fdb      	lsrs	r3, r3, #31
 8015566:	f003 0301 	and.w	r3, r3, #1
 801556a:	b2db      	uxtb	r3, r3
 801556c:	2b00      	cmp	r3, #0
 801556e:	d007      	beq.n	8015580 <sys_timeout_abs+0xbc>
        timeout->next = t->next;
 8015570:	697b      	ldr	r3, [r7, #20]
 8015572:	681a      	ldr	r2, [r3, #0]
 8015574:	693b      	ldr	r3, [r7, #16]
 8015576:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8015578:	697b      	ldr	r3, [r7, #20]
 801557a:	693a      	ldr	r2, [r7, #16]
 801557c:	601a      	str	r2, [r3, #0]
        break;
 801557e:	e007      	b.n	8015590 <sys_timeout_abs+0xcc>
    for (t = next_timeout; t != NULL; t = t->next) {
 8015580:	697b      	ldr	r3, [r7, #20]
 8015582:	681b      	ldr	r3, [r3, #0]
 8015584:	617b      	str	r3, [r7, #20]
 8015586:	697b      	ldr	r3, [r7, #20]
 8015588:	2b00      	cmp	r3, #0
 801558a:	d1e1      	bne.n	8015550 <sys_timeout_abs+0x8c>
 801558c:	e000      	b.n	8015590 <sys_timeout_abs+0xcc>
    return;
 801558e:	bf00      	nop
      }
    }
  }
}
 8015590:	3718      	adds	r7, #24
 8015592:	46bd      	mov	sp, r7
 8015594:	bd80      	pop	{r7, pc}
 8015596:	bf00      	nop
 8015598:	0801f6e4 	.word	0x0801f6e4
 801559c:	0801f724 	.word	0x0801f724
 80155a0:	0801f744 	.word	0x0801f744
 80155a4:	0801f778 	.word	0x0801f778
 80155a8:	20009fc8 	.word	0x20009fc8

080155ac <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 80155ac:	b580      	push	{r7, lr}
 80155ae:	b086      	sub	sp, #24
 80155b0:	af00      	add	r7, sp, #0
 80155b2:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 80155b4:	687b      	ldr	r3, [r7, #4]
 80155b6:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 80155b8:	697b      	ldr	r3, [r7, #20]
 80155ba:	685b      	ldr	r3, [r3, #4]
 80155bc:	4798      	blx	r3

  now = sys_now();
 80155be:	f7f2 f95f 	bl	8007880 <sys_now>
 80155c2:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 80155c4:	697b      	ldr	r3, [r7, #20]
 80155c6:	681a      	ldr	r2, [r3, #0]
 80155c8:	4b0f      	ldr	r3, [pc, #60]	; (8015608 <lwip_cyclic_timer+0x5c>)
 80155ca:	681b      	ldr	r3, [r3, #0]
 80155cc:	4413      	add	r3, r2
 80155ce:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 80155d0:	68fa      	ldr	r2, [r7, #12]
 80155d2:	693b      	ldr	r3, [r7, #16]
 80155d4:	1ad3      	subs	r3, r2, r3
 80155d6:	0fdb      	lsrs	r3, r3, #31
 80155d8:	f003 0301 	and.w	r3, r3, #1
 80155dc:	b2db      	uxtb	r3, r3
 80155de:	2b00      	cmp	r3, #0
 80155e0:	d009      	beq.n	80155f6 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 80155e2:	697b      	ldr	r3, [r7, #20]
 80155e4:	681a      	ldr	r2, [r3, #0]
 80155e6:	693b      	ldr	r3, [r7, #16]
 80155e8:	4413      	add	r3, r2
 80155ea:	687a      	ldr	r2, [r7, #4]
 80155ec:	4907      	ldr	r1, [pc, #28]	; (801560c <lwip_cyclic_timer+0x60>)
 80155ee:	4618      	mov	r0, r3
 80155f0:	f7ff ff68 	bl	80154c4 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 80155f4:	e004      	b.n	8015600 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 80155f6:	687a      	ldr	r2, [r7, #4]
 80155f8:	4904      	ldr	r1, [pc, #16]	; (801560c <lwip_cyclic_timer+0x60>)
 80155fa:	68f8      	ldr	r0, [r7, #12]
 80155fc:	f7ff ff62 	bl	80154c4 <sys_timeout_abs>
}
 8015600:	bf00      	nop
 8015602:	3718      	adds	r7, #24
 8015604:	46bd      	mov	sp, r7
 8015606:	bd80      	pop	{r7, pc}
 8015608:	20009fcc 	.word	0x20009fcc
 801560c:	080155ad 	.word	0x080155ad

08015610 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8015610:	b580      	push	{r7, lr}
 8015612:	b082      	sub	sp, #8
 8015614:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8015616:	2301      	movs	r3, #1
 8015618:	607b      	str	r3, [r7, #4]
 801561a:	e00e      	b.n	801563a <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 801561c:	4a0b      	ldr	r2, [pc, #44]	; (801564c <sys_timeouts_init+0x3c>)
 801561e:	687b      	ldr	r3, [r7, #4]
 8015620:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8015624:	687b      	ldr	r3, [r7, #4]
 8015626:	00db      	lsls	r3, r3, #3
 8015628:	4a08      	ldr	r2, [pc, #32]	; (801564c <sys_timeouts_init+0x3c>)
 801562a:	4413      	add	r3, r2
 801562c:	461a      	mov	r2, r3
 801562e:	4908      	ldr	r1, [pc, #32]	; (8015650 <sys_timeouts_init+0x40>)
 8015630:	f000 f810 	bl	8015654 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8015634:	687b      	ldr	r3, [r7, #4]
 8015636:	3301      	adds	r3, #1
 8015638:	607b      	str	r3, [r7, #4]
 801563a:	687b      	ldr	r3, [r7, #4]
 801563c:	2b04      	cmp	r3, #4
 801563e:	d9ed      	bls.n	801561c <sys_timeouts_init+0xc>
  }
}
 8015640:	bf00      	nop
 8015642:	bf00      	nop
 8015644:	3708      	adds	r7, #8
 8015646:	46bd      	mov	sp, r7
 8015648:	bd80      	pop	{r7, pc}
 801564a:	bf00      	nop
 801564c:	080206f0 	.word	0x080206f0
 8015650:	080155ad 	.word	0x080155ad

08015654 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8015654:	b580      	push	{r7, lr}
 8015656:	b086      	sub	sp, #24
 8015658:	af00      	add	r7, sp, #0
 801565a:	60f8      	str	r0, [r7, #12]
 801565c:	60b9      	str	r1, [r7, #8]
 801565e:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8015660:	68fb      	ldr	r3, [r7, #12]
 8015662:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8015666:	d30a      	bcc.n	801567e <sys_timeout+0x2a>
 8015668:	f240 1229 	movw	r2, #297	; 0x129
 801566c:	490b      	ldr	r1, [pc, #44]	; (801569c <sys_timeout+0x48>)
 801566e:	480c      	ldr	r0, [pc, #48]	; (80156a0 <sys_timeout+0x4c>)
 8015670:	f005 fd50 	bl	801b114 <trace_printf>
 8015674:	490b      	ldr	r1, [pc, #44]	; (80156a4 <sys_timeout+0x50>)
 8015676:	480c      	ldr	r0, [pc, #48]	; (80156a8 <sys_timeout+0x54>)
 8015678:	f005 fd4c 	bl	801b114 <trace_printf>
 801567c:	e7fe      	b.n	801567c <sys_timeout+0x28>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801567e:	f7f2 f8ff 	bl	8007880 <sys_now>
 8015682:	4602      	mov	r2, r0
 8015684:	68fb      	ldr	r3, [r7, #12]
 8015686:	4413      	add	r3, r2
 8015688:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 801568a:	687a      	ldr	r2, [r7, #4]
 801568c:	68b9      	ldr	r1, [r7, #8]
 801568e:	6978      	ldr	r0, [r7, #20]
 8015690:	f7ff ff18 	bl	80154c4 <sys_timeout_abs>
#endif
}
 8015694:	bf00      	nop
 8015696:	3718      	adds	r7, #24
 8015698:	46bd      	mov	sp, r7
 801569a:	bd80      	pop	{r7, pc}
 801569c:	0801f77c 	.word	0x0801f77c
 80156a0:	0801f724 	.word	0x0801f724
 80156a4:	0801f744 	.word	0x0801f744
 80156a8:	0801f778 	.word	0x0801f778

080156ac <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 80156ac:	b580      	push	{r7, lr}
 80156ae:	b084      	sub	sp, #16
 80156b0:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 80156b2:	f7f2 f8e5 	bl	8007880 <sys_now>
 80156b6:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 80156b8:	4b17      	ldr	r3, [pc, #92]	; (8015718 <sys_check_timeouts+0x6c>)
 80156ba:	681b      	ldr	r3, [r3, #0]
 80156bc:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 80156be:	68bb      	ldr	r3, [r7, #8]
 80156c0:	2b00      	cmp	r3, #0
 80156c2:	d022      	beq.n	801570a <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 80156c4:	68bb      	ldr	r3, [r7, #8]
 80156c6:	685b      	ldr	r3, [r3, #4]
 80156c8:	68fa      	ldr	r2, [r7, #12]
 80156ca:	1ad3      	subs	r3, r2, r3
 80156cc:	0fdb      	lsrs	r3, r3, #31
 80156ce:	f003 0301 	and.w	r3, r3, #1
 80156d2:	b2db      	uxtb	r3, r3
 80156d4:	2b00      	cmp	r3, #0
 80156d6:	d11a      	bne.n	801570e <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 80156d8:	68bb      	ldr	r3, [r7, #8]
 80156da:	681b      	ldr	r3, [r3, #0]
 80156dc:	4a0e      	ldr	r2, [pc, #56]	; (8015718 <sys_check_timeouts+0x6c>)
 80156de:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 80156e0:	68bb      	ldr	r3, [r7, #8]
 80156e2:	689b      	ldr	r3, [r3, #8]
 80156e4:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 80156e6:	68bb      	ldr	r3, [r7, #8]
 80156e8:	68db      	ldr	r3, [r3, #12]
 80156ea:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 80156ec:	68bb      	ldr	r3, [r7, #8]
 80156ee:	685b      	ldr	r3, [r3, #4]
 80156f0:	4a0a      	ldr	r2, [pc, #40]	; (801571c <sys_check_timeouts+0x70>)
 80156f2:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 80156f4:	68b9      	ldr	r1, [r7, #8]
 80156f6:	200a      	movs	r0, #10
 80156f8:	f7f8 f920 	bl	800d93c <memp_free>
    if (handler != NULL) {
 80156fc:	687b      	ldr	r3, [r7, #4]
 80156fe:	2b00      	cmp	r3, #0
 8015700:	d0da      	beq.n	80156b8 <sys_check_timeouts+0xc>
      handler(arg);
 8015702:	687b      	ldr	r3, [r7, #4]
 8015704:	6838      	ldr	r0, [r7, #0]
 8015706:	4798      	blx	r3
  do {
 8015708:	e7d6      	b.n	80156b8 <sys_check_timeouts+0xc>
      return;
 801570a:	bf00      	nop
 801570c:	e000      	b.n	8015710 <sys_check_timeouts+0x64>
      return;
 801570e:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8015710:	3710      	adds	r7, #16
 8015712:	46bd      	mov	sp, r7
 8015714:	bd80      	pop	{r7, pc}
 8015716:	bf00      	nop
 8015718:	20009fc8 	.word	0x20009fc8
 801571c:	20009fcc 	.word	0x20009fcc

08015720 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8015720:	b580      	push	{r7, lr}
 8015722:	b082      	sub	sp, #8
 8015724:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8015726:	4b18      	ldr	r3, [pc, #96]	; (8015788 <sys_timeouts_sleeptime+0x68>)
 8015728:	681b      	ldr	r3, [r3, #0]
 801572a:	2b00      	cmp	r3, #0
 801572c:	d102      	bne.n	8015734 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 801572e:	f04f 33ff 	mov.w	r3, #4294967295
 8015732:	e024      	b.n	801577e <sys_timeouts_sleeptime+0x5e>
  }
  now = sys_now();
 8015734:	f7f2 f8a4 	bl	8007880 <sys_now>
 8015738:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 801573a:	4b13      	ldr	r3, [pc, #76]	; (8015788 <sys_timeouts_sleeptime+0x68>)
 801573c:	681b      	ldr	r3, [r3, #0]
 801573e:	685a      	ldr	r2, [r3, #4]
 8015740:	687b      	ldr	r3, [r7, #4]
 8015742:	1ad3      	subs	r3, r2, r3
 8015744:	0fdb      	lsrs	r3, r3, #31
 8015746:	f003 0301 	and.w	r3, r3, #1
 801574a:	b2db      	uxtb	r3, r3
 801574c:	2b00      	cmp	r3, #0
 801574e:	d001      	beq.n	8015754 <sys_timeouts_sleeptime+0x34>
    return 0;
 8015750:	2300      	movs	r3, #0
 8015752:	e014      	b.n	801577e <sys_timeouts_sleeptime+0x5e>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8015754:	4b0c      	ldr	r3, [pc, #48]	; (8015788 <sys_timeouts_sleeptime+0x68>)
 8015756:	681b      	ldr	r3, [r3, #0]
 8015758:	685a      	ldr	r2, [r3, #4]
 801575a:	687b      	ldr	r3, [r7, #4]
 801575c:	1ad3      	subs	r3, r2, r3
 801575e:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8015760:	683b      	ldr	r3, [r7, #0]
 8015762:	2b00      	cmp	r3, #0
 8015764:	da0a      	bge.n	801577c <sys_timeouts_sleeptime+0x5c>
 8015766:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 801576a:	4908      	ldr	r1, [pc, #32]	; (801578c <sys_timeouts_sleeptime+0x6c>)
 801576c:	4808      	ldr	r0, [pc, #32]	; (8015790 <sys_timeouts_sleeptime+0x70>)
 801576e:	f005 fcd1 	bl	801b114 <trace_printf>
 8015772:	4908      	ldr	r1, [pc, #32]	; (8015794 <sys_timeouts_sleeptime+0x74>)
 8015774:	4808      	ldr	r0, [pc, #32]	; (8015798 <sys_timeouts_sleeptime+0x78>)
 8015776:	f005 fccd 	bl	801b114 <trace_printf>
 801577a:	e7fe      	b.n	801577a <sys_timeouts_sleeptime+0x5a>
    return ret;
 801577c:	683b      	ldr	r3, [r7, #0]
  }
}
 801577e:	4618      	mov	r0, r3
 8015780:	3708      	adds	r7, #8
 8015782:	46bd      	mov	sp, r7
 8015784:	bd80      	pop	{r7, pc}
 8015786:	bf00      	nop
 8015788:	20009fc8 	.word	0x20009fc8
 801578c:	0801f7b4 	.word	0x0801f7b4
 8015790:	0801f724 	.word	0x0801f724
 8015794:	0801f744 	.word	0x0801f744
 8015798:	0801f778 	.word	0x0801f778

0801579c <udp_init>:

/**
 * Initialize this module.
 */
void udp_init(void)
{
 801579c:	b580      	push	{r7, lr}
 801579e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
	udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80157a0:	f005 fd3c 	bl	801b21c <rand>
 80157a4:	4603      	mov	r3, r0
 80157a6:	b29b      	uxth	r3, r3
 80157a8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80157ac:	b29b      	uxth	r3, r3
 80157ae:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 80157b2:	b29a      	uxth	r2, r3
 80157b4:	4b01      	ldr	r3, [pc, #4]	; (80157bc <udp_init+0x20>)
 80157b6:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80157b8:	bf00      	nop
 80157ba:	bd80      	pop	{r7, pc}
 80157bc:	2000001c 	.word	0x2000001c

080157c0 <udp_new_port>:
 * Allocate a new local UDP port.
 *
 * @return a new (free) local UDP port number
 */
static u16_t udp_new_port(void)
{
 80157c0:	b480      	push	{r7}
 80157c2:	b083      	sub	sp, #12
 80157c4:	af00      	add	r7, sp, #0
	u16_t n = 0;
 80157c6:	2300      	movs	r3, #0
 80157c8:	80fb      	strh	r3, [r7, #6]
	struct udp_pcb *pcb;

	again: if (udp_port++ == UDP_LOCAL_PORT_RANGE_END)
 80157ca:	4b17      	ldr	r3, [pc, #92]	; (8015828 <udp_new_port+0x68>)
 80157cc:	881b      	ldrh	r3, [r3, #0]
 80157ce:	1c5a      	adds	r2, r3, #1
 80157d0:	b291      	uxth	r1, r2
 80157d2:	4a15      	ldr	r2, [pc, #84]	; (8015828 <udp_new_port+0x68>)
 80157d4:	8011      	strh	r1, [r2, #0]
 80157d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80157da:	4293      	cmp	r3, r2
 80157dc:	d103      	bne.n	80157e6 <udp_new_port+0x26>
	{
		udp_port = UDP_LOCAL_PORT_RANGE_START;
 80157de:	4b12      	ldr	r3, [pc, #72]	; (8015828 <udp_new_port+0x68>)
 80157e0:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80157e4:	801a      	strh	r2, [r3, #0]
	}
	/* Check all PCBs. */
	for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next)
 80157e6:	4b11      	ldr	r3, [pc, #68]	; (801582c <udp_new_port+0x6c>)
 80157e8:	681b      	ldr	r3, [r3, #0]
 80157ea:	603b      	str	r3, [r7, #0]
 80157ec:	e011      	b.n	8015812 <udp_new_port+0x52>
	{
		if (pcb->local_port == udp_port)
 80157ee:	683b      	ldr	r3, [r7, #0]
 80157f0:	8a5a      	ldrh	r2, [r3, #18]
 80157f2:	4b0d      	ldr	r3, [pc, #52]	; (8015828 <udp_new_port+0x68>)
 80157f4:	881b      	ldrh	r3, [r3, #0]
 80157f6:	429a      	cmp	r2, r3
 80157f8:	d108      	bne.n	801580c <udp_new_port+0x4c>
		{
			if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START))
 80157fa:	88fb      	ldrh	r3, [r7, #6]
 80157fc:	3301      	adds	r3, #1
 80157fe:	80fb      	strh	r3, [r7, #6]
 8015800:	88fb      	ldrh	r3, [r7, #6]
 8015802:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8015806:	d3e0      	bcc.n	80157ca <udp_new_port+0xa>
			{
				return 0;
 8015808:	2300      	movs	r3, #0
 801580a:	e007      	b.n	801581c <udp_new_port+0x5c>
	for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next)
 801580c:	683b      	ldr	r3, [r7, #0]
 801580e:	68db      	ldr	r3, [r3, #12]
 8015810:	603b      	str	r3, [r7, #0]
 8015812:	683b      	ldr	r3, [r7, #0]
 8015814:	2b00      	cmp	r3, #0
 8015816:	d1ea      	bne.n	80157ee <udp_new_port+0x2e>
			}
			goto again;
		}
	}
	return udp_port;
 8015818:	4b03      	ldr	r3, [pc, #12]	; (8015828 <udp_new_port+0x68>)
 801581a:	881b      	ldrh	r3, [r3, #0]
}
 801581c:	4618      	mov	r0, r3
 801581e:	370c      	adds	r7, #12
 8015820:	46bd      	mov	sp, r7
 8015822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015826:	4770      	bx	lr
 8015828:	2000001c 	.word	0x2000001c
 801582c:	20010c98 	.word	0x20010c98

08015830 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t udp_input_local_match(struct udp_pcb *pcb, struct netif *inp,
		u8_t broadcast)
{
 8015830:	b580      	push	{r7, lr}
 8015832:	b084      	sub	sp, #16
 8015834:	af00      	add	r7, sp, #0
 8015836:	60f8      	str	r0, [r7, #12]
 8015838:	60b9      	str	r1, [r7, #8]
 801583a:	4613      	mov	r3, r2
 801583c:	71fb      	strb	r3, [r7, #7]
	LWIP_UNUSED_ARG(inp); /* in IPv6 only case */
	LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

	LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 801583e:	68fb      	ldr	r3, [r7, #12]
 8015840:	2b00      	cmp	r3, #0
 8015842:	d109      	bne.n	8015858 <udp_input_local_match+0x28>
 8015844:	2288      	movs	r2, #136	; 0x88
 8015846:	492b      	ldr	r1, [pc, #172]	; (80158f4 <udp_input_local_match+0xc4>)
 8015848:	482b      	ldr	r0, [pc, #172]	; (80158f8 <udp_input_local_match+0xc8>)
 801584a:	f005 fc63 	bl	801b114 <trace_printf>
 801584e:	492b      	ldr	r1, [pc, #172]	; (80158fc <udp_input_local_match+0xcc>)
 8015850:	482b      	ldr	r0, [pc, #172]	; (8015900 <udp_input_local_match+0xd0>)
 8015852:	f005 fc5f 	bl	801b114 <trace_printf>
 8015856:	e7fe      	b.n	8015856 <udp_input_local_match+0x26>
	LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8015858:	68bb      	ldr	r3, [r7, #8]
 801585a:	2b00      	cmp	r3, #0
 801585c:	d109      	bne.n	8015872 <udp_input_local_match+0x42>
 801585e:	2289      	movs	r2, #137	; 0x89
 8015860:	4928      	ldr	r1, [pc, #160]	; (8015904 <udp_input_local_match+0xd4>)
 8015862:	4825      	ldr	r0, [pc, #148]	; (80158f8 <udp_input_local_match+0xc8>)
 8015864:	f005 fc56 	bl	801b114 <trace_printf>
 8015868:	4924      	ldr	r1, [pc, #144]	; (80158fc <udp_input_local_match+0xcc>)
 801586a:	4825      	ldr	r0, [pc, #148]	; (8015900 <udp_input_local_match+0xd0>)
 801586c:	f005 fc52 	bl	801b114 <trace_printf>
 8015870:	e7fe      	b.n	8015870 <udp_input_local_match+0x40>

	/* check if PCB is bound to specific netif */
	if ((pcb->netif_idx != NETIF_NO_INDEX)
 8015872:	68fb      	ldr	r3, [r7, #12]
 8015874:	7a1b      	ldrb	r3, [r3, #8]
 8015876:	2b00      	cmp	r3, #0
 8015878:	d00b      	beq.n	8015892 <udp_input_local_match+0x62>
			&& (pcb->netif_idx != netif_get_index(ip_data.current_input_netif)))
 801587a:	68fb      	ldr	r3, [r7, #12]
 801587c:	7a1a      	ldrb	r2, [r3, #8]
 801587e:	4b22      	ldr	r3, [pc, #136]	; (8015908 <udp_input_local_match+0xd8>)
 8015880:	685b      	ldr	r3, [r3, #4]
 8015882:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8015886:	3301      	adds	r3, #1
 8015888:	b2db      	uxtb	r3, r3
 801588a:	429a      	cmp	r2, r3
 801588c:	d001      	beq.n	8015892 <udp_input_local_match+0x62>
	{
		return 0;
 801588e:	2300      	movs	r3, #0
 8015890:	e02b      	b.n	80158ea <udp_input_local_match+0xba>
	if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr()))
	{
#if LWIP_IPV4
		/* Special case: IPv4 broadcast: all or broadcasts in my subnet
		 * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
		if (broadcast != 0)
 8015892:	79fb      	ldrb	r3, [r7, #7]
 8015894:	2b00      	cmp	r3, #0
 8015896:	d018      	beq.n	80158ca <udp_input_local_match+0x9a>
		{
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
			{
				if (ip4_addr_isany(
 8015898:	68fb      	ldr	r3, [r7, #12]
 801589a:	2b00      	cmp	r3, #0
 801589c:	d013      	beq.n	80158c6 <udp_input_local_match+0x96>
 801589e:	68fb      	ldr	r3, [r7, #12]
 80158a0:	681b      	ldr	r3, [r3, #0]
 80158a2:	2b00      	cmp	r3, #0
 80158a4:	d00f      	beq.n	80158c6 <udp_input_local_match+0x96>
						ip_2_ip4(&pcb->local_ip)) ||
						((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80158a6:	4b18      	ldr	r3, [pc, #96]	; (8015908 <udp_input_local_match+0xd8>)
 80158a8:	695b      	ldr	r3, [r3, #20]
						ip_2_ip4(&pcb->local_ip)) ||
 80158aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80158ae:	d00a      	beq.n	80158c6 <udp_input_local_match+0x96>
						ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp)))
 80158b0:	68fb      	ldr	r3, [r7, #12]
 80158b2:	681a      	ldr	r2, [r3, #0]
 80158b4:	4b14      	ldr	r3, [pc, #80]	; (8015908 <udp_input_local_match+0xd8>)
 80158b6:	695b      	ldr	r3, [r3, #20]
 80158b8:	405a      	eors	r2, r3
 80158ba:	68bb      	ldr	r3, [r7, #8]
 80158bc:	3308      	adds	r3, #8
 80158be:	681b      	ldr	r3, [r3, #0]
 80158c0:	4013      	ands	r3, r2
						((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80158c2:	2b00      	cmp	r3, #0
 80158c4:	d110      	bne.n	80158e8 <udp_input_local_match+0xb8>
				{
					return 1;
 80158c6:	2301      	movs	r3, #1
 80158c8:	e00f      	b.n	80158ea <udp_input_local_match+0xba>
			}
		}
		else
#endif /* LWIP_IPV4 */
		/* Handle IPv4 and IPv6: all or exact match */
		if (ip_addr_isany(
 80158ca:	68fb      	ldr	r3, [r7, #12]
 80158cc:	2b00      	cmp	r3, #0
 80158ce:	d009      	beq.n	80158e4 <udp_input_local_match+0xb4>
 80158d0:	68fb      	ldr	r3, [r7, #12]
 80158d2:	681b      	ldr	r3, [r3, #0]
 80158d4:	2b00      	cmp	r3, #0
 80158d6:	d005      	beq.n	80158e4 <udp_input_local_match+0xb4>
				&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr()))
 80158d8:	68fb      	ldr	r3, [r7, #12]
 80158da:	681a      	ldr	r2, [r3, #0]
 80158dc:	4b0a      	ldr	r3, [pc, #40]	; (8015908 <udp_input_local_match+0xd8>)
 80158de:	695b      	ldr	r3, [r3, #20]
 80158e0:	429a      	cmp	r2, r3
 80158e2:	d101      	bne.n	80158e8 <udp_input_local_match+0xb8>
		{
			return 1;
 80158e4:	2301      	movs	r3, #1
 80158e6:	e000      	b.n	80158ea <udp_input_local_match+0xba>
		}
	}

	return 0;
 80158e8:	2300      	movs	r3, #0
}
 80158ea:	4618      	mov	r0, r3
 80158ec:	3710      	adds	r7, #16
 80158ee:	46bd      	mov	sp, r7
 80158f0:	bd80      	pop	{r7, pc}
 80158f2:	bf00      	nop
 80158f4:	0801f7c8 	.word	0x0801f7c8
 80158f8:	0801f7ec 	.word	0x0801f7ec
 80158fc:	0801f80c 	.word	0x0801f80c
 8015900:	0801f83c 	.word	0x0801f83c
 8015904:	0801f840 	.word	0x0801f840
 8015908:	2000d40c 	.word	0x2000d40c

0801590c <udp_input>:
 * @param p pbuf to be demultiplexed to a UDP PCB (p->payload pointing to the UDP header)
 * @param inp network interface on which the datagram was received.
 *
 */
void udp_input(struct pbuf *p, struct netif *inp)
{
 801590c:	b590      	push	{r4, r7, lr}
 801590e:	b08d      	sub	sp, #52	; 0x34
 8015910:	af02      	add	r7, sp, #8
 8015912:	6078      	str	r0, [r7, #4]
 8015914:	6039      	str	r1, [r7, #0]
	struct udp_hdr *udphdr;
	struct udp_pcb *pcb, *prev;
	struct udp_pcb *uncon_pcb;
	u16_t src, dest;
	u8_t broadcast;
	u8_t for_us = 0;
 8015916:	2300      	movs	r3, #0
 8015918:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	LWIP_UNUSED_ARG(inp);

	LWIP_ASSERT_CORE_LOCKED();

	LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 801591c:	687b      	ldr	r3, [r7, #4]
 801591e:	2b00      	cmp	r3, #0
 8015920:	d109      	bne.n	8015936 <udp_input+0x2a>
 8015922:	22d8      	movs	r2, #216	; 0xd8
 8015924:	4999      	ldr	r1, [pc, #612]	; (8015b8c <udp_input+0x280>)
 8015926:	489a      	ldr	r0, [pc, #616]	; (8015b90 <udp_input+0x284>)
 8015928:	f005 fbf4 	bl	801b114 <trace_printf>
 801592c:	4999      	ldr	r1, [pc, #612]	; (8015b94 <udp_input+0x288>)
 801592e:	489a      	ldr	r0, [pc, #616]	; (8015b98 <udp_input+0x28c>)
 8015930:	f005 fbf0 	bl	801b114 <trace_printf>
 8015934:	e7fe      	b.n	8015934 <udp_input+0x28>
	LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8015936:	683b      	ldr	r3, [r7, #0]
 8015938:	2b00      	cmp	r3, #0
 801593a:	d109      	bne.n	8015950 <udp_input+0x44>
 801593c:	22d9      	movs	r2, #217	; 0xd9
 801593e:	4997      	ldr	r1, [pc, #604]	; (8015b9c <udp_input+0x290>)
 8015940:	4893      	ldr	r0, [pc, #588]	; (8015b90 <udp_input+0x284>)
 8015942:	f005 fbe7 	bl	801b114 <trace_printf>
 8015946:	4993      	ldr	r1, [pc, #588]	; (8015b94 <udp_input+0x288>)
 8015948:	4893      	ldr	r0, [pc, #588]	; (8015b98 <udp_input+0x28c>)
 801594a:	f005 fbe3 	bl	801b114 <trace_printf>
 801594e:	e7fe      	b.n	801594e <udp_input+0x42>

	PERF_START;

	UDP_STATS_INC(udp.recv);
 8015950:	4b93      	ldr	r3, [pc, #588]	; (8015ba0 <udp_input+0x294>)
 8015952:	f8b3 307a 	ldrh.w	r3, [r3, #122]	; 0x7a
 8015956:	3301      	adds	r3, #1
 8015958:	b29a      	uxth	r2, r3
 801595a:	4b91      	ldr	r3, [pc, #580]	; (8015ba0 <udp_input+0x294>)
 801595c:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a

	/* Check minimum length (UDP header) */
	if (p->len < UDP_HLEN)
 8015960:	687b      	ldr	r3, [r7, #4]
 8015962:	895b      	ldrh	r3, [r3, #10]
 8015964:	2b07      	cmp	r3, #7
 8015966:	d813      	bhi.n	8015990 <udp_input+0x84>
	{
		/* drop short packets */
		LWIP_DEBUGF((UDP_DEBUG),
				("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
		UDP_STATS_INC(udp.lenerr);
 8015968:	4b8d      	ldr	r3, [pc, #564]	; (8015ba0 <udp_input+0x294>)
 801596a:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 801596e:	3301      	adds	r3, #1
 8015970:	b29a      	uxth	r2, r3
 8015972:	4b8b      	ldr	r3, [pc, #556]	; (8015ba0 <udp_input+0x294>)
 8015974:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
		UDP_STATS_INC(udp.drop);MIB2_STATS_INC(mib2.udpinerrors);
 8015978:	4b89      	ldr	r3, [pc, #548]	; (8015ba0 <udp_input+0x294>)
 801597a:	f8b3 307e 	ldrh.w	r3, [r3, #126]	; 0x7e
 801597e:	3301      	adds	r3, #1
 8015980:	b29a      	uxth	r2, r3
 8015982:	4b87      	ldr	r3, [pc, #540]	; (8015ba0 <udp_input+0x294>)
 8015984:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
		pbuf_free(p);
 8015988:	6878      	ldr	r0, [r7, #4]
 801598a:	f7f8 fef1 	bl	800e770 <pbuf_free>
		goto end;
 801598e:	e0f8      	b.n	8015b82 <udp_input+0x276>
	}

	udphdr = (struct udp_hdr*) p->payload;
 8015990:	687b      	ldr	r3, [r7, #4]
 8015992:	685b      	ldr	r3, [r3, #4]
 8015994:	60fb      	str	r3, [r7, #12]

	/* is broadcast packet ? */
	broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8015996:	4b83      	ldr	r3, [pc, #524]	; (8015ba4 <udp_input+0x298>)
 8015998:	695b      	ldr	r3, [r3, #20]
 801599a:	4a82      	ldr	r2, [pc, #520]	; (8015ba4 <udp_input+0x298>)
 801599c:	6812      	ldr	r2, [r2, #0]
 801599e:	4611      	mov	r1, r2
 80159a0:	4618      	mov	r0, r3
 80159a2:	f004 f8f7 	bl	8019b94 <ip4_addr_isbroadcast_u32>
 80159a6:	4603      	mov	r3, r0
 80159a8:	76fb      	strb	r3, [r7, #27]

	LWIP_DEBUGF(UDP_DEBUG,
			("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

	/* convert src and dest ports to host byte order */
	src = lwip_ntohs(udphdr->src);
 80159aa:	68fb      	ldr	r3, [r7, #12]
 80159ac:	881b      	ldrh	r3, [r3, #0]
 80159ae:	b29b      	uxth	r3, r3
 80159b0:	4618      	mov	r0, r3
 80159b2:	f7f7 f9c7 	bl	800cd44 <lwip_htons>
 80159b6:	4603      	mov	r3, r0
 80159b8:	833b      	strh	r3, [r7, #24]
	dest = lwip_ntohs(udphdr->dest);
 80159ba:	68fb      	ldr	r3, [r7, #12]
 80159bc:	885b      	ldrh	r3, [r3, #2]
 80159be:	b29b      	uxth	r3, r3
 80159c0:	4618      	mov	r0, r3
 80159c2:	f7f7 f9bf 	bl	800cd44 <lwip_htons>
 80159c6:	4603      	mov	r3, r0
 80159c8:	82fb      	strh	r3, [r7, #22]
	ip_addr_debug_print_val((UDP_DEBUG), *ip_current_dest_addr());
	LWIP_DEBUGF((UDP_DEBUG), (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
	ip_addr_debug_print_val((UDP_DEBUG), *ip_current_src_addr());
	LWIP_DEBUGF((UDP_DEBUG), (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

	pcb = NULL;
 80159ca:	2300      	movs	r3, #0
 80159cc:	627b      	str	r3, [r7, #36]	; 0x24
	prev = NULL;
 80159ce:	2300      	movs	r3, #0
 80159d0:	61fb      	str	r3, [r7, #28]
	uncon_pcb = NULL;
 80159d2:	2300      	movs	r3, #0
 80159d4:	613b      	str	r3, [r7, #16]
	/* Iterate through the UDP pcb list for a matching pcb.
	 * 'Perfect match' pcbs (connected to the remote port & ip address) are
	 * preferred. If no perfect match is found, the first unconnected pcb that
	 * matches the local port and ip address gets the datagram. */
	for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next)
 80159d6:	4b74      	ldr	r3, [pc, #464]	; (8015ba8 <udp_input+0x29c>)
 80159d8:	681b      	ldr	r3, [r3, #0]
 80159da:	627b      	str	r3, [r7, #36]	; 0x24
 80159dc:	e05d      	b.n	8015a9a <udp_input+0x18e>
		LWIP_DEBUGF((UDP_DEBUG), (", %"U16_F") <-- (", pcb->local_port));
		ip_addr_debug_print_val((UDP_DEBUG), pcb->remote_ip);
		LWIP_DEBUGF((UDP_DEBUG), (", %"U16_F")\n", pcb->remote_port));

		/* compare PCB local addr+port to UDP destination addr+port */
		if ((pcb->local_port == dest)
 80159de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80159e0:	8a5b      	ldrh	r3, [r3, #18]
 80159e2:	8afa      	ldrh	r2, [r7, #22]
 80159e4:	429a      	cmp	r2, r3
 80159e6:	d153      	bne.n	8015a90 <udp_input+0x184>
				&& (udp_input_local_match(pcb, inp, broadcast) != 0))
 80159e8:	7efb      	ldrb	r3, [r7, #27]
 80159ea:	461a      	mov	r2, r3
 80159ec:	6839      	ldr	r1, [r7, #0]
 80159ee:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80159f0:	f7ff ff1e 	bl	8015830 <udp_input_local_match>
 80159f4:	4603      	mov	r3, r0
 80159f6:	2b00      	cmp	r3, #0
 80159f8:	d04a      	beq.n	8015a90 <udp_input+0x184>
		{
			if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0)
 80159fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80159fc:	7c1b      	ldrb	r3, [r3, #16]
 80159fe:	f003 0304 	and.w	r3, r3, #4
 8015a02:	2b00      	cmp	r3, #0
 8015a04:	d11d      	bne.n	8015a42 <udp_input+0x136>
			{
				if (uncon_pcb == NULL)
 8015a06:	693b      	ldr	r3, [r7, #16]
 8015a08:	2b00      	cmp	r3, #0
 8015a0a:	d102      	bne.n	8015a12 <udp_input+0x106>
				{
					/* the first unconnected matching PCB */
					uncon_pcb = pcb;
 8015a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015a0e:	613b      	str	r3, [r7, #16]
 8015a10:	e017      	b.n	8015a42 <udp_input+0x136>
#if LWIP_IPV4
				}
				else if (broadcast
 8015a12:	7efb      	ldrb	r3, [r7, #27]
 8015a14:	2b00      	cmp	r3, #0
 8015a16:	d014      	beq.n	8015a42 <udp_input+0x136>
						&& ip4_current_dest_addr()->addr == IPADDR_BROADCAST)
 8015a18:	4b62      	ldr	r3, [pc, #392]	; (8015ba4 <udp_input+0x298>)
 8015a1a:	695b      	ldr	r3, [r3, #20]
 8015a1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015a20:	d10f      	bne.n	8015a42 <udp_input+0x136>
				{
					/* global broadcast address (only valid for IPv4; match was checked before) */
					if (!IP_IS_V4_VAL(
							uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp)))
 8015a22:	693b      	ldr	r3, [r7, #16]
 8015a24:	681a      	ldr	r2, [r3, #0]
 8015a26:	683b      	ldr	r3, [r7, #0]
 8015a28:	3304      	adds	r3, #4
 8015a2a:	681b      	ldr	r3, [r3, #0]
					if (!IP_IS_V4_VAL(
 8015a2c:	429a      	cmp	r2, r3
 8015a2e:	d008      	beq.n	8015a42 <udp_input+0x136>
					{
						/* uncon_pcb does not match the input netif, check this pcb */
						if (IP_IS_V4_VAL(
								pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp)))
 8015a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015a32:	681a      	ldr	r2, [r3, #0]
 8015a34:	683b      	ldr	r3, [r7, #0]
 8015a36:	3304      	adds	r3, #4
 8015a38:	681b      	ldr	r3, [r3, #0]
						if (IP_IS_V4_VAL(
 8015a3a:	429a      	cmp	r2, r3
 8015a3c:	d101      	bne.n	8015a42 <udp_input+0x136>
						{
							/* better match */
							uncon_pcb = pcb;
 8015a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015a40:	613b      	str	r3, [r7, #16]
        }
#endif /* SO_REUSE */
			}

			/* compare PCB remote addr+port to UDP source addr+port */
			if ((pcb->remote_port == src)
 8015a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015a44:	8a9b      	ldrh	r3, [r3, #20]
 8015a46:	8b3a      	ldrh	r2, [r7, #24]
 8015a48:	429a      	cmp	r2, r3
 8015a4a:	d121      	bne.n	8015a90 <udp_input+0x184>
					&& (ip_addr_isany_val(pcb->remote_ip)
 8015a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015a4e:	685b      	ldr	r3, [r3, #4]
 8015a50:	2b00      	cmp	r3, #0
 8015a52:	d005      	beq.n	8015a60 <udp_input+0x154>
							|| ip_addr_cmp(&pcb->remote_ip,
 8015a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015a56:	685a      	ldr	r2, [r3, #4]
 8015a58:	4b52      	ldr	r3, [pc, #328]	; (8015ba4 <udp_input+0x298>)
 8015a5a:	691b      	ldr	r3, [r3, #16]
 8015a5c:	429a      	cmp	r2, r3
 8015a5e:	d117      	bne.n	8015a90 <udp_input+0x184>
									ip_current_src_addr())))
			{
				/* the first fully matching PCB */
				if (prev != NULL)
 8015a60:	69fb      	ldr	r3, [r7, #28]
 8015a62:	2b00      	cmp	r3, #0
 8015a64:	d00b      	beq.n	8015a7e <udp_input+0x172>
				{
					/* move the pcb to the front of udp_pcbs so that is
					 found faster next time */
					prev->next = pcb->next;
 8015a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015a68:	68da      	ldr	r2, [r3, #12]
 8015a6a:	69fb      	ldr	r3, [r7, #28]
 8015a6c:	60da      	str	r2, [r3, #12]
					pcb->next = udp_pcbs;
 8015a6e:	4b4e      	ldr	r3, [pc, #312]	; (8015ba8 <udp_input+0x29c>)
 8015a70:	681a      	ldr	r2, [r3, #0]
 8015a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015a74:	60da      	str	r2, [r3, #12]
					udp_pcbs = pcb;
 8015a76:	4a4c      	ldr	r2, [pc, #304]	; (8015ba8 <udp_input+0x29c>)
 8015a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015a7a:	6013      	str	r3, [r2, #0]
				}
				else
				{
					UDP_STATS_INC(udp.cachehit);
				}
				break;
 8015a7c:	e010      	b.n	8015aa0 <udp_input+0x194>
					UDP_STATS_INC(udp.cachehit);
 8015a7e:	4b48      	ldr	r3, [pc, #288]	; (8015ba0 <udp_input+0x294>)
 8015a80:	f8b3 308e 	ldrh.w	r3, [r3, #142]	; 0x8e
 8015a84:	3301      	adds	r3, #1
 8015a86:	b29a      	uxth	r2, r3
 8015a88:	4b45      	ldr	r3, [pc, #276]	; (8015ba0 <udp_input+0x294>)
 8015a8a:	f8a3 208e 	strh.w	r2, [r3, #142]	; 0x8e
				break;
 8015a8e:	e007      	b.n	8015aa0 <udp_input+0x194>
			}
		}

		prev = pcb;
 8015a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015a92:	61fb      	str	r3, [r7, #28]
	for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next)
 8015a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015a96:	68db      	ldr	r3, [r3, #12]
 8015a98:	627b      	str	r3, [r7, #36]	; 0x24
 8015a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015a9c:	2b00      	cmp	r3, #0
 8015a9e:	d19e      	bne.n	80159de <udp_input+0xd2>
	}
	/* no fully matching pcb found? then look for an unconnected pcb */
	if (pcb == NULL)
 8015aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015aa2:	2b00      	cmp	r3, #0
 8015aa4:	d101      	bne.n	8015aaa <udp_input+0x19e>
	{
		pcb = uncon_pcb;
 8015aa6:	693b      	ldr	r3, [r7, #16]
 8015aa8:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Check checksum if this is a match or if it was directed at us. */
	if (pcb != NULL)
 8015aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015aac:	2b00      	cmp	r3, #0
 8015aae:	d003      	beq.n	8015ab8 <udp_input+0x1ac>
	{
		for_us = 1;
 8015ab0:	2301      	movs	r3, #1
 8015ab2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8015ab6:	e00b      	b.n	8015ad0 <udp_input+0x1c4>
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
		if (!ip_current_is_v6())
		{
			for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8015ab8:	683b      	ldr	r3, [r7, #0]
 8015aba:	3304      	adds	r3, #4
 8015abc:	681a      	ldr	r2, [r3, #0]
 8015abe:	4b39      	ldr	r3, [pc, #228]	; (8015ba4 <udp_input+0x298>)
 8015ac0:	695b      	ldr	r3, [r3, #20]
 8015ac2:	429a      	cmp	r2, r3
 8015ac4:	bf0c      	ite	eq
 8015ac6:	2301      	moveq	r3, #1
 8015ac8:	2300      	movne	r3, #0
 8015aca:	b2db      	uxtb	r3, r3
 8015acc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		}
#endif /* LWIP_IPV4 */
	}

	if (for_us)
 8015ad0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8015ad4:	2b00      	cmp	r3, #0
 8015ad6:	d051      	beq.n	8015b7c <udp_input+0x270>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
		if (pbuf_remove_header(p, UDP_HLEN))
 8015ad8:	2108      	movs	r1, #8
 8015ada:	6878      	ldr	r0, [r7, #4]
 8015adc:	f7f8 fdba 	bl	800e654 <pbuf_remove_header>
 8015ae0:	4603      	mov	r3, r0
 8015ae2:	2b00      	cmp	r3, #0
 8015ae4:	d00a      	beq.n	8015afc <udp_input+0x1f0>
		{
			/* Can we cope with this failing? Just assert for now */
			LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8015ae6:	f44f 72c9 	mov.w	r2, #402	; 0x192
 8015aea:	4930      	ldr	r1, [pc, #192]	; (8015bac <udp_input+0x2a0>)
 8015aec:	4828      	ldr	r0, [pc, #160]	; (8015b90 <udp_input+0x284>)
 8015aee:	f005 fb11 	bl	801b114 <trace_printf>
 8015af2:	4928      	ldr	r1, [pc, #160]	; (8015b94 <udp_input+0x288>)
 8015af4:	4828      	ldr	r0, [pc, #160]	; (8015b98 <udp_input+0x28c>)
 8015af6:	f005 fb0d 	bl	801b114 <trace_printf>
 8015afa:	e7fe      	b.n	8015afa <udp_input+0x1ee>
			UDP_STATS_INC(udp.drop);MIB2_STATS_INC(mib2.udpinerrors);
			pbuf_free(p);
			goto end;
		}

		if (pcb != NULL)
 8015afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015afe:	2b00      	cmp	r3, #0
 8015b00:	d012      	beq.n	8015b28 <udp_input+0x21c>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
			/* callback */
			if (pcb->recv != NULL)
 8015b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015b04:	699b      	ldr	r3, [r3, #24]
 8015b06:	2b00      	cmp	r3, #0
 8015b08:	d00a      	beq.n	8015b20 <udp_input+0x214>
			{
				/* now the recv function is responsible for freeing p */
				pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8015b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015b0c:	699c      	ldr	r4, [r3, #24]
 8015b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015b10:	69d8      	ldr	r0, [r3, #28]
 8015b12:	8b3b      	ldrh	r3, [r7, #24]
 8015b14:	9300      	str	r3, [sp, #0]
 8015b16:	4b26      	ldr	r3, [pc, #152]	; (8015bb0 <udp_input+0x2a4>)
 8015b18:	687a      	ldr	r2, [r7, #4]
 8015b1a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8015b1c:	47a0      	blx	r4
	else
	{
		pbuf_free(p);
	}
	end: PERF_STOP("udp_input");
	return;
 8015b1e:	e031      	b.n	8015b84 <udp_input+0x278>
				pbuf_free(p);
 8015b20:	6878      	ldr	r0, [r7, #4]
 8015b22:	f7f8 fe25 	bl	800e770 <pbuf_free>
				goto end;
 8015b26:	e02c      	b.n	8015b82 <udp_input+0x276>
			if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr()))
 8015b28:	7efb      	ldrb	r3, [r7, #27]
 8015b2a:	2b00      	cmp	r3, #0
 8015b2c:	d112      	bne.n	8015b54 <udp_input+0x248>
 8015b2e:	4b1d      	ldr	r3, [pc, #116]	; (8015ba4 <udp_input+0x298>)
 8015b30:	695b      	ldr	r3, [r3, #20]
 8015b32:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8015b36:	2be0      	cmp	r3, #224	; 0xe0
 8015b38:	d00c      	beq.n	8015b54 <udp_input+0x248>
						(s16_t) (ip_current_header_tot_len() + UDP_HLEN));
 8015b3a:	4b1a      	ldr	r3, [pc, #104]	; (8015ba4 <udp_input+0x298>)
 8015b3c:	899b      	ldrh	r3, [r3, #12]
 8015b3e:	3308      	adds	r3, #8
 8015b40:	b29b      	uxth	r3, r3
				pbuf_header_force(p,
 8015b42:	b21b      	sxth	r3, r3
 8015b44:	4619      	mov	r1, r3
 8015b46:	6878      	ldr	r0, [r7, #4]
 8015b48:	f7f8 fdff 	bl	800e74a <pbuf_header_force>
				icmp_port_unreach(ip_current_is_v6(), p);
 8015b4c:	2103      	movs	r1, #3
 8015b4e:	6878      	ldr	r0, [r7, #4]
 8015b50:	f003 fc56 	bl	8019400 <icmp_dest_unreach>
			UDP_STATS_INC(udp.proterr);
 8015b54:	4b12      	ldr	r3, [pc, #72]	; (8015ba0 <udp_input+0x294>)
 8015b56:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8015b5a:	3301      	adds	r3, #1
 8015b5c:	b29a      	uxth	r2, r3
 8015b5e:	4b10      	ldr	r3, [pc, #64]	; (8015ba0 <udp_input+0x294>)
 8015b60:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
			UDP_STATS_INC(udp.drop);MIB2_STATS_INC(mib2.udpnoports);
 8015b64:	4b0e      	ldr	r3, [pc, #56]	; (8015ba0 <udp_input+0x294>)
 8015b66:	f8b3 307e 	ldrh.w	r3, [r3, #126]	; 0x7e
 8015b6a:	3301      	adds	r3, #1
 8015b6c:	b29a      	uxth	r2, r3
 8015b6e:	4b0c      	ldr	r3, [pc, #48]	; (8015ba0 <udp_input+0x294>)
 8015b70:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
			pbuf_free(p);
 8015b74:	6878      	ldr	r0, [r7, #4]
 8015b76:	f7f8 fdfb 	bl	800e770 <pbuf_free>
	return;
 8015b7a:	e003      	b.n	8015b84 <udp_input+0x278>
		pbuf_free(p);
 8015b7c:	6878      	ldr	r0, [r7, #4]
 8015b7e:	f7f8 fdf7 	bl	800e770 <pbuf_free>
	return;
 8015b82:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8015b84:	372c      	adds	r7, #44	; 0x2c
 8015b86:	46bd      	mov	sp, r7
 8015b88:	bd90      	pop	{r4, r7, pc}
 8015b8a:	bf00      	nop
 8015b8c:	0801f868 	.word	0x0801f868
 8015b90:	0801f7ec 	.word	0x0801f7ec
 8015b94:	0801f80c 	.word	0x0801f80c
 8015b98:	0801f83c 	.word	0x0801f83c
 8015b9c:	0801f880 	.word	0x0801f880
 8015ba0:	20010b7c 	.word	0x20010b7c
 8015ba4:	2000d40c 	.word	0x2000d40c
 8015ba8:	20010c98 	.word	0x20010c98
 8015bac:	0801f89c 	.word	0x0801f89c
 8015bb0:	2000d41c 	.word	0x2000d41c

08015bb4 <udp_send>:
 * - More errors could be returned by lower protocol layers.
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 8015bb4:	b580      	push	{r7, lr}
 8015bb6:	b082      	sub	sp, #8
 8015bb8:	af00      	add	r7, sp, #0
 8015bba:	6078      	str	r0, [r7, #4]
 8015bbc:	6039      	str	r1, [r7, #0]
	LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 8015bbe:	687b      	ldr	r3, [r7, #4]
 8015bc0:	2b00      	cmp	r3, #0
 8015bc2:	d10a      	bne.n	8015bda <udp_send+0x26>
 8015bc4:	f44f 72ff 	mov.w	r2, #510	; 0x1fe
 8015bc8:	4911      	ldr	r1, [pc, #68]	; (8015c10 <udp_send+0x5c>)
 8015bca:	4812      	ldr	r0, [pc, #72]	; (8015c14 <udp_send+0x60>)
 8015bcc:	f005 faa2 	bl	801b114 <trace_printf>
 8015bd0:	4911      	ldr	r1, [pc, #68]	; (8015c18 <udp_send+0x64>)
 8015bd2:	4812      	ldr	r0, [pc, #72]	; (8015c1c <udp_send+0x68>)
 8015bd4:	f005 fa9e 	bl	801b114 <trace_printf>
 8015bd8:	e7fe      	b.n	8015bd8 <udp_send+0x24>
	LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 8015bda:	683b      	ldr	r3, [r7, #0]
 8015bdc:	2b00      	cmp	r3, #0
 8015bde:	d10a      	bne.n	8015bf6 <udp_send+0x42>
 8015be0:	f240 12ff 	movw	r2, #511	; 0x1ff
 8015be4:	490e      	ldr	r1, [pc, #56]	; (8015c20 <udp_send+0x6c>)
 8015be6:	480b      	ldr	r0, [pc, #44]	; (8015c14 <udp_send+0x60>)
 8015be8:	f005 fa94 	bl	801b114 <trace_printf>
 8015bec:	490a      	ldr	r1, [pc, #40]	; (8015c18 <udp_send+0x64>)
 8015bee:	480b      	ldr	r0, [pc, #44]	; (8015c1c <udp_send+0x68>)
 8015bf0:	f005 fa90 	bl	801b114 <trace_printf>
 8015bf4:	e7fe      	b.n	8015bf4 <udp_send+0x40>
	{
		return ERR_VAL;
	}

	/* send to the packet using remote ip and port stored in the pcb */
	return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 8015bf6:	687b      	ldr	r3, [r7, #4]
 8015bf8:	1d1a      	adds	r2, r3, #4
 8015bfa:	687b      	ldr	r3, [r7, #4]
 8015bfc:	8a9b      	ldrh	r3, [r3, #20]
 8015bfe:	6839      	ldr	r1, [r7, #0]
 8015c00:	6878      	ldr	r0, [r7, #4]
 8015c02:	f000 f80f 	bl	8015c24 <udp_sendto>
 8015c06:	4603      	mov	r3, r0
}
 8015c08:	4618      	mov	r0, r3
 8015c0a:	3708      	adds	r7, #8
 8015c0c:	46bd      	mov	sp, r7
 8015c0e:	bd80      	pop	{r7, pc}
 8015c10:	0801f8b8 	.word	0x0801f8b8
 8015c14:	0801f7ec 	.word	0x0801f7ec
 8015c18:	0801f80c 	.word	0x0801f80c
 8015c1c:	0801f83c 	.word	0x0801f83c
 8015c20:	0801f8d0 	.word	0x0801f8d0

08015c24 <udp_sendto>:
 *
 * @see udp_disconnect() udp_send()
 */
err_t udp_sendto(struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *dst_ip,
		u16_t dst_port)
{
 8015c24:	b580      	push	{r7, lr}
 8015c26:	b088      	sub	sp, #32
 8015c28:	af02      	add	r7, sp, #8
 8015c2a:	60f8      	str	r0, [r7, #12]
 8015c2c:	60b9      	str	r1, [r7, #8]
 8015c2e:	607a      	str	r2, [r7, #4]
 8015c30:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
	struct netif *netif;

	LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 8015c32:	68fb      	ldr	r3, [r7, #12]
 8015c34:	2b00      	cmp	r3, #0
 8015c36:	d10a      	bne.n	8015c4e <udp_sendto+0x2a>
 8015c38:	f240 2241 	movw	r2, #577	; 0x241
 8015c3c:	4927      	ldr	r1, [pc, #156]	; (8015cdc <udp_sendto+0xb8>)
 8015c3e:	4828      	ldr	r0, [pc, #160]	; (8015ce0 <udp_sendto+0xbc>)
 8015c40:	f005 fa68 	bl	801b114 <trace_printf>
 8015c44:	4927      	ldr	r1, [pc, #156]	; (8015ce4 <udp_sendto+0xc0>)
 8015c46:	4828      	ldr	r0, [pc, #160]	; (8015ce8 <udp_sendto+0xc4>)
 8015c48:	f005 fa64 	bl	801b114 <trace_printf>
 8015c4c:	e7fe      	b.n	8015c4c <udp_sendto+0x28>
	LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 8015c4e:	68bb      	ldr	r3, [r7, #8]
 8015c50:	2b00      	cmp	r3, #0
 8015c52:	d10a      	bne.n	8015c6a <udp_sendto+0x46>
 8015c54:	f240 2242 	movw	r2, #578	; 0x242
 8015c58:	4924      	ldr	r1, [pc, #144]	; (8015cec <udp_sendto+0xc8>)
 8015c5a:	4821      	ldr	r0, [pc, #132]	; (8015ce0 <udp_sendto+0xbc>)
 8015c5c:	f005 fa5a 	bl	801b114 <trace_printf>
 8015c60:	4920      	ldr	r1, [pc, #128]	; (8015ce4 <udp_sendto+0xc0>)
 8015c62:	4821      	ldr	r0, [pc, #132]	; (8015ce8 <udp_sendto+0xc4>)
 8015c64:	f005 fa56 	bl	801b114 <trace_printf>
 8015c68:	e7fe      	b.n	8015c68 <udp_sendto+0x44>
	LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8015c6a:	687b      	ldr	r3, [r7, #4]
 8015c6c:	2b00      	cmp	r3, #0
 8015c6e:	d10a      	bne.n	8015c86 <udp_sendto+0x62>
 8015c70:	f240 2243 	movw	r2, #579	; 0x243
 8015c74:	491e      	ldr	r1, [pc, #120]	; (8015cf0 <udp_sendto+0xcc>)
 8015c76:	481a      	ldr	r0, [pc, #104]	; (8015ce0 <udp_sendto+0xbc>)
 8015c78:	f005 fa4c 	bl	801b114 <trace_printf>
 8015c7c:	4919      	ldr	r1, [pc, #100]	; (8015ce4 <udp_sendto+0xc0>)
 8015c7e:	481a      	ldr	r0, [pc, #104]	; (8015ce8 <udp_sendto+0xc4>)
 8015c80:	f005 fa48 	bl	801b114 <trace_printf>
 8015c84:	e7fe      	b.n	8015c84 <udp_sendto+0x60>
		return ERR_VAL;
	}

	LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

	if (pcb->netif_idx != NETIF_NO_INDEX)
 8015c86:	68fb      	ldr	r3, [r7, #12]
 8015c88:	7a1b      	ldrb	r3, [r3, #8]
 8015c8a:	2b00      	cmp	r3, #0
 8015c8c:	d006      	beq.n	8015c9c <udp_sendto+0x78>
	{
		netif = netif_get_by_index(pcb->netif_idx);
 8015c8e:	68fb      	ldr	r3, [r7, #12]
 8015c90:	7a1b      	ldrb	r3, [r3, #8]
 8015c92:	4618      	mov	r0, r3
 8015c94:	f7f8 f9ac 	bl	800dff0 <netif_get_by_index>
 8015c98:	6178      	str	r0, [r7, #20]
 8015c9a:	e003      	b.n	8015ca4 <udp_sendto+0x80>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
		{
			/* find the outgoing network interface for this packet */
			netif = ip_route(&pcb->local_ip, dst_ip);
 8015c9c:	6878      	ldr	r0, [r7, #4]
 8015c9e:	f003 fc49 	bl	8019534 <ip4_route>
 8015ca2:	6178      	str	r0, [r7, #20]
		}
	}

	/* no outgoing network interface could be found? */
	if (netif == NULL)
 8015ca4:	697b      	ldr	r3, [r7, #20]
 8015ca6:	2b00      	cmp	r3, #0
 8015ca8:	d10a      	bne.n	8015cc0 <udp_sendto+0x9c>
	{
		LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
				("udp_send: No route to "));
		ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
		LWIP_DEBUGF(UDP_DEBUG, ("\n"));
		UDP_STATS_INC(udp.rterr);
 8015caa:	4b12      	ldr	r3, [pc, #72]	; (8015cf4 <udp_sendto+0xd0>)
 8015cac:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 8015cb0:	3301      	adds	r3, #1
 8015cb2:	b29a      	uxth	r2, r3
 8015cb4:	4b0f      	ldr	r3, [pc, #60]	; (8015cf4 <udp_sendto+0xd0>)
 8015cb6:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
		return ERR_RTE;
 8015cba:	f06f 0303 	mvn.w	r3, #3
 8015cbe:	e009      	b.n	8015cd4 <udp_sendto+0xb0>
	}
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
	return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 8015cc0:	887a      	ldrh	r2, [r7, #2]
 8015cc2:	697b      	ldr	r3, [r7, #20]
 8015cc4:	9300      	str	r3, [sp, #0]
 8015cc6:	4613      	mov	r3, r2
 8015cc8:	687a      	ldr	r2, [r7, #4]
 8015cca:	68b9      	ldr	r1, [r7, #8]
 8015ccc:	68f8      	ldr	r0, [r7, #12]
 8015cce:	f000 f813 	bl	8015cf8 <udp_sendto_if>
 8015cd2:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8015cd4:	4618      	mov	r0, r3
 8015cd6:	3718      	adds	r7, #24
 8015cd8:	46bd      	mov	sp, r7
 8015cda:	bd80      	pop	{r7, pc}
 8015cdc:	0801f8e8 	.word	0x0801f8e8
 8015ce0:	0801f7ec 	.word	0x0801f7ec
 8015ce4:	0801f80c 	.word	0x0801f80c
 8015ce8:	0801f83c 	.word	0x0801f83c
 8015cec:	0801f900 	.word	0x0801f900
 8015cf0:	0801f91c 	.word	0x0801f91c
 8015cf4:	20010b7c 	.word	0x20010b7c

08015cf8 <udp_sendto_if>:
 *
 * @see udp_disconnect() udp_send()
 */
err_t udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
		const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8015cf8:	b580      	push	{r7, lr}
 8015cfa:	b088      	sub	sp, #32
 8015cfc:	af02      	add	r7, sp, #8
 8015cfe:	60f8      	str	r0, [r7, #12]
 8015d00:	60b9      	str	r1, [r7, #8]
 8015d02:	607a      	str	r2, [r7, #4]
 8015d04:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
	const ip_addr_t *src_ip;

	LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 8015d06:	68fb      	ldr	r3, [r7, #12]
 8015d08:	2b00      	cmp	r3, #0
 8015d0a:	d10a      	bne.n	8015d22 <udp_sendto_if+0x2a>
 8015d0c:	f240 22ae 	movw	r2, #686	; 0x2ae
 8015d10:	492f      	ldr	r1, [pc, #188]	; (8015dd0 <udp_sendto_if+0xd8>)
 8015d12:	4830      	ldr	r0, [pc, #192]	; (8015dd4 <udp_sendto_if+0xdc>)
 8015d14:	f005 f9fe 	bl	801b114 <trace_printf>
 8015d18:	492f      	ldr	r1, [pc, #188]	; (8015dd8 <udp_sendto_if+0xe0>)
 8015d1a:	4830      	ldr	r0, [pc, #192]	; (8015ddc <udp_sendto_if+0xe4>)
 8015d1c:	f005 f9fa 	bl	801b114 <trace_printf>
 8015d20:	e7fe      	b.n	8015d20 <udp_sendto_if+0x28>
	LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8015d22:	68bb      	ldr	r3, [r7, #8]
 8015d24:	2b00      	cmp	r3, #0
 8015d26:	d10a      	bne.n	8015d3e <udp_sendto_if+0x46>
 8015d28:	f240 22af 	movw	r2, #687	; 0x2af
 8015d2c:	492c      	ldr	r1, [pc, #176]	; (8015de0 <udp_sendto_if+0xe8>)
 8015d2e:	4829      	ldr	r0, [pc, #164]	; (8015dd4 <udp_sendto_if+0xdc>)
 8015d30:	f005 f9f0 	bl	801b114 <trace_printf>
 8015d34:	4928      	ldr	r1, [pc, #160]	; (8015dd8 <udp_sendto_if+0xe0>)
 8015d36:	4829      	ldr	r0, [pc, #164]	; (8015ddc <udp_sendto_if+0xe4>)
 8015d38:	f005 f9ec 	bl	801b114 <trace_printf>
 8015d3c:	e7fe      	b.n	8015d3c <udp_sendto_if+0x44>
	LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8015d3e:	687b      	ldr	r3, [r7, #4]
 8015d40:	2b00      	cmp	r3, #0
 8015d42:	d10a      	bne.n	8015d5a <udp_sendto_if+0x62>
 8015d44:	f44f 722c 	mov.w	r2, #688	; 0x2b0
 8015d48:	4926      	ldr	r1, [pc, #152]	; (8015de4 <udp_sendto_if+0xec>)
 8015d4a:	4822      	ldr	r0, [pc, #136]	; (8015dd4 <udp_sendto_if+0xdc>)
 8015d4c:	f005 f9e2 	bl	801b114 <trace_printf>
 8015d50:	4921      	ldr	r1, [pc, #132]	; (8015dd8 <udp_sendto_if+0xe0>)
 8015d52:	4822      	ldr	r0, [pc, #136]	; (8015ddc <udp_sendto_if+0xe4>)
 8015d54:	f005 f9de 	bl	801b114 <trace_printf>
 8015d58:	e7fe      	b.n	8015d58 <udp_sendto_if+0x60>
	LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 8015d5a:	6a3b      	ldr	r3, [r7, #32]
 8015d5c:	2b00      	cmp	r3, #0
 8015d5e:	d10a      	bne.n	8015d76 <udp_sendto_if+0x7e>
 8015d60:	f240 22b1 	movw	r2, #689	; 0x2b1
 8015d64:	4920      	ldr	r1, [pc, #128]	; (8015de8 <udp_sendto_if+0xf0>)
 8015d66:	481b      	ldr	r0, [pc, #108]	; (8015dd4 <udp_sendto_if+0xdc>)
 8015d68:	f005 f9d4 	bl	801b114 <trace_printf>
 8015d6c:	491a      	ldr	r1, [pc, #104]	; (8015dd8 <udp_sendto_if+0xe0>)
 8015d6e:	481b      	ldr	r0, [pc, #108]	; (8015ddc <udp_sendto_if+0xe4>)
 8015d70:	f005 f9d0 	bl	801b114 <trace_printf>
 8015d74:	e7fe      	b.n	8015d74 <udp_sendto_if+0x7c>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
	if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8015d76:	68fb      	ldr	r3, [r7, #12]
 8015d78:	2b00      	cmp	r3, #0
 8015d7a:	d009      	beq.n	8015d90 <udp_sendto_if+0x98>
 8015d7c:	68fb      	ldr	r3, [r7, #12]
 8015d7e:	681b      	ldr	r3, [r3, #0]
 8015d80:	2b00      	cmp	r3, #0
 8015d82:	d005      	beq.n	8015d90 <udp_sendto_if+0x98>
	ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip)))
 8015d84:	68fb      	ldr	r3, [r7, #12]
 8015d86:	681b      	ldr	r3, [r3, #0]
 8015d88:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8015d8c:	2be0      	cmp	r3, #224	; 0xe0
 8015d8e:	d103      	bne.n	8015d98 <udp_sendto_if+0xa0>
	{
		/* if the local_ip is any or multicast
		 * use the outgoing network interface IP address as source address */
		src_ip = netif_ip_addr4(netif);
 8015d90:	6a3b      	ldr	r3, [r7, #32]
 8015d92:	3304      	adds	r3, #4
 8015d94:	617b      	str	r3, [r7, #20]
 8015d96:	e00b      	b.n	8015db0 <udp_sendto_if+0xb8>
	}
	else
	{
		/* check if UDP PCB local IP address is correct
		 * this could be an old address if netif->ip_addr has changed */
		if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif)))
 8015d98:	68fb      	ldr	r3, [r7, #12]
 8015d9a:	681a      	ldr	r2, [r3, #0]
 8015d9c:	6a3b      	ldr	r3, [r7, #32]
 8015d9e:	3304      	adds	r3, #4
 8015da0:	681b      	ldr	r3, [r3, #0]
 8015da2:	429a      	cmp	r2, r3
 8015da4:	d002      	beq.n	8015dac <udp_sendto_if+0xb4>
		{
			/* local_ip doesn't match, drop the packet */
			return ERR_RTE;
 8015da6:	f06f 0303 	mvn.w	r3, #3
 8015daa:	e00d      	b.n	8015dc8 <udp_sendto_if+0xd0>
		}
		/* use UDP PCB local IP address as source address */
		src_ip = &pcb->local_ip;
 8015dac:	68fb      	ldr	r3, [r7, #12]
 8015dae:	617b      	str	r3, [r7, #20]
	}
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
	return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8015db0:	887a      	ldrh	r2, [r7, #2]
 8015db2:	697b      	ldr	r3, [r7, #20]
 8015db4:	9301      	str	r3, [sp, #4]
 8015db6:	6a3b      	ldr	r3, [r7, #32]
 8015db8:	9300      	str	r3, [sp, #0]
 8015dba:	4613      	mov	r3, r2
 8015dbc:	687a      	ldr	r2, [r7, #4]
 8015dbe:	68b9      	ldr	r1, [r7, #8]
 8015dc0:	68f8      	ldr	r0, [r7, #12]
 8015dc2:	f000 f813 	bl	8015dec <udp_sendto_if_src>
 8015dc6:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8015dc8:	4618      	mov	r0, r3
 8015dca:	3718      	adds	r7, #24
 8015dcc:	46bd      	mov	sp, r7
 8015dce:	bd80      	pop	{r7, pc}
 8015dd0:	0801f938 	.word	0x0801f938
 8015dd4:	0801f7ec 	.word	0x0801f7ec
 8015dd8:	0801f80c 	.word	0x0801f80c
 8015ddc:	0801f83c 	.word	0x0801f83c
 8015de0:	0801f954 	.word	0x0801f954
 8015de4:	0801f970 	.word	0x0801f970
 8015de8:	0801f990 	.word	0x0801f990

08015dec <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
		const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif,
		const ip_addr_t *src_ip)
{
 8015dec:	b580      	push	{r7, lr}
 8015dee:	b08c      	sub	sp, #48	; 0x30
 8015df0:	af04      	add	r7, sp, #16
 8015df2:	60f8      	str	r0, [r7, #12]
 8015df4:	60b9      	str	r1, [r7, #8]
 8015df6:	607a      	str	r2, [r7, #4]
 8015df8:	807b      	strh	r3, [r7, #2]
	u8_t ip_proto;
	u8_t ttl;

	LWIP_ASSERT_CORE_LOCKED();

	LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 8015dfa:	68fb      	ldr	r3, [r7, #12]
 8015dfc:	2b00      	cmp	r3, #0
 8015dfe:	d10a      	bne.n	8015e16 <udp_sendto_if_src+0x2a>
 8015e00:	f44f 7241 	mov.w	r2, #772	; 0x304
 8015e04:	496c      	ldr	r1, [pc, #432]	; (8015fb8 <udp_sendto_if_src+0x1cc>)
 8015e06:	486d      	ldr	r0, [pc, #436]	; (8015fbc <udp_sendto_if_src+0x1d0>)
 8015e08:	f005 f984 	bl	801b114 <trace_printf>
 8015e0c:	496c      	ldr	r1, [pc, #432]	; (8015fc0 <udp_sendto_if_src+0x1d4>)
 8015e0e:	486d      	ldr	r0, [pc, #436]	; (8015fc4 <udp_sendto_if_src+0x1d8>)
 8015e10:	f005 f980 	bl	801b114 <trace_printf>
 8015e14:	e7fe      	b.n	8015e14 <udp_sendto_if_src+0x28>
	LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8015e16:	68bb      	ldr	r3, [r7, #8]
 8015e18:	2b00      	cmp	r3, #0
 8015e1a:	d10a      	bne.n	8015e32 <udp_sendto_if_src+0x46>
 8015e1c:	f240 3205 	movw	r2, #773	; 0x305
 8015e20:	4969      	ldr	r1, [pc, #420]	; (8015fc8 <udp_sendto_if_src+0x1dc>)
 8015e22:	4866      	ldr	r0, [pc, #408]	; (8015fbc <udp_sendto_if_src+0x1d0>)
 8015e24:	f005 f976 	bl	801b114 <trace_printf>
 8015e28:	4965      	ldr	r1, [pc, #404]	; (8015fc0 <udp_sendto_if_src+0x1d4>)
 8015e2a:	4866      	ldr	r0, [pc, #408]	; (8015fc4 <udp_sendto_if_src+0x1d8>)
 8015e2c:	f005 f972 	bl	801b114 <trace_printf>
 8015e30:	e7fe      	b.n	8015e30 <udp_sendto_if_src+0x44>
	LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL,
 8015e32:	687b      	ldr	r3, [r7, #4]
 8015e34:	2b00      	cmp	r3, #0
 8015e36:	d10a      	bne.n	8015e4e <udp_sendto_if_src+0x62>
 8015e38:	f240 3206 	movw	r2, #774	; 0x306
 8015e3c:	4963      	ldr	r1, [pc, #396]	; (8015fcc <udp_sendto_if_src+0x1e0>)
 8015e3e:	485f      	ldr	r0, [pc, #380]	; (8015fbc <udp_sendto_if_src+0x1d0>)
 8015e40:	f005 f968 	bl	801b114 <trace_printf>
 8015e44:	495e      	ldr	r1, [pc, #376]	; (8015fc0 <udp_sendto_if_src+0x1d4>)
 8015e46:	485f      	ldr	r0, [pc, #380]	; (8015fc4 <udp_sendto_if_src+0x1d8>)
 8015e48:	f005 f964 	bl	801b114 <trace_printf>
 8015e4c:	e7fe      	b.n	8015e4c <udp_sendto_if_src+0x60>
			return ERR_ARG);
	LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL,
 8015e4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015e50:	2b00      	cmp	r3, #0
 8015e52:	d10a      	bne.n	8015e6a <udp_sendto_if_src+0x7e>
 8015e54:	f44f 7242 	mov.w	r2, #776	; 0x308
 8015e58:	495d      	ldr	r1, [pc, #372]	; (8015fd0 <udp_sendto_if_src+0x1e4>)
 8015e5a:	4858      	ldr	r0, [pc, #352]	; (8015fbc <udp_sendto_if_src+0x1d0>)
 8015e5c:	f005 f95a 	bl	801b114 <trace_printf>
 8015e60:	4957      	ldr	r1, [pc, #348]	; (8015fc0 <udp_sendto_if_src+0x1d4>)
 8015e62:	4858      	ldr	r0, [pc, #352]	; (8015fc4 <udp_sendto_if_src+0x1d8>)
 8015e64:	f005 f956 	bl	801b114 <trace_printf>
 8015e68:	e7fe      	b.n	8015e68 <udp_sendto_if_src+0x7c>
			return ERR_ARG);
	LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL,
 8015e6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015e6c:	2b00      	cmp	r3, #0
 8015e6e:	d10a      	bne.n	8015e86 <udp_sendto_if_src+0x9a>
 8015e70:	f240 320a 	movw	r2, #778	; 0x30a
 8015e74:	4957      	ldr	r1, [pc, #348]	; (8015fd4 <udp_sendto_if_src+0x1e8>)
 8015e76:	4851      	ldr	r0, [pc, #324]	; (8015fbc <udp_sendto_if_src+0x1d0>)
 8015e78:	f005 f94c 	bl	801b114 <trace_printf>
 8015e7c:	4950      	ldr	r1, [pc, #320]	; (8015fc0 <udp_sendto_if_src+0x1d4>)
 8015e7e:	4851      	ldr	r0, [pc, #324]	; (8015fc4 <udp_sendto_if_src+0x1d8>)
 8015e80:	f005 f948 	bl	801b114 <trace_printf>
 8015e84:	e7fe      	b.n	8015e84 <udp_sendto_if_src+0x98>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

	/* if the PCB is not yet bound to a port, bind it here */
	if (pcb->local_port == 0)
 8015e86:	68fb      	ldr	r3, [r7, #12]
 8015e88:	8a5b      	ldrh	r3, [r3, #18]
 8015e8a:	2b00      	cmp	r3, #0
 8015e8c:	d10f      	bne.n	8015eae <udp_sendto_if_src+0xc2>
	{
		LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE,
				("udp_send: not yet bound to a port, binding now\n"));
		err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8015e8e:	68f9      	ldr	r1, [r7, #12]
 8015e90:	68fb      	ldr	r3, [r7, #12]
 8015e92:	8a5b      	ldrh	r3, [r3, #18]
 8015e94:	461a      	mov	r2, r3
 8015e96:	68f8      	ldr	r0, [r7, #12]
 8015e98:	f000 f8a2 	bl	8015fe0 <udp_bind>
 8015e9c:	4603      	mov	r3, r0
 8015e9e:	76fb      	strb	r3, [r7, #27]
		if (err != ERR_OK)
 8015ea0:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8015ea4:	2b00      	cmp	r3, #0
 8015ea6:	d002      	beq.n	8015eae <udp_sendto_if_src+0xc2>
		{
			LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
					("udp_send: forced port bind failed\n"));
			return err;
 8015ea8:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8015eac:	e080      	b.n	8015fb0 <udp_sendto_if_src+0x1c4>
		}
	}

	/* packet too large to add a UDP header without causing an overflow? */
	if ((u16_t) (p->tot_len + UDP_HLEN) < p->tot_len)
 8015eae:	68bb      	ldr	r3, [r7, #8]
 8015eb0:	891b      	ldrh	r3, [r3, #8]
 8015eb2:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8015eb6:	4293      	cmp	r3, r2
 8015eb8:	d902      	bls.n	8015ec0 <udp_sendto_if_src+0xd4>
	{
		return ERR_MEM;
 8015eba:	f04f 33ff 	mov.w	r3, #4294967295
 8015ebe:	e077      	b.n	8015fb0 <udp_sendto_if_src+0x1c4>
	}
	/* not enough space to add an UDP header to first pbuf in given p chain? */
	if (pbuf_add_header(p, UDP_HLEN))
 8015ec0:	2108      	movs	r1, #8
 8015ec2:	68b8      	ldr	r0, [r7, #8]
 8015ec4:	f7f8 fbb6 	bl	800e634 <pbuf_add_header>
 8015ec8:	4603      	mov	r3, r0
 8015eca:	2b00      	cmp	r3, #0
 8015ecc:	d015      	beq.n	8015efa <udp_sendto_if_src+0x10e>
	{
		/* allocate header in a separate new pbuf */
		q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8015ece:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015ed2:	2108      	movs	r1, #8
 8015ed4:	2022      	movs	r0, #34	; 0x22
 8015ed6:	f7f8 f935 	bl	800e144 <pbuf_alloc>
 8015eda:	61f8      	str	r0, [r7, #28]
		/* new header pbuf could not be allocated? */
		if (q == NULL)
 8015edc:	69fb      	ldr	r3, [r7, #28]
 8015ede:	2b00      	cmp	r3, #0
 8015ee0:	d102      	bne.n	8015ee8 <udp_sendto_if_src+0xfc>
		{
			LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
					("udp_send: could not allocate header\n"));
			return ERR_MEM;
 8015ee2:	f04f 33ff 	mov.w	r3, #4294967295
 8015ee6:	e063      	b.n	8015fb0 <udp_sendto_if_src+0x1c4>
		}
		if (p->tot_len != 0)
 8015ee8:	68bb      	ldr	r3, [r7, #8]
 8015eea:	891b      	ldrh	r3, [r3, #8]
 8015eec:	2b00      	cmp	r3, #0
 8015eee:	d006      	beq.n	8015efe <udp_sendto_if_src+0x112>
		{
			/* chain header q in front of given pbuf p (only if p contains data) */
			pbuf_chain(q, p);
 8015ef0:	68b9      	ldr	r1, [r7, #8]
 8015ef2:	69f8      	ldr	r0, [r7, #28]
 8015ef4:	f7f8 fd84 	bl	800ea00 <pbuf_chain>
 8015ef8:	e001      	b.n	8015efe <udp_sendto_if_src+0x112>
	}
	else
	{
		/* adding space for header within p succeeded */
		/* first pbuf q equals given pbuf */
		q = p;
 8015efa:	68bb      	ldr	r3, [r7, #8]
 8015efc:	61fb      	str	r3, [r7, #28]
		LWIP_DEBUGF(UDP_DEBUG,
				("udp_send: added header in given pbuf %p\n", (void *)p));
	}
	LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8015efe:	69fb      	ldr	r3, [r7, #28]
 8015f00:	895b      	ldrh	r3, [r3, #10]
 8015f02:	2b07      	cmp	r3, #7
 8015f04:	d80a      	bhi.n	8015f1c <udp_sendto_if_src+0x130>
 8015f06:	f44f 7254 	mov.w	r2, #848	; 0x350
 8015f0a:	4933      	ldr	r1, [pc, #204]	; (8015fd8 <udp_sendto_if_src+0x1ec>)
 8015f0c:	482b      	ldr	r0, [pc, #172]	; (8015fbc <udp_sendto_if_src+0x1d0>)
 8015f0e:	f005 f901 	bl	801b114 <trace_printf>
 8015f12:	492b      	ldr	r1, [pc, #172]	; (8015fc0 <udp_sendto_if_src+0x1d4>)
 8015f14:	482b      	ldr	r0, [pc, #172]	; (8015fc4 <udp_sendto_if_src+0x1d8>)
 8015f16:	f005 f8fd 	bl	801b114 <trace_printf>
 8015f1a:	e7fe      	b.n	8015f1a <udp_sendto_if_src+0x12e>
			(q->len >= sizeof(struct udp_hdr)));
	/* q now represents the packet to be sent */
	udphdr = (struct udp_hdr*) q->payload;
 8015f1c:	69fb      	ldr	r3, [r7, #28]
 8015f1e:	685b      	ldr	r3, [r3, #4]
 8015f20:	617b      	str	r3, [r7, #20]
	udphdr->src = lwip_htons(pcb->local_port);
 8015f22:	68fb      	ldr	r3, [r7, #12]
 8015f24:	8a5b      	ldrh	r3, [r3, #18]
 8015f26:	4618      	mov	r0, r3
 8015f28:	f7f6 ff0c 	bl	800cd44 <lwip_htons>
 8015f2c:	4603      	mov	r3, r0
 8015f2e:	461a      	mov	r2, r3
 8015f30:	697b      	ldr	r3, [r7, #20]
 8015f32:	801a      	strh	r2, [r3, #0]
	udphdr->dest = lwip_htons(dst_port);
 8015f34:	887b      	ldrh	r3, [r7, #2]
 8015f36:	4618      	mov	r0, r3
 8015f38:	f7f6 ff04 	bl	800cd44 <lwip_htons>
 8015f3c:	4603      	mov	r3, r0
 8015f3e:	461a      	mov	r2, r3
 8015f40:	697b      	ldr	r3, [r7, #20]
 8015f42:	805a      	strh	r2, [r3, #2]
	/* in UDP, 0 checksum means 'no checksum' */
	udphdr->chksum = 0x0000;
 8015f44:	697b      	ldr	r3, [r7, #20]
 8015f46:	2200      	movs	r2, #0
 8015f48:	719a      	strb	r2, [r3, #6]
 8015f4a:	2200      	movs	r2, #0
 8015f4c:	71da      	strb	r2, [r3, #7]
  } else
#endif /* LWIP_UDPLITE */
	{ /* UDP */
		LWIP_DEBUGF(UDP_DEBUG,
				("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
		udphdr->len = lwip_htons(q->tot_len);
 8015f4e:	69fb      	ldr	r3, [r7, #28]
 8015f50:	891b      	ldrh	r3, [r3, #8]
 8015f52:	4618      	mov	r0, r3
 8015f54:	f7f6 fef6 	bl	800cd44 <lwip_htons>
 8015f58:	4603      	mov	r3, r0
 8015f5a:	461a      	mov	r2, r3
 8015f5c:	697b      	ldr	r3, [r7, #20]
 8015f5e:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
		ip_proto = IP_PROTO_UDP;
 8015f60:	2311      	movs	r3, #17
 8015f62:	74fb      	strb	r3, [r7, #19]

	/* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
	ttl = pcb->ttl;
 8015f64:	68fb      	ldr	r3, [r7, #12]
 8015f66:	7adb      	ldrb	r3, [r3, #11]
 8015f68:	74bb      	strb	r3, [r7, #18]
			("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
	LWIP_DEBUGF(UDP_DEBUG,
			("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
	/* output to IP */
	NETIF_SET_HINTS(netif, &(pcb->netif_hints));
	err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8015f6a:	68fb      	ldr	r3, [r7, #12]
 8015f6c:	7a9b      	ldrb	r3, [r3, #10]
 8015f6e:	7cb9      	ldrb	r1, [r7, #18]
 8015f70:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015f72:	9202      	str	r2, [sp, #8]
 8015f74:	7cfa      	ldrb	r2, [r7, #19]
 8015f76:	9201      	str	r2, [sp, #4]
 8015f78:	9300      	str	r3, [sp, #0]
 8015f7a:	460b      	mov	r3, r1
 8015f7c:	687a      	ldr	r2, [r7, #4]
 8015f7e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8015f80:	69f8      	ldr	r0, [r7, #28]
 8015f82:	f003 fd35 	bl	80199f0 <ip4_output_if_src>
 8015f86:	4603      	mov	r3, r0
 8015f88:	76fb      	strb	r3, [r7, #27]

	/* @todo: must this be increased even if error occurred? */
	MIB2_STATS_INC(mib2.udpoutdatagrams);

	/* did we chain a separate header pbuf earlier? */
	if (q != p)
 8015f8a:	69fa      	ldr	r2, [r7, #28]
 8015f8c:	68bb      	ldr	r3, [r7, #8]
 8015f8e:	429a      	cmp	r2, r3
 8015f90:	d004      	beq.n	8015f9c <udp_sendto_if_src+0x1b0>
	{
		/* free the header pbuf */
		pbuf_free(q);
 8015f92:	69f8      	ldr	r0, [r7, #28]
 8015f94:	f7f8 fbec 	bl	800e770 <pbuf_free>
		q = NULL;
 8015f98:	2300      	movs	r3, #0
 8015f9a:	61fb      	str	r3, [r7, #28]
		/* p is still referenced by the caller, and will live on */
	}

	UDP_STATS_INC(udp.xmit);
 8015f9c:	4b0f      	ldr	r3, [pc, #60]	; (8015fdc <udp_sendto_if_src+0x1f0>)
 8015f9e:	f8b3 3078 	ldrh.w	r3, [r3, #120]	; 0x78
 8015fa2:	3301      	adds	r3, #1
 8015fa4:	b29a      	uxth	r2, r3
 8015fa6:	4b0d      	ldr	r3, [pc, #52]	; (8015fdc <udp_sendto_if_src+0x1f0>)
 8015fa8:	f8a3 2078 	strh.w	r2, [r3, #120]	; 0x78
	return err;
 8015fac:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 8015fb0:	4618      	mov	r0, r3
 8015fb2:	3720      	adds	r7, #32
 8015fb4:	46bd      	mov	sp, r7
 8015fb6:	bd80      	pop	{r7, pc}
 8015fb8:	0801f9b0 	.word	0x0801f9b0
 8015fbc:	0801f7ec 	.word	0x0801f7ec
 8015fc0:	0801f80c 	.word	0x0801f80c
 8015fc4:	0801f83c 	.word	0x0801f83c
 8015fc8:	0801f9d0 	.word	0x0801f9d0
 8015fcc:	0801f9f0 	.word	0x0801f9f0
 8015fd0:	0801fa14 	.word	0x0801fa14
 8015fd4:	0801fa38 	.word	0x0801fa38
 8015fd8:	0801fa5c 	.word	0x0801fa5c
 8015fdc:	20010b7c 	.word	0x20010b7c

08015fe0 <udp_bind>:
 * another UDP PCB.
 *
 * @see udp_disconnect()
 */
err_t udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8015fe0:	b580      	push	{r7, lr}
 8015fe2:	b086      	sub	sp, #24
 8015fe4:	af00      	add	r7, sp, #0
 8015fe6:	60f8      	str	r0, [r7, #12]
 8015fe8:	60b9      	str	r1, [r7, #8]
 8015fea:	4613      	mov	r3, r2
 8015fec:	80fb      	strh	r3, [r7, #6]

	LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
	/* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
	if (ipaddr == NULL)
 8015fee:	68bb      	ldr	r3, [r7, #8]
 8015ff0:	2b00      	cmp	r3, #0
 8015ff2:	d101      	bne.n	8015ff8 <udp_bind+0x18>
	{
		ipaddr = IP4_ADDR_ANY;
 8015ff4:	4b3a      	ldr	r3, [pc, #232]	; (80160e0 <udp_bind+0x100>)
 8015ff6:	60bb      	str	r3, [r7, #8]
	}
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

	LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8015ff8:	68fb      	ldr	r3, [r7, #12]
 8015ffa:	2b00      	cmp	r3, #0
 8015ffc:	d10a      	bne.n	8016014 <udp_bind+0x34>
 8015ffe:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8016002:	4938      	ldr	r1, [pc, #224]	; (80160e4 <udp_bind+0x104>)
 8016004:	4838      	ldr	r0, [pc, #224]	; (80160e8 <udp_bind+0x108>)
 8016006:	f005 f885 	bl	801b114 <trace_printf>
 801600a:	4938      	ldr	r1, [pc, #224]	; (80160ec <udp_bind+0x10c>)
 801600c:	4838      	ldr	r0, [pc, #224]	; (80160f0 <udp_bind+0x110>)
 801600e:	f005 f881 	bl	801b114 <trace_printf>
 8016012:	e7fe      	b.n	8016012 <udp_bind+0x32>

	LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
	ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
	LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

	rebind = 0;
 8016014:	2300      	movs	r3, #0
 8016016:	74fb      	strb	r3, [r7, #19]
	/* Check for double bind and rebind of the same pcb */
	for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next)
 8016018:	4b36      	ldr	r3, [pc, #216]	; (80160f4 <udp_bind+0x114>)
 801601a:	681b      	ldr	r3, [r3, #0]
 801601c:	617b      	str	r3, [r7, #20]
 801601e:	e009      	b.n	8016034 <udp_bind+0x54>
	{
		/* is this UDP PCB already on active list? */
		if (pcb == ipcb)
 8016020:	68fa      	ldr	r2, [r7, #12]
 8016022:	697b      	ldr	r3, [r7, #20]
 8016024:	429a      	cmp	r2, r3
 8016026:	d102      	bne.n	801602e <udp_bind+0x4e>
		{
			rebind = 1;
 8016028:	2301      	movs	r3, #1
 801602a:	74fb      	strb	r3, [r7, #19]
			break;
 801602c:	e005      	b.n	801603a <udp_bind+0x5a>
	for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next)
 801602e:	697b      	ldr	r3, [r7, #20]
 8016030:	68db      	ldr	r3, [r3, #12]
 8016032:	617b      	str	r3, [r7, #20]
 8016034:	697b      	ldr	r3, [r7, #20]
 8016036:	2b00      	cmp	r3, #0
 8016038:	d1f2      	bne.n	8016020 <udp_bind+0x40>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

	/* no port specified? */
	if (port == 0)
 801603a:	88fb      	ldrh	r3, [r7, #6]
 801603c:	2b00      	cmp	r3, #0
 801603e:	d109      	bne.n	8016054 <udp_bind+0x74>
	{
		port = udp_new_port();
 8016040:	f7ff fbbe 	bl	80157c0 <udp_new_port>
 8016044:	4603      	mov	r3, r0
 8016046:	80fb      	strh	r3, [r7, #6]
		if (port == 0)
 8016048:	88fb      	ldrh	r3, [r7, #6]
 801604a:	2b00      	cmp	r3, #0
 801604c:	d12c      	bne.n	80160a8 <udp_bind+0xc8>
		{
			/* no more ports available in local range */
			LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
			return ERR_USE;
 801604e:	f06f 0307 	mvn.w	r3, #7
 8016052:	e040      	b.n	80160d6 <udp_bind+0xf6>
		}
	}
	else
	{
		for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next)
 8016054:	4b27      	ldr	r3, [pc, #156]	; (80160f4 <udp_bind+0x114>)
 8016056:	681b      	ldr	r3, [r3, #0]
 8016058:	617b      	str	r3, [r7, #20]
 801605a:	e022      	b.n	80160a2 <udp_bind+0xc2>
		{
			if (pcb != ipcb)
 801605c:	68fa      	ldr	r2, [r7, #12]
 801605e:	697b      	ldr	r3, [r7, #20]
 8016060:	429a      	cmp	r2, r3
 8016062:	d01b      	beq.n	801609c <udp_bind+0xbc>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
				{
					/* port matches that of PCB in list and REUSEADDR not set -> reject */
					if ((ipcb->local_port == port)
 8016064:	697b      	ldr	r3, [r7, #20]
 8016066:	8a5b      	ldrh	r3, [r3, #18]
 8016068:	88fa      	ldrh	r2, [r7, #6]
 801606a:	429a      	cmp	r2, r3
 801606c:	d116      	bne.n	801609c <udp_bind+0xbc>
							&&
							/* IP address matches or any IP used? */
							(ip_addr_cmp(&ipcb->local_ip, ipaddr)
 801606e:	697b      	ldr	r3, [r7, #20]
 8016070:	681a      	ldr	r2, [r3, #0]
 8016072:	68bb      	ldr	r3, [r7, #8]
 8016074:	681b      	ldr	r3, [r3, #0]
							&&
 8016076:	429a      	cmp	r2, r3
 8016078:	d00d      	beq.n	8016096 <udp_bind+0xb6>
									|| ip_addr_isany(ipaddr)
 801607a:	68bb      	ldr	r3, [r7, #8]
 801607c:	2b00      	cmp	r3, #0
 801607e:	d00a      	beq.n	8016096 <udp_bind+0xb6>
 8016080:	68bb      	ldr	r3, [r7, #8]
 8016082:	681b      	ldr	r3, [r3, #0]
 8016084:	2b00      	cmp	r3, #0
 8016086:	d006      	beq.n	8016096 <udp_bind+0xb6>
									|| ip_addr_isany(&ipcb->local_ip)))
 8016088:	697b      	ldr	r3, [r7, #20]
 801608a:	2b00      	cmp	r3, #0
 801608c:	d003      	beq.n	8016096 <udp_bind+0xb6>
 801608e:	697b      	ldr	r3, [r7, #20]
 8016090:	681b      	ldr	r3, [r3, #0]
 8016092:	2b00      	cmp	r3, #0
 8016094:	d102      	bne.n	801609c <udp_bind+0xbc>
					{
						/* other PCB already binds to this local IP and port */
						LWIP_DEBUGF(UDP_DEBUG,
								("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
						return ERR_USE;
 8016096:	f06f 0307 	mvn.w	r3, #7
 801609a:	e01c      	b.n	80160d6 <udp_bind+0xf6>
		for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next)
 801609c:	697b      	ldr	r3, [r7, #20]
 801609e:	68db      	ldr	r3, [r3, #12]
 80160a0:	617b      	str	r3, [r7, #20]
 80160a2:	697b      	ldr	r3, [r7, #20]
 80160a4:	2b00      	cmp	r3, #0
 80160a6:	d1d9      	bne.n	801605c <udp_bind+0x7c>
				}
			}
		}
	}

	ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 80160a8:	68bb      	ldr	r3, [r7, #8]
 80160aa:	2b00      	cmp	r3, #0
 80160ac:	d002      	beq.n	80160b4 <udp_bind+0xd4>
 80160ae:	68bb      	ldr	r3, [r7, #8]
 80160b0:	681b      	ldr	r3, [r3, #0]
 80160b2:	e000      	b.n	80160b6 <udp_bind+0xd6>
 80160b4:	2300      	movs	r3, #0
 80160b6:	68fa      	ldr	r2, [r7, #12]
 80160b8:	6013      	str	r3, [r2, #0]

	pcb->local_port = port;
 80160ba:	68fb      	ldr	r3, [r7, #12]
 80160bc:	88fa      	ldrh	r2, [r7, #6]
 80160be:	825a      	strh	r2, [r3, #18]
	mib2_udp_bind(pcb);
	/* pcb not active yet? */
	if (rebind == 0)
 80160c0:	7cfb      	ldrb	r3, [r7, #19]
 80160c2:	2b00      	cmp	r3, #0
 80160c4:	d106      	bne.n	80160d4 <udp_bind+0xf4>
	{
		/* place the PCB on the active list if not already there */
		pcb->next = udp_pcbs;
 80160c6:	4b0b      	ldr	r3, [pc, #44]	; (80160f4 <udp_bind+0x114>)
 80160c8:	681a      	ldr	r2, [r3, #0]
 80160ca:	68fb      	ldr	r3, [r7, #12]
 80160cc:	60da      	str	r2, [r3, #12]
		udp_pcbs = pcb;
 80160ce:	4a09      	ldr	r2, [pc, #36]	; (80160f4 <udp_bind+0x114>)
 80160d0:	68fb      	ldr	r3, [r7, #12]
 80160d2:	6013      	str	r3, [r2, #0]
			("udp_bind: bound to "));
	ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
			pcb->local_ip);
	LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
			(", port %"U16_F")\n", pcb->local_port));
	return ERR_OK;
 80160d4:	2300      	movs	r3, #0
}
 80160d6:	4618      	mov	r0, r3
 80160d8:	3718      	adds	r7, #24
 80160da:	46bd      	mov	sp, r7
 80160dc:	bd80      	pop	{r7, pc}
 80160de:	bf00      	nop
 80160e0:	08020718 	.word	0x08020718
 80160e4:	0801fa8c 	.word	0x0801fa8c
 80160e8:	0801f7ec 	.word	0x0801f7ec
 80160ec:	0801f80c 	.word	0x0801f80c
 80160f0:	0801f83c 	.word	0x0801f83c
 80160f4:	20010c98 	.word	0x20010c98

080160f8 <udp_connect>:
 * The udp pcb is bound to a random local port if not already bound.
 *
 * @see udp_disconnect()
 */
err_t udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80160f8:	b580      	push	{r7, lr}
 80160fa:	b086      	sub	sp, #24
 80160fc:	af00      	add	r7, sp, #0
 80160fe:	60f8      	str	r0, [r7, #12]
 8016100:	60b9      	str	r1, [r7, #8]
 8016102:	4613      	mov	r3, r2
 8016104:	80fb      	strh	r3, [r7, #6]
	struct udp_pcb *ipcb;

	LWIP_ASSERT_CORE_LOCKED();

	LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8016106:	68fb      	ldr	r3, [r7, #12]
 8016108:	2b00      	cmp	r3, #0
 801610a:	d10a      	bne.n	8016122 <udp_connect+0x2a>
 801610c:	f240 428d 	movw	r2, #1165	; 0x48d
 8016110:	492c      	ldr	r1, [pc, #176]	; (80161c4 <udp_connect+0xcc>)
 8016112:	482d      	ldr	r0, [pc, #180]	; (80161c8 <udp_connect+0xd0>)
 8016114:	f004 fffe 	bl	801b114 <trace_printf>
 8016118:	492c      	ldr	r1, [pc, #176]	; (80161cc <udp_connect+0xd4>)
 801611a:	482d      	ldr	r0, [pc, #180]	; (80161d0 <udp_connect+0xd8>)
 801611c:	f004 fffa 	bl	801b114 <trace_printf>
 8016120:	e7fe      	b.n	8016120 <udp_connect+0x28>
	LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8016122:	68bb      	ldr	r3, [r7, #8]
 8016124:	2b00      	cmp	r3, #0
 8016126:	d10a      	bne.n	801613e <udp_connect+0x46>
 8016128:	f240 428e 	movw	r2, #1166	; 0x48e
 801612c:	4929      	ldr	r1, [pc, #164]	; (80161d4 <udp_connect+0xdc>)
 801612e:	4826      	ldr	r0, [pc, #152]	; (80161c8 <udp_connect+0xd0>)
 8016130:	f004 fff0 	bl	801b114 <trace_printf>
 8016134:	4925      	ldr	r1, [pc, #148]	; (80161cc <udp_connect+0xd4>)
 8016136:	4826      	ldr	r0, [pc, #152]	; (80161d0 <udp_connect+0xd8>)
 8016138:	f004 ffec 	bl	801b114 <trace_printf>
 801613c:	e7fe      	b.n	801613c <udp_connect+0x44>

	if (pcb->local_port == 0)
 801613e:	68fb      	ldr	r3, [r7, #12]
 8016140:	8a5b      	ldrh	r3, [r3, #18]
 8016142:	2b00      	cmp	r3, #0
 8016144:	d10f      	bne.n	8016166 <udp_connect+0x6e>
	{
		err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8016146:	68f9      	ldr	r1, [r7, #12]
 8016148:	68fb      	ldr	r3, [r7, #12]
 801614a:	8a5b      	ldrh	r3, [r3, #18]
 801614c:	461a      	mov	r2, r3
 801614e:	68f8      	ldr	r0, [r7, #12]
 8016150:	f7ff ff46 	bl	8015fe0 <udp_bind>
 8016154:	4603      	mov	r3, r0
 8016156:	75fb      	strb	r3, [r7, #23]
		if (err != ERR_OK)
 8016158:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801615c:	2b00      	cmp	r3, #0
 801615e:	d002      	beq.n	8016166 <udp_connect+0x6e>
		{
			return err;
 8016160:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8016164:	e02a      	b.n	80161bc <udp_connect+0xc4>
		}
	}

	ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 8016166:	68bb      	ldr	r3, [r7, #8]
 8016168:	2b00      	cmp	r3, #0
 801616a:	d002      	beq.n	8016172 <udp_connect+0x7a>
 801616c:	68bb      	ldr	r3, [r7, #8]
 801616e:	681b      	ldr	r3, [r3, #0]
 8016170:	e000      	b.n	8016174 <udp_connect+0x7c>
 8016172:	2300      	movs	r3, #0
 8016174:	68fa      	ldr	r2, [r7, #12]
 8016176:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

	pcb->remote_port = port;
 8016178:	68fb      	ldr	r3, [r7, #12]
 801617a:	88fa      	ldrh	r2, [r7, #6]
 801617c:	829a      	strh	r2, [r3, #20]
	pcb->flags |= UDP_FLAGS_CONNECTED;
 801617e:	68fb      	ldr	r3, [r7, #12]
 8016180:	7c1b      	ldrb	r3, [r3, #16]
 8016182:	f043 0304 	orr.w	r3, r3, #4
 8016186:	b2da      	uxtb	r2, r3
 8016188:	68fb      	ldr	r3, [r7, #12]
 801618a:	741a      	strb	r2, [r3, #16]
			pcb->remote_ip);
	LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
			(", port %"U16_F")\n", pcb->remote_port));

	/* Insert UDP PCB into the list of active UDP PCBs. */
	for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next)
 801618c:	4b12      	ldr	r3, [pc, #72]	; (80161d8 <udp_connect+0xe0>)
 801618e:	681b      	ldr	r3, [r3, #0]
 8016190:	613b      	str	r3, [r7, #16]
 8016192:	e008      	b.n	80161a6 <udp_connect+0xae>
	{
		if (pcb == ipcb)
 8016194:	68fa      	ldr	r2, [r7, #12]
 8016196:	693b      	ldr	r3, [r7, #16]
 8016198:	429a      	cmp	r2, r3
 801619a:	d101      	bne.n	80161a0 <udp_connect+0xa8>
		{
			/* already on the list, just return */
			return ERR_OK;
 801619c:	2300      	movs	r3, #0
 801619e:	e00d      	b.n	80161bc <udp_connect+0xc4>
	for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next)
 80161a0:	693b      	ldr	r3, [r7, #16]
 80161a2:	68db      	ldr	r3, [r3, #12]
 80161a4:	613b      	str	r3, [r7, #16]
 80161a6:	693b      	ldr	r3, [r7, #16]
 80161a8:	2b00      	cmp	r3, #0
 80161aa:	d1f3      	bne.n	8016194 <udp_connect+0x9c>
		}
	}
	/* PCB not yet on the list, add PCB now */
	pcb->next = udp_pcbs;
 80161ac:	4b0a      	ldr	r3, [pc, #40]	; (80161d8 <udp_connect+0xe0>)
 80161ae:	681a      	ldr	r2, [r3, #0]
 80161b0:	68fb      	ldr	r3, [r7, #12]
 80161b2:	60da      	str	r2, [r3, #12]
	udp_pcbs = pcb;
 80161b4:	4a08      	ldr	r2, [pc, #32]	; (80161d8 <udp_connect+0xe0>)
 80161b6:	68fb      	ldr	r3, [r7, #12]
 80161b8:	6013      	str	r3, [r2, #0]
	return ERR_OK;
 80161ba:	2300      	movs	r3, #0
}
 80161bc:	4618      	mov	r0, r3
 80161be:	3718      	adds	r7, #24
 80161c0:	46bd      	mov	sp, r7
 80161c2:	bd80      	pop	{r7, pc}
 80161c4:	0801faa4 	.word	0x0801faa4
 80161c8:	0801f7ec 	.word	0x0801f7ec
 80161cc:	0801f80c 	.word	0x0801f80c
 80161d0:	0801f83c 	.word	0x0801f83c
 80161d4:	0801fac0 	.word	0x0801fac0
 80161d8:	20010c98 	.word	0x20010c98

080161dc <udp_recv>:
 * @param pcb the pcb for which to set the recv callback
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 80161dc:	b580      	push	{r7, lr}
 80161de:	b084      	sub	sp, #16
 80161e0:	af00      	add	r7, sp, #0
 80161e2:	60f8      	str	r0, [r7, #12]
 80161e4:	60b9      	str	r1, [r7, #8]
 80161e6:	607a      	str	r2, [r7, #4]
	LWIP_ASSERT_CORE_LOCKED();

	LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 80161e8:	68fb      	ldr	r3, [r7, #12]
 80161ea:	2b00      	cmp	r3, #0
 80161ec:	d10a      	bne.n	8016204 <udp_recv+0x28>
 80161ee:	f240 42e6 	movw	r2, #1254	; 0x4e6
 80161f2:	4909      	ldr	r1, [pc, #36]	; (8016218 <udp_recv+0x3c>)
 80161f4:	4809      	ldr	r0, [pc, #36]	; (801621c <udp_recv+0x40>)
 80161f6:	f004 ff8d 	bl	801b114 <trace_printf>
 80161fa:	4909      	ldr	r1, [pc, #36]	; (8016220 <udp_recv+0x44>)
 80161fc:	4809      	ldr	r0, [pc, #36]	; (8016224 <udp_recv+0x48>)
 80161fe:	f004 ff89 	bl	801b114 <trace_printf>
 8016202:	e7fe      	b.n	8016202 <udp_recv+0x26>

	/* remember recv() callback and user data */
	pcb->recv = recv;
 8016204:	68fb      	ldr	r3, [r7, #12]
 8016206:	68ba      	ldr	r2, [r7, #8]
 8016208:	619a      	str	r2, [r3, #24]
	pcb->recv_arg = recv_arg;
 801620a:	68fb      	ldr	r3, [r7, #12]
 801620c:	687a      	ldr	r2, [r7, #4]
 801620e:	61da      	str	r2, [r3, #28]
}
 8016210:	3710      	adds	r7, #16
 8016212:	46bd      	mov	sp, r7
 8016214:	bd80      	pop	{r7, pc}
 8016216:	bf00      	nop
 8016218:	0801faf8 	.word	0x0801faf8
 801621c:	0801f7ec 	.word	0x0801f7ec
 8016220:	0801f80c 	.word	0x0801f80c
 8016224:	0801f83c 	.word	0x0801f83c

08016228 <udp_remove>:
 * UDP PCB's and the data structure is freed from memory.
 *
 * @see udp_new()
 */
void udp_remove(struct udp_pcb *pcb)
{
 8016228:	b580      	push	{r7, lr}
 801622a:	b084      	sub	sp, #16
 801622c:	af00      	add	r7, sp, #0
 801622e:	6078      	str	r0, [r7, #4]
	struct udp_pcb *pcb2;

	LWIP_ASSERT_CORE_LOCKED();

	LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8016230:	687b      	ldr	r3, [r7, #4]
 8016232:	2b00      	cmp	r3, #0
 8016234:	d10a      	bne.n	801624c <udp_remove+0x24>
 8016236:	f240 42fc 	movw	r2, #1276	; 0x4fc
 801623a:	4919      	ldr	r1, [pc, #100]	; (80162a0 <udp_remove+0x78>)
 801623c:	4819      	ldr	r0, [pc, #100]	; (80162a4 <udp_remove+0x7c>)
 801623e:	f004 ff69 	bl	801b114 <trace_printf>
 8016242:	4919      	ldr	r1, [pc, #100]	; (80162a8 <udp_remove+0x80>)
 8016244:	4819      	ldr	r0, [pc, #100]	; (80162ac <udp_remove+0x84>)
 8016246:	f004 ff65 	bl	801b114 <trace_printf>
 801624a:	e7fe      	b.n	801624a <udp_remove+0x22>

	mib2_udp_unbind(pcb);
	/* pcb to be removed is first in list? */
	if (udp_pcbs == pcb)
 801624c:	4b18      	ldr	r3, [pc, #96]	; (80162b0 <udp_remove+0x88>)
 801624e:	681b      	ldr	r3, [r3, #0]
 8016250:	687a      	ldr	r2, [r7, #4]
 8016252:	429a      	cmp	r2, r3
 8016254:	d105      	bne.n	8016262 <udp_remove+0x3a>
	{
		/* make list start at 2nd pcb */
		udp_pcbs = udp_pcbs->next;
 8016256:	4b16      	ldr	r3, [pc, #88]	; (80162b0 <udp_remove+0x88>)
 8016258:	681b      	ldr	r3, [r3, #0]
 801625a:	68db      	ldr	r3, [r3, #12]
 801625c:	4a14      	ldr	r2, [pc, #80]	; (80162b0 <udp_remove+0x88>)
 801625e:	6013      	str	r3, [r2, #0]
 8016260:	e017      	b.n	8016292 <udp_remove+0x6a>
		/* pcb not 1st in list */
	}
	else
	{
		for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next)
 8016262:	4b13      	ldr	r3, [pc, #76]	; (80162b0 <udp_remove+0x88>)
 8016264:	681b      	ldr	r3, [r3, #0]
 8016266:	60fb      	str	r3, [r7, #12]
 8016268:	e010      	b.n	801628c <udp_remove+0x64>
		{
			/* find pcb in udp_pcbs list */
			if (pcb2->next != NULL && pcb2->next == pcb)
 801626a:	68fb      	ldr	r3, [r7, #12]
 801626c:	68db      	ldr	r3, [r3, #12]
 801626e:	2b00      	cmp	r3, #0
 8016270:	d009      	beq.n	8016286 <udp_remove+0x5e>
 8016272:	68fb      	ldr	r3, [r7, #12]
 8016274:	68db      	ldr	r3, [r3, #12]
 8016276:	687a      	ldr	r2, [r7, #4]
 8016278:	429a      	cmp	r2, r3
 801627a:	d104      	bne.n	8016286 <udp_remove+0x5e>
			{
				/* remove pcb from list */
				pcb2->next = pcb->next;
 801627c:	687b      	ldr	r3, [r7, #4]
 801627e:	68da      	ldr	r2, [r3, #12]
 8016280:	68fb      	ldr	r3, [r7, #12]
 8016282:	60da      	str	r2, [r3, #12]
				break;
 8016284:	e005      	b.n	8016292 <udp_remove+0x6a>
		for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next)
 8016286:	68fb      	ldr	r3, [r7, #12]
 8016288:	68db      	ldr	r3, [r3, #12]
 801628a:	60fb      	str	r3, [r7, #12]
 801628c:	68fb      	ldr	r3, [r7, #12]
 801628e:	2b00      	cmp	r3, #0
 8016290:	d1eb      	bne.n	801626a <udp_remove+0x42>
			}
		}
	}
	memp_free(MEMP_UDP_PCB, pcb);
 8016292:	6879      	ldr	r1, [r7, #4]
 8016294:	2000      	movs	r0, #0
 8016296:	f7f7 fb51 	bl	800d93c <memp_free>
}
 801629a:	3710      	adds	r7, #16
 801629c:	46bd      	mov	sp, r7
 801629e:	bd80      	pop	{r7, pc}
 80162a0:	0801fb10 	.word	0x0801fb10
 80162a4:	0801f7ec 	.word	0x0801f7ec
 80162a8:	0801f80c 	.word	0x0801f80c
 80162ac:	0801f83c 	.word	0x0801f83c
 80162b0:	20010c98 	.word	0x20010c98

080162b4 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb*
udp_new(void)
{
 80162b4:	b580      	push	{r7, lr}
 80162b6:	b082      	sub	sp, #8
 80162b8:	af00      	add	r7, sp, #0
	struct udp_pcb *pcb;

	LWIP_ASSERT_CORE_LOCKED();

	pcb = (struct udp_pcb*) memp_malloc(MEMP_UDP_PCB);
 80162ba:	2000      	movs	r0, #0
 80162bc:	f7f7 fadc 	bl	800d878 <memp_malloc>
 80162c0:	6078      	str	r0, [r7, #4]
	/* could allocate UDP PCB? */
	if (pcb != NULL)
 80162c2:	687b      	ldr	r3, [r7, #4]
 80162c4:	2b00      	cmp	r3, #0
 80162c6:	d007      	beq.n	80162d8 <udp_new+0x24>
	{
		/* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
		 * which means checksum is generated over the whole datagram per default
		 * (recommended as default by RFC 3828). */
		/* initialize PCB to all zeroes */
		memset(pcb, 0, sizeof(struct udp_pcb));
 80162c8:	2220      	movs	r2, #32
 80162ca:	2100      	movs	r1, #0
 80162cc:	6878      	ldr	r0, [r7, #4]
 80162ce:	f004 ff9d 	bl	801b20c <memset>
		pcb->ttl = UDP_TTL;
 80162d2:	687b      	ldr	r3, [r7, #4]
 80162d4:	22ff      	movs	r2, #255	; 0xff
 80162d6:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
	}
	return pcb;
 80162d8:	687b      	ldr	r3, [r7, #4]
}
 80162da:	4618      	mov	r0, r3
 80162dc:	3708      	adds	r7, #8
 80162de:	46bd      	mov	sp, r7
 80162e0:	bd80      	pop	{r7, pc}

080162e2 <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb*
udp_new_ip_type(u8_t type)
{
 80162e2:	b580      	push	{r7, lr}
 80162e4:	b084      	sub	sp, #16
 80162e6:	af00      	add	r7, sp, #0
 80162e8:	4603      	mov	r3, r0
 80162ea:	71fb      	strb	r3, [r7, #7]
	struct udp_pcb *pcb;

	LWIP_ASSERT_CORE_LOCKED();

	pcb = udp_new();
 80162ec:	f7ff ffe2 	bl	80162b4 <udp_new>
 80162f0:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
	LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
	return pcb;
 80162f2:	68fb      	ldr	r3, [r7, #12]
}
 80162f4:	4618      	mov	r0, r3
 80162f6:	3710      	adds	r7, #16
 80162f8:	46bd      	mov	sp, r7
 80162fa:	bd80      	pop	{r7, pc}

080162fc <udp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr,
		const ip_addr_t *new_addr)
{
 80162fc:	b480      	push	{r7}
 80162fe:	b085      	sub	sp, #20
 8016300:	af00      	add	r7, sp, #0
 8016302:	6078      	str	r0, [r7, #4]
 8016304:	6039      	str	r1, [r7, #0]
	struct udp_pcb *upcb;

	if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr))
 8016306:	687b      	ldr	r3, [r7, #4]
 8016308:	2b00      	cmp	r3, #0
 801630a:	d01e      	beq.n	801634a <udp_netif_ip_addr_changed+0x4e>
 801630c:	687b      	ldr	r3, [r7, #4]
 801630e:	681b      	ldr	r3, [r3, #0]
 8016310:	2b00      	cmp	r3, #0
 8016312:	d01a      	beq.n	801634a <udp_netif_ip_addr_changed+0x4e>
 8016314:	683b      	ldr	r3, [r7, #0]
 8016316:	2b00      	cmp	r3, #0
 8016318:	d017      	beq.n	801634a <udp_netif_ip_addr_changed+0x4e>
 801631a:	683b      	ldr	r3, [r7, #0]
 801631c:	681b      	ldr	r3, [r3, #0]
 801631e:	2b00      	cmp	r3, #0
 8016320:	d013      	beq.n	801634a <udp_netif_ip_addr_changed+0x4e>
	{
		for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next)
 8016322:	4b0d      	ldr	r3, [pc, #52]	; (8016358 <udp_netif_ip_addr_changed+0x5c>)
 8016324:	681b      	ldr	r3, [r3, #0]
 8016326:	60fb      	str	r3, [r7, #12]
 8016328:	e00c      	b.n	8016344 <udp_netif_ip_addr_changed+0x48>
		{
			/* PCB bound to current local interface address? */
			if (ip_addr_cmp(&upcb->local_ip, old_addr))
 801632a:	68fb      	ldr	r3, [r7, #12]
 801632c:	681a      	ldr	r2, [r3, #0]
 801632e:	687b      	ldr	r3, [r7, #4]
 8016330:	681b      	ldr	r3, [r3, #0]
 8016332:	429a      	cmp	r2, r3
 8016334:	d103      	bne.n	801633e <udp_netif_ip_addr_changed+0x42>
			{
				/* The PCB is bound to the old ipaddr and
				 * is set to bound to the new one instead */
				ip_addr_copy(upcb->local_ip, *new_addr);
 8016336:	683b      	ldr	r3, [r7, #0]
 8016338:	681a      	ldr	r2, [r3, #0]
 801633a:	68fb      	ldr	r3, [r7, #12]
 801633c:	601a      	str	r2, [r3, #0]
		for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next)
 801633e:	68fb      	ldr	r3, [r7, #12]
 8016340:	68db      	ldr	r3, [r3, #12]
 8016342:	60fb      	str	r3, [r7, #12]
 8016344:	68fb      	ldr	r3, [r7, #12]
 8016346:	2b00      	cmp	r3, #0
 8016348:	d1ef      	bne.n	801632a <udp_netif_ip_addr_changed+0x2e>
			}
		}
	}
}
 801634a:	bf00      	nop
 801634c:	3714      	adds	r7, #20
 801634e:	46bd      	mov	sp, r7
 8016350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016354:	4770      	bx	lr
 8016356:	bf00      	nop
 8016358:	20010c98 	.word	0x20010c98

0801635c <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 801635c:	b580      	push	{r7, lr}
 801635e:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 8016360:	4b22      	ldr	r3, [pc, #136]	; (80163ec <dhcp_inc_pcb_refcount+0x90>)
 8016362:	781b      	ldrb	r3, [r3, #0]
 8016364:	2b00      	cmp	r3, #0
 8016366:	d137      	bne.n	80163d8 <dhcp_inc_pcb_refcount+0x7c>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 8016368:	4b21      	ldr	r3, [pc, #132]	; (80163f0 <dhcp_inc_pcb_refcount+0x94>)
 801636a:	681b      	ldr	r3, [r3, #0]
 801636c:	2b00      	cmp	r3, #0
 801636e:	d009      	beq.n	8016384 <dhcp_inc_pcb_refcount+0x28>
 8016370:	22e5      	movs	r2, #229	; 0xe5
 8016372:	4920      	ldr	r1, [pc, #128]	; (80163f4 <dhcp_inc_pcb_refcount+0x98>)
 8016374:	4820      	ldr	r0, [pc, #128]	; (80163f8 <dhcp_inc_pcb_refcount+0x9c>)
 8016376:	f004 fecd 	bl	801b114 <trace_printf>
 801637a:	4920      	ldr	r1, [pc, #128]	; (80163fc <dhcp_inc_pcb_refcount+0xa0>)
 801637c:	4820      	ldr	r0, [pc, #128]	; (8016400 <dhcp_inc_pcb_refcount+0xa4>)
 801637e:	f004 fec9 	bl	801b114 <trace_printf>
 8016382:	e7fe      	b.n	8016382 <dhcp_inc_pcb_refcount+0x26>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 8016384:	f7ff ff96 	bl	80162b4 <udp_new>
 8016388:	4603      	mov	r3, r0
 801638a:	4a19      	ldr	r2, [pc, #100]	; (80163f0 <dhcp_inc_pcb_refcount+0x94>)
 801638c:	6013      	str	r3, [r2, #0]

    if (dhcp_pcb == NULL) {
 801638e:	4b18      	ldr	r3, [pc, #96]	; (80163f0 <dhcp_inc_pcb_refcount+0x94>)
 8016390:	681b      	ldr	r3, [r3, #0]
 8016392:	2b00      	cmp	r3, #0
 8016394:	d102      	bne.n	801639c <dhcp_inc_pcb_refcount+0x40>
      return ERR_MEM;
 8016396:	f04f 33ff 	mov.w	r3, #4294967295
 801639a:	e024      	b.n	80163e6 <dhcp_inc_pcb_refcount+0x8a>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 801639c:	4b14      	ldr	r3, [pc, #80]	; (80163f0 <dhcp_inc_pcb_refcount+0x94>)
 801639e:	681b      	ldr	r3, [r3, #0]
 80163a0:	7a5a      	ldrb	r2, [r3, #9]
 80163a2:	4b13      	ldr	r3, [pc, #76]	; (80163f0 <dhcp_inc_pcb_refcount+0x94>)
 80163a4:	681b      	ldr	r3, [r3, #0]
 80163a6:	f042 0220 	orr.w	r2, r2, #32
 80163aa:	b2d2      	uxtb	r2, r2
 80163ac:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 80163ae:	4b10      	ldr	r3, [pc, #64]	; (80163f0 <dhcp_inc_pcb_refcount+0x94>)
 80163b0:	681b      	ldr	r3, [r3, #0]
 80163b2:	2244      	movs	r2, #68	; 0x44
 80163b4:	4913      	ldr	r1, [pc, #76]	; (8016404 <dhcp_inc_pcb_refcount+0xa8>)
 80163b6:	4618      	mov	r0, r3
 80163b8:	f7ff fe12 	bl	8015fe0 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 80163bc:	4b0c      	ldr	r3, [pc, #48]	; (80163f0 <dhcp_inc_pcb_refcount+0x94>)
 80163be:	681b      	ldr	r3, [r3, #0]
 80163c0:	2243      	movs	r2, #67	; 0x43
 80163c2:	4910      	ldr	r1, [pc, #64]	; (8016404 <dhcp_inc_pcb_refcount+0xa8>)
 80163c4:	4618      	mov	r0, r3
 80163c6:	f7ff fe97 	bl	80160f8 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 80163ca:	4b09      	ldr	r3, [pc, #36]	; (80163f0 <dhcp_inc_pcb_refcount+0x94>)
 80163cc:	681b      	ldr	r3, [r3, #0]
 80163ce:	2200      	movs	r2, #0
 80163d0:	490d      	ldr	r1, [pc, #52]	; (8016408 <dhcp_inc_pcb_refcount+0xac>)
 80163d2:	4618      	mov	r0, r3
 80163d4:	f7ff ff02 	bl	80161dc <udp_recv>
  }

  dhcp_pcb_refcount++;
 80163d8:	4b04      	ldr	r3, [pc, #16]	; (80163ec <dhcp_inc_pcb_refcount+0x90>)
 80163da:	781b      	ldrb	r3, [r3, #0]
 80163dc:	3301      	adds	r3, #1
 80163de:	b2da      	uxtb	r2, r3
 80163e0:	4b02      	ldr	r3, [pc, #8]	; (80163ec <dhcp_inc_pcb_refcount+0x90>)
 80163e2:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 80163e4:	2300      	movs	r3, #0
}
 80163e6:	4618      	mov	r0, r3
 80163e8:	bd80      	pop	{r7, pc}
 80163ea:	bf00      	nop
 80163ec:	20009fd8 	.word	0x20009fd8
 80163f0:	20009fd4 	.word	0x20009fd4
 80163f4:	0801fb28 	.word	0x0801fb28
 80163f8:	0801fb50 	.word	0x0801fb50
 80163fc:	0801fb70 	.word	0x0801fb70
 8016400:	0801fba8 	.word	0x0801fba8
 8016404:	08020718 	.word	0x08020718
 8016408:	08017d5d 	.word	0x08017d5d

0801640c <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 801640c:	b580      	push	{r7, lr}
 801640e:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 8016410:	4b10      	ldr	r3, [pc, #64]	; (8016454 <dhcp_dec_pcb_refcount+0x48>)
 8016412:	781b      	ldrb	r3, [r3, #0]
 8016414:	2b00      	cmp	r3, #0
 8016416:	d109      	bne.n	801642c <dhcp_dec_pcb_refcount+0x20>
 8016418:	22ff      	movs	r2, #255	; 0xff
 801641a:	490f      	ldr	r1, [pc, #60]	; (8016458 <dhcp_dec_pcb_refcount+0x4c>)
 801641c:	480f      	ldr	r0, [pc, #60]	; (801645c <dhcp_dec_pcb_refcount+0x50>)
 801641e:	f004 fe79 	bl	801b114 <trace_printf>
 8016422:	490f      	ldr	r1, [pc, #60]	; (8016460 <dhcp_dec_pcb_refcount+0x54>)
 8016424:	480f      	ldr	r0, [pc, #60]	; (8016464 <dhcp_dec_pcb_refcount+0x58>)
 8016426:	f004 fe75 	bl	801b114 <trace_printf>
 801642a:	e7fe      	b.n	801642a <dhcp_dec_pcb_refcount+0x1e>
  dhcp_pcb_refcount--;
 801642c:	4b09      	ldr	r3, [pc, #36]	; (8016454 <dhcp_dec_pcb_refcount+0x48>)
 801642e:	781b      	ldrb	r3, [r3, #0]
 8016430:	3b01      	subs	r3, #1
 8016432:	b2da      	uxtb	r2, r3
 8016434:	4b07      	ldr	r3, [pc, #28]	; (8016454 <dhcp_dec_pcb_refcount+0x48>)
 8016436:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 8016438:	4b06      	ldr	r3, [pc, #24]	; (8016454 <dhcp_dec_pcb_refcount+0x48>)
 801643a:	781b      	ldrb	r3, [r3, #0]
 801643c:	2b00      	cmp	r3, #0
 801643e:	d107      	bne.n	8016450 <dhcp_dec_pcb_refcount+0x44>
    udp_remove(dhcp_pcb);
 8016440:	4b09      	ldr	r3, [pc, #36]	; (8016468 <dhcp_dec_pcb_refcount+0x5c>)
 8016442:	681b      	ldr	r3, [r3, #0]
 8016444:	4618      	mov	r0, r3
 8016446:	f7ff feef 	bl	8016228 <udp_remove>
    dhcp_pcb = NULL;
 801644a:	4b07      	ldr	r3, [pc, #28]	; (8016468 <dhcp_dec_pcb_refcount+0x5c>)
 801644c:	2200      	movs	r2, #0
 801644e:	601a      	str	r2, [r3, #0]
  }
}
 8016450:	bf00      	nop
 8016452:	bd80      	pop	{r7, pc}
 8016454:	20009fd8 	.word	0x20009fd8
 8016458:	0801fbac 	.word	0x0801fbac
 801645c:	0801fb50 	.word	0x0801fb50
 8016460:	0801fb70 	.word	0x0801fb70
 8016464:	0801fba8 	.word	0x0801fba8
 8016468:	20009fd4 	.word	0x20009fd4

0801646c <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 801646c:	b580      	push	{r7, lr}
 801646e:	b084      	sub	sp, #16
 8016470:	af00      	add	r7, sp, #0
 8016472:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8016474:	687b      	ldr	r3, [r7, #4]
 8016476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016478:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 801647a:	210c      	movs	r1, #12
 801647c:	68f8      	ldr	r0, [r7, #12]
 801647e:	f001 f871 	bl	8017564 <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8016482:	4b06      	ldr	r3, [pc, #24]	; (801649c <dhcp_handle_nak+0x30>)
 8016484:	4a05      	ldr	r2, [pc, #20]	; (801649c <dhcp_handle_nak+0x30>)
 8016486:	4905      	ldr	r1, [pc, #20]	; (801649c <dhcp_handle_nak+0x30>)
 8016488:	6878      	ldr	r0, [r7, #4]
 801648a:	f7f7 fc15 	bl	800dcb8 <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 801648e:	6878      	ldr	r0, [r7, #4]
 8016490:	f000 fc5c 	bl	8016d4c <dhcp_discover>
}
 8016494:	bf00      	nop
 8016496:	3710      	adds	r7, #16
 8016498:	46bd      	mov	sp, r7
 801649a:	bd80      	pop	{r7, pc}
 801649c:	08020718 	.word	0x08020718

080164a0 <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 80164a0:	b580      	push	{r7, lr}
 80164a2:	b084      	sub	sp, #16
 80164a4:	af00      	add	r7, sp, #0
 80164a6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80164a8:	687b      	ldr	r3, [r7, #4]
 80164aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80164ac:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 80164ae:	2108      	movs	r1, #8
 80164b0:	68f8      	ldr	r0, [r7, #12]
 80164b2:	f001 f857 	bl	8017564 <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 80164b6:	68fb      	ldr	r3, [r7, #12]
 80164b8:	331c      	adds	r3, #28
 80164ba:	2200      	movs	r2, #0
 80164bc:	4619      	mov	r1, r3
 80164be:	6878      	ldr	r0, [r7, #4]
 80164c0:	f002 fc20 	bl	8018d04 <etharp_query>
 80164c4:	4603      	mov	r3, r0
 80164c6:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 80164c8:	68fb      	ldr	r3, [r7, #12]
 80164ca:	799b      	ldrb	r3, [r3, #6]
 80164cc:	2bff      	cmp	r3, #255	; 0xff
 80164ce:	d005      	beq.n	80164dc <dhcp_check+0x3c>
    dhcp->tries++;
 80164d0:	68fb      	ldr	r3, [r7, #12]
 80164d2:	799b      	ldrb	r3, [r3, #6]
 80164d4:	3301      	adds	r3, #1
 80164d6:	b2da      	uxtb	r2, r3
 80164d8:	68fb      	ldr	r3, [r7, #12]
 80164da:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 80164dc:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80164e0:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80164e2:	893b      	ldrh	r3, [r7, #8]
 80164e4:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80164e8:	4a06      	ldr	r2, [pc, #24]	; (8016504 <dhcp_check+0x64>)
 80164ea:	fb82 1203 	smull	r1, r2, r2, r3
 80164ee:	1152      	asrs	r2, r2, #5
 80164f0:	17db      	asrs	r3, r3, #31
 80164f2:	1ad3      	subs	r3, r2, r3
 80164f4:	b29a      	uxth	r2, r3
 80164f6:	68fb      	ldr	r3, [r7, #12]
 80164f8:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 80164fa:	bf00      	nop
 80164fc:	3710      	adds	r7, #16
 80164fe:	46bd      	mov	sp, r7
 8016500:	bd80      	pop	{r7, pc}
 8016502:	bf00      	nop
 8016504:	10624dd3 	.word	0x10624dd3

08016508 <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 8016508:	b580      	push	{r7, lr}
 801650a:	b084      	sub	sp, #16
 801650c:	af00      	add	r7, sp, #0
 801650e:	6078      	str	r0, [r7, #4]
 8016510:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8016512:	687b      	ldr	r3, [r7, #4]
 8016514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016516:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 8016518:	4b0c      	ldr	r3, [pc, #48]	; (801654c <dhcp_handle_offer+0x44>)
 801651a:	789b      	ldrb	r3, [r3, #2]
 801651c:	2b00      	cmp	r3, #0
 801651e:	d011      	beq.n	8016544 <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 8016520:	68fb      	ldr	r3, [r7, #12]
 8016522:	2200      	movs	r2, #0
 8016524:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 8016526:	4b0a      	ldr	r3, [pc, #40]	; (8016550 <dhcp_handle_offer+0x48>)
 8016528:	689b      	ldr	r3, [r3, #8]
 801652a:	4618      	mov	r0, r3
 801652c:	f7f6 fc1f 	bl	800cd6e <lwip_htonl>
 8016530:	4602      	mov	r2, r0
 8016532:	68fb      	ldr	r3, [r7, #12]
 8016534:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8016536:	683b      	ldr	r3, [r7, #0]
 8016538:	691a      	ldr	r2, [r3, #16]
 801653a:	68fb      	ldr	r3, [r7, #12]
 801653c:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 801653e:	6878      	ldr	r0, [r7, #4]
 8016540:	f000 f808 	bl	8016554 <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 8016544:	bf00      	nop
 8016546:	3710      	adds	r7, #16
 8016548:	46bd      	mov	sp, r7
 801654a:	bd80      	pop	{r7, pc}
 801654c:	20010c9c 	.word	0x20010c9c
 8016550:	20010ca4 	.word	0x20010ca4

08016554 <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 8016554:	b5b0      	push	{r4, r5, r7, lr}
 8016556:	b08a      	sub	sp, #40	; 0x28
 8016558:	af02      	add	r7, sp, #8
 801655a:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 801655c:	687b      	ldr	r3, [r7, #4]
 801655e:	2b00      	cmp	r3, #0
 8016560:	d10a      	bne.n	8016578 <dhcp_select+0x24>
 8016562:	f240 1277 	movw	r2, #375	; 0x177
 8016566:	4971      	ldr	r1, [pc, #452]	; (801672c <dhcp_select+0x1d8>)
 8016568:	4871      	ldr	r0, [pc, #452]	; (8016730 <dhcp_select+0x1dc>)
 801656a:	f004 fdd3 	bl	801b114 <trace_printf>
 801656e:	4971      	ldr	r1, [pc, #452]	; (8016734 <dhcp_select+0x1e0>)
 8016570:	4871      	ldr	r0, [pc, #452]	; (8016738 <dhcp_select+0x1e4>)
 8016572:	f004 fdcf 	bl	801b114 <trace_printf>
 8016576:	e7fe      	b.n	8016576 <dhcp_select+0x22>
  dhcp = netif_dhcp_data(netif);
 8016578:	687b      	ldr	r3, [r7, #4]
 801657a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801657c:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 801657e:	69bb      	ldr	r3, [r7, #24]
 8016580:	2b00      	cmp	r3, #0
 8016582:	d10a      	bne.n	801659a <dhcp_select+0x46>
 8016584:	f240 1279 	movw	r2, #377	; 0x179
 8016588:	496c      	ldr	r1, [pc, #432]	; (801673c <dhcp_select+0x1e8>)
 801658a:	4869      	ldr	r0, [pc, #420]	; (8016730 <dhcp_select+0x1dc>)
 801658c:	f004 fdc2 	bl	801b114 <trace_printf>
 8016590:	4968      	ldr	r1, [pc, #416]	; (8016734 <dhcp_select+0x1e0>)
 8016592:	4869      	ldr	r0, [pc, #420]	; (8016738 <dhcp_select+0x1e4>)
 8016594:	f004 fdbe 	bl	801b114 <trace_printf>
 8016598:	e7fe      	b.n	8016598 <dhcp_select+0x44>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 801659a:	2101      	movs	r1, #1
 801659c:	69b8      	ldr	r0, [r7, #24]
 801659e:	f000 ffe1 	bl	8017564 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 80165a2:	f107 030c 	add.w	r3, r7, #12
 80165a6:	2203      	movs	r2, #3
 80165a8:	69b9      	ldr	r1, [r7, #24]
 80165aa:	6878      	ldr	r0, [r7, #4]
 80165ac:	f001 fca0 	bl	8017ef0 <dhcp_create_msg>
 80165b0:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 80165b2:	697b      	ldr	r3, [r7, #20]
 80165b4:	2b00      	cmp	r3, #0
 80165b6:	f000 8085 	beq.w	80166c4 <dhcp_select+0x170>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80165ba:	697b      	ldr	r3, [r7, #20]
 80165bc:	685b      	ldr	r3, [r3, #4]
 80165be:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80165c0:	89b8      	ldrh	r0, [r7, #12]
 80165c2:	693b      	ldr	r3, [r7, #16]
 80165c4:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80165c8:	2302      	movs	r3, #2
 80165ca:	2239      	movs	r2, #57	; 0x39
 80165cc:	f000 ffe4 	bl	8017598 <dhcp_option>
 80165d0:	4603      	mov	r3, r0
 80165d2:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 80165d4:	89b8      	ldrh	r0, [r7, #12]
 80165d6:	693b      	ldr	r3, [r7, #16]
 80165d8:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80165dc:	687b      	ldr	r3, [r7, #4]
 80165de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80165e0:	461a      	mov	r2, r3
 80165e2:	f001 f83f 	bl	8017664 <dhcp_option_short>
 80165e6:	4603      	mov	r3, r0
 80165e8:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 80165ea:	89b8      	ldrh	r0, [r7, #12]
 80165ec:	693b      	ldr	r3, [r7, #16]
 80165ee:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80165f2:	2304      	movs	r3, #4
 80165f4:	2232      	movs	r2, #50	; 0x32
 80165f6:	f000 ffcf 	bl	8017598 <dhcp_option>
 80165fa:	4603      	mov	r3, r0
 80165fc:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 80165fe:	89bc      	ldrh	r4, [r7, #12]
 8016600:	693b      	ldr	r3, [r7, #16]
 8016602:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8016606:	69bb      	ldr	r3, [r7, #24]
 8016608:	69db      	ldr	r3, [r3, #28]
 801660a:	4618      	mov	r0, r3
 801660c:	f7f6 fbaf 	bl	800cd6e <lwip_htonl>
 8016610:	4603      	mov	r3, r0
 8016612:	461a      	mov	r2, r3
 8016614:	4629      	mov	r1, r5
 8016616:	4620      	mov	r0, r4
 8016618:	f001 f85c 	bl	80176d4 <dhcp_option_long>
 801661c:	4603      	mov	r3, r0
 801661e:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8016620:	89b8      	ldrh	r0, [r7, #12]
 8016622:	693b      	ldr	r3, [r7, #16]
 8016624:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8016628:	2304      	movs	r3, #4
 801662a:	2236      	movs	r2, #54	; 0x36
 801662c:	f000 ffb4 	bl	8017598 <dhcp_option>
 8016630:	4603      	mov	r3, r0
 8016632:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 8016634:	89bc      	ldrh	r4, [r7, #12]
 8016636:	693b      	ldr	r3, [r7, #16]
 8016638:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 801663c:	69bb      	ldr	r3, [r7, #24]
 801663e:	699b      	ldr	r3, [r3, #24]
 8016640:	4618      	mov	r0, r3
 8016642:	f7f6 fb94 	bl	800cd6e <lwip_htonl>
 8016646:	4603      	mov	r3, r0
 8016648:	461a      	mov	r2, r3
 801664a:	4629      	mov	r1, r5
 801664c:	4620      	mov	r0, r4
 801664e:	f001 f841 	bl	80176d4 <dhcp_option_long>
 8016652:	4603      	mov	r3, r0
 8016654:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8016656:	89b8      	ldrh	r0, [r7, #12]
 8016658:	693b      	ldr	r3, [r7, #16]
 801665a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801665e:	2303      	movs	r3, #3
 8016660:	2237      	movs	r2, #55	; 0x37
 8016662:	f000 ff99 	bl	8017598 <dhcp_option>
 8016666:	4603      	mov	r3, r0
 8016668:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801666a:	2300      	movs	r3, #0
 801666c:	77fb      	strb	r3, [r7, #31]
 801666e:	e00e      	b.n	801668e <dhcp_select+0x13a>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8016670:	89b8      	ldrh	r0, [r7, #12]
 8016672:	693b      	ldr	r3, [r7, #16]
 8016674:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8016678:	7ffb      	ldrb	r3, [r7, #31]
 801667a:	4a31      	ldr	r2, [pc, #196]	; (8016740 <dhcp_select+0x1ec>)
 801667c:	5cd3      	ldrb	r3, [r2, r3]
 801667e:	461a      	mov	r2, r3
 8016680:	f000 ffc4 	bl	801760c <dhcp_option_byte>
 8016684:	4603      	mov	r3, r0
 8016686:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8016688:	7ffb      	ldrb	r3, [r7, #31]
 801668a:	3301      	adds	r3, #1
 801668c:	77fb      	strb	r3, [r7, #31]
 801668e:	7ffb      	ldrb	r3, [r7, #31]
 8016690:	2b02      	cmp	r3, #2
 8016692:	d9ed      	bls.n	8016670 <dhcp_select+0x11c>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8016694:	89b8      	ldrh	r0, [r7, #12]
 8016696:	693b      	ldr	r3, [r7, #16]
 8016698:	33f0      	adds	r3, #240	; 0xf0
 801669a:	697a      	ldr	r2, [r7, #20]
 801669c:	4619      	mov	r1, r3
 801669e:	f001 fd07 	bl	80180b0 <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 80166a2:	4b28      	ldr	r3, [pc, #160]	; (8016744 <dhcp_select+0x1f0>)
 80166a4:	6818      	ldr	r0, [r3, #0]
 80166a6:	4b28      	ldr	r3, [pc, #160]	; (8016748 <dhcp_select+0x1f4>)
 80166a8:	9301      	str	r3, [sp, #4]
 80166aa:	687b      	ldr	r3, [r7, #4]
 80166ac:	9300      	str	r3, [sp, #0]
 80166ae:	2343      	movs	r3, #67	; 0x43
 80166b0:	4a26      	ldr	r2, [pc, #152]	; (801674c <dhcp_select+0x1f8>)
 80166b2:	6979      	ldr	r1, [r7, #20]
 80166b4:	f7ff fb9a 	bl	8015dec <udp_sendto_if_src>
 80166b8:	4603      	mov	r3, r0
 80166ba:	77bb      	strb	r3, [r7, #30]
    pbuf_free(p_out);
 80166bc:	6978      	ldr	r0, [r7, #20]
 80166be:	f7f8 f857 	bl	800e770 <pbuf_free>
 80166c2:	e001      	b.n	80166c8 <dhcp_select+0x174>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80166c4:	23ff      	movs	r3, #255	; 0xff
 80166c6:	77bb      	strb	r3, [r7, #30]
  }
  if (dhcp->tries < 255) {
 80166c8:	69bb      	ldr	r3, [r7, #24]
 80166ca:	799b      	ldrb	r3, [r3, #6]
 80166cc:	2bff      	cmp	r3, #255	; 0xff
 80166ce:	d005      	beq.n	80166dc <dhcp_select+0x188>
    dhcp->tries++;
 80166d0:	69bb      	ldr	r3, [r7, #24]
 80166d2:	799b      	ldrb	r3, [r3, #6]
 80166d4:	3301      	adds	r3, #1
 80166d6:	b2da      	uxtb	r2, r3
 80166d8:	69bb      	ldr	r3, [r7, #24]
 80166da:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 80166dc:	69bb      	ldr	r3, [r7, #24]
 80166de:	799b      	ldrb	r3, [r3, #6]
 80166e0:	2b05      	cmp	r3, #5
 80166e2:	d80d      	bhi.n	8016700 <dhcp_select+0x1ac>
 80166e4:	69bb      	ldr	r3, [r7, #24]
 80166e6:	799b      	ldrb	r3, [r3, #6]
 80166e8:	461a      	mov	r2, r3
 80166ea:	2301      	movs	r3, #1
 80166ec:	4093      	lsls	r3, r2
 80166ee:	b29b      	uxth	r3, r3
 80166f0:	461a      	mov	r2, r3
 80166f2:	0152      	lsls	r2, r2, #5
 80166f4:	1ad2      	subs	r2, r2, r3
 80166f6:	0092      	lsls	r2, r2, #2
 80166f8:	4413      	add	r3, r2
 80166fa:	00db      	lsls	r3, r3, #3
 80166fc:	b29b      	uxth	r3, r3
 80166fe:	e001      	b.n	8016704 <dhcp_select+0x1b0>
 8016700:	f64e 2360 	movw	r3, #60000	; 0xea60
 8016704:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8016706:	89fb      	ldrh	r3, [r7, #14]
 8016708:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801670c:	4a10      	ldr	r2, [pc, #64]	; (8016750 <dhcp_select+0x1fc>)
 801670e:	fb82 1203 	smull	r1, r2, r2, r3
 8016712:	1152      	asrs	r2, r2, #5
 8016714:	17db      	asrs	r3, r3, #31
 8016716:	1ad3      	subs	r3, r2, r3
 8016718:	b29a      	uxth	r2, r3
 801671a:	69bb      	ldr	r3, [r7, #24]
 801671c:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801671e:	f997 301e 	ldrsb.w	r3, [r7, #30]
}
 8016722:	4618      	mov	r0, r3
 8016724:	3720      	adds	r7, #32
 8016726:	46bd      	mov	sp, r7
 8016728:	bdb0      	pop	{r4, r5, r7, pc}
 801672a:	bf00      	nop
 801672c:	0801fbd0 	.word	0x0801fbd0
 8016730:	0801fb50 	.word	0x0801fb50
 8016734:	0801fb70 	.word	0x0801fb70
 8016738:	0801fba8 	.word	0x0801fba8
 801673c:	0801fbec 	.word	0x0801fbec
 8016740:	20000020 	.word	0x20000020
 8016744:	20009fd4 	.word	0x20009fd4
 8016748:	08020718 	.word	0x08020718
 801674c:	0802071c 	.word	0x0802071c
 8016750:	10624dd3 	.word	0x10624dd3

08016754 <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 8016754:	b580      	push	{r7, lr}
 8016756:	b082      	sub	sp, #8
 8016758:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 801675a:	4b27      	ldr	r3, [pc, #156]	; (80167f8 <dhcp_coarse_tmr+0xa4>)
 801675c:	681b      	ldr	r3, [r3, #0]
 801675e:	607b      	str	r3, [r7, #4]
 8016760:	e042      	b.n	80167e8 <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8016762:	687b      	ldr	r3, [r7, #4]
 8016764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016766:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 8016768:	683b      	ldr	r3, [r7, #0]
 801676a:	2b00      	cmp	r3, #0
 801676c:	d039      	beq.n	80167e2 <dhcp_coarse_tmr+0x8e>
 801676e:	683b      	ldr	r3, [r7, #0]
 8016770:	795b      	ldrb	r3, [r3, #5]
 8016772:	2b00      	cmp	r3, #0
 8016774:	d035      	beq.n	80167e2 <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 8016776:	683b      	ldr	r3, [r7, #0]
 8016778:	8a9b      	ldrh	r3, [r3, #20]
 801677a:	2b00      	cmp	r3, #0
 801677c:	d012      	beq.n	80167a4 <dhcp_coarse_tmr+0x50>
 801677e:	683b      	ldr	r3, [r7, #0]
 8016780:	8a5b      	ldrh	r3, [r3, #18]
 8016782:	3301      	adds	r3, #1
 8016784:	b29a      	uxth	r2, r3
 8016786:	683b      	ldr	r3, [r7, #0]
 8016788:	825a      	strh	r2, [r3, #18]
 801678a:	683b      	ldr	r3, [r7, #0]
 801678c:	8a5a      	ldrh	r2, [r3, #18]
 801678e:	683b      	ldr	r3, [r7, #0]
 8016790:	8a9b      	ldrh	r3, [r3, #20]
 8016792:	429a      	cmp	r2, r3
 8016794:	d106      	bne.n	80167a4 <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 8016796:	6878      	ldr	r0, [r7, #4]
 8016798:	f000 fe4a 	bl	8017430 <dhcp_release_and_stop>
        dhcp_start(netif);
 801679c:	6878      	ldr	r0, [r7, #4]
 801679e:	f000 f969 	bl	8016a74 <dhcp_start>
 80167a2:	e01e      	b.n	80167e2 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 80167a4:	683b      	ldr	r3, [r7, #0]
 80167a6:	8a1b      	ldrh	r3, [r3, #16]
 80167a8:	2b00      	cmp	r3, #0
 80167aa:	d00b      	beq.n	80167c4 <dhcp_coarse_tmr+0x70>
 80167ac:	683b      	ldr	r3, [r7, #0]
 80167ae:	8a1b      	ldrh	r3, [r3, #16]
 80167b0:	1e5a      	subs	r2, r3, #1
 80167b2:	b291      	uxth	r1, r2
 80167b4:	683a      	ldr	r2, [r7, #0]
 80167b6:	8211      	strh	r1, [r2, #16]
 80167b8:	2b01      	cmp	r3, #1
 80167ba:	d103      	bne.n	80167c4 <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 80167bc:	6878      	ldr	r0, [r7, #4]
 80167be:	f000 f8c6 	bl	801694e <dhcp_t2_timeout>
 80167c2:	e00e      	b.n	80167e2 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 80167c4:	683b      	ldr	r3, [r7, #0]
 80167c6:	89db      	ldrh	r3, [r3, #14]
 80167c8:	2b00      	cmp	r3, #0
 80167ca:	d00a      	beq.n	80167e2 <dhcp_coarse_tmr+0x8e>
 80167cc:	683b      	ldr	r3, [r7, #0]
 80167ce:	89db      	ldrh	r3, [r3, #14]
 80167d0:	1e5a      	subs	r2, r3, #1
 80167d2:	b291      	uxth	r1, r2
 80167d4:	683a      	ldr	r2, [r7, #0]
 80167d6:	81d1      	strh	r1, [r2, #14]
 80167d8:	2b01      	cmp	r3, #1
 80167da:	d102      	bne.n	80167e2 <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 80167dc:	6878      	ldr	r0, [r7, #4]
 80167de:	f000 f888 	bl	80168f2 <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 80167e2:	687b      	ldr	r3, [r7, #4]
 80167e4:	681b      	ldr	r3, [r3, #0]
 80167e6:	607b      	str	r3, [r7, #4]
 80167e8:	687b      	ldr	r3, [r7, #4]
 80167ea:	2b00      	cmp	r3, #0
 80167ec:	d1b9      	bne.n	8016762 <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 80167ee:	bf00      	nop
 80167f0:	bf00      	nop
 80167f2:	3708      	adds	r7, #8
 80167f4:	46bd      	mov	sp, r7
 80167f6:	bd80      	pop	{r7, pc}
 80167f8:	20010b70 	.word	0x20010b70

080167fc <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 80167fc:	b580      	push	{r7, lr}
 80167fe:	b082      	sub	sp, #8
 8016800:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 8016802:	4b16      	ldr	r3, [pc, #88]	; (801685c <dhcp_fine_tmr+0x60>)
 8016804:	681b      	ldr	r3, [r3, #0]
 8016806:	607b      	str	r3, [r7, #4]
 8016808:	e020      	b.n	801684c <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 801680a:	687b      	ldr	r3, [r7, #4]
 801680c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801680e:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 8016810:	683b      	ldr	r3, [r7, #0]
 8016812:	2b00      	cmp	r3, #0
 8016814:	d017      	beq.n	8016846 <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 8016816:	683b      	ldr	r3, [r7, #0]
 8016818:	891b      	ldrh	r3, [r3, #8]
 801681a:	2b01      	cmp	r3, #1
 801681c:	d906      	bls.n	801682c <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 801681e:	683b      	ldr	r3, [r7, #0]
 8016820:	891b      	ldrh	r3, [r3, #8]
 8016822:	3b01      	subs	r3, #1
 8016824:	b29a      	uxth	r2, r3
 8016826:	683b      	ldr	r3, [r7, #0]
 8016828:	811a      	strh	r2, [r3, #8]
 801682a:	e00c      	b.n	8016846 <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 801682c:	683b      	ldr	r3, [r7, #0]
 801682e:	891b      	ldrh	r3, [r3, #8]
 8016830:	2b01      	cmp	r3, #1
 8016832:	d108      	bne.n	8016846 <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 8016834:	683b      	ldr	r3, [r7, #0]
 8016836:	891b      	ldrh	r3, [r3, #8]
 8016838:	3b01      	subs	r3, #1
 801683a:	b29a      	uxth	r2, r3
 801683c:	683b      	ldr	r3, [r7, #0]
 801683e:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 8016840:	6878      	ldr	r0, [r7, #4]
 8016842:	f000 f80d 	bl	8016860 <dhcp_timeout>
  NETIF_FOREACH(netif) {
 8016846:	687b      	ldr	r3, [r7, #4]
 8016848:	681b      	ldr	r3, [r3, #0]
 801684a:	607b      	str	r3, [r7, #4]
 801684c:	687b      	ldr	r3, [r7, #4]
 801684e:	2b00      	cmp	r3, #0
 8016850:	d1db      	bne.n	801680a <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 8016852:	bf00      	nop
 8016854:	bf00      	nop
 8016856:	3708      	adds	r7, #8
 8016858:	46bd      	mov	sp, r7
 801685a:	bd80      	pop	{r7, pc}
 801685c:	20010b70 	.word	0x20010b70

08016860 <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 8016860:	b580      	push	{r7, lr}
 8016862:	b084      	sub	sp, #16
 8016864:	af00      	add	r7, sp, #0
 8016866:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8016868:	687b      	ldr	r3, [r7, #4]
 801686a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801686c:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 801686e:	68fb      	ldr	r3, [r7, #12]
 8016870:	795b      	ldrb	r3, [r3, #5]
 8016872:	2b0c      	cmp	r3, #12
 8016874:	d003      	beq.n	801687e <dhcp_timeout+0x1e>
 8016876:	68fb      	ldr	r3, [r7, #12]
 8016878:	795b      	ldrb	r3, [r3, #5]
 801687a:	2b06      	cmp	r3, #6
 801687c:	d103      	bne.n	8016886 <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 801687e:	6878      	ldr	r0, [r7, #4]
 8016880:	f000 fa64 	bl	8016d4c <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 8016884:	e031      	b.n	80168ea <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 8016886:	68fb      	ldr	r3, [r7, #12]
 8016888:	795b      	ldrb	r3, [r3, #5]
 801688a:	2b01      	cmp	r3, #1
 801688c:	d10e      	bne.n	80168ac <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 801688e:	68fb      	ldr	r3, [r7, #12]
 8016890:	799b      	ldrb	r3, [r3, #6]
 8016892:	2b05      	cmp	r3, #5
 8016894:	d803      	bhi.n	801689e <dhcp_timeout+0x3e>
      dhcp_select(netif);
 8016896:	6878      	ldr	r0, [r7, #4]
 8016898:	f7ff fe5c 	bl	8016554 <dhcp_select>
}
 801689c:	e025      	b.n	80168ea <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 801689e:	6878      	ldr	r0, [r7, #4]
 80168a0:	f000 fdc6 	bl	8017430 <dhcp_release_and_stop>
      dhcp_start(netif);
 80168a4:	6878      	ldr	r0, [r7, #4]
 80168a6:	f000 f8e5 	bl	8016a74 <dhcp_start>
}
 80168aa:	e01e      	b.n	80168ea <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 80168ac:	68fb      	ldr	r3, [r7, #12]
 80168ae:	795b      	ldrb	r3, [r3, #5]
 80168b0:	2b08      	cmp	r3, #8
 80168b2:	d10b      	bne.n	80168cc <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 80168b4:	68fb      	ldr	r3, [r7, #12]
 80168b6:	799b      	ldrb	r3, [r3, #6]
 80168b8:	2b01      	cmp	r3, #1
 80168ba:	d803      	bhi.n	80168c4 <dhcp_timeout+0x64>
      dhcp_check(netif);
 80168bc:	6878      	ldr	r0, [r7, #4]
 80168be:	f7ff fdef 	bl	80164a0 <dhcp_check>
}
 80168c2:	e012      	b.n	80168ea <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 80168c4:	6878      	ldr	r0, [r7, #4]
 80168c6:	f000 fae3 	bl	8016e90 <dhcp_bind>
}
 80168ca:	e00e      	b.n	80168ea <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 80168cc:	68fb      	ldr	r3, [r7, #12]
 80168ce:	795b      	ldrb	r3, [r3, #5]
 80168d0:	2b03      	cmp	r3, #3
 80168d2:	d10a      	bne.n	80168ea <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 80168d4:	68fb      	ldr	r3, [r7, #12]
 80168d6:	799b      	ldrb	r3, [r3, #6]
 80168d8:	2b01      	cmp	r3, #1
 80168da:	d803      	bhi.n	80168e4 <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 80168dc:	6878      	ldr	r0, [r7, #4]
 80168de:	f000 fcf1 	bl	80172c4 <dhcp_reboot>
}
 80168e2:	e002      	b.n	80168ea <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 80168e4:	6878      	ldr	r0, [r7, #4]
 80168e6:	f000 fa31 	bl	8016d4c <dhcp_discover>
}
 80168ea:	bf00      	nop
 80168ec:	3710      	adds	r7, #16
 80168ee:	46bd      	mov	sp, r7
 80168f0:	bd80      	pop	{r7, pc}

080168f2 <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 80168f2:	b580      	push	{r7, lr}
 80168f4:	b084      	sub	sp, #16
 80168f6:	af00      	add	r7, sp, #0
 80168f8:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80168fa:	687b      	ldr	r3, [r7, #4]
 80168fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80168fe:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8016900:	68fb      	ldr	r3, [r7, #12]
 8016902:	795b      	ldrb	r3, [r3, #5]
 8016904:	2b01      	cmp	r3, #1
 8016906:	d007      	beq.n	8016918 <dhcp_t1_timeout+0x26>
 8016908:	68fb      	ldr	r3, [r7, #12]
 801690a:	795b      	ldrb	r3, [r3, #5]
 801690c:	2b0a      	cmp	r3, #10
 801690e:	d003      	beq.n	8016918 <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 8016910:	68fb      	ldr	r3, [r7, #12]
 8016912:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8016914:	2b05      	cmp	r3, #5
 8016916:	d116      	bne.n	8016946 <dhcp_t1_timeout+0x54>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 8016918:	6878      	ldr	r0, [r7, #4]
 801691a:	f000 fb9b 	bl	8017054 <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 801691e:	68fb      	ldr	r3, [r7, #12]
 8016920:	899b      	ldrh	r3, [r3, #12]
 8016922:	461a      	mov	r2, r3
 8016924:	68fb      	ldr	r3, [r7, #12]
 8016926:	8a5b      	ldrh	r3, [r3, #18]
 8016928:	1ad3      	subs	r3, r2, r3
 801692a:	2b01      	cmp	r3, #1
 801692c:	dd0b      	ble.n	8016946 <dhcp_t1_timeout+0x54>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 801692e:	68fb      	ldr	r3, [r7, #12]
 8016930:	899b      	ldrh	r3, [r3, #12]
 8016932:	461a      	mov	r2, r3
 8016934:	68fb      	ldr	r3, [r7, #12]
 8016936:	8a5b      	ldrh	r3, [r3, #18]
 8016938:	1ad3      	subs	r3, r2, r3
 801693a:	0fda      	lsrs	r2, r3, #31
 801693c:	4413      	add	r3, r2
 801693e:	105b      	asrs	r3, r3, #1
 8016940:	b29a      	uxth	r2, r3
 8016942:	68fb      	ldr	r3, [r7, #12]
 8016944:	81da      	strh	r2, [r3, #14]
    }
  }
}
 8016946:	bf00      	nop
 8016948:	3710      	adds	r7, #16
 801694a:	46bd      	mov	sp, r7
 801694c:	bd80      	pop	{r7, pc}

0801694e <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 801694e:	b580      	push	{r7, lr}
 8016950:	b084      	sub	sp, #16
 8016952:	af00      	add	r7, sp, #0
 8016954:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8016956:	687b      	ldr	r3, [r7, #4]
 8016958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801695a:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 801695c:	68fb      	ldr	r3, [r7, #12]
 801695e:	795b      	ldrb	r3, [r3, #5]
 8016960:	2b01      	cmp	r3, #1
 8016962:	d00b      	beq.n	801697c <dhcp_t2_timeout+0x2e>
 8016964:	68fb      	ldr	r3, [r7, #12]
 8016966:	795b      	ldrb	r3, [r3, #5]
 8016968:	2b0a      	cmp	r3, #10
 801696a:	d007      	beq.n	801697c <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 801696c:	68fb      	ldr	r3, [r7, #12]
 801696e:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8016970:	2b05      	cmp	r3, #5
 8016972:	d003      	beq.n	801697c <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8016974:	68fb      	ldr	r3, [r7, #12]
 8016976:	795b      	ldrb	r3, [r3, #5]
 8016978:	2b04      	cmp	r3, #4
 801697a:	d116      	bne.n	80169aa <dhcp_t2_timeout+0x5c>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 801697c:	6878      	ldr	r0, [r7, #4]
 801697e:	f000 fc05 	bl	801718c <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8016982:	68fb      	ldr	r3, [r7, #12]
 8016984:	8a9b      	ldrh	r3, [r3, #20]
 8016986:	461a      	mov	r2, r3
 8016988:	68fb      	ldr	r3, [r7, #12]
 801698a:	8a5b      	ldrh	r3, [r3, #18]
 801698c:	1ad3      	subs	r3, r2, r3
 801698e:	2b01      	cmp	r3, #1
 8016990:	dd0b      	ble.n	80169aa <dhcp_t2_timeout+0x5c>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 8016992:	68fb      	ldr	r3, [r7, #12]
 8016994:	8a9b      	ldrh	r3, [r3, #20]
 8016996:	461a      	mov	r2, r3
 8016998:	68fb      	ldr	r3, [r7, #12]
 801699a:	8a5b      	ldrh	r3, [r3, #18]
 801699c:	1ad3      	subs	r3, r2, r3
 801699e:	0fda      	lsrs	r2, r3, #31
 80169a0:	4413      	add	r3, r2
 80169a2:	105b      	asrs	r3, r3, #1
 80169a4:	b29a      	uxth	r2, r3
 80169a6:	68fb      	ldr	r3, [r7, #12]
 80169a8:	821a      	strh	r2, [r3, #16]
    }
  }
}
 80169aa:	bf00      	nop
 80169ac:	3710      	adds	r7, #16
 80169ae:	46bd      	mov	sp, r7
 80169b0:	bd80      	pop	{r7, pc}
	...

080169b4 <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 80169b4:	b580      	push	{r7, lr}
 80169b6:	b084      	sub	sp, #16
 80169b8:	af00      	add	r7, sp, #0
 80169ba:	6078      	str	r0, [r7, #4]
 80169bc:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80169be:	687b      	ldr	r3, [r7, #4]
 80169c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80169c2:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 80169c4:	68fb      	ldr	r3, [r7, #12]
 80169c6:	2200      	movs	r2, #0
 80169c8:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 80169ca:	68fb      	ldr	r3, [r7, #12]
 80169cc:	2200      	movs	r2, #0
 80169ce:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 80169d0:	4b26      	ldr	r3, [pc, #152]	; (8016a6c <dhcp_handle_ack+0xb8>)
 80169d2:	78db      	ldrb	r3, [r3, #3]
 80169d4:	2b00      	cmp	r3, #0
 80169d6:	d003      	beq.n	80169e0 <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 80169d8:	4b25      	ldr	r3, [pc, #148]	; (8016a70 <dhcp_handle_ack+0xbc>)
 80169da:	68da      	ldr	r2, [r3, #12]
 80169dc:	68fb      	ldr	r3, [r7, #12]
 80169de:	629a      	str	r2, [r3, #40]	; 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 80169e0:	4b22      	ldr	r3, [pc, #136]	; (8016a6c <dhcp_handle_ack+0xb8>)
 80169e2:	791b      	ldrb	r3, [r3, #4]
 80169e4:	2b00      	cmp	r3, #0
 80169e6:	d004      	beq.n	80169f2 <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 80169e8:	4b21      	ldr	r3, [pc, #132]	; (8016a70 <dhcp_handle_ack+0xbc>)
 80169ea:	691a      	ldr	r2, [r3, #16]
 80169ec:	68fb      	ldr	r3, [r7, #12]
 80169ee:	62da      	str	r2, [r3, #44]	; 0x2c
 80169f0:	e004      	b.n	80169fc <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 80169f2:	68fb      	ldr	r3, [r7, #12]
 80169f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80169f6:	085a      	lsrs	r2, r3, #1
 80169f8:	68fb      	ldr	r3, [r7, #12]
 80169fa:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 80169fc:	4b1b      	ldr	r3, [pc, #108]	; (8016a6c <dhcp_handle_ack+0xb8>)
 80169fe:	795b      	ldrb	r3, [r3, #5]
 8016a00:	2b00      	cmp	r3, #0
 8016a02:	d004      	beq.n	8016a0e <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 8016a04:	4b1a      	ldr	r3, [pc, #104]	; (8016a70 <dhcp_handle_ack+0xbc>)
 8016a06:	695a      	ldr	r2, [r3, #20]
 8016a08:	68fb      	ldr	r3, [r7, #12]
 8016a0a:	631a      	str	r2, [r3, #48]	; 0x30
 8016a0c:	e007      	b.n	8016a1e <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 8016a0e:	68fb      	ldr	r3, [r7, #12]
 8016a10:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8016a12:	4613      	mov	r3, r2
 8016a14:	00db      	lsls	r3, r3, #3
 8016a16:	1a9b      	subs	r3, r3, r2
 8016a18:	08da      	lsrs	r2, r3, #3
 8016a1a:	68fb      	ldr	r3, [r7, #12]
 8016a1c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8016a1e:	683b      	ldr	r3, [r7, #0]
 8016a20:	691a      	ldr	r2, [r3, #16]
 8016a22:	68fb      	ldr	r3, [r7, #12]
 8016a24:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 8016a26:	4b11      	ldr	r3, [pc, #68]	; (8016a6c <dhcp_handle_ack+0xb8>)
 8016a28:	799b      	ldrb	r3, [r3, #6]
 8016a2a:	2b00      	cmp	r3, #0
 8016a2c:	d00b      	beq.n	8016a46 <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 8016a2e:	4b10      	ldr	r3, [pc, #64]	; (8016a70 <dhcp_handle_ack+0xbc>)
 8016a30:	699b      	ldr	r3, [r3, #24]
 8016a32:	4618      	mov	r0, r3
 8016a34:	f7f6 f99b 	bl	800cd6e <lwip_htonl>
 8016a38:	4602      	mov	r2, r0
 8016a3a:	68fb      	ldr	r3, [r7, #12]
 8016a3c:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 8016a3e:	68fb      	ldr	r3, [r7, #12]
 8016a40:	2201      	movs	r2, #1
 8016a42:	71da      	strb	r2, [r3, #7]
 8016a44:	e002      	b.n	8016a4c <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 8016a46:	68fb      	ldr	r3, [r7, #12]
 8016a48:	2200      	movs	r2, #0
 8016a4a:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 8016a4c:	4b07      	ldr	r3, [pc, #28]	; (8016a6c <dhcp_handle_ack+0xb8>)
 8016a4e:	79db      	ldrb	r3, [r3, #7]
 8016a50:	2b00      	cmp	r3, #0
 8016a52:	d007      	beq.n	8016a64 <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 8016a54:	4b06      	ldr	r3, [pc, #24]	; (8016a70 <dhcp_handle_ack+0xbc>)
 8016a56:	69db      	ldr	r3, [r3, #28]
 8016a58:	4618      	mov	r0, r3
 8016a5a:	f7f6 f988 	bl	800cd6e <lwip_htonl>
 8016a5e:	4602      	mov	r2, r0
 8016a60:	68fb      	ldr	r3, [r7, #12]
 8016a62:	625a      	str	r2, [r3, #36]	; 0x24
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 8016a64:	bf00      	nop
 8016a66:	3710      	adds	r7, #16
 8016a68:	46bd      	mov	sp, r7
 8016a6a:	bd80      	pop	{r7, pc}
 8016a6c:	20010c9c 	.word	0x20010c9c
 8016a70:	20010ca4 	.word	0x20010ca4

08016a74 <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 8016a74:	b580      	push	{r7, lr}
 8016a76:	b084      	sub	sp, #16
 8016a78:	af00      	add	r7, sp, #0
 8016a7a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 8016a7c:	687b      	ldr	r3, [r7, #4]
 8016a7e:	2b00      	cmp	r3, #0
 8016a80:	d10a      	bne.n	8016a98 <dhcp_start+0x24>
 8016a82:	f240 22e7 	movw	r2, #743	; 0x2e7
 8016a86:	4937      	ldr	r1, [pc, #220]	; (8016b64 <dhcp_start+0xf0>)
 8016a88:	4837      	ldr	r0, [pc, #220]	; (8016b68 <dhcp_start+0xf4>)
 8016a8a:	f004 fb43 	bl	801b114 <trace_printf>
 8016a8e:	4937      	ldr	r1, [pc, #220]	; (8016b6c <dhcp_start+0xf8>)
 8016a90:	4837      	ldr	r0, [pc, #220]	; (8016b70 <dhcp_start+0xfc>)
 8016a92:	f004 fb3f 	bl	801b114 <trace_printf>
 8016a96:	e7fe      	b.n	8016a96 <dhcp_start+0x22>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 8016a98:	687b      	ldr	r3, [r7, #4]
 8016a9a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8016a9e:	f003 0301 	and.w	r3, r3, #1
 8016aa2:	2b00      	cmp	r3, #0
 8016aa4:	d10a      	bne.n	8016abc <dhcp_start+0x48>
 8016aa6:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 8016aaa:	4932      	ldr	r1, [pc, #200]	; (8016b74 <dhcp_start+0x100>)
 8016aac:	482e      	ldr	r0, [pc, #184]	; (8016b68 <dhcp_start+0xf4>)
 8016aae:	f004 fb31 	bl	801b114 <trace_printf>
 8016ab2:	492e      	ldr	r1, [pc, #184]	; (8016b6c <dhcp_start+0xf8>)
 8016ab4:	482e      	ldr	r0, [pc, #184]	; (8016b70 <dhcp_start+0xfc>)
 8016ab6:	f004 fb2d 	bl	801b114 <trace_printf>
 8016aba:	e7fe      	b.n	8016aba <dhcp_start+0x46>
  dhcp = netif_dhcp_data(netif);
 8016abc:	687b      	ldr	r3, [r7, #4]
 8016abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016ac0:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 8016ac2:	687b      	ldr	r3, [r7, #4]
 8016ac4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016ac6:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 8016aca:	d202      	bcs.n	8016ad2 <dhcp_start+0x5e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 8016acc:	f04f 33ff 	mov.w	r3, #4294967295
 8016ad0:	e044      	b.n	8016b5c <dhcp_start+0xe8>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 8016ad2:	68fb      	ldr	r3, [r7, #12]
 8016ad4:	2b00      	cmp	r3, #0
 8016ad6:	d10d      	bne.n	8016af4 <dhcp_start+0x80>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 8016ad8:	2034      	movs	r0, #52	; 0x34
 8016ada:	f7f6 fcbf 	bl	800d45c <mem_malloc>
 8016ade:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 8016ae0:	68fb      	ldr	r3, [r7, #12]
 8016ae2:	2b00      	cmp	r3, #0
 8016ae4:	d102      	bne.n	8016aec <dhcp_start+0x78>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 8016ae6:	f04f 33ff 	mov.w	r3, #4294967295
 8016aea:	e037      	b.n	8016b5c <dhcp_start+0xe8>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 8016aec:	687b      	ldr	r3, [r7, #4]
 8016aee:	68fa      	ldr	r2, [r7, #12]
 8016af0:	625a      	str	r2, [r3, #36]	; 0x24
 8016af2:	e005      	b.n	8016b00 <dhcp_start+0x8c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 8016af4:	68fb      	ldr	r3, [r7, #12]
 8016af6:	791b      	ldrb	r3, [r3, #4]
 8016af8:	2b00      	cmp	r3, #0
 8016afa:	d001      	beq.n	8016b00 <dhcp_start+0x8c>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8016afc:	f7ff fc86 	bl	801640c <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 8016b00:	2234      	movs	r2, #52	; 0x34
 8016b02:	2100      	movs	r1, #0
 8016b04:	68f8      	ldr	r0, [r7, #12]
 8016b06:	f004 fb81 	bl	801b20c <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 8016b0a:	f7ff fc27 	bl	801635c <dhcp_inc_pcb_refcount>
 8016b0e:	4603      	mov	r3, r0
 8016b10:	2b00      	cmp	r3, #0
 8016b12:	d002      	beq.n	8016b1a <dhcp_start+0xa6>
    return ERR_MEM;
 8016b14:	f04f 33ff 	mov.w	r3, #4294967295
 8016b18:	e020      	b.n	8016b5c <dhcp_start+0xe8>
  }
  dhcp->pcb_allocated = 1;
 8016b1a:	68fb      	ldr	r3, [r7, #12]
 8016b1c:	2201      	movs	r2, #1
 8016b1e:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 8016b20:	687b      	ldr	r3, [r7, #4]
 8016b22:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8016b26:	f003 0304 	and.w	r3, r3, #4
 8016b2a:	2b00      	cmp	r3, #0
 8016b2c:	d105      	bne.n	8016b3a <dhcp_start+0xc6>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 8016b2e:	2102      	movs	r1, #2
 8016b30:	68f8      	ldr	r0, [r7, #12]
 8016b32:	f000 fd17 	bl	8017564 <dhcp_set_state>
    return ERR_OK;
 8016b36:	2300      	movs	r3, #0
 8016b38:	e010      	b.n	8016b5c <dhcp_start+0xe8>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 8016b3a:	6878      	ldr	r0, [r7, #4]
 8016b3c:	f000 f906 	bl	8016d4c <dhcp_discover>
 8016b40:	4603      	mov	r3, r0
 8016b42:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 8016b44:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8016b48:	2b00      	cmp	r3, #0
 8016b4a:	d005      	beq.n	8016b58 <dhcp_start+0xe4>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 8016b4c:	6878      	ldr	r0, [r7, #4]
 8016b4e:	f000 fc6f 	bl	8017430 <dhcp_release_and_stop>
    return ERR_MEM;
 8016b52:	f04f 33ff 	mov.w	r3, #4294967295
 8016b56:	e001      	b.n	8016b5c <dhcp_start+0xe8>
  }
  return result;
 8016b58:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8016b5c:	4618      	mov	r0, r3
 8016b5e:	3710      	adds	r7, #16
 8016b60:	46bd      	mov	sp, r7
 8016b62:	bd80      	pop	{r7, pc}
 8016b64:	0801fc08 	.word	0x0801fc08
 8016b68:	0801fb50 	.word	0x0801fb50
 8016b6c:	0801fb70 	.word	0x0801fb70
 8016b70:	0801fba8 	.word	0x0801fba8
 8016b74:	0801fc4c 	.word	0x0801fc4c

08016b78 <dhcp_network_changed>:
 * This enters the REBOOTING state to verify that the currently bound
 * address is still valid.
 */
void
dhcp_network_changed(struct netif *netif)
{
 8016b78:	b580      	push	{r7, lr}
 8016b7a:	b084      	sub	sp, #16
 8016b7c:	af00      	add	r7, sp, #0
 8016b7e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8016b80:	687b      	ldr	r3, [r7, #4]
 8016b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016b84:	60fb      	str	r3, [r7, #12]

  if (!dhcp) {
 8016b86:	68fb      	ldr	r3, [r7, #12]
 8016b88:	2b00      	cmp	r3, #0
 8016b8a:	d029      	beq.n	8016be0 <dhcp_network_changed+0x68>
    return;
  }
  switch (dhcp->state) {
 8016b8c:	68fb      	ldr	r3, [r7, #12]
 8016b8e:	795b      	ldrb	r3, [r3, #5]
 8016b90:	2b0a      	cmp	r3, #10
 8016b92:	d008      	beq.n	8016ba6 <dhcp_network_changed+0x2e>
 8016b94:	2b0a      	cmp	r3, #10
 8016b96:	dc0d      	bgt.n	8016bb4 <dhcp_network_changed+0x3c>
 8016b98:	2b00      	cmp	r3, #0
 8016b9a:	d023      	beq.n	8016be4 <dhcp_network_changed+0x6c>
 8016b9c:	2b00      	cmp	r3, #0
 8016b9e:	db09      	blt.n	8016bb4 <dhcp_network_changed+0x3c>
 8016ba0:	3b03      	subs	r3, #3
 8016ba2:	2b02      	cmp	r3, #2
 8016ba4:	d806      	bhi.n	8016bb4 <dhcp_network_changed+0x3c>
    case DHCP_STATE_REBINDING:
    case DHCP_STATE_RENEWING:
    case DHCP_STATE_BOUND:
    case DHCP_STATE_REBOOTING:
      dhcp->tries = 0;
 8016ba6:	68fb      	ldr	r3, [r7, #12]
 8016ba8:	2200      	movs	r2, #0
 8016baa:	719a      	strb	r2, [r3, #6]
      dhcp_reboot(netif);
 8016bac:	6878      	ldr	r0, [r7, #4]
 8016bae:	f000 fb89 	bl	80172c4 <dhcp_reboot>
      break;
 8016bb2:	e018      	b.n	8016be6 <dhcp_network_changed+0x6e>
    case DHCP_STATE_OFF:
      /* stay off */
      break;
    default:
      LWIP_ASSERT("invalid dhcp->state", dhcp->state <= DHCP_STATE_BACKING_OFF);
 8016bb4:	68fb      	ldr	r3, [r7, #12]
 8016bb6:	795b      	ldrb	r3, [r3, #5]
 8016bb8:	2b0c      	cmp	r3, #12
 8016bba:	d90a      	bls.n	8016bd2 <dhcp_network_changed+0x5a>
 8016bbc:	f240 326d 	movw	r2, #877	; 0x36d
 8016bc0:	490a      	ldr	r1, [pc, #40]	; (8016bec <dhcp_network_changed+0x74>)
 8016bc2:	480b      	ldr	r0, [pc, #44]	; (8016bf0 <dhcp_network_changed+0x78>)
 8016bc4:	f004 faa6 	bl	801b114 <trace_printf>
 8016bc8:	490a      	ldr	r1, [pc, #40]	; (8016bf4 <dhcp_network_changed+0x7c>)
 8016bca:	480b      	ldr	r0, [pc, #44]	; (8016bf8 <dhcp_network_changed+0x80>)
 8016bcc:	f004 faa2 	bl	801b114 <trace_printf>
 8016bd0:	e7fe      	b.n	8016bd0 <dhcp_network_changed+0x58>
        autoip_stop(netif);
        dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
      }
#endif /* LWIP_DHCP_AUTOIP_COOP */
      /* ensure we start with short timeouts, even if already discovering */
      dhcp->tries = 0;
 8016bd2:	68fb      	ldr	r3, [r7, #12]
 8016bd4:	2200      	movs	r2, #0
 8016bd6:	719a      	strb	r2, [r3, #6]
      dhcp_discover(netif);
 8016bd8:	6878      	ldr	r0, [r7, #4]
 8016bda:	f000 f8b7 	bl	8016d4c <dhcp_discover>
      break;
 8016bde:	e002      	b.n	8016be6 <dhcp_network_changed+0x6e>
    return;
 8016be0:	bf00      	nop
 8016be2:	e000      	b.n	8016be6 <dhcp_network_changed+0x6e>
      break;
 8016be4:	bf00      	nop
  }
}
 8016be6:	3710      	adds	r7, #16
 8016be8:	46bd      	mov	sp, r7
 8016bea:	bd80      	pop	{r7, pc}
 8016bec:	0801fc70 	.word	0x0801fc70
 8016bf0:	0801fb50 	.word	0x0801fb50
 8016bf4:	0801fb70 	.word	0x0801fb70
 8016bf8:	0801fba8 	.word	0x0801fba8

08016bfc <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 8016bfc:	b580      	push	{r7, lr}
 8016bfe:	b084      	sub	sp, #16
 8016c00:	af00      	add	r7, sp, #0
 8016c02:	6078      	str	r0, [r7, #4]
 8016c04:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8016c06:	687b      	ldr	r3, [r7, #4]
 8016c08:	2b00      	cmp	r3, #0
 8016c0a:	d10a      	bne.n	8016c22 <dhcp_arp_reply+0x26>
 8016c0c:	f240 328b 	movw	r2, #907	; 0x38b
 8016c10:	490f      	ldr	r1, [pc, #60]	; (8016c50 <dhcp_arp_reply+0x54>)
 8016c12:	4810      	ldr	r0, [pc, #64]	; (8016c54 <dhcp_arp_reply+0x58>)
 8016c14:	f004 fa7e 	bl	801b114 <trace_printf>
 8016c18:	490f      	ldr	r1, [pc, #60]	; (8016c58 <dhcp_arp_reply+0x5c>)
 8016c1a:	4810      	ldr	r0, [pc, #64]	; (8016c5c <dhcp_arp_reply+0x60>)
 8016c1c:	f004 fa7a 	bl	801b114 <trace_printf>
 8016c20:	e7fe      	b.n	8016c20 <dhcp_arp_reply+0x24>
  dhcp = netif_dhcp_data(netif);
 8016c22:	687b      	ldr	r3, [r7, #4]
 8016c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016c26:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 8016c28:	68fb      	ldr	r3, [r7, #12]
 8016c2a:	2b00      	cmp	r3, #0
 8016c2c:	d00c      	beq.n	8016c48 <dhcp_arp_reply+0x4c>
 8016c2e:	68fb      	ldr	r3, [r7, #12]
 8016c30:	795b      	ldrb	r3, [r3, #5]
 8016c32:	2b08      	cmp	r3, #8
 8016c34:	d108      	bne.n	8016c48 <dhcp_arp_reply+0x4c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 8016c36:	683b      	ldr	r3, [r7, #0]
 8016c38:	681a      	ldr	r2, [r3, #0]
 8016c3a:	68fb      	ldr	r3, [r7, #12]
 8016c3c:	69db      	ldr	r3, [r3, #28]
 8016c3e:	429a      	cmp	r2, r3
 8016c40:	d102      	bne.n	8016c48 <dhcp_arp_reply+0x4c>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 8016c42:	6878      	ldr	r0, [r7, #4]
 8016c44:	f000 f80c 	bl	8016c60 <dhcp_decline>
    }
  }
}
 8016c48:	3710      	adds	r7, #16
 8016c4a:	46bd      	mov	sp, r7
 8016c4c:	bd80      	pop	{r7, pc}
 8016c4e:	bf00      	nop
 8016c50:	0801fc08 	.word	0x0801fc08
 8016c54:	0801fb50 	.word	0x0801fb50
 8016c58:	0801fb70 	.word	0x0801fb70
 8016c5c:	0801fba8 	.word	0x0801fba8

08016c60 <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 8016c60:	b5b0      	push	{r4, r5, r7, lr}
 8016c62:	b08a      	sub	sp, #40	; 0x28
 8016c64:	af02      	add	r7, sp, #8
 8016c66:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8016c68:	687b      	ldr	r3, [r7, #4]
 8016c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016c6c:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8016c6e:	210c      	movs	r1, #12
 8016c70:	69b8      	ldr	r0, [r7, #24]
 8016c72:	f000 fc77 	bl	8017564 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 8016c76:	f107 030c 	add.w	r3, r7, #12
 8016c7a:	2204      	movs	r2, #4
 8016c7c:	69b9      	ldr	r1, [r7, #24]
 8016c7e:	6878      	ldr	r0, [r7, #4]
 8016c80:	f001 f936 	bl	8017ef0 <dhcp_create_msg>
 8016c84:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8016c86:	697b      	ldr	r3, [r7, #20]
 8016c88:	2b00      	cmp	r3, #0
 8016c8a:	d035      	beq.n	8016cf8 <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8016c8c:	697b      	ldr	r3, [r7, #20]
 8016c8e:	685b      	ldr	r3, [r3, #4]
 8016c90:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8016c92:	89b8      	ldrh	r0, [r7, #12]
 8016c94:	693b      	ldr	r3, [r7, #16]
 8016c96:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8016c9a:	2304      	movs	r3, #4
 8016c9c:	2232      	movs	r2, #50	; 0x32
 8016c9e:	f000 fc7b 	bl	8017598 <dhcp_option>
 8016ca2:	4603      	mov	r3, r0
 8016ca4:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8016ca6:	89bc      	ldrh	r4, [r7, #12]
 8016ca8:	693b      	ldr	r3, [r7, #16]
 8016caa:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8016cae:	69bb      	ldr	r3, [r7, #24]
 8016cb0:	69db      	ldr	r3, [r3, #28]
 8016cb2:	4618      	mov	r0, r3
 8016cb4:	f7f6 f85b 	bl	800cd6e <lwip_htonl>
 8016cb8:	4603      	mov	r3, r0
 8016cba:	461a      	mov	r2, r3
 8016cbc:	4629      	mov	r1, r5
 8016cbe:	4620      	mov	r0, r4
 8016cc0:	f000 fd08 	bl	80176d4 <dhcp_option_long>
 8016cc4:	4603      	mov	r3, r0
 8016cc6:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8016cc8:	89b8      	ldrh	r0, [r7, #12]
 8016cca:	693b      	ldr	r3, [r7, #16]
 8016ccc:	33f0      	adds	r3, #240	; 0xf0
 8016cce:	697a      	ldr	r2, [r7, #20]
 8016cd0:	4619      	mov	r1, r3
 8016cd2:	f001 f9ed 	bl	80180b0 <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8016cd6:	4b19      	ldr	r3, [pc, #100]	; (8016d3c <dhcp_decline+0xdc>)
 8016cd8:	6818      	ldr	r0, [r3, #0]
 8016cda:	4b19      	ldr	r3, [pc, #100]	; (8016d40 <dhcp_decline+0xe0>)
 8016cdc:	9301      	str	r3, [sp, #4]
 8016cde:	687b      	ldr	r3, [r7, #4]
 8016ce0:	9300      	str	r3, [sp, #0]
 8016ce2:	2343      	movs	r3, #67	; 0x43
 8016ce4:	4a17      	ldr	r2, [pc, #92]	; (8016d44 <dhcp_decline+0xe4>)
 8016ce6:	6979      	ldr	r1, [r7, #20]
 8016ce8:	f7ff f880 	bl	8015dec <udp_sendto_if_src>
 8016cec:	4603      	mov	r3, r0
 8016cee:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8016cf0:	6978      	ldr	r0, [r7, #20]
 8016cf2:	f7f7 fd3d 	bl	800e770 <pbuf_free>
 8016cf6:	e001      	b.n	8016cfc <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8016cf8:	23ff      	movs	r3, #255	; 0xff
 8016cfa:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8016cfc:	69bb      	ldr	r3, [r7, #24]
 8016cfe:	799b      	ldrb	r3, [r3, #6]
 8016d00:	2bff      	cmp	r3, #255	; 0xff
 8016d02:	d005      	beq.n	8016d10 <dhcp_decline+0xb0>
    dhcp->tries++;
 8016d04:	69bb      	ldr	r3, [r7, #24]
 8016d06:	799b      	ldrb	r3, [r3, #6]
 8016d08:	3301      	adds	r3, #1
 8016d0a:	b2da      	uxtb	r2, r3
 8016d0c:	69bb      	ldr	r3, [r7, #24]
 8016d0e:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 8016d10:	f242 7310 	movw	r3, #10000	; 0x2710
 8016d14:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8016d16:	89fb      	ldrh	r3, [r7, #14]
 8016d18:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8016d1c:	4a0a      	ldr	r2, [pc, #40]	; (8016d48 <dhcp_decline+0xe8>)
 8016d1e:	fb82 1203 	smull	r1, r2, r2, r3
 8016d22:	1152      	asrs	r2, r2, #5
 8016d24:	17db      	asrs	r3, r3, #31
 8016d26:	1ad3      	subs	r3, r2, r3
 8016d28:	b29a      	uxth	r2, r3
 8016d2a:	69bb      	ldr	r3, [r7, #24]
 8016d2c:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8016d2e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8016d32:	4618      	mov	r0, r3
 8016d34:	3720      	adds	r7, #32
 8016d36:	46bd      	mov	sp, r7
 8016d38:	bdb0      	pop	{r4, r5, r7, pc}
 8016d3a:	bf00      	nop
 8016d3c:	20009fd4 	.word	0x20009fd4
 8016d40:	08020718 	.word	0x08020718
 8016d44:	0802071c 	.word	0x0802071c
 8016d48:	10624dd3 	.word	0x10624dd3

08016d4c <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 8016d4c:	b580      	push	{r7, lr}
 8016d4e:	b08a      	sub	sp, #40	; 0x28
 8016d50:	af02      	add	r7, sp, #8
 8016d52:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8016d54:	687b      	ldr	r3, [r7, #4]
 8016d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016d58:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 8016d5a:	2300      	movs	r3, #0
 8016d5c:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 8016d5e:	69bb      	ldr	r3, [r7, #24]
 8016d60:	2200      	movs	r2, #0
 8016d62:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 8016d64:	2106      	movs	r1, #6
 8016d66:	69b8      	ldr	r0, [r7, #24]
 8016d68:	f000 fbfc 	bl	8017564 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 8016d6c:	f107 0308 	add.w	r3, r7, #8
 8016d70:	2201      	movs	r2, #1
 8016d72:	69b9      	ldr	r1, [r7, #24]
 8016d74:	6878      	ldr	r0, [r7, #4]
 8016d76:	f001 f8bb 	bl	8017ef0 <dhcp_create_msg>
 8016d7a:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 8016d7c:	693b      	ldr	r3, [r7, #16]
 8016d7e:	2b00      	cmp	r3, #0
 8016d80:	d04b      	beq.n	8016e1a <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8016d82:	693b      	ldr	r3, [r7, #16]
 8016d84:	685b      	ldr	r3, [r3, #4]
 8016d86:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8016d88:	8938      	ldrh	r0, [r7, #8]
 8016d8a:	68fb      	ldr	r3, [r7, #12]
 8016d8c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8016d90:	2302      	movs	r3, #2
 8016d92:	2239      	movs	r2, #57	; 0x39
 8016d94:	f000 fc00 	bl	8017598 <dhcp_option>
 8016d98:	4603      	mov	r3, r0
 8016d9a:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8016d9c:	8938      	ldrh	r0, [r7, #8]
 8016d9e:	68fb      	ldr	r3, [r7, #12]
 8016da0:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8016da4:	687b      	ldr	r3, [r7, #4]
 8016da6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016da8:	461a      	mov	r2, r3
 8016daa:	f000 fc5b 	bl	8017664 <dhcp_option_short>
 8016dae:	4603      	mov	r3, r0
 8016db0:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8016db2:	8938      	ldrh	r0, [r7, #8]
 8016db4:	68fb      	ldr	r3, [r7, #12]
 8016db6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8016dba:	2303      	movs	r3, #3
 8016dbc:	2237      	movs	r2, #55	; 0x37
 8016dbe:	f000 fbeb 	bl	8017598 <dhcp_option>
 8016dc2:	4603      	mov	r3, r0
 8016dc4:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8016dc6:	2300      	movs	r3, #0
 8016dc8:	77fb      	strb	r3, [r7, #31]
 8016dca:	e00e      	b.n	8016dea <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8016dcc:	8938      	ldrh	r0, [r7, #8]
 8016dce:	68fb      	ldr	r3, [r7, #12]
 8016dd0:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8016dd4:	7ffb      	ldrb	r3, [r7, #31]
 8016dd6:	4a29      	ldr	r2, [pc, #164]	; (8016e7c <dhcp_discover+0x130>)
 8016dd8:	5cd3      	ldrb	r3, [r2, r3]
 8016dda:	461a      	mov	r2, r3
 8016ddc:	f000 fc16 	bl	801760c <dhcp_option_byte>
 8016de0:	4603      	mov	r3, r0
 8016de2:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8016de4:	7ffb      	ldrb	r3, [r7, #31]
 8016de6:	3301      	adds	r3, #1
 8016de8:	77fb      	strb	r3, [r7, #31]
 8016dea:	7ffb      	ldrb	r3, [r7, #31]
 8016dec:	2b02      	cmp	r3, #2
 8016dee:	d9ed      	bls.n	8016dcc <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8016df0:	8938      	ldrh	r0, [r7, #8]
 8016df2:	68fb      	ldr	r3, [r7, #12]
 8016df4:	33f0      	adds	r3, #240	; 0xf0
 8016df6:	693a      	ldr	r2, [r7, #16]
 8016df8:	4619      	mov	r1, r3
 8016dfa:	f001 f959 	bl	80180b0 <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8016dfe:	4b20      	ldr	r3, [pc, #128]	; (8016e80 <dhcp_discover+0x134>)
 8016e00:	6818      	ldr	r0, [r3, #0]
 8016e02:	4b20      	ldr	r3, [pc, #128]	; (8016e84 <dhcp_discover+0x138>)
 8016e04:	9301      	str	r3, [sp, #4]
 8016e06:	687b      	ldr	r3, [r7, #4]
 8016e08:	9300      	str	r3, [sp, #0]
 8016e0a:	2343      	movs	r3, #67	; 0x43
 8016e0c:	4a1e      	ldr	r2, [pc, #120]	; (8016e88 <dhcp_discover+0x13c>)
 8016e0e:	6939      	ldr	r1, [r7, #16]
 8016e10:	f7fe ffec 	bl	8015dec <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 8016e14:	6938      	ldr	r0, [r7, #16]
 8016e16:	f7f7 fcab 	bl	800e770 <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 8016e1a:	69bb      	ldr	r3, [r7, #24]
 8016e1c:	799b      	ldrb	r3, [r3, #6]
 8016e1e:	2bff      	cmp	r3, #255	; 0xff
 8016e20:	d005      	beq.n	8016e2e <dhcp_discover+0xe2>
    dhcp->tries++;
 8016e22:	69bb      	ldr	r3, [r7, #24]
 8016e24:	799b      	ldrb	r3, [r3, #6]
 8016e26:	3301      	adds	r3, #1
 8016e28:	b2da      	uxtb	r2, r3
 8016e2a:	69bb      	ldr	r3, [r7, #24]
 8016e2c:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8016e2e:	69bb      	ldr	r3, [r7, #24]
 8016e30:	799b      	ldrb	r3, [r3, #6]
 8016e32:	2b05      	cmp	r3, #5
 8016e34:	d80d      	bhi.n	8016e52 <dhcp_discover+0x106>
 8016e36:	69bb      	ldr	r3, [r7, #24]
 8016e38:	799b      	ldrb	r3, [r3, #6]
 8016e3a:	461a      	mov	r2, r3
 8016e3c:	2301      	movs	r3, #1
 8016e3e:	4093      	lsls	r3, r2
 8016e40:	b29b      	uxth	r3, r3
 8016e42:	461a      	mov	r2, r3
 8016e44:	0152      	lsls	r2, r2, #5
 8016e46:	1ad2      	subs	r2, r2, r3
 8016e48:	0092      	lsls	r2, r2, #2
 8016e4a:	4413      	add	r3, r2
 8016e4c:	00db      	lsls	r3, r3, #3
 8016e4e:	b29b      	uxth	r3, r3
 8016e50:	e001      	b.n	8016e56 <dhcp_discover+0x10a>
 8016e52:	f64e 2360 	movw	r3, #60000	; 0xea60
 8016e56:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8016e58:	897b      	ldrh	r3, [r7, #10]
 8016e5a:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8016e5e:	4a0b      	ldr	r2, [pc, #44]	; (8016e8c <dhcp_discover+0x140>)
 8016e60:	fb82 1203 	smull	r1, r2, r2, r3
 8016e64:	1152      	asrs	r2, r2, #5
 8016e66:	17db      	asrs	r3, r3, #31
 8016e68:	1ad3      	subs	r3, r2, r3
 8016e6a:	b29a      	uxth	r2, r3
 8016e6c:	69bb      	ldr	r3, [r7, #24]
 8016e6e:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8016e70:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8016e74:	4618      	mov	r0, r3
 8016e76:	3720      	adds	r7, #32
 8016e78:	46bd      	mov	sp, r7
 8016e7a:	bd80      	pop	{r7, pc}
 8016e7c:	20000020 	.word	0x20000020
 8016e80:	20009fd4 	.word	0x20009fd4
 8016e84:	08020718 	.word	0x08020718
 8016e88:	0802071c 	.word	0x0802071c
 8016e8c:	10624dd3 	.word	0x10624dd3

08016e90 <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 8016e90:	b580      	push	{r7, lr}
 8016e92:	b088      	sub	sp, #32
 8016e94:	af00      	add	r7, sp, #0
 8016e96:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 8016e98:	687b      	ldr	r3, [r7, #4]
 8016e9a:	2b00      	cmp	r3, #0
 8016e9c:	d10a      	bne.n	8016eb4 <dhcp_bind+0x24>
 8016e9e:	f240 4215 	movw	r2, #1045	; 0x415
 8016ea2:	4966      	ldr	r1, [pc, #408]	; (801703c <dhcp_bind+0x1ac>)
 8016ea4:	4866      	ldr	r0, [pc, #408]	; (8017040 <dhcp_bind+0x1b0>)
 8016ea6:	f004 f935 	bl	801b114 <trace_printf>
 8016eaa:	4966      	ldr	r1, [pc, #408]	; (8017044 <dhcp_bind+0x1b4>)
 8016eac:	4866      	ldr	r0, [pc, #408]	; (8017048 <dhcp_bind+0x1b8>)
 8016eae:	f004 f931 	bl	801b114 <trace_printf>
 8016eb2:	e7fe      	b.n	8016eb2 <dhcp_bind+0x22>
  dhcp = netif_dhcp_data(netif);
 8016eb4:	687b      	ldr	r3, [r7, #4]
 8016eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016eb8:	61fb      	str	r3, [r7, #28]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 8016eba:	69fb      	ldr	r3, [r7, #28]
 8016ebc:	2b00      	cmp	r3, #0
 8016ebe:	d10a      	bne.n	8016ed6 <dhcp_bind+0x46>
 8016ec0:	f240 4217 	movw	r2, #1047	; 0x417
 8016ec4:	4961      	ldr	r1, [pc, #388]	; (801704c <dhcp_bind+0x1bc>)
 8016ec6:	485e      	ldr	r0, [pc, #376]	; (8017040 <dhcp_bind+0x1b0>)
 8016ec8:	f004 f924 	bl	801b114 <trace_printf>
 8016ecc:	495d      	ldr	r1, [pc, #372]	; (8017044 <dhcp_bind+0x1b4>)
 8016ece:	485e      	ldr	r0, [pc, #376]	; (8017048 <dhcp_bind+0x1b8>)
 8016ed0:	f004 f920 	bl	801b114 <trace_printf>
 8016ed4:	e7fe      	b.n	8016ed4 <dhcp_bind+0x44>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 8016ed6:	69fb      	ldr	r3, [r7, #28]
 8016ed8:	2200      	movs	r2, #0
 8016eda:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 8016edc:	69fb      	ldr	r3, [r7, #28]
 8016ede:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016ee0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016ee4:	d019      	beq.n	8016f1a <dhcp_bind+0x8a>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8016ee6:	69fb      	ldr	r3, [r7, #28]
 8016ee8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016eea:	331e      	adds	r3, #30
 8016eec:	4a58      	ldr	r2, [pc, #352]	; (8017050 <dhcp_bind+0x1c0>)
 8016eee:	fba2 2303 	umull	r2, r3, r2, r3
 8016ef2:	095b      	lsrs	r3, r3, #5
 8016ef4:	61bb      	str	r3, [r7, #24]
    if (timeout > 0xffff) {
 8016ef6:	69bb      	ldr	r3, [r7, #24]
 8016ef8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8016efc:	d302      	bcc.n	8016f04 <dhcp_bind+0x74>
      timeout = 0xffff;
 8016efe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016f02:	61bb      	str	r3, [r7, #24]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 8016f04:	69bb      	ldr	r3, [r7, #24]
 8016f06:	b29a      	uxth	r2, r3
 8016f08:	69fb      	ldr	r3, [r7, #28]
 8016f0a:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 8016f0c:	69fb      	ldr	r3, [r7, #28]
 8016f0e:	8a9b      	ldrh	r3, [r3, #20]
 8016f10:	2b00      	cmp	r3, #0
 8016f12:	d102      	bne.n	8016f1a <dhcp_bind+0x8a>
      dhcp->t0_timeout = 1;
 8016f14:	69fb      	ldr	r3, [r7, #28]
 8016f16:	2201      	movs	r2, #1
 8016f18:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 8016f1a:	69fb      	ldr	r3, [r7, #28]
 8016f1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016f1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016f22:	d01d      	beq.n	8016f60 <dhcp_bind+0xd0>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8016f24:	69fb      	ldr	r3, [r7, #28]
 8016f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016f28:	331e      	adds	r3, #30
 8016f2a:	4a49      	ldr	r2, [pc, #292]	; (8017050 <dhcp_bind+0x1c0>)
 8016f2c:	fba2 2303 	umull	r2, r3, r2, r3
 8016f30:	095b      	lsrs	r3, r3, #5
 8016f32:	61bb      	str	r3, [r7, #24]
    if (timeout > 0xffff) {
 8016f34:	69bb      	ldr	r3, [r7, #24]
 8016f36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8016f3a:	d302      	bcc.n	8016f42 <dhcp_bind+0xb2>
      timeout = 0xffff;
 8016f3c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016f40:	61bb      	str	r3, [r7, #24]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 8016f42:	69bb      	ldr	r3, [r7, #24]
 8016f44:	b29a      	uxth	r2, r3
 8016f46:	69fb      	ldr	r3, [r7, #28]
 8016f48:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 8016f4a:	69fb      	ldr	r3, [r7, #28]
 8016f4c:	895b      	ldrh	r3, [r3, #10]
 8016f4e:	2b00      	cmp	r3, #0
 8016f50:	d102      	bne.n	8016f58 <dhcp_bind+0xc8>
      dhcp->t1_timeout = 1;
 8016f52:	69fb      	ldr	r3, [r7, #28]
 8016f54:	2201      	movs	r2, #1
 8016f56:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 8016f58:	69fb      	ldr	r3, [r7, #28]
 8016f5a:	895a      	ldrh	r2, [r3, #10]
 8016f5c:	69fb      	ldr	r3, [r7, #28]
 8016f5e:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 8016f60:	69fb      	ldr	r3, [r7, #28]
 8016f62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016f64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016f68:	d01d      	beq.n	8016fa6 <dhcp_bind+0x116>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8016f6a:	69fb      	ldr	r3, [r7, #28]
 8016f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016f6e:	331e      	adds	r3, #30
 8016f70:	4a37      	ldr	r2, [pc, #220]	; (8017050 <dhcp_bind+0x1c0>)
 8016f72:	fba2 2303 	umull	r2, r3, r2, r3
 8016f76:	095b      	lsrs	r3, r3, #5
 8016f78:	61bb      	str	r3, [r7, #24]
    if (timeout > 0xffff) {
 8016f7a:	69bb      	ldr	r3, [r7, #24]
 8016f7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8016f80:	d302      	bcc.n	8016f88 <dhcp_bind+0xf8>
      timeout = 0xffff;
 8016f82:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016f86:	61bb      	str	r3, [r7, #24]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 8016f88:	69bb      	ldr	r3, [r7, #24]
 8016f8a:	b29a      	uxth	r2, r3
 8016f8c:	69fb      	ldr	r3, [r7, #28]
 8016f8e:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 8016f90:	69fb      	ldr	r3, [r7, #28]
 8016f92:	899b      	ldrh	r3, [r3, #12]
 8016f94:	2b00      	cmp	r3, #0
 8016f96:	d102      	bne.n	8016f9e <dhcp_bind+0x10e>
      dhcp->t2_timeout = 1;
 8016f98:	69fb      	ldr	r3, [r7, #28]
 8016f9a:	2201      	movs	r2, #1
 8016f9c:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 8016f9e:	69fb      	ldr	r3, [r7, #28]
 8016fa0:	899a      	ldrh	r2, [r3, #12]
 8016fa2:	69fb      	ldr	r3, [r7, #28]
 8016fa4:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 8016fa6:	69fb      	ldr	r3, [r7, #28]
 8016fa8:	895a      	ldrh	r2, [r3, #10]
 8016faa:	69fb      	ldr	r3, [r7, #28]
 8016fac:	899b      	ldrh	r3, [r3, #12]
 8016fae:	429a      	cmp	r2, r3
 8016fb0:	d306      	bcc.n	8016fc0 <dhcp_bind+0x130>
 8016fb2:	69fb      	ldr	r3, [r7, #28]
 8016fb4:	899b      	ldrh	r3, [r3, #12]
 8016fb6:	2b00      	cmp	r3, #0
 8016fb8:	d002      	beq.n	8016fc0 <dhcp_bind+0x130>
    dhcp->t1_timeout = 0;
 8016fba:	69fb      	ldr	r3, [r7, #28]
 8016fbc:	2200      	movs	r2, #0
 8016fbe:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 8016fc0:	69fb      	ldr	r3, [r7, #28]
 8016fc2:	79db      	ldrb	r3, [r3, #7]
 8016fc4:	2b00      	cmp	r3, #0
 8016fc6:	d003      	beq.n	8016fd0 <dhcp_bind+0x140>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 8016fc8:	69fb      	ldr	r3, [r7, #28]
 8016fca:	6a1b      	ldr	r3, [r3, #32]
 8016fcc:	613b      	str	r3, [r7, #16]
 8016fce:	e014      	b.n	8016ffa <dhcp_bind+0x16a>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 8016fd0:	69fb      	ldr	r3, [r7, #28]
 8016fd2:	331c      	adds	r3, #28
 8016fd4:	781b      	ldrb	r3, [r3, #0]
 8016fd6:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 8016fd8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8016fdc:	2b00      	cmp	r3, #0
 8016fde:	db02      	blt.n	8016fe6 <dhcp_bind+0x156>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 8016fe0:	23ff      	movs	r3, #255	; 0xff
 8016fe2:	613b      	str	r3, [r7, #16]
 8016fe4:	e009      	b.n	8016ffa <dhcp_bind+0x16a>
    } else if (first_octet >= 192) {
 8016fe6:	7dfb      	ldrb	r3, [r7, #23]
 8016fe8:	2bbf      	cmp	r3, #191	; 0xbf
 8016fea:	d903      	bls.n	8016ff4 <dhcp_bind+0x164>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 8016fec:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8016ff0:	613b      	str	r3, [r7, #16]
 8016ff2:	e002      	b.n	8016ffa <dhcp_bind+0x16a>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 8016ff4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016ff8:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 8016ffa:	69fb      	ldr	r3, [r7, #28]
 8016ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016ffe:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 8017000:	68fb      	ldr	r3, [r7, #12]
 8017002:	2b00      	cmp	r3, #0
 8017004:	d108      	bne.n	8017018 <dhcp_bind+0x188>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 8017006:	69fb      	ldr	r3, [r7, #28]
 8017008:	69da      	ldr	r2, [r3, #28]
 801700a:	693b      	ldr	r3, [r7, #16]
 801700c:	4013      	ands	r3, r2
 801700e:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 8017010:	68fb      	ldr	r3, [r7, #12]
 8017012:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8017016:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 8017018:	210a      	movs	r1, #10
 801701a:	69f8      	ldr	r0, [r7, #28]
 801701c:	f000 faa2 	bl	8017564 <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 8017020:	69fb      	ldr	r3, [r7, #28]
 8017022:	f103 011c 	add.w	r1, r3, #28
 8017026:	f107 030c 	add.w	r3, r7, #12
 801702a:	f107 0210 	add.w	r2, r7, #16
 801702e:	6878      	ldr	r0, [r7, #4]
 8017030:	f7f6 fe42 	bl	800dcb8 <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 8017034:	3720      	adds	r7, #32
 8017036:	46bd      	mov	sp, r7
 8017038:	bd80      	pop	{r7, pc}
 801703a:	bf00      	nop
 801703c:	0801fc84 	.word	0x0801fc84
 8017040:	0801fb50 	.word	0x0801fb50
 8017044:	0801fb70 	.word	0x0801fb70
 8017048:	0801fba8 	.word	0x0801fba8
 801704c:	0801fca0 	.word	0x0801fca0
 8017050:	88888889 	.word	0x88888889

08017054 <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 8017054:	b580      	push	{r7, lr}
 8017056:	b08a      	sub	sp, #40	; 0x28
 8017058:	af02      	add	r7, sp, #8
 801705a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801705c:	687b      	ldr	r3, [r7, #4]
 801705e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017060:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 8017062:	2105      	movs	r1, #5
 8017064:	69b8      	ldr	r0, [r7, #24]
 8017066:	f000 fa7d 	bl	8017564 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801706a:	f107 030c 	add.w	r3, r7, #12
 801706e:	2203      	movs	r2, #3
 8017070:	69b9      	ldr	r1, [r7, #24]
 8017072:	6878      	ldr	r0, [r7, #4]
 8017074:	f000 ff3c 	bl	8017ef0 <dhcp_create_msg>
 8017078:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801707a:	697b      	ldr	r3, [r7, #20]
 801707c:	2b00      	cmp	r3, #0
 801707e:	d04e      	beq.n	801711e <dhcp_renew+0xca>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8017080:	697b      	ldr	r3, [r7, #20]
 8017082:	685b      	ldr	r3, [r3, #4]
 8017084:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8017086:	89b8      	ldrh	r0, [r7, #12]
 8017088:	693b      	ldr	r3, [r7, #16]
 801708a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801708e:	2302      	movs	r3, #2
 8017090:	2239      	movs	r2, #57	; 0x39
 8017092:	f000 fa81 	bl	8017598 <dhcp_option>
 8017096:	4603      	mov	r3, r0
 8017098:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801709a:	89b8      	ldrh	r0, [r7, #12]
 801709c:	693b      	ldr	r3, [r7, #16]
 801709e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80170a2:	687b      	ldr	r3, [r7, #4]
 80170a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80170a6:	461a      	mov	r2, r3
 80170a8:	f000 fadc 	bl	8017664 <dhcp_option_short>
 80170ac:	4603      	mov	r3, r0
 80170ae:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80170b0:	89b8      	ldrh	r0, [r7, #12]
 80170b2:	693b      	ldr	r3, [r7, #16]
 80170b4:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80170b8:	2303      	movs	r3, #3
 80170ba:	2237      	movs	r2, #55	; 0x37
 80170bc:	f000 fa6c 	bl	8017598 <dhcp_option>
 80170c0:	4603      	mov	r3, r0
 80170c2:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80170c4:	2300      	movs	r3, #0
 80170c6:	77bb      	strb	r3, [r7, #30]
 80170c8:	e00e      	b.n	80170e8 <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80170ca:	89b8      	ldrh	r0, [r7, #12]
 80170cc:	693b      	ldr	r3, [r7, #16]
 80170ce:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80170d2:	7fbb      	ldrb	r3, [r7, #30]
 80170d4:	4a2a      	ldr	r2, [pc, #168]	; (8017180 <dhcp_renew+0x12c>)
 80170d6:	5cd3      	ldrb	r3, [r2, r3]
 80170d8:	461a      	mov	r2, r3
 80170da:	f000 fa97 	bl	801760c <dhcp_option_byte>
 80170de:	4603      	mov	r3, r0
 80170e0:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80170e2:	7fbb      	ldrb	r3, [r7, #30]
 80170e4:	3301      	adds	r3, #1
 80170e6:	77bb      	strb	r3, [r7, #30]
 80170e8:	7fbb      	ldrb	r3, [r7, #30]
 80170ea:	2b02      	cmp	r3, #2
 80170ec:	d9ed      	bls.n	80170ca <dhcp_renew+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80170ee:	89b8      	ldrh	r0, [r7, #12]
 80170f0:	693b      	ldr	r3, [r7, #16]
 80170f2:	33f0      	adds	r3, #240	; 0xf0
 80170f4:	697a      	ldr	r2, [r7, #20]
 80170f6:	4619      	mov	r1, r3
 80170f8:	f000 ffda 	bl	80180b0 <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80170fc:	4b21      	ldr	r3, [pc, #132]	; (8017184 <dhcp_renew+0x130>)
 80170fe:	6818      	ldr	r0, [r3, #0]
 8017100:	69bb      	ldr	r3, [r7, #24]
 8017102:	f103 0218 	add.w	r2, r3, #24
 8017106:	687b      	ldr	r3, [r7, #4]
 8017108:	9300      	str	r3, [sp, #0]
 801710a:	2343      	movs	r3, #67	; 0x43
 801710c:	6979      	ldr	r1, [r7, #20]
 801710e:	f7fe fdf3 	bl	8015cf8 <udp_sendto_if>
 8017112:	4603      	mov	r3, r0
 8017114:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8017116:	6978      	ldr	r0, [r7, #20]
 8017118:	f7f7 fb2a 	bl	800e770 <pbuf_free>
 801711c:	e001      	b.n	8017122 <dhcp_renew+0xce>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801711e:	23ff      	movs	r3, #255	; 0xff
 8017120:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8017122:	69bb      	ldr	r3, [r7, #24]
 8017124:	799b      	ldrb	r3, [r3, #6]
 8017126:	2bff      	cmp	r3, #255	; 0xff
 8017128:	d005      	beq.n	8017136 <dhcp_renew+0xe2>
    dhcp->tries++;
 801712a:	69bb      	ldr	r3, [r7, #24]
 801712c:	799b      	ldrb	r3, [r3, #6]
 801712e:	3301      	adds	r3, #1
 8017130:	b2da      	uxtb	r2, r3
 8017132:	69bb      	ldr	r3, [r7, #24]
 8017134:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 8017136:	69bb      	ldr	r3, [r7, #24]
 8017138:	799b      	ldrb	r3, [r3, #6]
 801713a:	2b09      	cmp	r3, #9
 801713c:	d80a      	bhi.n	8017154 <dhcp_renew+0x100>
 801713e:	69bb      	ldr	r3, [r7, #24]
 8017140:	799b      	ldrb	r3, [r3, #6]
 8017142:	b29b      	uxth	r3, r3
 8017144:	461a      	mov	r2, r3
 8017146:	0152      	lsls	r2, r2, #5
 8017148:	1ad2      	subs	r2, r2, r3
 801714a:	0092      	lsls	r2, r2, #2
 801714c:	4413      	add	r3, r2
 801714e:	011b      	lsls	r3, r3, #4
 8017150:	b29b      	uxth	r3, r3
 8017152:	e001      	b.n	8017158 <dhcp_renew+0x104>
 8017154:	f644 6320 	movw	r3, #20000	; 0x4e20
 8017158:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801715a:	89fb      	ldrh	r3, [r7, #14]
 801715c:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8017160:	4a09      	ldr	r2, [pc, #36]	; (8017188 <dhcp_renew+0x134>)
 8017162:	fb82 1203 	smull	r1, r2, r2, r3
 8017166:	1152      	asrs	r2, r2, #5
 8017168:	17db      	asrs	r3, r3, #31
 801716a:	1ad3      	subs	r3, r2, r3
 801716c:	b29a      	uxth	r2, r3
 801716e:	69bb      	ldr	r3, [r7, #24]
 8017170:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8017172:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8017176:	4618      	mov	r0, r3
 8017178:	3720      	adds	r7, #32
 801717a:	46bd      	mov	sp, r7
 801717c:	bd80      	pop	{r7, pc}
 801717e:	bf00      	nop
 8017180:	20000020 	.word	0x20000020
 8017184:	20009fd4 	.word	0x20009fd4
 8017188:	10624dd3 	.word	0x10624dd3

0801718c <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 801718c:	b580      	push	{r7, lr}
 801718e:	b08a      	sub	sp, #40	; 0x28
 8017190:	af02      	add	r7, sp, #8
 8017192:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8017194:	687b      	ldr	r3, [r7, #4]
 8017196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017198:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 801719a:	2104      	movs	r1, #4
 801719c:	69b8      	ldr	r0, [r7, #24]
 801719e:	f000 f9e1 	bl	8017564 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 80171a2:	f107 030c 	add.w	r3, r7, #12
 80171a6:	2203      	movs	r2, #3
 80171a8:	69b9      	ldr	r1, [r7, #24]
 80171aa:	6878      	ldr	r0, [r7, #4]
 80171ac:	f000 fea0 	bl	8017ef0 <dhcp_create_msg>
 80171b0:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 80171b2:	697b      	ldr	r3, [r7, #20]
 80171b4:	2b00      	cmp	r3, #0
 80171b6:	d04c      	beq.n	8017252 <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80171b8:	697b      	ldr	r3, [r7, #20]
 80171ba:	685b      	ldr	r3, [r3, #4]
 80171bc:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80171be:	89b8      	ldrh	r0, [r7, #12]
 80171c0:	693b      	ldr	r3, [r7, #16]
 80171c2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80171c6:	2302      	movs	r3, #2
 80171c8:	2239      	movs	r2, #57	; 0x39
 80171ca:	f000 f9e5 	bl	8017598 <dhcp_option>
 80171ce:	4603      	mov	r3, r0
 80171d0:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 80171d2:	89b8      	ldrh	r0, [r7, #12]
 80171d4:	693b      	ldr	r3, [r7, #16]
 80171d6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80171da:	687b      	ldr	r3, [r7, #4]
 80171dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80171de:	461a      	mov	r2, r3
 80171e0:	f000 fa40 	bl	8017664 <dhcp_option_short>
 80171e4:	4603      	mov	r3, r0
 80171e6:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80171e8:	89b8      	ldrh	r0, [r7, #12]
 80171ea:	693b      	ldr	r3, [r7, #16]
 80171ec:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80171f0:	2303      	movs	r3, #3
 80171f2:	2237      	movs	r2, #55	; 0x37
 80171f4:	f000 f9d0 	bl	8017598 <dhcp_option>
 80171f8:	4603      	mov	r3, r0
 80171fa:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80171fc:	2300      	movs	r3, #0
 80171fe:	77bb      	strb	r3, [r7, #30]
 8017200:	e00e      	b.n	8017220 <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8017202:	89b8      	ldrh	r0, [r7, #12]
 8017204:	693b      	ldr	r3, [r7, #16]
 8017206:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801720a:	7fbb      	ldrb	r3, [r7, #30]
 801720c:	4a29      	ldr	r2, [pc, #164]	; (80172b4 <dhcp_rebind+0x128>)
 801720e:	5cd3      	ldrb	r3, [r2, r3]
 8017210:	461a      	mov	r2, r3
 8017212:	f000 f9fb 	bl	801760c <dhcp_option_byte>
 8017216:	4603      	mov	r3, r0
 8017218:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801721a:	7fbb      	ldrb	r3, [r7, #30]
 801721c:	3301      	adds	r3, #1
 801721e:	77bb      	strb	r3, [r7, #30]
 8017220:	7fbb      	ldrb	r3, [r7, #30]
 8017222:	2b02      	cmp	r3, #2
 8017224:	d9ed      	bls.n	8017202 <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8017226:	89b8      	ldrh	r0, [r7, #12]
 8017228:	693b      	ldr	r3, [r7, #16]
 801722a:	33f0      	adds	r3, #240	; 0xf0
 801722c:	697a      	ldr	r2, [r7, #20]
 801722e:	4619      	mov	r1, r3
 8017230:	f000 ff3e 	bl	80180b0 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8017234:	4b20      	ldr	r3, [pc, #128]	; (80172b8 <dhcp_rebind+0x12c>)
 8017236:	6818      	ldr	r0, [r3, #0]
 8017238:	687b      	ldr	r3, [r7, #4]
 801723a:	9300      	str	r3, [sp, #0]
 801723c:	2343      	movs	r3, #67	; 0x43
 801723e:	4a1f      	ldr	r2, [pc, #124]	; (80172bc <dhcp_rebind+0x130>)
 8017240:	6979      	ldr	r1, [r7, #20]
 8017242:	f7fe fd59 	bl	8015cf8 <udp_sendto_if>
 8017246:	4603      	mov	r3, r0
 8017248:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801724a:	6978      	ldr	r0, [r7, #20]
 801724c:	f7f7 fa90 	bl	800e770 <pbuf_free>
 8017250:	e001      	b.n	8017256 <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8017252:	23ff      	movs	r3, #255	; 0xff
 8017254:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8017256:	69bb      	ldr	r3, [r7, #24]
 8017258:	799b      	ldrb	r3, [r3, #6]
 801725a:	2bff      	cmp	r3, #255	; 0xff
 801725c:	d005      	beq.n	801726a <dhcp_rebind+0xde>
    dhcp->tries++;
 801725e:	69bb      	ldr	r3, [r7, #24]
 8017260:	799b      	ldrb	r3, [r3, #6]
 8017262:	3301      	adds	r3, #1
 8017264:	b2da      	uxtb	r2, r3
 8017266:	69bb      	ldr	r3, [r7, #24]
 8017268:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 801726a:	69bb      	ldr	r3, [r7, #24]
 801726c:	799b      	ldrb	r3, [r3, #6]
 801726e:	2b09      	cmp	r3, #9
 8017270:	d80a      	bhi.n	8017288 <dhcp_rebind+0xfc>
 8017272:	69bb      	ldr	r3, [r7, #24]
 8017274:	799b      	ldrb	r3, [r3, #6]
 8017276:	b29b      	uxth	r3, r3
 8017278:	461a      	mov	r2, r3
 801727a:	0152      	lsls	r2, r2, #5
 801727c:	1ad2      	subs	r2, r2, r3
 801727e:	0092      	lsls	r2, r2, #2
 8017280:	4413      	add	r3, r2
 8017282:	00db      	lsls	r3, r3, #3
 8017284:	b29b      	uxth	r3, r3
 8017286:	e001      	b.n	801728c <dhcp_rebind+0x100>
 8017288:	f242 7310 	movw	r3, #10000	; 0x2710
 801728c:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801728e:	89fb      	ldrh	r3, [r7, #14]
 8017290:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8017294:	4a0a      	ldr	r2, [pc, #40]	; (80172c0 <dhcp_rebind+0x134>)
 8017296:	fb82 1203 	smull	r1, r2, r2, r3
 801729a:	1152      	asrs	r2, r2, #5
 801729c:	17db      	asrs	r3, r3, #31
 801729e:	1ad3      	subs	r3, r2, r3
 80172a0:	b29a      	uxth	r2, r3
 80172a2:	69bb      	ldr	r3, [r7, #24]
 80172a4:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80172a6:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80172aa:	4618      	mov	r0, r3
 80172ac:	3720      	adds	r7, #32
 80172ae:	46bd      	mov	sp, r7
 80172b0:	bd80      	pop	{r7, pc}
 80172b2:	bf00      	nop
 80172b4:	20000020 	.word	0x20000020
 80172b8:	20009fd4 	.word	0x20009fd4
 80172bc:	0802071c 	.word	0x0802071c
 80172c0:	10624dd3 	.word	0x10624dd3

080172c4 <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 80172c4:	b5b0      	push	{r4, r5, r7, lr}
 80172c6:	b08a      	sub	sp, #40	; 0x28
 80172c8:	af02      	add	r7, sp, #8
 80172ca:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80172cc:	687b      	ldr	r3, [r7, #4]
 80172ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80172d0:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 80172d2:	2103      	movs	r1, #3
 80172d4:	69b8      	ldr	r0, [r7, #24]
 80172d6:	f000 f945 	bl	8017564 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 80172da:	f107 030c 	add.w	r3, r7, #12
 80172de:	2203      	movs	r2, #3
 80172e0:	69b9      	ldr	r1, [r7, #24]
 80172e2:	6878      	ldr	r0, [r7, #4]
 80172e4:	f000 fe04 	bl	8017ef0 <dhcp_create_msg>
 80172e8:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 80172ea:	697b      	ldr	r3, [r7, #20]
 80172ec:	2b00      	cmp	r3, #0
 80172ee:	d066      	beq.n	80173be <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80172f0:	697b      	ldr	r3, [r7, #20]
 80172f2:	685b      	ldr	r3, [r3, #4]
 80172f4:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80172f6:	89b8      	ldrh	r0, [r7, #12]
 80172f8:	693b      	ldr	r3, [r7, #16]
 80172fa:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80172fe:	2302      	movs	r3, #2
 8017300:	2239      	movs	r2, #57	; 0x39
 8017302:	f000 f949 	bl	8017598 <dhcp_option>
 8017306:	4603      	mov	r3, r0
 8017308:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 801730a:	89b8      	ldrh	r0, [r7, #12]
 801730c:	693b      	ldr	r3, [r7, #16]
 801730e:	33f0      	adds	r3, #240	; 0xf0
 8017310:	f44f 7210 	mov.w	r2, #576	; 0x240
 8017314:	4619      	mov	r1, r3
 8017316:	f000 f9a5 	bl	8017664 <dhcp_option_short>
 801731a:	4603      	mov	r3, r0
 801731c:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 801731e:	89b8      	ldrh	r0, [r7, #12]
 8017320:	693b      	ldr	r3, [r7, #16]
 8017322:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8017326:	2304      	movs	r3, #4
 8017328:	2232      	movs	r2, #50	; 0x32
 801732a:	f000 f935 	bl	8017598 <dhcp_option>
 801732e:	4603      	mov	r3, r0
 8017330:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8017332:	89bc      	ldrh	r4, [r7, #12]
 8017334:	693b      	ldr	r3, [r7, #16]
 8017336:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 801733a:	69bb      	ldr	r3, [r7, #24]
 801733c:	69db      	ldr	r3, [r3, #28]
 801733e:	4618      	mov	r0, r3
 8017340:	f7f5 fd15 	bl	800cd6e <lwip_htonl>
 8017344:	4603      	mov	r3, r0
 8017346:	461a      	mov	r2, r3
 8017348:	4629      	mov	r1, r5
 801734a:	4620      	mov	r0, r4
 801734c:	f000 f9c2 	bl	80176d4 <dhcp_option_long>
 8017350:	4603      	mov	r3, r0
 8017352:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8017354:	89b8      	ldrh	r0, [r7, #12]
 8017356:	693b      	ldr	r3, [r7, #16]
 8017358:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801735c:	2303      	movs	r3, #3
 801735e:	2237      	movs	r2, #55	; 0x37
 8017360:	f000 f91a 	bl	8017598 <dhcp_option>
 8017364:	4603      	mov	r3, r0
 8017366:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8017368:	2300      	movs	r3, #0
 801736a:	77bb      	strb	r3, [r7, #30]
 801736c:	e00e      	b.n	801738c <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801736e:	89b8      	ldrh	r0, [r7, #12]
 8017370:	693b      	ldr	r3, [r7, #16]
 8017372:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8017376:	7fbb      	ldrb	r3, [r7, #30]
 8017378:	4a29      	ldr	r2, [pc, #164]	; (8017420 <dhcp_reboot+0x15c>)
 801737a:	5cd3      	ldrb	r3, [r2, r3]
 801737c:	461a      	mov	r2, r3
 801737e:	f000 f945 	bl	801760c <dhcp_option_byte>
 8017382:	4603      	mov	r3, r0
 8017384:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8017386:	7fbb      	ldrb	r3, [r7, #30]
 8017388:	3301      	adds	r3, #1
 801738a:	77bb      	strb	r3, [r7, #30]
 801738c:	7fbb      	ldrb	r3, [r7, #30]
 801738e:	2b02      	cmp	r3, #2
 8017390:	d9ed      	bls.n	801736e <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8017392:	89b8      	ldrh	r0, [r7, #12]
 8017394:	693b      	ldr	r3, [r7, #16]
 8017396:	33f0      	adds	r3, #240	; 0xf0
 8017398:	697a      	ldr	r2, [r7, #20]
 801739a:	4619      	mov	r1, r3
 801739c:	f000 fe88 	bl	80180b0 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80173a0:	4b20      	ldr	r3, [pc, #128]	; (8017424 <dhcp_reboot+0x160>)
 80173a2:	6818      	ldr	r0, [r3, #0]
 80173a4:	687b      	ldr	r3, [r7, #4]
 80173a6:	9300      	str	r3, [sp, #0]
 80173a8:	2343      	movs	r3, #67	; 0x43
 80173aa:	4a1f      	ldr	r2, [pc, #124]	; (8017428 <dhcp_reboot+0x164>)
 80173ac:	6979      	ldr	r1, [r7, #20]
 80173ae:	f7fe fca3 	bl	8015cf8 <udp_sendto_if>
 80173b2:	4603      	mov	r3, r0
 80173b4:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80173b6:	6978      	ldr	r0, [r7, #20]
 80173b8:	f7f7 f9da 	bl	800e770 <pbuf_free>
 80173bc:	e001      	b.n	80173c2 <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80173be:	23ff      	movs	r3, #255	; 0xff
 80173c0:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 80173c2:	69bb      	ldr	r3, [r7, #24]
 80173c4:	799b      	ldrb	r3, [r3, #6]
 80173c6:	2bff      	cmp	r3, #255	; 0xff
 80173c8:	d005      	beq.n	80173d6 <dhcp_reboot+0x112>
    dhcp->tries++;
 80173ca:	69bb      	ldr	r3, [r7, #24]
 80173cc:	799b      	ldrb	r3, [r3, #6]
 80173ce:	3301      	adds	r3, #1
 80173d0:	b2da      	uxtb	r2, r3
 80173d2:	69bb      	ldr	r3, [r7, #24]
 80173d4:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 80173d6:	69bb      	ldr	r3, [r7, #24]
 80173d8:	799b      	ldrb	r3, [r3, #6]
 80173da:	2b09      	cmp	r3, #9
 80173dc:	d80a      	bhi.n	80173f4 <dhcp_reboot+0x130>
 80173de:	69bb      	ldr	r3, [r7, #24]
 80173e0:	799b      	ldrb	r3, [r3, #6]
 80173e2:	b29b      	uxth	r3, r3
 80173e4:	461a      	mov	r2, r3
 80173e6:	0152      	lsls	r2, r2, #5
 80173e8:	1ad2      	subs	r2, r2, r3
 80173ea:	0092      	lsls	r2, r2, #2
 80173ec:	4413      	add	r3, r2
 80173ee:	00db      	lsls	r3, r3, #3
 80173f0:	b29b      	uxth	r3, r3
 80173f2:	e001      	b.n	80173f8 <dhcp_reboot+0x134>
 80173f4:	f242 7310 	movw	r3, #10000	; 0x2710
 80173f8:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80173fa:	89fb      	ldrh	r3, [r7, #14]
 80173fc:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8017400:	4a0a      	ldr	r2, [pc, #40]	; (801742c <dhcp_reboot+0x168>)
 8017402:	fb82 1203 	smull	r1, r2, r2, r3
 8017406:	1152      	asrs	r2, r2, #5
 8017408:	17db      	asrs	r3, r3, #31
 801740a:	1ad3      	subs	r3, r2, r3
 801740c:	b29a      	uxth	r2, r3
 801740e:	69bb      	ldr	r3, [r7, #24]
 8017410:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8017412:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8017416:	4618      	mov	r0, r3
 8017418:	3720      	adds	r7, #32
 801741a:	46bd      	mov	sp, r7
 801741c:	bdb0      	pop	{r4, r5, r7, pc}
 801741e:	bf00      	nop
 8017420:	20000020 	.word	0x20000020
 8017424:	20009fd4 	.word	0x20009fd4
 8017428:	0802071c 	.word	0x0802071c
 801742c:	10624dd3 	.word	0x10624dd3

08017430 <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 8017430:	b5b0      	push	{r4, r5, r7, lr}
 8017432:	b08a      	sub	sp, #40	; 0x28
 8017434:	af02      	add	r7, sp, #8
 8017436:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8017438:	687b      	ldr	r3, [r7, #4]
 801743a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801743c:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 801743e:	69fb      	ldr	r3, [r7, #28]
 8017440:	2b00      	cmp	r3, #0
 8017442:	f000 8084 	beq.w	801754e <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 8017446:	69fb      	ldr	r3, [r7, #28]
 8017448:	795b      	ldrb	r3, [r3, #5]
 801744a:	2b00      	cmp	r3, #0
 801744c:	f000 8081 	beq.w	8017552 <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 8017450:	69fb      	ldr	r3, [r7, #28]
 8017452:	699b      	ldr	r3, [r3, #24]
 8017454:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 8017456:	69fb      	ldr	r3, [r7, #28]
 8017458:	2200      	movs	r2, #0
 801745a:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 801745c:	69fb      	ldr	r3, [r7, #28]
 801745e:	2200      	movs	r2, #0
 8017460:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8017462:	69fb      	ldr	r3, [r7, #28]
 8017464:	2200      	movs	r2, #0
 8017466:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8017468:	69fb      	ldr	r3, [r7, #28]
 801746a:	2200      	movs	r2, #0
 801746c:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 801746e:	69fb      	ldr	r3, [r7, #28]
 8017470:	2200      	movs	r2, #0
 8017472:	631a      	str	r2, [r3, #48]	; 0x30
 8017474:	69fb      	ldr	r3, [r7, #28]
 8017476:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8017478:	69fb      	ldr	r3, [r7, #28]
 801747a:	62da      	str	r2, [r3, #44]	; 0x2c
 801747c:	69fb      	ldr	r3, [r7, #28]
 801747e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017480:	69fb      	ldr	r3, [r7, #28]
 8017482:	629a      	str	r2, [r3, #40]	; 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 8017484:	69fb      	ldr	r3, [r7, #28]
 8017486:	2200      	movs	r2, #0
 8017488:	829a      	strh	r2, [r3, #20]
 801748a:	69fb      	ldr	r3, [r7, #28]
 801748c:	8a9a      	ldrh	r2, [r3, #20]
 801748e:	69fb      	ldr	r3, [r7, #28]
 8017490:	825a      	strh	r2, [r3, #18]
 8017492:	69fb      	ldr	r3, [r7, #28]
 8017494:	8a5a      	ldrh	r2, [r3, #18]
 8017496:	69fb      	ldr	r3, [r7, #28]
 8017498:	821a      	strh	r2, [r3, #16]
 801749a:	69fb      	ldr	r3, [r7, #28]
 801749c:	8a1a      	ldrh	r2, [r3, #16]
 801749e:	69fb      	ldr	r3, [r7, #28]
 80174a0:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 80174a2:	6878      	ldr	r0, [r7, #4]
 80174a4:	f000 fe32 	bl	801810c <dhcp_supplied_address>
 80174a8:	4603      	mov	r3, r0
 80174aa:	2b00      	cmp	r3, #0
 80174ac:	d03b      	beq.n	8017526 <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 80174ae:	f107 030e 	add.w	r3, r7, #14
 80174b2:	2207      	movs	r2, #7
 80174b4:	69f9      	ldr	r1, [r7, #28]
 80174b6:	6878      	ldr	r0, [r7, #4]
 80174b8:	f000 fd1a 	bl	8017ef0 <dhcp_create_msg>
 80174bc:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 80174be:	69bb      	ldr	r3, [r7, #24]
 80174c0:	2b00      	cmp	r3, #0
 80174c2:	d030      	beq.n	8017526 <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80174c4:	69bb      	ldr	r3, [r7, #24]
 80174c6:	685b      	ldr	r3, [r3, #4]
 80174c8:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 80174ca:	89f8      	ldrh	r0, [r7, #14]
 80174cc:	697b      	ldr	r3, [r7, #20]
 80174ce:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80174d2:	2304      	movs	r3, #4
 80174d4:	2236      	movs	r2, #54	; 0x36
 80174d6:	f000 f85f 	bl	8017598 <dhcp_option>
 80174da:	4603      	mov	r3, r0
 80174dc:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 80174de:	89fc      	ldrh	r4, [r7, #14]
 80174e0:	697b      	ldr	r3, [r7, #20]
 80174e2:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 80174e6:	693b      	ldr	r3, [r7, #16]
 80174e8:	4618      	mov	r0, r3
 80174ea:	f7f5 fc40 	bl	800cd6e <lwip_htonl>
 80174ee:	4603      	mov	r3, r0
 80174f0:	461a      	mov	r2, r3
 80174f2:	4629      	mov	r1, r5
 80174f4:	4620      	mov	r0, r4
 80174f6:	f000 f8ed 	bl	80176d4 <dhcp_option_long>
 80174fa:	4603      	mov	r3, r0
 80174fc:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80174fe:	89f8      	ldrh	r0, [r7, #14]
 8017500:	697b      	ldr	r3, [r7, #20]
 8017502:	33f0      	adds	r3, #240	; 0xf0
 8017504:	69ba      	ldr	r2, [r7, #24]
 8017506:	4619      	mov	r1, r3
 8017508:	f000 fdd2 	bl	80180b0 <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 801750c:	4b13      	ldr	r3, [pc, #76]	; (801755c <dhcp_release_and_stop+0x12c>)
 801750e:	6818      	ldr	r0, [r3, #0]
 8017510:	f107 0210 	add.w	r2, r7, #16
 8017514:	687b      	ldr	r3, [r7, #4]
 8017516:	9300      	str	r3, [sp, #0]
 8017518:	2343      	movs	r3, #67	; 0x43
 801751a:	69b9      	ldr	r1, [r7, #24]
 801751c:	f7fe fbec 	bl	8015cf8 <udp_sendto_if>
      pbuf_free(p_out);
 8017520:	69b8      	ldr	r0, [r7, #24]
 8017522:	f7f7 f925 	bl	800e770 <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8017526:	4b0e      	ldr	r3, [pc, #56]	; (8017560 <dhcp_release_and_stop+0x130>)
 8017528:	4a0d      	ldr	r2, [pc, #52]	; (8017560 <dhcp_release_and_stop+0x130>)
 801752a:	490d      	ldr	r1, [pc, #52]	; (8017560 <dhcp_release_and_stop+0x130>)
 801752c:	6878      	ldr	r0, [r7, #4]
 801752e:	f7f6 fbc3 	bl	800dcb8 <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 8017532:	2100      	movs	r1, #0
 8017534:	69f8      	ldr	r0, [r7, #28]
 8017536:	f000 f815 	bl	8017564 <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 801753a:	69fb      	ldr	r3, [r7, #28]
 801753c:	791b      	ldrb	r3, [r3, #4]
 801753e:	2b00      	cmp	r3, #0
 8017540:	d008      	beq.n	8017554 <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8017542:	f7fe ff63 	bl	801640c <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 8017546:	69fb      	ldr	r3, [r7, #28]
 8017548:	2200      	movs	r2, #0
 801754a:	711a      	strb	r2, [r3, #4]
 801754c:	e002      	b.n	8017554 <dhcp_release_and_stop+0x124>
    return;
 801754e:	bf00      	nop
 8017550:	e000      	b.n	8017554 <dhcp_release_and_stop+0x124>
    return;
 8017552:	bf00      	nop
  }
}
 8017554:	3720      	adds	r7, #32
 8017556:	46bd      	mov	sp, r7
 8017558:	bdb0      	pop	{r4, r5, r7, pc}
 801755a:	bf00      	nop
 801755c:	20009fd4 	.word	0x20009fd4
 8017560:	08020718 	.word	0x08020718

08017564 <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 8017564:	b480      	push	{r7}
 8017566:	b083      	sub	sp, #12
 8017568:	af00      	add	r7, sp, #0
 801756a:	6078      	str	r0, [r7, #4]
 801756c:	460b      	mov	r3, r1
 801756e:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 8017570:	687b      	ldr	r3, [r7, #4]
 8017572:	795b      	ldrb	r3, [r3, #5]
 8017574:	78fa      	ldrb	r2, [r7, #3]
 8017576:	429a      	cmp	r2, r3
 8017578:	d008      	beq.n	801758c <dhcp_set_state+0x28>
    dhcp->state = new_state;
 801757a:	687b      	ldr	r3, [r7, #4]
 801757c:	78fa      	ldrb	r2, [r7, #3]
 801757e:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 8017580:	687b      	ldr	r3, [r7, #4]
 8017582:	2200      	movs	r2, #0
 8017584:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 8017586:	687b      	ldr	r3, [r7, #4]
 8017588:	2200      	movs	r2, #0
 801758a:	811a      	strh	r2, [r3, #8]
  }
}
 801758c:	bf00      	nop
 801758e:	370c      	adds	r7, #12
 8017590:	46bd      	mov	sp, r7
 8017592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017596:	4770      	bx	lr

08017598 <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 8017598:	b580      	push	{r7, lr}
 801759a:	b082      	sub	sp, #8
 801759c:	af00      	add	r7, sp, #0
 801759e:	6039      	str	r1, [r7, #0]
 80175a0:	4611      	mov	r1, r2
 80175a2:	461a      	mov	r2, r3
 80175a4:	4603      	mov	r3, r0
 80175a6:	80fb      	strh	r3, [r7, #6]
 80175a8:	460b      	mov	r3, r1
 80175aa:	717b      	strb	r3, [r7, #5]
 80175ac:	4613      	mov	r3, r2
 80175ae:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 80175b0:	88fa      	ldrh	r2, [r7, #6]
 80175b2:	793b      	ldrb	r3, [r7, #4]
 80175b4:	4413      	add	r3, r2
 80175b6:	3302      	adds	r3, #2
 80175b8:	2b44      	cmp	r3, #68	; 0x44
 80175ba:	d90a      	bls.n	80175d2 <dhcp_option+0x3a>
 80175bc:	f240 529a 	movw	r2, #1434	; 0x59a
 80175c0:	490e      	ldr	r1, [pc, #56]	; (80175fc <dhcp_option+0x64>)
 80175c2:	480f      	ldr	r0, [pc, #60]	; (8017600 <dhcp_option+0x68>)
 80175c4:	f003 fda6 	bl	801b114 <trace_printf>
 80175c8:	490e      	ldr	r1, [pc, #56]	; (8017604 <dhcp_option+0x6c>)
 80175ca:	480f      	ldr	r0, [pc, #60]	; (8017608 <dhcp_option+0x70>)
 80175cc:	f003 fda2 	bl	801b114 <trace_printf>
 80175d0:	e7fe      	b.n	80175d0 <dhcp_option+0x38>
  options[options_out_len++] = option_type;
 80175d2:	88fb      	ldrh	r3, [r7, #6]
 80175d4:	1c5a      	adds	r2, r3, #1
 80175d6:	80fa      	strh	r2, [r7, #6]
 80175d8:	461a      	mov	r2, r3
 80175da:	683b      	ldr	r3, [r7, #0]
 80175dc:	4413      	add	r3, r2
 80175de:	797a      	ldrb	r2, [r7, #5]
 80175e0:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 80175e2:	88fb      	ldrh	r3, [r7, #6]
 80175e4:	1c5a      	adds	r2, r3, #1
 80175e6:	80fa      	strh	r2, [r7, #6]
 80175e8:	461a      	mov	r2, r3
 80175ea:	683b      	ldr	r3, [r7, #0]
 80175ec:	4413      	add	r3, r2
 80175ee:	793a      	ldrb	r2, [r7, #4]
 80175f0:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 80175f2:	88fb      	ldrh	r3, [r7, #6]
}
 80175f4:	4618      	mov	r0, r3
 80175f6:	3708      	adds	r7, #8
 80175f8:	46bd      	mov	sp, r7
 80175fa:	bd80      	pop	{r7, pc}
 80175fc:	0801fcb8 	.word	0x0801fcb8
 8017600:	0801fb50 	.word	0x0801fb50
 8017604:	0801fb70 	.word	0x0801fb70
 8017608:	0801fba8 	.word	0x0801fba8

0801760c <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 801760c:	b580      	push	{r7, lr}
 801760e:	b082      	sub	sp, #8
 8017610:	af00      	add	r7, sp, #0
 8017612:	4603      	mov	r3, r0
 8017614:	6039      	str	r1, [r7, #0]
 8017616:	80fb      	strh	r3, [r7, #6]
 8017618:	4613      	mov	r3, r2
 801761a:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 801761c:	88fb      	ldrh	r3, [r7, #6]
 801761e:	2b43      	cmp	r3, #67	; 0x43
 8017620:	d90a      	bls.n	8017638 <dhcp_option_byte+0x2c>
 8017622:	f240 52a6 	movw	r2, #1446	; 0x5a6
 8017626:	490b      	ldr	r1, [pc, #44]	; (8017654 <dhcp_option_byte+0x48>)
 8017628:	480b      	ldr	r0, [pc, #44]	; (8017658 <dhcp_option_byte+0x4c>)
 801762a:	f003 fd73 	bl	801b114 <trace_printf>
 801762e:	490b      	ldr	r1, [pc, #44]	; (801765c <dhcp_option_byte+0x50>)
 8017630:	480b      	ldr	r0, [pc, #44]	; (8017660 <dhcp_option_byte+0x54>)
 8017632:	f003 fd6f 	bl	801b114 <trace_printf>
 8017636:	e7fe      	b.n	8017636 <dhcp_option_byte+0x2a>
  options[options_out_len++] = value;
 8017638:	88fb      	ldrh	r3, [r7, #6]
 801763a:	1c5a      	adds	r2, r3, #1
 801763c:	80fa      	strh	r2, [r7, #6]
 801763e:	461a      	mov	r2, r3
 8017640:	683b      	ldr	r3, [r7, #0]
 8017642:	4413      	add	r3, r2
 8017644:	797a      	ldrb	r2, [r7, #5]
 8017646:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8017648:	88fb      	ldrh	r3, [r7, #6]
}
 801764a:	4618      	mov	r0, r3
 801764c:	3708      	adds	r7, #8
 801764e:	46bd      	mov	sp, r7
 8017650:	bd80      	pop	{r7, pc}
 8017652:	bf00      	nop
 8017654:	0801fcfc 	.word	0x0801fcfc
 8017658:	0801fb50 	.word	0x0801fb50
 801765c:	0801fb70 	.word	0x0801fb70
 8017660:	0801fba8 	.word	0x0801fba8

08017664 <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 8017664:	b580      	push	{r7, lr}
 8017666:	b082      	sub	sp, #8
 8017668:	af00      	add	r7, sp, #0
 801766a:	4603      	mov	r3, r0
 801766c:	6039      	str	r1, [r7, #0]
 801766e:	80fb      	strh	r3, [r7, #6]
 8017670:	4613      	mov	r3, r2
 8017672:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8017674:	88fb      	ldrh	r3, [r7, #6]
 8017676:	3302      	adds	r3, #2
 8017678:	2b44      	cmp	r3, #68	; 0x44
 801767a:	d90a      	bls.n	8017692 <dhcp_option_short+0x2e>
 801767c:	f240 52ae 	movw	r2, #1454	; 0x5ae
 8017680:	4910      	ldr	r1, [pc, #64]	; (80176c4 <dhcp_option_short+0x60>)
 8017682:	4811      	ldr	r0, [pc, #68]	; (80176c8 <dhcp_option_short+0x64>)
 8017684:	f003 fd46 	bl	801b114 <trace_printf>
 8017688:	4910      	ldr	r1, [pc, #64]	; (80176cc <dhcp_option_short+0x68>)
 801768a:	4811      	ldr	r0, [pc, #68]	; (80176d0 <dhcp_option_short+0x6c>)
 801768c:	f003 fd42 	bl	801b114 <trace_printf>
 8017690:	e7fe      	b.n	8017690 <dhcp_option_short+0x2c>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 8017692:	88bb      	ldrh	r3, [r7, #4]
 8017694:	0a1b      	lsrs	r3, r3, #8
 8017696:	b29a      	uxth	r2, r3
 8017698:	88fb      	ldrh	r3, [r7, #6]
 801769a:	1c59      	adds	r1, r3, #1
 801769c:	80f9      	strh	r1, [r7, #6]
 801769e:	4619      	mov	r1, r3
 80176a0:	683b      	ldr	r3, [r7, #0]
 80176a2:	440b      	add	r3, r1
 80176a4:	b2d2      	uxtb	r2, r2
 80176a6:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 80176a8:	88fb      	ldrh	r3, [r7, #6]
 80176aa:	1c5a      	adds	r2, r3, #1
 80176ac:	80fa      	strh	r2, [r7, #6]
 80176ae:	461a      	mov	r2, r3
 80176b0:	683b      	ldr	r3, [r7, #0]
 80176b2:	4413      	add	r3, r2
 80176b4:	88ba      	ldrh	r2, [r7, #4]
 80176b6:	b2d2      	uxtb	r2, r2
 80176b8:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 80176ba:	88fb      	ldrh	r3, [r7, #6]
}
 80176bc:	4618      	mov	r0, r3
 80176be:	3708      	adds	r7, #8
 80176c0:	46bd      	mov	sp, r7
 80176c2:	bd80      	pop	{r7, pc}
 80176c4:	0801fd34 	.word	0x0801fd34
 80176c8:	0801fb50 	.word	0x0801fb50
 80176cc:	0801fb70 	.word	0x0801fb70
 80176d0:	0801fba8 	.word	0x0801fba8

080176d4 <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 80176d4:	b580      	push	{r7, lr}
 80176d6:	b084      	sub	sp, #16
 80176d8:	af00      	add	r7, sp, #0
 80176da:	4603      	mov	r3, r0
 80176dc:	60b9      	str	r1, [r7, #8]
 80176de:	607a      	str	r2, [r7, #4]
 80176e0:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 80176e2:	89fb      	ldrh	r3, [r7, #14]
 80176e4:	3304      	adds	r3, #4
 80176e6:	2b44      	cmp	r3, #68	; 0x44
 80176e8:	d90a      	bls.n	8017700 <dhcp_option_long+0x2c>
 80176ea:	f240 52b7 	movw	r2, #1463	; 0x5b7
 80176ee:	491a      	ldr	r1, [pc, #104]	; (8017758 <dhcp_option_long+0x84>)
 80176f0:	481a      	ldr	r0, [pc, #104]	; (801775c <dhcp_option_long+0x88>)
 80176f2:	f003 fd0f 	bl	801b114 <trace_printf>
 80176f6:	491a      	ldr	r1, [pc, #104]	; (8017760 <dhcp_option_long+0x8c>)
 80176f8:	481a      	ldr	r0, [pc, #104]	; (8017764 <dhcp_option_long+0x90>)
 80176fa:	f003 fd0b 	bl	801b114 <trace_printf>
 80176fe:	e7fe      	b.n	80176fe <dhcp_option_long+0x2a>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 8017700:	687b      	ldr	r3, [r7, #4]
 8017702:	0e1a      	lsrs	r2, r3, #24
 8017704:	89fb      	ldrh	r3, [r7, #14]
 8017706:	1c59      	adds	r1, r3, #1
 8017708:	81f9      	strh	r1, [r7, #14]
 801770a:	4619      	mov	r1, r3
 801770c:	68bb      	ldr	r3, [r7, #8]
 801770e:	440b      	add	r3, r1
 8017710:	b2d2      	uxtb	r2, r2
 8017712:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 8017714:	687b      	ldr	r3, [r7, #4]
 8017716:	0c1a      	lsrs	r2, r3, #16
 8017718:	89fb      	ldrh	r3, [r7, #14]
 801771a:	1c59      	adds	r1, r3, #1
 801771c:	81f9      	strh	r1, [r7, #14]
 801771e:	4619      	mov	r1, r3
 8017720:	68bb      	ldr	r3, [r7, #8]
 8017722:	440b      	add	r3, r1
 8017724:	b2d2      	uxtb	r2, r2
 8017726:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 8017728:	687b      	ldr	r3, [r7, #4]
 801772a:	0a1a      	lsrs	r2, r3, #8
 801772c:	89fb      	ldrh	r3, [r7, #14]
 801772e:	1c59      	adds	r1, r3, #1
 8017730:	81f9      	strh	r1, [r7, #14]
 8017732:	4619      	mov	r1, r3
 8017734:	68bb      	ldr	r3, [r7, #8]
 8017736:	440b      	add	r3, r1
 8017738:	b2d2      	uxtb	r2, r2
 801773a:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 801773c:	89fb      	ldrh	r3, [r7, #14]
 801773e:	1c5a      	adds	r2, r3, #1
 8017740:	81fa      	strh	r2, [r7, #14]
 8017742:	461a      	mov	r2, r3
 8017744:	68bb      	ldr	r3, [r7, #8]
 8017746:	4413      	add	r3, r2
 8017748:	687a      	ldr	r2, [r7, #4]
 801774a:	b2d2      	uxtb	r2, r2
 801774c:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 801774e:	89fb      	ldrh	r3, [r7, #14]
}
 8017750:	4618      	mov	r0, r3
 8017752:	3710      	adds	r7, #16
 8017754:	46bd      	mov	sp, r7
 8017756:	bd80      	pop	{r7, pc}
 8017758:	0801fd70 	.word	0x0801fd70
 801775c:	0801fb50 	.word	0x0801fb50
 8017760:	0801fb70 	.word	0x0801fb70
 8017764:	0801fba8 	.word	0x0801fba8

08017768 <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 8017768:	b580      	push	{r7, lr}
 801776a:	b092      	sub	sp, #72	; 0x48
 801776c:	af00      	add	r7, sp, #0
 801776e:	6078      	str	r0, [r7, #4]
 8017770:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 8017772:	2300      	movs	r3, #0
 8017774:	633b      	str	r3, [r7, #48]	; 0x30
  int parse_sname_as_options = 0;
 8017776:	2300      	movs	r3, #0
 8017778:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 801777a:	2208      	movs	r2, #8
 801777c:	2100      	movs	r1, #0
 801777e:	48bc      	ldr	r0, [pc, #752]	; (8017a70 <dhcp_parse_reply+0x308>)
 8017780:	f003 fd44 	bl	801b20c <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 8017784:	687b      	ldr	r3, [r7, #4]
 8017786:	895b      	ldrh	r3, [r3, #10]
 8017788:	2b2b      	cmp	r3, #43	; 0x2b
 801778a:	d802      	bhi.n	8017792 <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 801778c:	f06f 0301 	mvn.w	r3, #1
 8017790:	e2cb      	b.n	8017d2a <dhcp_parse_reply+0x5c2>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 8017792:	687b      	ldr	r3, [r7, #4]
 8017794:	685b      	ldr	r3, [r3, #4]
 8017796:	61fb      	str	r3, [r7, #28]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 8017798:	23f0      	movs	r3, #240	; 0xf0
 801779a:	87bb      	strh	r3, [r7, #60]	; 0x3c
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 801779c:	687b      	ldr	r3, [r7, #4]
 801779e:	891b      	ldrh	r3, [r3, #8]
 80177a0:	877b      	strh	r3, [r7, #58]	; 0x3a
again:
  q = p;
 80177a2:	687b      	ldr	r3, [r7, #4]
 80177a4:	637b      	str	r3, [r7, #52]	; 0x34
  while ((q != NULL) && (options_idx >= q->len)) {
 80177a6:	e00c      	b.n	80177c2 <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 80177a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80177aa:	895b      	ldrh	r3, [r3, #10]
 80177ac:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 80177ae:	1ad3      	subs	r3, r2, r3
 80177b0:	87bb      	strh	r3, [r7, #60]	; 0x3c
    options_idx_max = (u16_t)(options_idx_max - q->len);
 80177b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80177b4:	895b      	ldrh	r3, [r3, #10]
 80177b6:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80177b8:	1ad3      	subs	r3, r2, r3
 80177ba:	877b      	strh	r3, [r7, #58]	; 0x3a
    q = q->next;
 80177bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80177be:	681b      	ldr	r3, [r3, #0]
 80177c0:	637b      	str	r3, [r7, #52]	; 0x34
  while ((q != NULL) && (options_idx >= q->len)) {
 80177c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80177c4:	2b00      	cmp	r3, #0
 80177c6:	d004      	beq.n	80177d2 <dhcp_parse_reply+0x6a>
 80177c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80177ca:	895b      	ldrh	r3, [r3, #10]
 80177cc:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 80177ce:	429a      	cmp	r2, r3
 80177d0:	d2ea      	bcs.n	80177a8 <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 80177d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80177d4:	2b00      	cmp	r3, #0
 80177d6:	d102      	bne.n	80177de <dhcp_parse_reply+0x76>
    return ERR_BUF;
 80177d8:	f06f 0301 	mvn.w	r3, #1
 80177dc:	e2a5      	b.n	8017d2a <dhcp_parse_reply+0x5c2>
  }
  offset = options_idx;
 80177de:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80177e0:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  offset_max = options_idx_max;
 80177e4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80177e6:	87fb      	strh	r3, [r7, #62]	; 0x3e
  options = (u8_t *)q->payload;
 80177e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80177ea:	685b      	ldr	r3, [r3, #4]
 80177ec:	643b      	str	r3, [r7, #64]	; 0x40
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 80177ee:	e25a      	b.n	8017ca6 <dhcp_parse_reply+0x53e>
    u8_t op = options[offset];
 80177f0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80177f4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80177f6:	4413      	add	r3, r2
 80177f8:	781b      	ldrb	r3, [r3, #0]
 80177fa:	76fb      	strb	r3, [r7, #27]
    u8_t len;
    u8_t decode_len = 0;
 80177fc:	2300      	movs	r3, #0
 80177fe:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    int decode_idx = -1;
 8017802:	f04f 33ff 	mov.w	r3, #4294967295
 8017806:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t val_offset = (u16_t)(offset + 2);
 8017808:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801780c:	3302      	adds	r3, #2
 801780e:	847b      	strh	r3, [r7, #34]	; 0x22
    if (val_offset < offset) {
 8017810:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8017812:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8017816:	429a      	cmp	r2, r3
 8017818:	d202      	bcs.n	8017820 <dhcp_parse_reply+0xb8>
      /* overflow */
      return ERR_BUF;
 801781a:	f06f 0301 	mvn.w	r3, #1
 801781e:	e284      	b.n	8017d2a <dhcp_parse_reply+0x5c2>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 8017820:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8017824:	3301      	adds	r3, #1
 8017826:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8017828:	8952      	ldrh	r2, [r2, #10]
 801782a:	4293      	cmp	r3, r2
 801782c:	da08      	bge.n	8017840 <dhcp_parse_reply+0xd8>
      len = options[offset + 1];
 801782e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8017832:	3301      	adds	r3, #1
 8017834:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8017836:	4413      	add	r3, r2
 8017838:	781b      	ldrb	r3, [r3, #0]
 801783a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801783e:	e00b      	b.n	8017858 <dhcp_parse_reply+0xf0>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 8017840:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017842:	681b      	ldr	r3, [r3, #0]
 8017844:	2b00      	cmp	r3, #0
 8017846:	d004      	beq.n	8017852 <dhcp_parse_reply+0xea>
 8017848:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801784a:	681b      	ldr	r3, [r3, #0]
 801784c:	685b      	ldr	r3, [r3, #4]
 801784e:	781b      	ldrb	r3, [r3, #0]
 8017850:	e000      	b.n	8017854 <dhcp_parse_reply+0xec>
 8017852:	2300      	movs	r3, #0
 8017854:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 8017858:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801785c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    switch (op) {
 8017860:	7efb      	ldrb	r3, [r7, #27]
 8017862:	2b3b      	cmp	r3, #59	; 0x3b
 8017864:	f200 8138 	bhi.w	8017ad8 <dhcp_parse_reply+0x370>
 8017868:	a201      	add	r2, pc, #4	; (adr r2, 8017870 <dhcp_parse_reply+0x108>)
 801786a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801786e:	bf00      	nop
 8017870:	08017961 	.word	0x08017961
 8017874:	08017971 	.word	0x08017971
 8017878:	08017ad9 	.word	0x08017ad9
 801787c:	08017995 	.word	0x08017995
 8017880:	08017ad9 	.word	0x08017ad9
 8017884:	08017ad9 	.word	0x08017ad9
 8017888:	08017ad9 	.word	0x08017ad9
 801788c:	08017ad9 	.word	0x08017ad9
 8017890:	08017ad9 	.word	0x08017ad9
 8017894:	08017ad9 	.word	0x08017ad9
 8017898:	08017ad9 	.word	0x08017ad9
 801789c:	08017ad9 	.word	0x08017ad9
 80178a0:	08017ad9 	.word	0x08017ad9
 80178a4:	08017ad9 	.word	0x08017ad9
 80178a8:	08017ad9 	.word	0x08017ad9
 80178ac:	08017ad9 	.word	0x08017ad9
 80178b0:	08017ad9 	.word	0x08017ad9
 80178b4:	08017ad9 	.word	0x08017ad9
 80178b8:	08017ad9 	.word	0x08017ad9
 80178bc:	08017ad9 	.word	0x08017ad9
 80178c0:	08017ad9 	.word	0x08017ad9
 80178c4:	08017ad9 	.word	0x08017ad9
 80178c8:	08017ad9 	.word	0x08017ad9
 80178cc:	08017ad9 	.word	0x08017ad9
 80178d0:	08017ad9 	.word	0x08017ad9
 80178d4:	08017ad9 	.word	0x08017ad9
 80178d8:	08017ad9 	.word	0x08017ad9
 80178dc:	08017ad9 	.word	0x08017ad9
 80178e0:	08017ad9 	.word	0x08017ad9
 80178e4:	08017ad9 	.word	0x08017ad9
 80178e8:	08017ad9 	.word	0x08017ad9
 80178ec:	08017ad9 	.word	0x08017ad9
 80178f0:	08017ad9 	.word	0x08017ad9
 80178f4:	08017ad9 	.word	0x08017ad9
 80178f8:	08017ad9 	.word	0x08017ad9
 80178fc:	08017ad9 	.word	0x08017ad9
 8017900:	08017ad9 	.word	0x08017ad9
 8017904:	08017ad9 	.word	0x08017ad9
 8017908:	08017ad9 	.word	0x08017ad9
 801790c:	08017ad9 	.word	0x08017ad9
 8017910:	08017ad9 	.word	0x08017ad9
 8017914:	08017ad9 	.word	0x08017ad9
 8017918:	08017ad9 	.word	0x08017ad9
 801791c:	08017ad9 	.word	0x08017ad9
 8017920:	08017ad9 	.word	0x08017ad9
 8017924:	08017ad9 	.word	0x08017ad9
 8017928:	08017ad9 	.word	0x08017ad9
 801792c:	08017ad9 	.word	0x08017ad9
 8017930:	08017ad9 	.word	0x08017ad9
 8017934:	08017ad9 	.word	0x08017ad9
 8017938:	08017ad9 	.word	0x08017ad9
 801793c:	080179c3 	.word	0x080179c3
 8017940:	080179e7 	.word	0x080179e7
 8017944:	08017a27 	.word	0x08017a27
 8017948:	08017a4b 	.word	0x08017a4b
 801794c:	08017ad9 	.word	0x08017ad9
 8017950:	08017ad9 	.word	0x08017ad9
 8017954:	08017ad9 	.word	0x08017ad9
 8017958:	08017a91 	.word	0x08017a91
 801795c:	08017ab5 	.word	0x08017ab5
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 8017960:	2300      	movs	r3, #0
 8017962:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8017966:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801796a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        /* will be increased below */
        break;
 801796e:	e0b7      	b.n	8017ae0 <dhcp_parse_reply+0x378>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8017970:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8017974:	2b04      	cmp	r3, #4
 8017976:	d00a      	beq.n	801798e <dhcp_parse_reply+0x226>
 8017978:	f240 622e 	movw	r2, #1582	; 0x62e
 801797c:	493d      	ldr	r1, [pc, #244]	; (8017a74 <dhcp_parse_reply+0x30c>)
 801797e:	483e      	ldr	r0, [pc, #248]	; (8017a78 <dhcp_parse_reply+0x310>)
 8017980:	f003 fbc8 	bl	801b114 <trace_printf>
 8017984:	493d      	ldr	r1, [pc, #244]	; (8017a7c <dhcp_parse_reply+0x314>)
 8017986:	483e      	ldr	r0, [pc, #248]	; (8017a80 <dhcp_parse_reply+0x318>)
 8017988:	f003 fbc4 	bl	801b114 <trace_printf>
 801798c:	e7fe      	b.n	801798c <dhcp_parse_reply+0x224>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 801798e:	2306      	movs	r3, #6
 8017990:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8017992:	e0a5      	b.n	8017ae0 <dhcp_parse_reply+0x378>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 8017994:	2304      	movs	r3, #4
 8017996:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 801799a:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 801799e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80179a2:	429a      	cmp	r2, r3
 80179a4:	d20a      	bcs.n	80179bc <dhcp_parse_reply+0x254>
 80179a6:	f240 6233 	movw	r2, #1587	; 0x633
 80179aa:	4936      	ldr	r1, [pc, #216]	; (8017a84 <dhcp_parse_reply+0x31c>)
 80179ac:	4832      	ldr	r0, [pc, #200]	; (8017a78 <dhcp_parse_reply+0x310>)
 80179ae:	f003 fbb1 	bl	801b114 <trace_printf>
 80179b2:	4932      	ldr	r1, [pc, #200]	; (8017a7c <dhcp_parse_reply+0x314>)
 80179b4:	4832      	ldr	r0, [pc, #200]	; (8017a80 <dhcp_parse_reply+0x318>)
 80179b6:	f003 fbad 	bl	801b114 <trace_printf>
 80179ba:	e7fe      	b.n	80179ba <dhcp_parse_reply+0x252>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 80179bc:	2307      	movs	r3, #7
 80179be:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80179c0:	e08e      	b.n	8017ae0 <dhcp_parse_reply+0x378>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80179c2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80179c6:	2b04      	cmp	r3, #4
 80179c8:	d00a      	beq.n	80179e0 <dhcp_parse_reply+0x278>
 80179ca:	f240 6241 	movw	r2, #1601	; 0x641
 80179ce:	4929      	ldr	r1, [pc, #164]	; (8017a74 <dhcp_parse_reply+0x30c>)
 80179d0:	4829      	ldr	r0, [pc, #164]	; (8017a78 <dhcp_parse_reply+0x310>)
 80179d2:	f003 fb9f 	bl	801b114 <trace_printf>
 80179d6:	4929      	ldr	r1, [pc, #164]	; (8017a7c <dhcp_parse_reply+0x314>)
 80179d8:	4829      	ldr	r0, [pc, #164]	; (8017a80 <dhcp_parse_reply+0x318>)
 80179da:	f003 fb9b 	bl	801b114 <trace_printf>
 80179de:	e7fe      	b.n	80179de <dhcp_parse_reply+0x276>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 80179e0:	2303      	movs	r3, #3
 80179e2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80179e4:	e07c      	b.n	8017ae0 <dhcp_parse_reply+0x378>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 80179e6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80179ea:	2b01      	cmp	r3, #1
 80179ec:	d00a      	beq.n	8017a04 <dhcp_parse_reply+0x29c>
 80179ee:	f240 624f 	movw	r2, #1615	; 0x64f
 80179f2:	4925      	ldr	r1, [pc, #148]	; (8017a88 <dhcp_parse_reply+0x320>)
 80179f4:	4820      	ldr	r0, [pc, #128]	; (8017a78 <dhcp_parse_reply+0x310>)
 80179f6:	f003 fb8d 	bl	801b114 <trace_printf>
 80179fa:	4920      	ldr	r1, [pc, #128]	; (8017a7c <dhcp_parse_reply+0x314>)
 80179fc:	4820      	ldr	r0, [pc, #128]	; (8017a80 <dhcp_parse_reply+0x318>)
 80179fe:	f003 fb89 	bl	801b114 <trace_printf>
 8017a02:	e7fe      	b.n	8017a02 <dhcp_parse_reply+0x29a>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 8017a04:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8017a06:	2bf0      	cmp	r3, #240	; 0xf0
 8017a08:	d00a      	beq.n	8017a20 <dhcp_parse_reply+0x2b8>
 8017a0a:	f240 6251 	movw	r2, #1617	; 0x651
 8017a0e:	491f      	ldr	r1, [pc, #124]	; (8017a8c <dhcp_parse_reply+0x324>)
 8017a10:	4819      	ldr	r0, [pc, #100]	; (8017a78 <dhcp_parse_reply+0x310>)
 8017a12:	f003 fb7f 	bl	801b114 <trace_printf>
 8017a16:	4919      	ldr	r1, [pc, #100]	; (8017a7c <dhcp_parse_reply+0x314>)
 8017a18:	4819      	ldr	r0, [pc, #100]	; (8017a80 <dhcp_parse_reply+0x318>)
 8017a1a:	f003 fb7b 	bl	801b114 <trace_printf>
 8017a1e:	e7fe      	b.n	8017a1e <dhcp_parse_reply+0x2b6>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 8017a20:	2300      	movs	r3, #0
 8017a22:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8017a24:	e05c      	b.n	8017ae0 <dhcp_parse_reply+0x378>
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8017a26:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8017a2a:	2b01      	cmp	r3, #1
 8017a2c:	d00a      	beq.n	8017a44 <dhcp_parse_reply+0x2dc>
 8017a2e:	f240 6255 	movw	r2, #1621	; 0x655
 8017a32:	4915      	ldr	r1, [pc, #84]	; (8017a88 <dhcp_parse_reply+0x320>)
 8017a34:	4810      	ldr	r0, [pc, #64]	; (8017a78 <dhcp_parse_reply+0x310>)
 8017a36:	f003 fb6d 	bl	801b114 <trace_printf>
 8017a3a:	4910      	ldr	r1, [pc, #64]	; (8017a7c <dhcp_parse_reply+0x314>)
 8017a3c:	4810      	ldr	r0, [pc, #64]	; (8017a80 <dhcp_parse_reply+0x318>)
 8017a3e:	f003 fb69 	bl	801b114 <trace_printf>
 8017a42:	e7fe      	b.n	8017a42 <dhcp_parse_reply+0x2da>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 8017a44:	2301      	movs	r3, #1
 8017a46:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8017a48:	e04a      	b.n	8017ae0 <dhcp_parse_reply+0x378>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8017a4a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8017a4e:	2b04      	cmp	r3, #4
 8017a50:	d00a      	beq.n	8017a68 <dhcp_parse_reply+0x300>
 8017a52:	f240 6259 	movw	r2, #1625	; 0x659
 8017a56:	4907      	ldr	r1, [pc, #28]	; (8017a74 <dhcp_parse_reply+0x30c>)
 8017a58:	4807      	ldr	r0, [pc, #28]	; (8017a78 <dhcp_parse_reply+0x310>)
 8017a5a:	f003 fb5b 	bl	801b114 <trace_printf>
 8017a5e:	4907      	ldr	r1, [pc, #28]	; (8017a7c <dhcp_parse_reply+0x314>)
 8017a60:	4807      	ldr	r0, [pc, #28]	; (8017a80 <dhcp_parse_reply+0x318>)
 8017a62:	f003 fb57 	bl	801b114 <trace_printf>
 8017a66:	e7fe      	b.n	8017a66 <dhcp_parse_reply+0x2fe>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 8017a68:	2302      	movs	r3, #2
 8017a6a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8017a6c:	e038      	b.n	8017ae0 <dhcp_parse_reply+0x378>
 8017a6e:	bf00      	nop
 8017a70:	20010c9c 	.word	0x20010c9c
 8017a74:	0801fdac 	.word	0x0801fdac
 8017a78:	0801fb50 	.word	0x0801fb50
 8017a7c:	0801fb70 	.word	0x0801fb70
 8017a80:	0801fba8 	.word	0x0801fba8
 8017a84:	0801fdb8 	.word	0x0801fdb8
 8017a88:	0801fdcc 	.word	0x0801fdcc
 8017a8c:	0801fdd8 	.word	0x0801fdd8
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8017a90:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8017a94:	2b04      	cmp	r3, #4
 8017a96:	d00a      	beq.n	8017aae <dhcp_parse_reply+0x346>
 8017a98:	f240 625d 	movw	r2, #1629	; 0x65d
 8017a9c:	49a5      	ldr	r1, [pc, #660]	; (8017d34 <dhcp_parse_reply+0x5cc>)
 8017a9e:	48a6      	ldr	r0, [pc, #664]	; (8017d38 <dhcp_parse_reply+0x5d0>)
 8017aa0:	f003 fb38 	bl	801b114 <trace_printf>
 8017aa4:	49a5      	ldr	r1, [pc, #660]	; (8017d3c <dhcp_parse_reply+0x5d4>)
 8017aa6:	48a6      	ldr	r0, [pc, #664]	; (8017d40 <dhcp_parse_reply+0x5d8>)
 8017aa8:	f003 fb34 	bl	801b114 <trace_printf>
 8017aac:	e7fe      	b.n	8017aac <dhcp_parse_reply+0x344>
        decode_idx = DHCP_OPTION_IDX_T1;
 8017aae:	2304      	movs	r3, #4
 8017ab0:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8017ab2:	e015      	b.n	8017ae0 <dhcp_parse_reply+0x378>
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8017ab4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8017ab8:	2b04      	cmp	r3, #4
 8017aba:	d00a      	beq.n	8017ad2 <dhcp_parse_reply+0x36a>
 8017abc:	f240 6261 	movw	r2, #1633	; 0x661
 8017ac0:	499c      	ldr	r1, [pc, #624]	; (8017d34 <dhcp_parse_reply+0x5cc>)
 8017ac2:	489d      	ldr	r0, [pc, #628]	; (8017d38 <dhcp_parse_reply+0x5d0>)
 8017ac4:	f003 fb26 	bl	801b114 <trace_printf>
 8017ac8:	499c      	ldr	r1, [pc, #624]	; (8017d3c <dhcp_parse_reply+0x5d4>)
 8017aca:	489d      	ldr	r0, [pc, #628]	; (8017d40 <dhcp_parse_reply+0x5d8>)
 8017acc:	f003 fb22 	bl	801b114 <trace_printf>
 8017ad0:	e7fe      	b.n	8017ad0 <dhcp_parse_reply+0x368>
        decode_idx = DHCP_OPTION_IDX_T2;
 8017ad2:	2305      	movs	r3, #5
 8017ad4:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8017ad6:	e003      	b.n	8017ae0 <dhcp_parse_reply+0x378>
      default:
        decode_len = 0;
 8017ad8:	2300      	movs	r3, #0
 8017ada:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 8017ade:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 8017ae0:	7efb      	ldrb	r3, [r7, #27]
 8017ae2:	2b00      	cmp	r3, #0
 8017ae4:	d105      	bne.n	8017af2 <dhcp_parse_reply+0x38a>
      offset++;
 8017ae6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8017aea:	3301      	adds	r3, #1
 8017aec:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8017af0:	e0aa      	b.n	8017c48 <dhcp_parse_reply+0x4e0>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 8017af2:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8017af6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8017afa:	4413      	add	r3, r2
 8017afc:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 8017b00:	4293      	cmp	r3, r2
 8017b02:	dd02      	ble.n	8017b0a <dhcp_parse_reply+0x3a2>
        /* overflow */
        return ERR_BUF;
 8017b04:	f06f 0301 	mvn.w	r3, #1
 8017b08:	e10f      	b.n	8017d2a <dhcp_parse_reply+0x5c2>
      }
      offset = (u16_t)(offset + len + 2);
 8017b0a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8017b0e:	b29a      	uxth	r2, r3
 8017b10:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8017b14:	4413      	add	r3, r2
 8017b16:	b29b      	uxth	r3, r3
 8017b18:	3302      	adds	r3, #2
 8017b1a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      if (decode_len > 0) {
 8017b1e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8017b22:	2b00      	cmp	r3, #0
 8017b24:	f000 8090 	beq.w	8017c48 <dhcp_parse_reply+0x4e0>
        u32_t value = 0;
 8017b28:	2300      	movs	r3, #0
 8017b2a:	60fb      	str	r3, [r7, #12]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 8017b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017b2e:	2b00      	cmp	r3, #0
 8017b30:	db02      	blt.n	8017b38 <dhcp_parse_reply+0x3d0>
 8017b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017b34:	2b07      	cmp	r3, #7
 8017b36:	dd0a      	ble.n	8017b4e <dhcp_parse_reply+0x3e6>
 8017b38:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 8017b3c:	4981      	ldr	r1, [pc, #516]	; (8017d44 <dhcp_parse_reply+0x5dc>)
 8017b3e:	487e      	ldr	r0, [pc, #504]	; (8017d38 <dhcp_parse_reply+0x5d0>)
 8017b40:	f003 fae8 	bl	801b114 <trace_printf>
 8017b44:	497d      	ldr	r1, [pc, #500]	; (8017d3c <dhcp_parse_reply+0x5d4>)
 8017b46:	487e      	ldr	r0, [pc, #504]	; (8017d40 <dhcp_parse_reply+0x5d8>)
 8017b48:	f003 fae4 	bl	801b114 <trace_printf>
 8017b4c:	e7fe      	b.n	8017b4c <dhcp_parse_reply+0x3e4>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 8017b4e:	4a7e      	ldr	r2, [pc, #504]	; (8017d48 <dhcp_parse_reply+0x5e0>)
 8017b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017b52:	4413      	add	r3, r2
 8017b54:	781b      	ldrb	r3, [r3, #0]
 8017b56:	2b00      	cmp	r3, #0
 8017b58:	d176      	bne.n	8017c48 <dhcp_parse_reply+0x4e0>
          copy_len = LWIP_MIN(decode_len, 4);
 8017b5a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8017b5e:	2b04      	cmp	r3, #4
 8017b60:	bf28      	it	cs
 8017b62:	2304      	movcs	r3, #4
 8017b64:	b2db      	uxtb	r3, r3
 8017b66:	833b      	strh	r3, [r7, #24]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 8017b68:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017b6a:	8b3a      	ldrh	r2, [r7, #24]
 8017b6c:	f107 010c 	add.w	r1, r7, #12
 8017b70:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8017b72:	f7f7 f835 	bl	800ebe0 <pbuf_copy_partial>
 8017b76:	4603      	mov	r3, r0
 8017b78:	461a      	mov	r2, r3
 8017b7a:	8b3b      	ldrh	r3, [r7, #24]
 8017b7c:	4293      	cmp	r3, r2
 8017b7e:	d002      	beq.n	8017b86 <dhcp_parse_reply+0x41e>
            return ERR_BUF;
 8017b80:	f06f 0301 	mvn.w	r3, #1
 8017b84:	e0d1      	b.n	8017d2a <dhcp_parse_reply+0x5c2>
          }
          if (decode_len > 4) {
 8017b86:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8017b8a:	2b04      	cmp	r3, #4
 8017b8c:	d934      	bls.n	8017bf8 <dhcp_parse_reply+0x490>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 8017b8e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8017b92:	f003 0303 	and.w	r3, r3, #3
 8017b96:	b2db      	uxtb	r3, r3
 8017b98:	2b00      	cmp	r3, #0
 8017b9a:	d00a      	beq.n	8017bb2 <dhcp_parse_reply+0x44a>
 8017b9c:	f240 6281 	movw	r2, #1665	; 0x681
 8017ba0:	496a      	ldr	r1, [pc, #424]	; (8017d4c <dhcp_parse_reply+0x5e4>)
 8017ba2:	4865      	ldr	r0, [pc, #404]	; (8017d38 <dhcp_parse_reply+0x5d0>)
 8017ba4:	f003 fab6 	bl	801b114 <trace_printf>
 8017ba8:	4964      	ldr	r1, [pc, #400]	; (8017d3c <dhcp_parse_reply+0x5d4>)
 8017baa:	4865      	ldr	r0, [pc, #404]	; (8017d40 <dhcp_parse_reply+0x5d8>)
 8017bac:	f003 fab2 	bl	801b114 <trace_printf>
 8017bb0:	e7fe      	b.n	8017bb0 <dhcp_parse_reply+0x448>
            dhcp_got_option(dhcp, decode_idx);
 8017bb2:	4a65      	ldr	r2, [pc, #404]	; (8017d48 <dhcp_parse_reply+0x5e0>)
 8017bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017bb6:	4413      	add	r3, r2
 8017bb8:	2201      	movs	r2, #1
 8017bba:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 8017bbc:	68fb      	ldr	r3, [r7, #12]
 8017bbe:	4618      	mov	r0, r3
 8017bc0:	f7f5 f8d5 	bl	800cd6e <lwip_htonl>
 8017bc4:	4602      	mov	r2, r0
 8017bc6:	4962      	ldr	r1, [pc, #392]	; (8017d50 <dhcp_parse_reply+0x5e8>)
 8017bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017bca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 8017bce:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8017bd2:	3b04      	subs	r3, #4
 8017bd4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
            next_val_offset = (u16_t)(val_offset + 4);
 8017bd8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017bda:	3304      	adds	r3, #4
 8017bdc:	82fb      	strh	r3, [r7, #22]
            if (next_val_offset < val_offset) {
 8017bde:	8afa      	ldrh	r2, [r7, #22]
 8017be0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017be2:	429a      	cmp	r2, r3
 8017be4:	d202      	bcs.n	8017bec <dhcp_parse_reply+0x484>
              /* overflow */
              return ERR_BUF;
 8017be6:	f06f 0301 	mvn.w	r3, #1
 8017bea:	e09e      	b.n	8017d2a <dhcp_parse_reply+0x5c2>
            }
            val_offset = next_val_offset;
 8017bec:	8afb      	ldrh	r3, [r7, #22]
 8017bee:	847b      	strh	r3, [r7, #34]	; 0x22
            decode_idx++;
 8017bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017bf2:	3301      	adds	r3, #1
 8017bf4:	627b      	str	r3, [r7, #36]	; 0x24
            goto decode_next;
 8017bf6:	e799      	b.n	8017b2c <dhcp_parse_reply+0x3c4>
          } else if (decode_len == 4) {
 8017bf8:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8017bfc:	2b04      	cmp	r3, #4
 8017bfe:	d106      	bne.n	8017c0e <dhcp_parse_reply+0x4a6>
            value = lwip_ntohl(value);
 8017c00:	68fb      	ldr	r3, [r7, #12]
 8017c02:	4618      	mov	r0, r3
 8017c04:	f7f5 f8b3 	bl	800cd6e <lwip_htonl>
 8017c08:	4603      	mov	r3, r0
 8017c0a:	60fb      	str	r3, [r7, #12]
 8017c0c:	e012      	b.n	8017c34 <dhcp_parse_reply+0x4cc>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 8017c0e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8017c12:	2b01      	cmp	r3, #1
 8017c14:	d00a      	beq.n	8017c2c <dhcp_parse_reply+0x4c4>
 8017c16:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 8017c1a:	494e      	ldr	r1, [pc, #312]	; (8017d54 <dhcp_parse_reply+0x5ec>)
 8017c1c:	4846      	ldr	r0, [pc, #280]	; (8017d38 <dhcp_parse_reply+0x5d0>)
 8017c1e:	f003 fa79 	bl	801b114 <trace_printf>
 8017c22:	4946      	ldr	r1, [pc, #280]	; (8017d3c <dhcp_parse_reply+0x5d4>)
 8017c24:	4846      	ldr	r0, [pc, #280]	; (8017d40 <dhcp_parse_reply+0x5d8>)
 8017c26:	f003 fa75 	bl	801b114 <trace_printf>
 8017c2a:	e7fe      	b.n	8017c2a <dhcp_parse_reply+0x4c2>
            value = ((u8_t *)&value)[0];
 8017c2c:	f107 030c 	add.w	r3, r7, #12
 8017c30:	781b      	ldrb	r3, [r3, #0]
 8017c32:	60fb      	str	r3, [r7, #12]
          }
          dhcp_got_option(dhcp, decode_idx);
 8017c34:	4a44      	ldr	r2, [pc, #272]	; (8017d48 <dhcp_parse_reply+0x5e0>)
 8017c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017c38:	4413      	add	r3, r2
 8017c3a:	2201      	movs	r2, #1
 8017c3c:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 8017c3e:	68fa      	ldr	r2, [r7, #12]
 8017c40:	4943      	ldr	r1, [pc, #268]	; (8017d50 <dhcp_parse_reply+0x5e8>)
 8017c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017c44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 8017c48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017c4a:	895b      	ldrh	r3, [r3, #10]
 8017c4c:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8017c50:	429a      	cmp	r2, r3
 8017c52:	d328      	bcc.n	8017ca6 <dhcp_parse_reply+0x53e>
      offset = (u16_t)(offset - q->len);
 8017c54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017c56:	895b      	ldrh	r3, [r3, #10]
 8017c58:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8017c5c:	1ad3      	subs	r3, r2, r3
 8017c5e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      offset_max = (u16_t)(offset_max - q->len);
 8017c62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017c64:	895b      	ldrh	r3, [r3, #10]
 8017c66:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8017c68:	1ad3      	subs	r3, r2, r3
 8017c6a:	87fb      	strh	r3, [r7, #62]	; 0x3e
      if (offset < offset_max) {
 8017c6c:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8017c70:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8017c72:	429a      	cmp	r2, r3
 8017c74:	d214      	bcs.n	8017ca0 <dhcp_parse_reply+0x538>
        q = q->next;
 8017c76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017c78:	681b      	ldr	r3, [r3, #0]
 8017c7a:	637b      	str	r3, [r7, #52]	; 0x34
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 8017c7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017c7e:	2b00      	cmp	r3, #0
 8017c80:	d10a      	bne.n	8017c98 <dhcp_parse_reply+0x530>
 8017c82:	f240 629d 	movw	r2, #1693	; 0x69d
 8017c86:	4934      	ldr	r1, [pc, #208]	; (8017d58 <dhcp_parse_reply+0x5f0>)
 8017c88:	482b      	ldr	r0, [pc, #172]	; (8017d38 <dhcp_parse_reply+0x5d0>)
 8017c8a:	f003 fa43 	bl	801b114 <trace_printf>
 8017c8e:	492b      	ldr	r1, [pc, #172]	; (8017d3c <dhcp_parse_reply+0x5d4>)
 8017c90:	482b      	ldr	r0, [pc, #172]	; (8017d40 <dhcp_parse_reply+0x5d8>)
 8017c92:	f003 fa3f 	bl	801b114 <trace_printf>
 8017c96:	e7fe      	b.n	8017c96 <dhcp_parse_reply+0x52e>
        options = (u8_t *)q->payload;
 8017c98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017c9a:	685b      	ldr	r3, [r3, #4]
 8017c9c:	643b      	str	r3, [r7, #64]	; 0x40
 8017c9e:	e002      	b.n	8017ca6 <dhcp_parse_reply+0x53e>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 8017ca0:	f06f 0301 	mvn.w	r3, #1
 8017ca4:	e041      	b.n	8017d2a <dhcp_parse_reply+0x5c2>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8017ca6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017ca8:	2b00      	cmp	r3, #0
 8017caa:	d00c      	beq.n	8017cc6 <dhcp_parse_reply+0x55e>
 8017cac:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8017cb0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8017cb2:	429a      	cmp	r2, r3
 8017cb4:	d207      	bcs.n	8017cc6 <dhcp_parse_reply+0x55e>
 8017cb6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8017cba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8017cbc:	4413      	add	r3, r2
 8017cbe:	781b      	ldrb	r3, [r3, #0]
 8017cc0:	2bff      	cmp	r3, #255	; 0xff
 8017cc2:	f47f ad95 	bne.w	80177f0 <dhcp_parse_reply+0x88>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 8017cc6:	4b20      	ldr	r3, [pc, #128]	; (8017d48 <dhcp_parse_reply+0x5e0>)
 8017cc8:	781b      	ldrb	r3, [r3, #0]
 8017cca:	2b00      	cmp	r3, #0
 8017ccc:	d018      	beq.n	8017d00 <dhcp_parse_reply+0x598>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8017cce:	4b20      	ldr	r3, [pc, #128]	; (8017d50 <dhcp_parse_reply+0x5e8>)
 8017cd0:	681b      	ldr	r3, [r3, #0]
 8017cd2:	613b      	str	r3, [r7, #16]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8017cd4:	4b1c      	ldr	r3, [pc, #112]	; (8017d48 <dhcp_parse_reply+0x5e0>)
 8017cd6:	2200      	movs	r2, #0
 8017cd8:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 8017cda:	693b      	ldr	r3, [r7, #16]
 8017cdc:	2b01      	cmp	r3, #1
 8017cde:	d102      	bne.n	8017ce6 <dhcp_parse_reply+0x57e>
      parse_file_as_options = 1;
 8017ce0:	2301      	movs	r3, #1
 8017ce2:	633b      	str	r3, [r7, #48]	; 0x30
 8017ce4:	e00c      	b.n	8017d00 <dhcp_parse_reply+0x598>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 8017ce6:	693b      	ldr	r3, [r7, #16]
 8017ce8:	2b02      	cmp	r3, #2
 8017cea:	d102      	bne.n	8017cf2 <dhcp_parse_reply+0x58a>
      parse_sname_as_options = 1;
 8017cec:	2301      	movs	r3, #1
 8017cee:	62fb      	str	r3, [r7, #44]	; 0x2c
 8017cf0:	e006      	b.n	8017d00 <dhcp_parse_reply+0x598>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 8017cf2:	693b      	ldr	r3, [r7, #16]
 8017cf4:	2b03      	cmp	r3, #3
 8017cf6:	d103      	bne.n	8017d00 <dhcp_parse_reply+0x598>
      parse_sname_as_options = 1;
 8017cf8:	2301      	movs	r3, #1
 8017cfa:	62fb      	str	r3, [r7, #44]	; 0x2c
      parse_file_as_options = 1;
 8017cfc:	2301      	movs	r3, #1
 8017cfe:	633b      	str	r3, [r7, #48]	; 0x30
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 8017d00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017d02:	2b00      	cmp	r3, #0
 8017d04:	d006      	beq.n	8017d14 <dhcp_parse_reply+0x5ac>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 8017d06:	2300      	movs	r3, #0
 8017d08:	633b      	str	r3, [r7, #48]	; 0x30
    options_idx = DHCP_FILE_OFS;
 8017d0a:	236c      	movs	r3, #108	; 0x6c
 8017d0c:	87bb      	strh	r3, [r7, #60]	; 0x3c
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 8017d0e:	23ec      	movs	r3, #236	; 0xec
 8017d10:	877b      	strh	r3, [r7, #58]	; 0x3a
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 8017d12:	e546      	b.n	80177a2 <dhcp_parse_reply+0x3a>
  } else if (parse_sname_as_options) {
 8017d14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017d16:	2b00      	cmp	r3, #0
 8017d18:	d006      	beq.n	8017d28 <dhcp_parse_reply+0x5c0>
    parse_sname_as_options = 0;
 8017d1a:	2300      	movs	r3, #0
 8017d1c:	62fb      	str	r3, [r7, #44]	; 0x2c
    options_idx = DHCP_SNAME_OFS;
 8017d1e:	232c      	movs	r3, #44	; 0x2c
 8017d20:	87bb      	strh	r3, [r7, #60]	; 0x3c
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 8017d22:	236c      	movs	r3, #108	; 0x6c
 8017d24:	877b      	strh	r3, [r7, #58]	; 0x3a
    goto again;
 8017d26:	e53c      	b.n	80177a2 <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 8017d28:	2300      	movs	r3, #0
}
 8017d2a:	4618      	mov	r0, r3
 8017d2c:	3748      	adds	r7, #72	; 0x48
 8017d2e:	46bd      	mov	sp, r7
 8017d30:	bd80      	pop	{r7, pc}
 8017d32:	bf00      	nop
 8017d34:	0801fdac 	.word	0x0801fdac
 8017d38:	0801fb50 	.word	0x0801fb50
 8017d3c:	0801fb70 	.word	0x0801fb70
 8017d40:	0801fba8 	.word	0x0801fba8
 8017d44:	0801fdf0 	.word	0x0801fdf0
 8017d48:	20010c9c 	.word	0x20010c9c
 8017d4c:	0801fe04 	.word	0x0801fe04
 8017d50:	20010ca4 	.word	0x20010ca4
 8017d54:	0801fe1c 	.word	0x0801fe1c
 8017d58:	0801fe30 	.word	0x0801fe30

08017d5c <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8017d5c:	b580      	push	{r7, lr}
 8017d5e:	b08a      	sub	sp, #40	; 0x28
 8017d60:	af00      	add	r7, sp, #0
 8017d62:	60f8      	str	r0, [r7, #12]
 8017d64:	60b9      	str	r1, [r7, #8]
 8017d66:	607a      	str	r2, [r7, #4]
 8017d68:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 8017d6a:	4b5e      	ldr	r3, [pc, #376]	; (8017ee4 <dhcp_recv+0x188>)
 8017d6c:	685b      	ldr	r3, [r3, #4]
 8017d6e:	61fb      	str	r3, [r7, #28]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8017d70:	69fb      	ldr	r3, [r7, #28]
 8017d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017d74:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 8017d76:	687b      	ldr	r3, [r7, #4]
 8017d78:	685b      	ldr	r3, [r3, #4]
 8017d7a:	617b      	str	r3, [r7, #20]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 8017d7c:	69bb      	ldr	r3, [r7, #24]
 8017d7e:	2b00      	cmp	r3, #0
 8017d80:	f000 809a 	beq.w	8017eb8 <dhcp_recv+0x15c>
 8017d84:	69bb      	ldr	r3, [r7, #24]
 8017d86:	791b      	ldrb	r3, [r3, #4]
 8017d88:	2b00      	cmp	r3, #0
 8017d8a:	f000 8095 	beq.w	8017eb8 <dhcp_recv+0x15c>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 8017d8e:	687b      	ldr	r3, [r7, #4]
 8017d90:	895b      	ldrh	r3, [r3, #10]
 8017d92:	2b2b      	cmp	r3, #43	; 0x2b
 8017d94:	f240 8092 	bls.w	8017ebc <dhcp_recv+0x160>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 8017d98:	697b      	ldr	r3, [r7, #20]
 8017d9a:	781b      	ldrb	r3, [r3, #0]
 8017d9c:	2b02      	cmp	r3, #2
 8017d9e:	f040 808f 	bne.w	8017ec0 <dhcp_recv+0x164>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8017da2:	2300      	movs	r3, #0
 8017da4:	74fb      	strb	r3, [r7, #19]
 8017da6:	e00e      	b.n	8017dc6 <dhcp_recv+0x6a>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 8017da8:	7cfb      	ldrb	r3, [r7, #19]
 8017daa:	69fa      	ldr	r2, [r7, #28]
 8017dac:	4413      	add	r3, r2
 8017dae:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 8017db2:	7cfb      	ldrb	r3, [r7, #19]
 8017db4:	6979      	ldr	r1, [r7, #20]
 8017db6:	440b      	add	r3, r1
 8017db8:	7f1b      	ldrb	r3, [r3, #28]
 8017dba:	429a      	cmp	r2, r3
 8017dbc:	f040 8082 	bne.w	8017ec4 <dhcp_recv+0x168>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8017dc0:	7cfb      	ldrb	r3, [r7, #19]
 8017dc2:	3301      	adds	r3, #1
 8017dc4:	74fb      	strb	r3, [r7, #19]
 8017dc6:	69fb      	ldr	r3, [r7, #28]
 8017dc8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8017dcc:	7cfa      	ldrb	r2, [r7, #19]
 8017dce:	429a      	cmp	r2, r3
 8017dd0:	d202      	bcs.n	8017dd8 <dhcp_recv+0x7c>
 8017dd2:	7cfb      	ldrb	r3, [r7, #19]
 8017dd4:	2b05      	cmp	r3, #5
 8017dd6:	d9e7      	bls.n	8017da8 <dhcp_recv+0x4c>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 8017dd8:	697b      	ldr	r3, [r7, #20]
 8017dda:	685b      	ldr	r3, [r3, #4]
 8017ddc:	4618      	mov	r0, r3
 8017dde:	f7f4 ffc6 	bl	800cd6e <lwip_htonl>
 8017de2:	4602      	mov	r2, r0
 8017de4:	69bb      	ldr	r3, [r7, #24]
 8017de6:	681b      	ldr	r3, [r3, #0]
 8017de8:	429a      	cmp	r2, r3
 8017dea:	d16d      	bne.n	8017ec8 <dhcp_recv+0x16c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 8017dec:	69b9      	ldr	r1, [r7, #24]
 8017dee:	6878      	ldr	r0, [r7, #4]
 8017df0:	f7ff fcba 	bl	8017768 <dhcp_parse_reply>
 8017df4:	4603      	mov	r3, r0
 8017df6:	2b00      	cmp	r3, #0
 8017df8:	d168      	bne.n	8017ecc <dhcp_recv+0x170>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 8017dfa:	4b3b      	ldr	r3, [pc, #236]	; (8017ee8 <dhcp_recv+0x18c>)
 8017dfc:	785b      	ldrb	r3, [r3, #1]
 8017dfe:	2b00      	cmp	r3, #0
 8017e00:	d066      	beq.n	8017ed0 <dhcp_recv+0x174>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 8017e02:	687b      	ldr	r3, [r7, #4]
 8017e04:	685b      	ldr	r3, [r3, #4]
 8017e06:	627b      	str	r3, [r7, #36]	; 0x24
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 8017e08:	4b38      	ldr	r3, [pc, #224]	; (8017eec <dhcp_recv+0x190>)
 8017e0a:	685b      	ldr	r3, [r3, #4]
 8017e0c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 8017e10:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8017e14:	2b05      	cmp	r3, #5
 8017e16:	d12a      	bne.n	8017e6e <dhcp_recv+0x112>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 8017e18:	69bb      	ldr	r3, [r7, #24]
 8017e1a:	795b      	ldrb	r3, [r3, #5]
 8017e1c:	2b01      	cmp	r3, #1
 8017e1e:	d112      	bne.n	8017e46 <dhcp_recv+0xea>
      dhcp_handle_ack(netif, msg_in);
 8017e20:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8017e22:	69f8      	ldr	r0, [r7, #28]
 8017e24:	f7fe fdc6 	bl	80169b4 <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 8017e28:	69fb      	ldr	r3, [r7, #28]
 8017e2a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8017e2e:	f003 0308 	and.w	r3, r3, #8
 8017e32:	2b00      	cmp	r3, #0
 8017e34:	d003      	beq.n	8017e3e <dhcp_recv+0xe2>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 8017e36:	69f8      	ldr	r0, [r7, #28]
 8017e38:	f7fe fb32 	bl	80164a0 <dhcp_check>
 8017e3c:	e04b      	b.n	8017ed6 <dhcp_recv+0x17a>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 8017e3e:	69f8      	ldr	r0, [r7, #28]
 8017e40:	f7ff f826 	bl	8016e90 <dhcp_bind>
 8017e44:	e047      	b.n	8017ed6 <dhcp_recv+0x17a>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8017e46:	69bb      	ldr	r3, [r7, #24]
 8017e48:	795b      	ldrb	r3, [r3, #5]
 8017e4a:	2b03      	cmp	r3, #3
 8017e4c:	d007      	beq.n	8017e5e <dhcp_recv+0x102>
 8017e4e:	69bb      	ldr	r3, [r7, #24]
 8017e50:	795b      	ldrb	r3, [r3, #5]
 8017e52:	2b04      	cmp	r3, #4
 8017e54:	d003      	beq.n	8017e5e <dhcp_recv+0x102>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 8017e56:	69bb      	ldr	r3, [r7, #24]
 8017e58:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8017e5a:	2b05      	cmp	r3, #5
 8017e5c:	d13b      	bne.n	8017ed6 <dhcp_recv+0x17a>
      dhcp_handle_ack(netif, msg_in);
 8017e5e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8017e60:	69f8      	ldr	r0, [r7, #28]
 8017e62:	f7fe fda7 	bl	80169b4 <dhcp_handle_ack>
      dhcp_bind(netif);
 8017e66:	69f8      	ldr	r0, [r7, #28]
 8017e68:	f7ff f812 	bl	8016e90 <dhcp_bind>
 8017e6c:	e033      	b.n	8017ed6 <dhcp_recv+0x17a>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 8017e6e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8017e72:	2b06      	cmp	r3, #6
 8017e74:	d113      	bne.n	8017e9e <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8017e76:	69bb      	ldr	r3, [r7, #24]
 8017e78:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 8017e7a:	2b03      	cmp	r3, #3
 8017e7c:	d00b      	beq.n	8017e96 <dhcp_recv+0x13a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8017e7e:	69bb      	ldr	r3, [r7, #24]
 8017e80:	795b      	ldrb	r3, [r3, #5]
 8017e82:	2b01      	cmp	r3, #1
 8017e84:	d007      	beq.n	8017e96 <dhcp_recv+0x13a>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 8017e86:	69bb      	ldr	r3, [r7, #24]
 8017e88:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8017e8a:	2b04      	cmp	r3, #4
 8017e8c:	d003      	beq.n	8017e96 <dhcp_recv+0x13a>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 8017e8e:	69bb      	ldr	r3, [r7, #24]
 8017e90:	795b      	ldrb	r3, [r3, #5]
 8017e92:	2b05      	cmp	r3, #5
 8017e94:	d103      	bne.n	8017e9e <dhcp_recv+0x142>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 8017e96:	69f8      	ldr	r0, [r7, #28]
 8017e98:	f7fe fae8 	bl	801646c <dhcp_handle_nak>
 8017e9c:	e01b      	b.n	8017ed6 <dhcp_recv+0x17a>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 8017e9e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8017ea2:	2b02      	cmp	r3, #2
 8017ea4:	d116      	bne.n	8017ed4 <dhcp_recv+0x178>
 8017ea6:	69bb      	ldr	r3, [r7, #24]
 8017ea8:	795b      	ldrb	r3, [r3, #5]
 8017eaa:	2b06      	cmp	r3, #6
 8017eac:	d112      	bne.n	8017ed4 <dhcp_recv+0x178>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 8017eae:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8017eb0:	69f8      	ldr	r0, [r7, #28]
 8017eb2:	f7fe fb29 	bl	8016508 <dhcp_handle_offer>
 8017eb6:	e00e      	b.n	8017ed6 <dhcp_recv+0x17a>
    goto free_pbuf_and_return;
 8017eb8:	bf00      	nop
 8017eba:	e00c      	b.n	8017ed6 <dhcp_recv+0x17a>
    goto free_pbuf_and_return;
 8017ebc:	bf00      	nop
 8017ebe:	e00a      	b.n	8017ed6 <dhcp_recv+0x17a>
    goto free_pbuf_and_return;
 8017ec0:	bf00      	nop
 8017ec2:	e008      	b.n	8017ed6 <dhcp_recv+0x17a>
      goto free_pbuf_and_return;
 8017ec4:	bf00      	nop
 8017ec6:	e006      	b.n	8017ed6 <dhcp_recv+0x17a>
    goto free_pbuf_and_return;
 8017ec8:	bf00      	nop
 8017eca:	e004      	b.n	8017ed6 <dhcp_recv+0x17a>
    goto free_pbuf_and_return;
 8017ecc:	bf00      	nop
 8017ece:	e002      	b.n	8017ed6 <dhcp_recv+0x17a>
    goto free_pbuf_and_return;
 8017ed0:	bf00      	nop
 8017ed2:	e000      	b.n	8017ed6 <dhcp_recv+0x17a>
  }

free_pbuf_and_return:
 8017ed4:	bf00      	nop
  pbuf_free(p);
 8017ed6:	6878      	ldr	r0, [r7, #4]
 8017ed8:	f7f6 fc4a 	bl	800e770 <pbuf_free>
}
 8017edc:	bf00      	nop
 8017ede:	3728      	adds	r7, #40	; 0x28
 8017ee0:	46bd      	mov	sp, r7
 8017ee2:	bd80      	pop	{r7, pc}
 8017ee4:	2000d40c 	.word	0x2000d40c
 8017ee8:	20010c9c 	.word	0x20010c9c
 8017eec:	20010ca4 	.word	0x20010ca4

08017ef0 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 8017ef0:	b580      	push	{r7, lr}
 8017ef2:	b088      	sub	sp, #32
 8017ef4:	af00      	add	r7, sp, #0
 8017ef6:	60f8      	str	r0, [r7, #12]
 8017ef8:	60b9      	str	r1, [r7, #8]
 8017efa:	603b      	str	r3, [r7, #0]
 8017efc:	4613      	mov	r3, r2
 8017efe:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 8017f00:	68fb      	ldr	r3, [r7, #12]
 8017f02:	2b00      	cmp	r3, #0
 8017f04:	d10a      	bne.n	8017f1c <dhcp_create_msg+0x2c>
 8017f06:	f240 7269 	movw	r2, #1897	; 0x769
 8017f0a:	4962      	ldr	r1, [pc, #392]	; (8018094 <dhcp_create_msg+0x1a4>)
 8017f0c:	4862      	ldr	r0, [pc, #392]	; (8018098 <dhcp_create_msg+0x1a8>)
 8017f0e:	f003 f901 	bl	801b114 <trace_printf>
 8017f12:	4962      	ldr	r1, [pc, #392]	; (801809c <dhcp_create_msg+0x1ac>)
 8017f14:	4862      	ldr	r0, [pc, #392]	; (80180a0 <dhcp_create_msg+0x1b0>)
 8017f16:	f003 f8fd 	bl	801b114 <trace_printf>
 8017f1a:	e7fe      	b.n	8017f1a <dhcp_create_msg+0x2a>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 8017f1c:	68bb      	ldr	r3, [r7, #8]
 8017f1e:	2b00      	cmp	r3, #0
 8017f20:	d10a      	bne.n	8017f38 <dhcp_create_msg+0x48>
 8017f22:	f240 726a 	movw	r2, #1898	; 0x76a
 8017f26:	495f      	ldr	r1, [pc, #380]	; (80180a4 <dhcp_create_msg+0x1b4>)
 8017f28:	485b      	ldr	r0, [pc, #364]	; (8018098 <dhcp_create_msg+0x1a8>)
 8017f2a:	f003 f8f3 	bl	801b114 <trace_printf>
 8017f2e:	495b      	ldr	r1, [pc, #364]	; (801809c <dhcp_create_msg+0x1ac>)
 8017f30:	485b      	ldr	r0, [pc, #364]	; (80180a0 <dhcp_create_msg+0x1b0>)
 8017f32:	f003 f8ef 	bl	801b114 <trace_printf>
 8017f36:	e7fe      	b.n	8017f36 <dhcp_create_msg+0x46>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 8017f38:	f44f 7220 	mov.w	r2, #640	; 0x280
 8017f3c:	f44f 719a 	mov.w	r1, #308	; 0x134
 8017f40:	2036      	movs	r0, #54	; 0x36
 8017f42:	f7f6 f8ff 	bl	800e144 <pbuf_alloc>
 8017f46:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 8017f48:	69bb      	ldr	r3, [r7, #24]
 8017f4a:	2b00      	cmp	r3, #0
 8017f4c:	d101      	bne.n	8017f52 <dhcp_create_msg+0x62>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 8017f4e:	2300      	movs	r3, #0
 8017f50:	e09c      	b.n	801808c <dhcp_create_msg+0x19c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 8017f52:	69bb      	ldr	r3, [r7, #24]
 8017f54:	895b      	ldrh	r3, [r3, #10]
 8017f56:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 8017f5a:	d20a      	bcs.n	8017f72 <dhcp_create_msg+0x82>
 8017f5c:	f240 7271 	movw	r2, #1905	; 0x771
 8017f60:	4951      	ldr	r1, [pc, #324]	; (80180a8 <dhcp_create_msg+0x1b8>)
 8017f62:	484d      	ldr	r0, [pc, #308]	; (8018098 <dhcp_create_msg+0x1a8>)
 8017f64:	f003 f8d6 	bl	801b114 <trace_printf>
 8017f68:	494c      	ldr	r1, [pc, #304]	; (801809c <dhcp_create_msg+0x1ac>)
 8017f6a:	484d      	ldr	r0, [pc, #308]	; (80180a0 <dhcp_create_msg+0x1b0>)
 8017f6c:	f003 f8d2 	bl	801b114 <trace_printf>
 8017f70:	e7fe      	b.n	8017f70 <dhcp_create_msg+0x80>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 8017f72:	79fb      	ldrb	r3, [r7, #7]
 8017f74:	2b03      	cmp	r3, #3
 8017f76:	d103      	bne.n	8017f80 <dhcp_create_msg+0x90>
 8017f78:	68bb      	ldr	r3, [r7, #8]
 8017f7a:	795b      	ldrb	r3, [r3, #5]
 8017f7c:	2b03      	cmp	r3, #3
 8017f7e:	d10d      	bne.n	8017f9c <dhcp_create_msg+0xac>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 8017f80:	68bb      	ldr	r3, [r7, #8]
 8017f82:	799b      	ldrb	r3, [r3, #6]
 8017f84:	2b00      	cmp	r3, #0
 8017f86:	d105      	bne.n	8017f94 <dhcp_create_msg+0xa4>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 8017f88:	f003 f948 	bl	801b21c <rand>
 8017f8c:	4603      	mov	r3, r0
 8017f8e:	461a      	mov	r2, r3
 8017f90:	4b46      	ldr	r3, [pc, #280]	; (80180ac <dhcp_create_msg+0x1bc>)
 8017f92:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 8017f94:	4b45      	ldr	r3, [pc, #276]	; (80180ac <dhcp_create_msg+0x1bc>)
 8017f96:	681a      	ldr	r2, [r3, #0]
 8017f98:	68bb      	ldr	r3, [r7, #8]
 8017f9a:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 8017f9c:	69bb      	ldr	r3, [r7, #24]
 8017f9e:	685b      	ldr	r3, [r3, #4]
 8017fa0:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 8017fa2:	f44f 729a 	mov.w	r2, #308	; 0x134
 8017fa6:	2100      	movs	r1, #0
 8017fa8:	6978      	ldr	r0, [r7, #20]
 8017faa:	f003 f92f 	bl	801b20c <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 8017fae:	697b      	ldr	r3, [r7, #20]
 8017fb0:	2201      	movs	r2, #1
 8017fb2:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 8017fb4:	697b      	ldr	r3, [r7, #20]
 8017fb6:	2201      	movs	r2, #1
 8017fb8:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 8017fba:	68fb      	ldr	r3, [r7, #12]
 8017fbc:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8017fc0:	697b      	ldr	r3, [r7, #20]
 8017fc2:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 8017fc4:	68bb      	ldr	r3, [r7, #8]
 8017fc6:	681b      	ldr	r3, [r3, #0]
 8017fc8:	4618      	mov	r0, r3
 8017fca:	f7f4 fed0 	bl	800cd6e <lwip_htonl>
 8017fce:	4602      	mov	r2, r0
 8017fd0:	697b      	ldr	r3, [r7, #20]
 8017fd2:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 8017fd4:	79fb      	ldrb	r3, [r7, #7]
 8017fd6:	2b08      	cmp	r3, #8
 8017fd8:	d010      	beq.n	8017ffc <dhcp_create_msg+0x10c>
 8017fda:	79fb      	ldrb	r3, [r7, #7]
 8017fdc:	2b04      	cmp	r3, #4
 8017fde:	d00d      	beq.n	8017ffc <dhcp_create_msg+0x10c>
 8017fe0:	79fb      	ldrb	r3, [r7, #7]
 8017fe2:	2b07      	cmp	r3, #7
 8017fe4:	d00a      	beq.n	8017ffc <dhcp_create_msg+0x10c>
 8017fe6:	79fb      	ldrb	r3, [r7, #7]
 8017fe8:	2b03      	cmp	r3, #3
 8017fea:	d10c      	bne.n	8018006 <dhcp_create_msg+0x116>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8017fec:	68bb      	ldr	r3, [r7, #8]
 8017fee:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 8017ff0:	2b05      	cmp	r3, #5
 8017ff2:	d003      	beq.n	8017ffc <dhcp_create_msg+0x10c>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8017ff4:	68bb      	ldr	r3, [r7, #8]
 8017ff6:	795b      	ldrb	r3, [r3, #5]
 8017ff8:	2b04      	cmp	r3, #4
 8017ffa:	d104      	bne.n	8018006 <dhcp_create_msg+0x116>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 8017ffc:	68fb      	ldr	r3, [r7, #12]
 8017ffe:	3304      	adds	r3, #4
 8018000:	681a      	ldr	r2, [r3, #0]
 8018002:	697b      	ldr	r3, [r7, #20]
 8018004:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8018006:	2300      	movs	r3, #0
 8018008:	83fb      	strh	r3, [r7, #30]
 801800a:	e00c      	b.n	8018026 <dhcp_create_msg+0x136>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 801800c:	8bfa      	ldrh	r2, [r7, #30]
 801800e:	8bfb      	ldrh	r3, [r7, #30]
 8018010:	68f9      	ldr	r1, [r7, #12]
 8018012:	440a      	add	r2, r1
 8018014:	f892 102a 	ldrb.w	r1, [r2, #42]	; 0x2a
 8018018:	697a      	ldr	r2, [r7, #20]
 801801a:	4413      	add	r3, r2
 801801c:	460a      	mov	r2, r1
 801801e:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8018020:	8bfb      	ldrh	r3, [r7, #30]
 8018022:	3301      	adds	r3, #1
 8018024:	83fb      	strh	r3, [r7, #30]
 8018026:	8bfb      	ldrh	r3, [r7, #30]
 8018028:	2b05      	cmp	r3, #5
 801802a:	d9ef      	bls.n	801800c <dhcp_create_msg+0x11c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 801802c:	697b      	ldr	r3, [r7, #20]
 801802e:	2200      	movs	r2, #0
 8018030:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 8018034:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 8018038:	2200      	movs	r2, #0
 801803a:	f062 027d 	orn	r2, r2, #125	; 0x7d
 801803e:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 8018042:	2200      	movs	r2, #0
 8018044:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 8018048:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 801804c:	2200      	movs	r2, #0
 801804e:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 8018052:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 8018056:	697b      	ldr	r3, [r7, #20]
 8018058:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801805c:	2301      	movs	r3, #1
 801805e:	2235      	movs	r2, #53	; 0x35
 8018060:	2000      	movs	r0, #0
 8018062:	f7ff fa99 	bl	8017598 <dhcp_option>
 8018066:	4603      	mov	r3, r0
 8018068:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 801806a:	697b      	ldr	r3, [r7, #20]
 801806c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8018070:	79fa      	ldrb	r2, [r7, #7]
 8018072:	8a7b      	ldrh	r3, [r7, #18]
 8018074:	4618      	mov	r0, r3
 8018076:	f7ff fac9 	bl	801760c <dhcp_option_byte>
 801807a:	4603      	mov	r3, r0
 801807c:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 801807e:	683b      	ldr	r3, [r7, #0]
 8018080:	2b00      	cmp	r3, #0
 8018082:	d002      	beq.n	801808a <dhcp_create_msg+0x19a>
    *options_out_len = options_out_len_loc;
 8018084:	683b      	ldr	r3, [r7, #0]
 8018086:	8a7a      	ldrh	r2, [r7, #18]
 8018088:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 801808a:	69bb      	ldr	r3, [r7, #24]
}
 801808c:	4618      	mov	r0, r3
 801808e:	3720      	adds	r7, #32
 8018090:	46bd      	mov	sp, r7
 8018092:	bd80      	pop	{r7, pc}
 8018094:	0801fe44 	.word	0x0801fe44
 8018098:	0801fb50 	.word	0x0801fb50
 801809c:	0801fb70 	.word	0x0801fb70
 80180a0:	0801fba8 	.word	0x0801fba8
 80180a4:	0801fe64 	.word	0x0801fe64
 80180a8:	0801fe84 	.word	0x0801fe84
 80180ac:	20009fdc 	.word	0x20009fdc

080180b0 <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 80180b0:	b580      	push	{r7, lr}
 80180b2:	b084      	sub	sp, #16
 80180b4:	af00      	add	r7, sp, #0
 80180b6:	4603      	mov	r3, r0
 80180b8:	60b9      	str	r1, [r7, #8]
 80180ba:	607a      	str	r2, [r7, #4]
 80180bc:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 80180be:	89fb      	ldrh	r3, [r7, #14]
 80180c0:	1c5a      	adds	r2, r3, #1
 80180c2:	81fa      	strh	r2, [r7, #14]
 80180c4:	461a      	mov	r2, r3
 80180c6:	68bb      	ldr	r3, [r7, #8]
 80180c8:	4413      	add	r3, r2
 80180ca:	22ff      	movs	r2, #255	; 0xff
 80180cc:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 80180ce:	e007      	b.n	80180e0 <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 80180d0:	89fb      	ldrh	r3, [r7, #14]
 80180d2:	1c5a      	adds	r2, r3, #1
 80180d4:	81fa      	strh	r2, [r7, #14]
 80180d6:	461a      	mov	r2, r3
 80180d8:	68bb      	ldr	r3, [r7, #8]
 80180da:	4413      	add	r3, r2
 80180dc:	2200      	movs	r2, #0
 80180de:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 80180e0:	89fb      	ldrh	r3, [r7, #14]
 80180e2:	2b43      	cmp	r3, #67	; 0x43
 80180e4:	d904      	bls.n	80180f0 <dhcp_option_trailer+0x40>
 80180e6:	89fb      	ldrh	r3, [r7, #14]
 80180e8:	f003 0303 	and.w	r3, r3, #3
 80180ec:	2b00      	cmp	r3, #0
 80180ee:	d002      	beq.n	80180f6 <dhcp_option_trailer+0x46>
 80180f0:	89fb      	ldrh	r3, [r7, #14]
 80180f2:	2b43      	cmp	r3, #67	; 0x43
 80180f4:	d9ec      	bls.n	80180d0 <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 80180f6:	89fb      	ldrh	r3, [r7, #14]
 80180f8:	33f0      	adds	r3, #240	; 0xf0
 80180fa:	b29b      	uxth	r3, r3
 80180fc:	4619      	mov	r1, r3
 80180fe:	6878      	ldr	r0, [r7, #4]
 8018100:	f7f6 f994 	bl	800e42c <pbuf_realloc>
}
 8018104:	bf00      	nop
 8018106:	3710      	adds	r7, #16
 8018108:	46bd      	mov	sp, r7
 801810a:	bd80      	pop	{r7, pc}

0801810c <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 801810c:	b480      	push	{r7}
 801810e:	b085      	sub	sp, #20
 8018110:	af00      	add	r7, sp, #0
 8018112:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 8018114:	687b      	ldr	r3, [r7, #4]
 8018116:	2b00      	cmp	r3, #0
 8018118:	d017      	beq.n	801814a <dhcp_supplied_address+0x3e>
 801811a:	687b      	ldr	r3, [r7, #4]
 801811c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801811e:	2b00      	cmp	r3, #0
 8018120:	d013      	beq.n	801814a <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8018122:	687b      	ldr	r3, [r7, #4]
 8018124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018126:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8018128:	68fb      	ldr	r3, [r7, #12]
 801812a:	795b      	ldrb	r3, [r3, #5]
 801812c:	2b0a      	cmp	r3, #10
 801812e:	d007      	beq.n	8018140 <dhcp_supplied_address+0x34>
 8018130:	68fb      	ldr	r3, [r7, #12]
 8018132:	795b      	ldrb	r3, [r3, #5]
 8018134:	2b05      	cmp	r3, #5
 8018136:	d003      	beq.n	8018140 <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 8018138:	68fb      	ldr	r3, [r7, #12]
 801813a:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 801813c:	2b04      	cmp	r3, #4
 801813e:	d101      	bne.n	8018144 <dhcp_supplied_address+0x38>
 8018140:	2301      	movs	r3, #1
 8018142:	e000      	b.n	8018146 <dhcp_supplied_address+0x3a>
 8018144:	2300      	movs	r3, #0
 8018146:	b2db      	uxtb	r3, r3
 8018148:	e000      	b.n	801814c <dhcp_supplied_address+0x40>
  }
  return 0;
 801814a:	2300      	movs	r3, #0
}
 801814c:	4618      	mov	r0, r3
 801814e:	3714      	adds	r7, #20
 8018150:	46bd      	mov	sp, r7
 8018152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018156:	4770      	bx	lr

08018158 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8018158:	b580      	push	{r7, lr}
 801815a:	b082      	sub	sp, #8
 801815c:	af00      	add	r7, sp, #0
 801815e:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8018160:	492b      	ldr	r1, [pc, #172]	; (8018210 <etharp_free_entry+0xb8>)
 8018162:	687a      	ldr	r2, [r7, #4]
 8018164:	4613      	mov	r3, r2
 8018166:	005b      	lsls	r3, r3, #1
 8018168:	4413      	add	r3, r2
 801816a:	00db      	lsls	r3, r3, #3
 801816c:	440b      	add	r3, r1
 801816e:	681b      	ldr	r3, [r3, #0]
 8018170:	2b00      	cmp	r3, #0
 8018172:	d013      	beq.n	801819c <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8018174:	4926      	ldr	r1, [pc, #152]	; (8018210 <etharp_free_entry+0xb8>)
 8018176:	687a      	ldr	r2, [r7, #4]
 8018178:	4613      	mov	r3, r2
 801817a:	005b      	lsls	r3, r3, #1
 801817c:	4413      	add	r3, r2
 801817e:	00db      	lsls	r3, r3, #3
 8018180:	440b      	add	r3, r1
 8018182:	681b      	ldr	r3, [r3, #0]
 8018184:	4618      	mov	r0, r3
 8018186:	f7f6 faf3 	bl	800e770 <pbuf_free>
    arp_table[i].q = NULL;
 801818a:	4921      	ldr	r1, [pc, #132]	; (8018210 <etharp_free_entry+0xb8>)
 801818c:	687a      	ldr	r2, [r7, #4]
 801818e:	4613      	mov	r3, r2
 8018190:	005b      	lsls	r3, r3, #1
 8018192:	4413      	add	r3, r2
 8018194:	00db      	lsls	r3, r3, #3
 8018196:	440b      	add	r3, r1
 8018198:	2200      	movs	r2, #0
 801819a:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 801819c:	491c      	ldr	r1, [pc, #112]	; (8018210 <etharp_free_entry+0xb8>)
 801819e:	687a      	ldr	r2, [r7, #4]
 80181a0:	4613      	mov	r3, r2
 80181a2:	005b      	lsls	r3, r3, #1
 80181a4:	4413      	add	r3, r2
 80181a6:	00db      	lsls	r3, r3, #3
 80181a8:	440b      	add	r3, r1
 80181aa:	3314      	adds	r3, #20
 80181ac:	2200      	movs	r2, #0
 80181ae:	701a      	strb	r2, [r3, #0]
#ifdef LWIP_DEBUG
  /* for debugging, clean out the complete entry */
  arp_table[i].ctime = 0;
 80181b0:	4917      	ldr	r1, [pc, #92]	; (8018210 <etharp_free_entry+0xb8>)
 80181b2:	687a      	ldr	r2, [r7, #4]
 80181b4:	4613      	mov	r3, r2
 80181b6:	005b      	lsls	r3, r3, #1
 80181b8:	4413      	add	r3, r2
 80181ba:	00db      	lsls	r3, r3, #3
 80181bc:	440b      	add	r3, r1
 80181be:	3312      	adds	r3, #18
 80181c0:	2200      	movs	r2, #0
 80181c2:	801a      	strh	r2, [r3, #0]
  arp_table[i].netif = NULL;
 80181c4:	4912      	ldr	r1, [pc, #72]	; (8018210 <etharp_free_entry+0xb8>)
 80181c6:	687a      	ldr	r2, [r7, #4]
 80181c8:	4613      	mov	r3, r2
 80181ca:	005b      	lsls	r3, r3, #1
 80181cc:	4413      	add	r3, r2
 80181ce:	00db      	lsls	r3, r3, #3
 80181d0:	440b      	add	r3, r1
 80181d2:	3308      	adds	r3, #8
 80181d4:	2200      	movs	r2, #0
 80181d6:	601a      	str	r2, [r3, #0]
  ip4_addr_set_zero(&arp_table[i].ipaddr);
 80181d8:	490d      	ldr	r1, [pc, #52]	; (8018210 <etharp_free_entry+0xb8>)
 80181da:	687a      	ldr	r2, [r7, #4]
 80181dc:	4613      	mov	r3, r2
 80181de:	005b      	lsls	r3, r3, #1
 80181e0:	4413      	add	r3, r2
 80181e2:	00db      	lsls	r3, r3, #3
 80181e4:	440b      	add	r3, r1
 80181e6:	3304      	adds	r3, #4
 80181e8:	2200      	movs	r2, #0
 80181ea:	601a      	str	r2, [r3, #0]
  arp_table[i].ethaddr = ethzero;
 80181ec:	4908      	ldr	r1, [pc, #32]	; (8018210 <etharp_free_entry+0xb8>)
 80181ee:	687a      	ldr	r2, [r7, #4]
 80181f0:	4613      	mov	r3, r2
 80181f2:	005b      	lsls	r3, r3, #1
 80181f4:	4413      	add	r3, r2
 80181f6:	00db      	lsls	r3, r3, #3
 80181f8:	440b      	add	r3, r1
 80181fa:	3308      	adds	r3, #8
 80181fc:	4a05      	ldr	r2, [pc, #20]	; (8018214 <etharp_free_entry+0xbc>)
 80181fe:	3304      	adds	r3, #4
 8018200:	6810      	ldr	r0, [r2, #0]
 8018202:	6018      	str	r0, [r3, #0]
 8018204:	8892      	ldrh	r2, [r2, #4]
 8018206:	809a      	strh	r2, [r3, #4]
#endif /* LWIP_DEBUG */
}
 8018208:	bf00      	nop
 801820a:	3708      	adds	r7, #8
 801820c:	46bd      	mov	sp, r7
 801820e:	bd80      	pop	{r7, pc}
 8018210:	20009fe0 	.word	0x20009fe0
 8018214:	08020728 	.word	0x08020728

08018218 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8018218:	b580      	push	{r7, lr}
 801821a:	b082      	sub	sp, #8
 801821c:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801821e:	2300      	movs	r3, #0
 8018220:	607b      	str	r3, [r7, #4]
 8018222:	e096      	b.n	8018352 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8018224:	494f      	ldr	r1, [pc, #316]	; (8018364 <etharp_tmr+0x14c>)
 8018226:	687a      	ldr	r2, [r7, #4]
 8018228:	4613      	mov	r3, r2
 801822a:	005b      	lsls	r3, r3, #1
 801822c:	4413      	add	r3, r2
 801822e:	00db      	lsls	r3, r3, #3
 8018230:	440b      	add	r3, r1
 8018232:	3314      	adds	r3, #20
 8018234:	781b      	ldrb	r3, [r3, #0]
 8018236:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8018238:	78fb      	ldrb	r3, [r7, #3]
 801823a:	2b00      	cmp	r3, #0
 801823c:	f000 8086 	beq.w	801834c <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8018240:	4948      	ldr	r1, [pc, #288]	; (8018364 <etharp_tmr+0x14c>)
 8018242:	687a      	ldr	r2, [r7, #4]
 8018244:	4613      	mov	r3, r2
 8018246:	005b      	lsls	r3, r3, #1
 8018248:	4413      	add	r3, r2
 801824a:	00db      	lsls	r3, r3, #3
 801824c:	440b      	add	r3, r1
 801824e:	3312      	adds	r3, #18
 8018250:	881b      	ldrh	r3, [r3, #0]
 8018252:	3301      	adds	r3, #1
 8018254:	b298      	uxth	r0, r3
 8018256:	4943      	ldr	r1, [pc, #268]	; (8018364 <etharp_tmr+0x14c>)
 8018258:	687a      	ldr	r2, [r7, #4]
 801825a:	4613      	mov	r3, r2
 801825c:	005b      	lsls	r3, r3, #1
 801825e:	4413      	add	r3, r2
 8018260:	00db      	lsls	r3, r3, #3
 8018262:	440b      	add	r3, r1
 8018264:	3312      	adds	r3, #18
 8018266:	4602      	mov	r2, r0
 8018268:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801826a:	493e      	ldr	r1, [pc, #248]	; (8018364 <etharp_tmr+0x14c>)
 801826c:	687a      	ldr	r2, [r7, #4]
 801826e:	4613      	mov	r3, r2
 8018270:	005b      	lsls	r3, r3, #1
 8018272:	4413      	add	r3, r2
 8018274:	00db      	lsls	r3, r3, #3
 8018276:	440b      	add	r3, r1
 8018278:	3312      	adds	r3, #18
 801827a:	881b      	ldrh	r3, [r3, #0]
 801827c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8018280:	d215      	bcs.n	80182ae <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8018282:	4938      	ldr	r1, [pc, #224]	; (8018364 <etharp_tmr+0x14c>)
 8018284:	687a      	ldr	r2, [r7, #4]
 8018286:	4613      	mov	r3, r2
 8018288:	005b      	lsls	r3, r3, #1
 801828a:	4413      	add	r3, r2
 801828c:	00db      	lsls	r3, r3, #3
 801828e:	440b      	add	r3, r1
 8018290:	3314      	adds	r3, #20
 8018292:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8018294:	2b01      	cmp	r3, #1
 8018296:	d10e      	bne.n	80182b6 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8018298:	4932      	ldr	r1, [pc, #200]	; (8018364 <etharp_tmr+0x14c>)
 801829a:	687a      	ldr	r2, [r7, #4]
 801829c:	4613      	mov	r3, r2
 801829e:	005b      	lsls	r3, r3, #1
 80182a0:	4413      	add	r3, r2
 80182a2:	00db      	lsls	r3, r3, #3
 80182a4:	440b      	add	r3, r1
 80182a6:	3312      	adds	r3, #18
 80182a8:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80182aa:	2b04      	cmp	r3, #4
 80182ac:	d903      	bls.n	80182b6 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 80182ae:	6878      	ldr	r0, [r7, #4]
 80182b0:	f7ff ff52 	bl	8018158 <etharp_free_entry>
 80182b4:	e04a      	b.n	801834c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 80182b6:	492b      	ldr	r1, [pc, #172]	; (8018364 <etharp_tmr+0x14c>)
 80182b8:	687a      	ldr	r2, [r7, #4]
 80182ba:	4613      	mov	r3, r2
 80182bc:	005b      	lsls	r3, r3, #1
 80182be:	4413      	add	r3, r2
 80182c0:	00db      	lsls	r3, r3, #3
 80182c2:	440b      	add	r3, r1
 80182c4:	3314      	adds	r3, #20
 80182c6:	781b      	ldrb	r3, [r3, #0]
 80182c8:	2b03      	cmp	r3, #3
 80182ca:	d10a      	bne.n	80182e2 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 80182cc:	4925      	ldr	r1, [pc, #148]	; (8018364 <etharp_tmr+0x14c>)
 80182ce:	687a      	ldr	r2, [r7, #4]
 80182d0:	4613      	mov	r3, r2
 80182d2:	005b      	lsls	r3, r3, #1
 80182d4:	4413      	add	r3, r2
 80182d6:	00db      	lsls	r3, r3, #3
 80182d8:	440b      	add	r3, r1
 80182da:	3314      	adds	r3, #20
 80182dc:	2204      	movs	r2, #4
 80182de:	701a      	strb	r2, [r3, #0]
 80182e0:	e034      	b.n	801834c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 80182e2:	4920      	ldr	r1, [pc, #128]	; (8018364 <etharp_tmr+0x14c>)
 80182e4:	687a      	ldr	r2, [r7, #4]
 80182e6:	4613      	mov	r3, r2
 80182e8:	005b      	lsls	r3, r3, #1
 80182ea:	4413      	add	r3, r2
 80182ec:	00db      	lsls	r3, r3, #3
 80182ee:	440b      	add	r3, r1
 80182f0:	3314      	adds	r3, #20
 80182f2:	781b      	ldrb	r3, [r3, #0]
 80182f4:	2b04      	cmp	r3, #4
 80182f6:	d10a      	bne.n	801830e <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 80182f8:	491a      	ldr	r1, [pc, #104]	; (8018364 <etharp_tmr+0x14c>)
 80182fa:	687a      	ldr	r2, [r7, #4]
 80182fc:	4613      	mov	r3, r2
 80182fe:	005b      	lsls	r3, r3, #1
 8018300:	4413      	add	r3, r2
 8018302:	00db      	lsls	r3, r3, #3
 8018304:	440b      	add	r3, r1
 8018306:	3314      	adds	r3, #20
 8018308:	2202      	movs	r2, #2
 801830a:	701a      	strb	r2, [r3, #0]
 801830c:	e01e      	b.n	801834c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801830e:	4915      	ldr	r1, [pc, #84]	; (8018364 <etharp_tmr+0x14c>)
 8018310:	687a      	ldr	r2, [r7, #4]
 8018312:	4613      	mov	r3, r2
 8018314:	005b      	lsls	r3, r3, #1
 8018316:	4413      	add	r3, r2
 8018318:	00db      	lsls	r3, r3, #3
 801831a:	440b      	add	r3, r1
 801831c:	3314      	adds	r3, #20
 801831e:	781b      	ldrb	r3, [r3, #0]
 8018320:	2b01      	cmp	r3, #1
 8018322:	d113      	bne.n	801834c <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8018324:	490f      	ldr	r1, [pc, #60]	; (8018364 <etharp_tmr+0x14c>)
 8018326:	687a      	ldr	r2, [r7, #4]
 8018328:	4613      	mov	r3, r2
 801832a:	005b      	lsls	r3, r3, #1
 801832c:	4413      	add	r3, r2
 801832e:	00db      	lsls	r3, r3, #3
 8018330:	440b      	add	r3, r1
 8018332:	3308      	adds	r3, #8
 8018334:	6818      	ldr	r0, [r3, #0]
 8018336:	687a      	ldr	r2, [r7, #4]
 8018338:	4613      	mov	r3, r2
 801833a:	005b      	lsls	r3, r3, #1
 801833c:	4413      	add	r3, r2
 801833e:	00db      	lsls	r3, r3, #3
 8018340:	4a08      	ldr	r2, [pc, #32]	; (8018364 <etharp_tmr+0x14c>)
 8018342:	4413      	add	r3, r2
 8018344:	3304      	adds	r3, #4
 8018346:	4619      	mov	r1, r3
 8018348:	f000 ff06 	bl	8019158 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801834c:	687b      	ldr	r3, [r7, #4]
 801834e:	3301      	adds	r3, #1
 8018350:	607b      	str	r3, [r7, #4]
 8018352:	687b      	ldr	r3, [r7, #4]
 8018354:	2b09      	cmp	r3, #9
 8018356:	f77f af65 	ble.w	8018224 <etharp_tmr+0xc>
      }
    }
  }
}
 801835a:	bf00      	nop
 801835c:	bf00      	nop
 801835e:	3708      	adds	r7, #8
 8018360:	46bd      	mov	sp, r7
 8018362:	bd80      	pop	{r7, pc}
 8018364:	20009fe0 	.word	0x20009fe0

08018368 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8018368:	b580      	push	{r7, lr}
 801836a:	b08a      	sub	sp, #40	; 0x28
 801836c:	af00      	add	r7, sp, #0
 801836e:	60f8      	str	r0, [r7, #12]
 8018370:	460b      	mov	r3, r1
 8018372:	607a      	str	r2, [r7, #4]
 8018374:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8018376:	230a      	movs	r3, #10
 8018378:	843b      	strh	r3, [r7, #32]
 801837a:	230a      	movs	r3, #10
 801837c:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t empty = ARP_TABLE_SIZE;
 801837e:	230a      	movs	r3, #10
 8018380:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t i = 0;
 8018382:	2300      	movs	r3, #0
 8018384:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8018386:	230a      	movs	r3, #10
 8018388:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801838a:	2300      	movs	r3, #0
 801838c:	83bb      	strh	r3, [r7, #28]
 801838e:	2300      	movs	r3, #0
 8018390:	837b      	strh	r3, [r7, #26]
 8018392:	2300      	movs	r3, #0
 8018394:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8018396:	2300      	movs	r3, #0
 8018398:	84fb      	strh	r3, [r7, #38]	; 0x26
 801839a:	e0b2      	b.n	8018502 <etharp_find_entry+0x19a>
    u8_t state = arp_table[i].state;
 801839c:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 80183a0:	49af      	ldr	r1, [pc, #700]	; (8018660 <etharp_find_entry+0x2f8>)
 80183a2:	4613      	mov	r3, r2
 80183a4:	005b      	lsls	r3, r3, #1
 80183a6:	4413      	add	r3, r2
 80183a8:	00db      	lsls	r3, r3, #3
 80183aa:	440b      	add	r3, r1
 80183ac:	3314      	adds	r3, #20
 80183ae:	781b      	ldrb	r3, [r3, #0]
 80183b0:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 80183b2:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80183b6:	2b0a      	cmp	r3, #10
 80183b8:	d105      	bne.n	80183c6 <etharp_find_entry+0x5e>
 80183ba:	7dfb      	ldrb	r3, [r7, #23]
 80183bc:	2b00      	cmp	r3, #0
 80183be:	d102      	bne.n	80183c6 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 80183c0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80183c2:	84bb      	strh	r3, [r7, #36]	; 0x24
 80183c4:	e099      	b.n	80184fa <etharp_find_entry+0x192>
    } else if (state != ETHARP_STATE_EMPTY) {
 80183c6:	7dfb      	ldrb	r3, [r7, #23]
 80183c8:	2b00      	cmp	r3, #0
 80183ca:	f000 8096 	beq.w	80184fa <etharp_find_entry+0x192>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 80183ce:	7dfb      	ldrb	r3, [r7, #23]
 80183d0:	2b01      	cmp	r3, #1
 80183d2:	d00d      	beq.n	80183f0 <etharp_find_entry+0x88>
 80183d4:	7dfb      	ldrb	r3, [r7, #23]
 80183d6:	2b01      	cmp	r3, #1
 80183d8:	d80a      	bhi.n	80183f0 <etharp_find_entry+0x88>
 80183da:	f240 1223 	movw	r2, #291	; 0x123
 80183de:	49a1      	ldr	r1, [pc, #644]	; (8018664 <etharp_find_entry+0x2fc>)
 80183e0:	48a1      	ldr	r0, [pc, #644]	; (8018668 <etharp_find_entry+0x300>)
 80183e2:	f002 fe97 	bl	801b114 <trace_printf>
 80183e6:	49a1      	ldr	r1, [pc, #644]	; (801866c <etharp_find_entry+0x304>)
 80183e8:	48a1      	ldr	r0, [pc, #644]	; (8018670 <etharp_find_entry+0x308>)
 80183ea:	f002 fe93 	bl	801b114 <trace_printf>
 80183ee:	e7fe      	b.n	80183ee <etharp_find_entry+0x86>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 80183f0:	68fb      	ldr	r3, [r7, #12]
 80183f2:	2b00      	cmp	r3, #0
 80183f4:	d020      	beq.n	8018438 <etharp_find_entry+0xd0>
 80183f6:	68fb      	ldr	r3, [r7, #12]
 80183f8:	6819      	ldr	r1, [r3, #0]
 80183fa:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 80183fe:	4898      	ldr	r0, [pc, #608]	; (8018660 <etharp_find_entry+0x2f8>)
 8018400:	4613      	mov	r3, r2
 8018402:	005b      	lsls	r3, r3, #1
 8018404:	4413      	add	r3, r2
 8018406:	00db      	lsls	r3, r3, #3
 8018408:	4403      	add	r3, r0
 801840a:	3304      	adds	r3, #4
 801840c:	681b      	ldr	r3, [r3, #0]
 801840e:	4299      	cmp	r1, r3
 8018410:	d112      	bne.n	8018438 <etharp_find_entry+0xd0>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8018412:	687b      	ldr	r3, [r7, #4]
 8018414:	2b00      	cmp	r3, #0
 8018416:	d00c      	beq.n	8018432 <etharp_find_entry+0xca>
 8018418:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 801841c:	4990      	ldr	r1, [pc, #576]	; (8018660 <etharp_find_entry+0x2f8>)
 801841e:	4613      	mov	r3, r2
 8018420:	005b      	lsls	r3, r3, #1
 8018422:	4413      	add	r3, r2
 8018424:	00db      	lsls	r3, r3, #3
 8018426:	440b      	add	r3, r1
 8018428:	3308      	adds	r3, #8
 801842a:	681b      	ldr	r3, [r3, #0]
 801842c:	687a      	ldr	r2, [r7, #4]
 801842e:	429a      	cmp	r2, r3
 8018430:	d102      	bne.n	8018438 <etharp_find_entry+0xd0>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8018432:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8018436:	e10f      	b.n	8018658 <etharp_find_entry+0x2f0>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8018438:	7dfb      	ldrb	r3, [r7, #23]
 801843a:	2b01      	cmp	r3, #1
 801843c:	d140      	bne.n	80184c0 <etharp_find_entry+0x158>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 801843e:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8018442:	4987      	ldr	r1, [pc, #540]	; (8018660 <etharp_find_entry+0x2f8>)
 8018444:	4613      	mov	r3, r2
 8018446:	005b      	lsls	r3, r3, #1
 8018448:	4413      	add	r3, r2
 801844a:	00db      	lsls	r3, r3, #3
 801844c:	440b      	add	r3, r1
 801844e:	681b      	ldr	r3, [r3, #0]
 8018450:	2b00      	cmp	r3, #0
 8018452:	d01a      	beq.n	801848a <etharp_find_entry+0x122>
          if (arp_table[i].ctime >= age_queue) {
 8018454:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8018458:	4981      	ldr	r1, [pc, #516]	; (8018660 <etharp_find_entry+0x2f8>)
 801845a:	4613      	mov	r3, r2
 801845c:	005b      	lsls	r3, r3, #1
 801845e:	4413      	add	r3, r2
 8018460:	00db      	lsls	r3, r3, #3
 8018462:	440b      	add	r3, r1
 8018464:	3312      	adds	r3, #18
 8018466:	881b      	ldrh	r3, [r3, #0]
 8018468:	8bba      	ldrh	r2, [r7, #28]
 801846a:	429a      	cmp	r2, r3
 801846c:	d845      	bhi.n	80184fa <etharp_find_entry+0x192>
            old_queue = i;
 801846e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8018470:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8018472:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8018476:	497a      	ldr	r1, [pc, #488]	; (8018660 <etharp_find_entry+0x2f8>)
 8018478:	4613      	mov	r3, r2
 801847a:	005b      	lsls	r3, r3, #1
 801847c:	4413      	add	r3, r2
 801847e:	00db      	lsls	r3, r3, #3
 8018480:	440b      	add	r3, r1
 8018482:	3312      	adds	r3, #18
 8018484:	881b      	ldrh	r3, [r3, #0]
 8018486:	83bb      	strh	r3, [r7, #28]
 8018488:	e037      	b.n	80184fa <etharp_find_entry+0x192>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 801848a:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 801848e:	4974      	ldr	r1, [pc, #464]	; (8018660 <etharp_find_entry+0x2f8>)
 8018490:	4613      	mov	r3, r2
 8018492:	005b      	lsls	r3, r3, #1
 8018494:	4413      	add	r3, r2
 8018496:	00db      	lsls	r3, r3, #3
 8018498:	440b      	add	r3, r1
 801849a:	3312      	adds	r3, #18
 801849c:	881b      	ldrh	r3, [r3, #0]
 801849e:	8b7a      	ldrh	r2, [r7, #26]
 80184a0:	429a      	cmp	r2, r3
 80184a2:	d82a      	bhi.n	80184fa <etharp_find_entry+0x192>
            old_pending = i;
 80184a4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80184a6:	843b      	strh	r3, [r7, #32]
            age_pending = arp_table[i].ctime;
 80184a8:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 80184ac:	496c      	ldr	r1, [pc, #432]	; (8018660 <etharp_find_entry+0x2f8>)
 80184ae:	4613      	mov	r3, r2
 80184b0:	005b      	lsls	r3, r3, #1
 80184b2:	4413      	add	r3, r2
 80184b4:	00db      	lsls	r3, r3, #3
 80184b6:	440b      	add	r3, r1
 80184b8:	3312      	adds	r3, #18
 80184ba:	881b      	ldrh	r3, [r3, #0]
 80184bc:	837b      	strh	r3, [r7, #26]
 80184be:	e01c      	b.n	80184fa <etharp_find_entry+0x192>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 80184c0:	7dfb      	ldrb	r3, [r7, #23]
 80184c2:	2b01      	cmp	r3, #1
 80184c4:	d919      	bls.n	80184fa <etharp_find_entry+0x192>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 80184c6:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 80184ca:	4965      	ldr	r1, [pc, #404]	; (8018660 <etharp_find_entry+0x2f8>)
 80184cc:	4613      	mov	r3, r2
 80184ce:	005b      	lsls	r3, r3, #1
 80184d0:	4413      	add	r3, r2
 80184d2:	00db      	lsls	r3, r3, #3
 80184d4:	440b      	add	r3, r1
 80184d6:	3312      	adds	r3, #18
 80184d8:	881b      	ldrh	r3, [r3, #0]
 80184da:	8b3a      	ldrh	r2, [r7, #24]
 80184dc:	429a      	cmp	r2, r3
 80184de:	d80c      	bhi.n	80184fa <etharp_find_entry+0x192>
            old_stable = i;
 80184e0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80184e2:	847b      	strh	r3, [r7, #34]	; 0x22
            age_stable = arp_table[i].ctime;
 80184e4:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 80184e8:	495d      	ldr	r1, [pc, #372]	; (8018660 <etharp_find_entry+0x2f8>)
 80184ea:	4613      	mov	r3, r2
 80184ec:	005b      	lsls	r3, r3, #1
 80184ee:	4413      	add	r3, r2
 80184f0:	00db      	lsls	r3, r3, #3
 80184f2:	440b      	add	r3, r1
 80184f4:	3312      	adds	r3, #18
 80184f6:	881b      	ldrh	r3, [r3, #0]
 80184f8:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80184fa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80184fc:	3301      	adds	r3, #1
 80184fe:	b29b      	uxth	r3, r3
 8018500:	84fb      	strh	r3, [r7, #38]	; 0x26
 8018502:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8018506:	2b09      	cmp	r3, #9
 8018508:	f77f af48 	ble.w	801839c <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 801850c:	7afb      	ldrb	r3, [r7, #11]
 801850e:	f003 0302 	and.w	r3, r3, #2
 8018512:	2b00      	cmp	r3, #0
 8018514:	d108      	bne.n	8018528 <etharp_find_entry+0x1c0>
 8018516:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 801851a:	2b0a      	cmp	r3, #10
 801851c:	d107      	bne.n	801852e <etharp_find_entry+0x1c6>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 801851e:	7afb      	ldrb	r3, [r7, #11]
 8018520:	f003 0301 	and.w	r3, r3, #1
 8018524:	2b00      	cmp	r3, #0
 8018526:	d102      	bne.n	801852e <etharp_find_entry+0x1c6>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8018528:	f04f 33ff 	mov.w	r3, #4294967295
 801852c:	e094      	b.n	8018658 <etharp_find_entry+0x2f0>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 801852e:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8018532:	2b09      	cmp	r3, #9
 8018534:	dc02      	bgt.n	801853c <etharp_find_entry+0x1d4>
    i = empty;
 8018536:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018538:	84fb      	strh	r3, [r7, #38]	; 0x26
 801853a:	e040      	b.n	80185be <etharp_find_entry+0x256>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 801853c:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8018540:	2b09      	cmp	r3, #9
 8018542:	dc17      	bgt.n	8018574 <etharp_find_entry+0x20c>
      /* recycle oldest stable*/
      i = old_stable;
 8018544:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8018546:	84fb      	strh	r3, [r7, #38]	; 0x26
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8018548:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 801854c:	4944      	ldr	r1, [pc, #272]	; (8018660 <etharp_find_entry+0x2f8>)
 801854e:	4613      	mov	r3, r2
 8018550:	005b      	lsls	r3, r3, #1
 8018552:	4413      	add	r3, r2
 8018554:	00db      	lsls	r3, r3, #3
 8018556:	440b      	add	r3, r1
 8018558:	681b      	ldr	r3, [r3, #0]
 801855a:	2b00      	cmp	r3, #0
 801855c:	d01b      	beq.n	8018596 <etharp_find_entry+0x22e>
 801855e:	f240 126d 	movw	r2, #365	; 0x16d
 8018562:	4944      	ldr	r1, [pc, #272]	; (8018674 <etharp_find_entry+0x30c>)
 8018564:	4840      	ldr	r0, [pc, #256]	; (8018668 <etharp_find_entry+0x300>)
 8018566:	f002 fdd5 	bl	801b114 <trace_printf>
 801856a:	4940      	ldr	r1, [pc, #256]	; (801866c <etharp_find_entry+0x304>)
 801856c:	4840      	ldr	r0, [pc, #256]	; (8018670 <etharp_find_entry+0x308>)
 801856e:	f002 fdd1 	bl	801b114 <trace_printf>
 8018572:	e7fe      	b.n	8018572 <etharp_find_entry+0x20a>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8018574:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8018578:	2b09      	cmp	r3, #9
 801857a:	dc02      	bgt.n	8018582 <etharp_find_entry+0x21a>
      /* recycle oldest pending */
      i = old_pending;
 801857c:	8c3b      	ldrh	r3, [r7, #32]
 801857e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8018580:	e009      	b.n	8018596 <etharp_find_entry+0x22e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8018582:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8018586:	2b09      	cmp	r3, #9
 8018588:	dc02      	bgt.n	8018590 <etharp_find_entry+0x228>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 801858a:	8bfb      	ldrh	r3, [r7, #30]
 801858c:	84fb      	strh	r3, [r7, #38]	; 0x26
 801858e:	e002      	b.n	8018596 <etharp_find_entry+0x22e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8018590:	f04f 33ff 	mov.w	r3, #4294967295
 8018594:	e060      	b.n	8018658 <etharp_find_entry+0x2f0>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8018596:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801859a:	2b09      	cmp	r3, #9
 801859c:	dd0a      	ble.n	80185b4 <etharp_find_entry+0x24c>
 801859e:	f240 127f 	movw	r2, #383	; 0x17f
 80185a2:	4935      	ldr	r1, [pc, #212]	; (8018678 <etharp_find_entry+0x310>)
 80185a4:	4830      	ldr	r0, [pc, #192]	; (8018668 <etharp_find_entry+0x300>)
 80185a6:	f002 fdb5 	bl	801b114 <trace_printf>
 80185aa:	4930      	ldr	r1, [pc, #192]	; (801866c <etharp_find_entry+0x304>)
 80185ac:	4830      	ldr	r0, [pc, #192]	; (8018670 <etharp_find_entry+0x308>)
 80185ae:	f002 fdb1 	bl	801b114 <trace_printf>
 80185b2:	e7fe      	b.n	80185b2 <etharp_find_entry+0x24a>
    etharp_free_entry(i);
 80185b4:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80185b8:	4618      	mov	r0, r3
 80185ba:	f7ff fdcd 	bl	8018158 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80185be:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80185c2:	2b09      	cmp	r3, #9
 80185c4:	dd0a      	ble.n	80185dc <etharp_find_entry+0x274>
 80185c6:	f240 1283 	movw	r2, #387	; 0x183
 80185ca:	492b      	ldr	r1, [pc, #172]	; (8018678 <etharp_find_entry+0x310>)
 80185cc:	4826      	ldr	r0, [pc, #152]	; (8018668 <etharp_find_entry+0x300>)
 80185ce:	f002 fda1 	bl	801b114 <trace_printf>
 80185d2:	4926      	ldr	r1, [pc, #152]	; (801866c <etharp_find_entry+0x304>)
 80185d4:	4826      	ldr	r0, [pc, #152]	; (8018670 <etharp_find_entry+0x308>)
 80185d6:	f002 fd9d 	bl	801b114 <trace_printf>
 80185da:	e7fe      	b.n	80185da <etharp_find_entry+0x272>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 80185dc:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 80185e0:	491f      	ldr	r1, [pc, #124]	; (8018660 <etharp_find_entry+0x2f8>)
 80185e2:	4613      	mov	r3, r2
 80185e4:	005b      	lsls	r3, r3, #1
 80185e6:	4413      	add	r3, r2
 80185e8:	00db      	lsls	r3, r3, #3
 80185ea:	440b      	add	r3, r1
 80185ec:	3314      	adds	r3, #20
 80185ee:	781b      	ldrb	r3, [r3, #0]
 80185f0:	2b00      	cmp	r3, #0
 80185f2:	d00a      	beq.n	801860a <etharp_find_entry+0x2a2>
 80185f4:	f44f 72c2 	mov.w	r2, #388	; 0x184
 80185f8:	4920      	ldr	r1, [pc, #128]	; (801867c <etharp_find_entry+0x314>)
 80185fa:	481b      	ldr	r0, [pc, #108]	; (8018668 <etharp_find_entry+0x300>)
 80185fc:	f002 fd8a 	bl	801b114 <trace_printf>
 8018600:	491a      	ldr	r1, [pc, #104]	; (801866c <etharp_find_entry+0x304>)
 8018602:	481b      	ldr	r0, [pc, #108]	; (8018670 <etharp_find_entry+0x308>)
 8018604:	f002 fd86 	bl	801b114 <trace_printf>
 8018608:	e7fe      	b.n	8018608 <etharp_find_entry+0x2a0>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 801860a:	68fb      	ldr	r3, [r7, #12]
 801860c:	2b00      	cmp	r3, #0
 801860e:	d00b      	beq.n	8018628 <etharp_find_entry+0x2c0>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8018610:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8018614:	68fb      	ldr	r3, [r7, #12]
 8018616:	6819      	ldr	r1, [r3, #0]
 8018618:	4811      	ldr	r0, [pc, #68]	; (8018660 <etharp_find_entry+0x2f8>)
 801861a:	4613      	mov	r3, r2
 801861c:	005b      	lsls	r3, r3, #1
 801861e:	4413      	add	r3, r2
 8018620:	00db      	lsls	r3, r3, #3
 8018622:	4403      	add	r3, r0
 8018624:	3304      	adds	r3, #4
 8018626:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8018628:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 801862c:	490c      	ldr	r1, [pc, #48]	; (8018660 <etharp_find_entry+0x2f8>)
 801862e:	4613      	mov	r3, r2
 8018630:	005b      	lsls	r3, r3, #1
 8018632:	4413      	add	r3, r2
 8018634:	00db      	lsls	r3, r3, #3
 8018636:	440b      	add	r3, r1
 8018638:	3312      	adds	r3, #18
 801863a:	2200      	movs	r2, #0
 801863c:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 801863e:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8018642:	4907      	ldr	r1, [pc, #28]	; (8018660 <etharp_find_entry+0x2f8>)
 8018644:	4613      	mov	r3, r2
 8018646:	005b      	lsls	r3, r3, #1
 8018648:	4413      	add	r3, r2
 801864a:	00db      	lsls	r3, r3, #3
 801864c:	440b      	add	r3, r1
 801864e:	3308      	adds	r3, #8
 8018650:	687a      	ldr	r2, [r7, #4]
 8018652:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8018654:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
}
 8018658:	4618      	mov	r0, r3
 801865a:	3728      	adds	r7, #40	; 0x28
 801865c:	46bd      	mov	sp, r7
 801865e:	bd80      	pop	{r7, pc}
 8018660:	20009fe0 	.word	0x20009fe0
 8018664:	0801fec4 	.word	0x0801fec4
 8018668:	0801ff04 	.word	0x0801ff04
 801866c:	0801ff24 	.word	0x0801ff24
 8018670:	0801ff5c 	.word	0x0801ff5c
 8018674:	0801ff60 	.word	0x0801ff60
 8018678:	0801ff78 	.word	0x0801ff78
 801867c:	0801ff8c 	.word	0x0801ff8c

08018680 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8018680:	b580      	push	{r7, lr}
 8018682:	b088      	sub	sp, #32
 8018684:	af02      	add	r7, sp, #8
 8018686:	60f8      	str	r0, [r7, #12]
 8018688:	60b9      	str	r1, [r7, #8]
 801868a:	607a      	str	r2, [r7, #4]
 801868c:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 801868e:	68fb      	ldr	r3, [r7, #12]
 8018690:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8018694:	2b06      	cmp	r3, #6
 8018696:	d00a      	beq.n	80186ae <etharp_update_arp_entry+0x2e>
 8018698:	f240 12a9 	movw	r2, #425	; 0x1a9
 801869c:	4949      	ldr	r1, [pc, #292]	; (80187c4 <etharp_update_arp_entry+0x144>)
 801869e:	484a      	ldr	r0, [pc, #296]	; (80187c8 <etharp_update_arp_entry+0x148>)
 80186a0:	f002 fd38 	bl	801b114 <trace_printf>
 80186a4:	4949      	ldr	r1, [pc, #292]	; (80187cc <etharp_update_arp_entry+0x14c>)
 80186a6:	484a      	ldr	r0, [pc, #296]	; (80187d0 <etharp_update_arp_entry+0x150>)
 80186a8:	f002 fd34 	bl	801b114 <trace_printf>
 80186ac:	e7fe      	b.n	80186ac <etharp_update_arp_entry+0x2c>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 80186ae:	68bb      	ldr	r3, [r7, #8]
 80186b0:	2b00      	cmp	r3, #0
 80186b2:	d012      	beq.n	80186da <etharp_update_arp_entry+0x5a>
 80186b4:	68bb      	ldr	r3, [r7, #8]
 80186b6:	681b      	ldr	r3, [r3, #0]
 80186b8:	2b00      	cmp	r3, #0
 80186ba:	d00e      	beq.n	80186da <etharp_update_arp_entry+0x5a>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80186bc:	68bb      	ldr	r3, [r7, #8]
 80186be:	681b      	ldr	r3, [r3, #0]
 80186c0:	68f9      	ldr	r1, [r7, #12]
 80186c2:	4618      	mov	r0, r3
 80186c4:	f001 fa66 	bl	8019b94 <ip4_addr_isbroadcast_u32>
 80186c8:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 80186ca:	2b00      	cmp	r3, #0
 80186cc:	d105      	bne.n	80186da <etharp_update_arp_entry+0x5a>
      ip4_addr_ismulticast(ipaddr)) {
 80186ce:	68bb      	ldr	r3, [r7, #8]
 80186d0:	681b      	ldr	r3, [r3, #0]
 80186d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80186d6:	2be0      	cmp	r3, #224	; 0xe0
 80186d8:	d102      	bne.n	80186e0 <etharp_update_arp_entry+0x60>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80186da:	f06f 030f 	mvn.w	r3, #15
 80186de:	e06c      	b.n	80187ba <etharp_update_arp_entry+0x13a>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 80186e0:	78fb      	ldrb	r3, [r7, #3]
 80186e2:	68fa      	ldr	r2, [r7, #12]
 80186e4:	4619      	mov	r1, r3
 80186e6:	68b8      	ldr	r0, [r7, #8]
 80186e8:	f7ff fe3e 	bl	8018368 <etharp_find_entry>
 80186ec:	4603      	mov	r3, r0
 80186ee:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 80186f0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80186f4:	2b00      	cmp	r3, #0
 80186f6:	da02      	bge.n	80186fe <etharp_update_arp_entry+0x7e>
    return (err_t)i;
 80186f8:	8afb      	ldrh	r3, [r7, #22]
 80186fa:	b25b      	sxtb	r3, r3
 80186fc:	e05d      	b.n	80187ba <etharp_update_arp_entry+0x13a>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 80186fe:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8018702:	4934      	ldr	r1, [pc, #208]	; (80187d4 <etharp_update_arp_entry+0x154>)
 8018704:	4613      	mov	r3, r2
 8018706:	005b      	lsls	r3, r3, #1
 8018708:	4413      	add	r3, r2
 801870a:	00db      	lsls	r3, r3, #3
 801870c:	440b      	add	r3, r1
 801870e:	3314      	adds	r3, #20
 8018710:	2202      	movs	r2, #2
 8018712:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8018714:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8018718:	492e      	ldr	r1, [pc, #184]	; (80187d4 <etharp_update_arp_entry+0x154>)
 801871a:	4613      	mov	r3, r2
 801871c:	005b      	lsls	r3, r3, #1
 801871e:	4413      	add	r3, r2
 8018720:	00db      	lsls	r3, r3, #3
 8018722:	440b      	add	r3, r1
 8018724:	3308      	adds	r3, #8
 8018726:	68fa      	ldr	r2, [r7, #12]
 8018728:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 801872a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801872e:	4613      	mov	r3, r2
 8018730:	005b      	lsls	r3, r3, #1
 8018732:	4413      	add	r3, r2
 8018734:	00db      	lsls	r3, r3, #3
 8018736:	3308      	adds	r3, #8
 8018738:	4a26      	ldr	r2, [pc, #152]	; (80187d4 <etharp_update_arp_entry+0x154>)
 801873a:	4413      	add	r3, r2
 801873c:	3304      	adds	r3, #4
 801873e:	2206      	movs	r2, #6
 8018740:	6879      	ldr	r1, [r7, #4]
 8018742:	4618      	mov	r0, r3
 8018744:	f002 fd3a 	bl	801b1bc <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8018748:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801874c:	4921      	ldr	r1, [pc, #132]	; (80187d4 <etharp_update_arp_entry+0x154>)
 801874e:	4613      	mov	r3, r2
 8018750:	005b      	lsls	r3, r3, #1
 8018752:	4413      	add	r3, r2
 8018754:	00db      	lsls	r3, r3, #3
 8018756:	440b      	add	r3, r1
 8018758:	3312      	adds	r3, #18
 801875a:	2200      	movs	r2, #0
 801875c:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 801875e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8018762:	491c      	ldr	r1, [pc, #112]	; (80187d4 <etharp_update_arp_entry+0x154>)
 8018764:	4613      	mov	r3, r2
 8018766:	005b      	lsls	r3, r3, #1
 8018768:	4413      	add	r3, r2
 801876a:	00db      	lsls	r3, r3, #3
 801876c:	440b      	add	r3, r1
 801876e:	681b      	ldr	r3, [r3, #0]
 8018770:	2b00      	cmp	r3, #0
 8018772:	d021      	beq.n	80187b8 <etharp_update_arp_entry+0x138>
    struct pbuf *p = arp_table[i].q;
 8018774:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8018778:	4916      	ldr	r1, [pc, #88]	; (80187d4 <etharp_update_arp_entry+0x154>)
 801877a:	4613      	mov	r3, r2
 801877c:	005b      	lsls	r3, r3, #1
 801877e:	4413      	add	r3, r2
 8018780:	00db      	lsls	r3, r3, #3
 8018782:	440b      	add	r3, r1
 8018784:	681b      	ldr	r3, [r3, #0]
 8018786:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8018788:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801878c:	4911      	ldr	r1, [pc, #68]	; (80187d4 <etharp_update_arp_entry+0x154>)
 801878e:	4613      	mov	r3, r2
 8018790:	005b      	lsls	r3, r3, #1
 8018792:	4413      	add	r3, r2
 8018794:	00db      	lsls	r3, r3, #3
 8018796:	440b      	add	r3, r1
 8018798:	2200      	movs	r2, #0
 801879a:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 801879c:	68fb      	ldr	r3, [r7, #12]
 801879e:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 80187a2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80187a6:	9300      	str	r3, [sp, #0]
 80187a8:	687b      	ldr	r3, [r7, #4]
 80187aa:	6939      	ldr	r1, [r7, #16]
 80187ac:	68f8      	ldr	r0, [r7, #12]
 80187ae:	f002 f9ab 	bl	801ab08 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 80187b2:	6938      	ldr	r0, [r7, #16]
 80187b4:	f7f5 ffdc 	bl	800e770 <pbuf_free>
  }
  return ERR_OK;
 80187b8:	2300      	movs	r3, #0
}
 80187ba:	4618      	mov	r0, r3
 80187bc:	3718      	adds	r7, #24
 80187be:	46bd      	mov	sp, r7
 80187c0:	bd80      	pop	{r7, pc}
 80187c2:	bf00      	nop
 80187c4:	0801ffb8 	.word	0x0801ffb8
 80187c8:	0801ff04 	.word	0x0801ff04
 80187cc:	0801ff24 	.word	0x0801ff24
 80187d0:	0801ff5c 	.word	0x0801ff5c
 80187d4:	20009fe0 	.word	0x20009fe0

080187d8 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 80187d8:	b580      	push	{r7, lr}
 80187da:	b084      	sub	sp, #16
 80187dc:	af00      	add	r7, sp, #0
 80187de:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80187e0:	2300      	movs	r3, #0
 80187e2:	60fb      	str	r3, [r7, #12]
 80187e4:	e01e      	b.n	8018824 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 80187e6:	4913      	ldr	r1, [pc, #76]	; (8018834 <etharp_cleanup_netif+0x5c>)
 80187e8:	68fa      	ldr	r2, [r7, #12]
 80187ea:	4613      	mov	r3, r2
 80187ec:	005b      	lsls	r3, r3, #1
 80187ee:	4413      	add	r3, r2
 80187f0:	00db      	lsls	r3, r3, #3
 80187f2:	440b      	add	r3, r1
 80187f4:	3314      	adds	r3, #20
 80187f6:	781b      	ldrb	r3, [r3, #0]
 80187f8:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 80187fa:	7afb      	ldrb	r3, [r7, #11]
 80187fc:	2b00      	cmp	r3, #0
 80187fe:	d00e      	beq.n	801881e <etharp_cleanup_netif+0x46>
 8018800:	490c      	ldr	r1, [pc, #48]	; (8018834 <etharp_cleanup_netif+0x5c>)
 8018802:	68fa      	ldr	r2, [r7, #12]
 8018804:	4613      	mov	r3, r2
 8018806:	005b      	lsls	r3, r3, #1
 8018808:	4413      	add	r3, r2
 801880a:	00db      	lsls	r3, r3, #3
 801880c:	440b      	add	r3, r1
 801880e:	3308      	adds	r3, #8
 8018810:	681b      	ldr	r3, [r3, #0]
 8018812:	687a      	ldr	r2, [r7, #4]
 8018814:	429a      	cmp	r2, r3
 8018816:	d102      	bne.n	801881e <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8018818:	68f8      	ldr	r0, [r7, #12]
 801881a:	f7ff fc9d 	bl	8018158 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801881e:	68fb      	ldr	r3, [r7, #12]
 8018820:	3301      	adds	r3, #1
 8018822:	60fb      	str	r3, [r7, #12]
 8018824:	68fb      	ldr	r3, [r7, #12]
 8018826:	2b09      	cmp	r3, #9
 8018828:	dddd      	ble.n	80187e6 <etharp_cleanup_netif+0xe>
    }
  }
}
 801882a:	bf00      	nop
 801882c:	bf00      	nop
 801882e:	3710      	adds	r7, #16
 8018830:	46bd      	mov	sp, r7
 8018832:	bd80      	pop	{r7, pc}
 8018834:	20009fe0 	.word	0x20009fe0

08018838 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8018838:	b5b0      	push	{r4, r5, r7, lr}
 801883a:	b08a      	sub	sp, #40	; 0x28
 801883c:	af04      	add	r7, sp, #16
 801883e:	6078      	str	r0, [r7, #4]
 8018840:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8018842:	683b      	ldr	r3, [r7, #0]
 8018844:	2b00      	cmp	r3, #0
 8018846:	d10a      	bne.n	801885e <etharp_input+0x26>
 8018848:	f240 228a 	movw	r2, #650	; 0x28a
 801884c:	494c      	ldr	r1, [pc, #304]	; (8018980 <etharp_input+0x148>)
 801884e:	484d      	ldr	r0, [pc, #308]	; (8018984 <etharp_input+0x14c>)
 8018850:	f002 fc60 	bl	801b114 <trace_printf>
 8018854:	494c      	ldr	r1, [pc, #304]	; (8018988 <etharp_input+0x150>)
 8018856:	484d      	ldr	r0, [pc, #308]	; (801898c <etharp_input+0x154>)
 8018858:	f002 fc5c 	bl	801b114 <trace_printf>
 801885c:	e7fe      	b.n	801885c <etharp_input+0x24>

  hdr = (struct etharp_hdr *)p->payload;
 801885e:	687b      	ldr	r3, [r7, #4]
 8018860:	685b      	ldr	r3, [r3, #4]
 8018862:	617b      	str	r3, [r7, #20]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8018864:	697b      	ldr	r3, [r7, #20]
 8018866:	881b      	ldrh	r3, [r3, #0]
 8018868:	b29b      	uxth	r3, r3
 801886a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801886e:	d10c      	bne.n	801888a <etharp_input+0x52>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8018870:	697b      	ldr	r3, [r7, #20]
 8018872:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8018874:	2b06      	cmp	r3, #6
 8018876:	d108      	bne.n	801888a <etharp_input+0x52>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8018878:	697b      	ldr	r3, [r7, #20]
 801887a:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801887c:	2b04      	cmp	r3, #4
 801887e:	d104      	bne.n	801888a <etharp_input+0x52>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8018880:	697b      	ldr	r3, [r7, #20]
 8018882:	885b      	ldrh	r3, [r3, #2]
 8018884:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8018886:	2b08      	cmp	r3, #8
 8018888:	d00f      	beq.n	80188aa <etharp_input+0x72>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
 801888a:	4b41      	ldr	r3, [pc, #260]	; (8018990 <etharp_input+0x158>)
 801888c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801888e:	3301      	adds	r3, #1
 8018890:	b29a      	uxth	r2, r3
 8018892:	4b3f      	ldr	r3, [pc, #252]	; (8018990 <etharp_input+0x158>)
 8018894:	851a      	strh	r2, [r3, #40]	; 0x28
    ETHARP_STATS_INC(etharp.drop);
 8018896:	4b3e      	ldr	r3, [pc, #248]	; (8018990 <etharp_input+0x158>)
 8018898:	8bdb      	ldrh	r3, [r3, #30]
 801889a:	3301      	adds	r3, #1
 801889c:	b29a      	uxth	r2, r3
 801889e:	4b3c      	ldr	r3, [pc, #240]	; (8018990 <etharp_input+0x158>)
 80188a0:	83da      	strh	r2, [r3, #30]
    pbuf_free(p);
 80188a2:	6878      	ldr	r0, [r7, #4]
 80188a4:	f7f5 ff64 	bl	800e770 <pbuf_free>
 80188a8:	e067      	b.n	801897a <etharp_input+0x142>
    return;
  }
  ETHARP_STATS_INC(etharp.recv);
 80188aa:	4b39      	ldr	r3, [pc, #228]	; (8018990 <etharp_input+0x158>)
 80188ac:	8b5b      	ldrh	r3, [r3, #26]
 80188ae:	3301      	adds	r3, #1
 80188b0:	b29a      	uxth	r2, r3
 80188b2:	4b37      	ldr	r3, [pc, #220]	; (8018990 <etharp_input+0x158>)
 80188b4:	835a      	strh	r2, [r3, #26]
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 80188b6:	697b      	ldr	r3, [r7, #20]
 80188b8:	330e      	adds	r3, #14
 80188ba:	681b      	ldr	r3, [r3, #0]
 80188bc:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 80188be:	697b      	ldr	r3, [r7, #20]
 80188c0:	3318      	adds	r3, #24
 80188c2:	681b      	ldr	r3, [r3, #0]
 80188c4:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80188c6:	683b      	ldr	r3, [r7, #0]
 80188c8:	3304      	adds	r3, #4
 80188ca:	681b      	ldr	r3, [r3, #0]
 80188cc:	2b00      	cmp	r3, #0
 80188ce:	d102      	bne.n	80188d6 <etharp_input+0x9e>
    for_us = 0;
 80188d0:	2300      	movs	r3, #0
 80188d2:	74fb      	strb	r3, [r7, #19]
 80188d4:	e009      	b.n	80188ea <etharp_input+0xb2>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 80188d6:	68ba      	ldr	r2, [r7, #8]
 80188d8:	683b      	ldr	r3, [r7, #0]
 80188da:	3304      	adds	r3, #4
 80188dc:	681b      	ldr	r3, [r3, #0]
 80188de:	429a      	cmp	r2, r3
 80188e0:	bf0c      	ite	eq
 80188e2:	2301      	moveq	r3, #1
 80188e4:	2300      	movne	r3, #0
 80188e6:	b2db      	uxtb	r3, r3
 80188e8:	74fb      	strb	r3, [r7, #19]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 80188ea:	697b      	ldr	r3, [r7, #20]
 80188ec:	f103 0208 	add.w	r2, r3, #8
 80188f0:	7cfb      	ldrb	r3, [r7, #19]
 80188f2:	2b00      	cmp	r3, #0
 80188f4:	d001      	beq.n	80188fa <etharp_input+0xc2>
 80188f6:	2301      	movs	r3, #1
 80188f8:	e000      	b.n	80188fc <etharp_input+0xc4>
 80188fa:	2302      	movs	r3, #2
 80188fc:	f107 010c 	add.w	r1, r7, #12
 8018900:	6838      	ldr	r0, [r7, #0]
 8018902:	f7ff febd 	bl	8018680 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8018906:	697b      	ldr	r3, [r7, #20]
 8018908:	88db      	ldrh	r3, [r3, #6]
 801890a:	b29b      	uxth	r3, r3
 801890c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8018910:	d003      	beq.n	801891a <etharp_input+0xe2>
 8018912:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8018916:	d01e      	beq.n	8018956 <etharp_input+0x11e>
 8018918:	e024      	b.n	8018964 <etharp_input+0x12c>
       * reply. In any case, we time-stamp any existing ARP entry,
       * and possibly send out an IP packet that was queued on it. */

      LWIP_DEBUGF (ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: incoming ARP request\n"));
      /* ARP request for our address? */
      if (for_us) {
 801891a:	7cfb      	ldrb	r3, [r7, #19]
 801891c:	2b00      	cmp	r3, #0
 801891e:	d028      	beq.n	8018972 <etharp_input+0x13a>
        /* send ARP response */
        etharp_raw(netif,
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8018920:	683b      	ldr	r3, [r7, #0]
 8018922:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 8018926:	697b      	ldr	r3, [r7, #20]
 8018928:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 801892c:	683b      	ldr	r3, [r7, #0]
 801892e:	f103 052a 	add.w	r5, r3, #42	; 0x2a
 8018932:	683b      	ldr	r3, [r7, #0]
 8018934:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8018936:	697a      	ldr	r2, [r7, #20]
 8018938:	3208      	adds	r2, #8
        etharp_raw(netif,
 801893a:	2102      	movs	r1, #2
 801893c:	9103      	str	r1, [sp, #12]
 801893e:	f107 010c 	add.w	r1, r7, #12
 8018942:	9102      	str	r1, [sp, #8]
 8018944:	9201      	str	r2, [sp, #4]
 8018946:	9300      	str	r3, [sp, #0]
 8018948:	462b      	mov	r3, r5
 801894a:	4622      	mov	r2, r4
 801894c:	4601      	mov	r1, r0
 801894e:	6838      	ldr	r0, [r7, #0]
 8018950:	f000 fb38 	bl	8018fc4 <etharp_raw>
        /* request was not directed to us */
      } else {
        /* { for_us == 0 and netif->ip_addr.addr != 0 } */
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP request was not for us.\n"));
      }
      break;
 8018954:	e00d      	b.n	8018972 <etharp_input+0x13a>
#if (LWIP_DHCP && DHCP_DOES_ARP_CHECK)
      /* DHCP wants to know about ARP replies from any host with an
       * IP address also offered to us by the DHCP server. We do not
       * want to take a duplicate IP address on a single network.
       * @todo How should we handle redundant (fail-over) interfaces? */
      dhcp_arp_reply(netif, &sipaddr);
 8018956:	f107 030c 	add.w	r3, r7, #12
 801895a:	4619      	mov	r1, r3
 801895c:	6838      	ldr	r0, [r7, #0]
 801895e:	f7fe f94d 	bl	8016bfc <dhcp_arp_reply>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
 8018962:	e007      	b.n	8018974 <etharp_input+0x13c>
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
 8018964:	4b0a      	ldr	r3, [pc, #40]	; (8018990 <etharp_input+0x158>)
 8018966:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8018968:	3301      	adds	r3, #1
 801896a:	b29a      	uxth	r2, r3
 801896c:	4b08      	ldr	r3, [pc, #32]	; (8018990 <etharp_input+0x158>)
 801896e:	859a      	strh	r2, [r3, #44]	; 0x2c
      break;
 8018970:	e000      	b.n	8018974 <etharp_input+0x13c>
      break;
 8018972:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8018974:	6878      	ldr	r0, [r7, #4]
 8018976:	f7f5 fefb 	bl	800e770 <pbuf_free>
}
 801897a:	3718      	adds	r7, #24
 801897c:	46bd      	mov	sp, r7
 801897e:	bdb0      	pop	{r4, r5, r7, pc}
 8018980:	08020010 	.word	0x08020010
 8018984:	0801ff04 	.word	0x0801ff04
 8018988:	0801ff24 	.word	0x0801ff24
 801898c:	0801ff5c 	.word	0x0801ff5c
 8018990:	20010b7c 	.word	0x20010b7c

08018994 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8018994:	b580      	push	{r7, lr}
 8018996:	b086      	sub	sp, #24
 8018998:	af02      	add	r7, sp, #8
 801899a:	60f8      	str	r0, [r7, #12]
 801899c:	60b9      	str	r1, [r7, #8]
 801899e:	4613      	mov	r3, r2
 80189a0:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 80189a2:	79fa      	ldrb	r2, [r7, #7]
 80189a4:	4946      	ldr	r1, [pc, #280]	; (8018ac0 <etharp_output_to_arp_index+0x12c>)
 80189a6:	4613      	mov	r3, r2
 80189a8:	005b      	lsls	r3, r3, #1
 80189aa:	4413      	add	r3, r2
 80189ac:	00db      	lsls	r3, r3, #3
 80189ae:	440b      	add	r3, r1
 80189b0:	3314      	adds	r3, #20
 80189b2:	781b      	ldrb	r3, [r3, #0]
 80189b4:	2b01      	cmp	r3, #1
 80189b6:	d80a      	bhi.n	80189ce <etharp_output_to_arp_index+0x3a>
 80189b8:	f240 22ee 	movw	r2, #750	; 0x2ee
 80189bc:	4941      	ldr	r1, [pc, #260]	; (8018ac4 <etharp_output_to_arp_index+0x130>)
 80189be:	4842      	ldr	r0, [pc, #264]	; (8018ac8 <etharp_output_to_arp_index+0x134>)
 80189c0:	f002 fba8 	bl	801b114 <trace_printf>
 80189c4:	4941      	ldr	r1, [pc, #260]	; (8018acc <etharp_output_to_arp_index+0x138>)
 80189c6:	4842      	ldr	r0, [pc, #264]	; (8018ad0 <etharp_output_to_arp_index+0x13c>)
 80189c8:	f002 fba4 	bl	801b114 <trace_printf>
 80189cc:	e7fe      	b.n	80189cc <etharp_output_to_arp_index+0x38>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 80189ce:	79fa      	ldrb	r2, [r7, #7]
 80189d0:	493b      	ldr	r1, [pc, #236]	; (8018ac0 <etharp_output_to_arp_index+0x12c>)
 80189d2:	4613      	mov	r3, r2
 80189d4:	005b      	lsls	r3, r3, #1
 80189d6:	4413      	add	r3, r2
 80189d8:	00db      	lsls	r3, r3, #3
 80189da:	440b      	add	r3, r1
 80189dc:	3314      	adds	r3, #20
 80189de:	781b      	ldrb	r3, [r3, #0]
 80189e0:	2b02      	cmp	r3, #2
 80189e2:	d153      	bne.n	8018a8c <etharp_output_to_arp_index+0xf8>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 80189e4:	79fa      	ldrb	r2, [r7, #7]
 80189e6:	4936      	ldr	r1, [pc, #216]	; (8018ac0 <etharp_output_to_arp_index+0x12c>)
 80189e8:	4613      	mov	r3, r2
 80189ea:	005b      	lsls	r3, r3, #1
 80189ec:	4413      	add	r3, r2
 80189ee:	00db      	lsls	r3, r3, #3
 80189f0:	440b      	add	r3, r1
 80189f2:	3312      	adds	r3, #18
 80189f4:	881b      	ldrh	r3, [r3, #0]
 80189f6:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 80189fa:	d919      	bls.n	8018a30 <etharp_output_to_arp_index+0x9c>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 80189fc:	79fa      	ldrb	r2, [r7, #7]
 80189fe:	4613      	mov	r3, r2
 8018a00:	005b      	lsls	r3, r3, #1
 8018a02:	4413      	add	r3, r2
 8018a04:	00db      	lsls	r3, r3, #3
 8018a06:	4a2e      	ldr	r2, [pc, #184]	; (8018ac0 <etharp_output_to_arp_index+0x12c>)
 8018a08:	4413      	add	r3, r2
 8018a0a:	3304      	adds	r3, #4
 8018a0c:	4619      	mov	r1, r3
 8018a0e:	68f8      	ldr	r0, [r7, #12]
 8018a10:	f000 fba2 	bl	8019158 <etharp_request>
 8018a14:	4603      	mov	r3, r0
 8018a16:	2b00      	cmp	r3, #0
 8018a18:	d138      	bne.n	8018a8c <etharp_output_to_arp_index+0xf8>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8018a1a:	79fa      	ldrb	r2, [r7, #7]
 8018a1c:	4928      	ldr	r1, [pc, #160]	; (8018ac0 <etharp_output_to_arp_index+0x12c>)
 8018a1e:	4613      	mov	r3, r2
 8018a20:	005b      	lsls	r3, r3, #1
 8018a22:	4413      	add	r3, r2
 8018a24:	00db      	lsls	r3, r3, #3
 8018a26:	440b      	add	r3, r1
 8018a28:	3314      	adds	r3, #20
 8018a2a:	2203      	movs	r2, #3
 8018a2c:	701a      	strb	r2, [r3, #0]
 8018a2e:	e02d      	b.n	8018a8c <etharp_output_to_arp_index+0xf8>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8018a30:	79fa      	ldrb	r2, [r7, #7]
 8018a32:	4923      	ldr	r1, [pc, #140]	; (8018ac0 <etharp_output_to_arp_index+0x12c>)
 8018a34:	4613      	mov	r3, r2
 8018a36:	005b      	lsls	r3, r3, #1
 8018a38:	4413      	add	r3, r2
 8018a3a:	00db      	lsls	r3, r3, #3
 8018a3c:	440b      	add	r3, r1
 8018a3e:	3312      	adds	r3, #18
 8018a40:	881b      	ldrh	r3, [r3, #0]
 8018a42:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8018a46:	d321      	bcc.n	8018a8c <etharp_output_to_arp_index+0xf8>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8018a48:	79fa      	ldrb	r2, [r7, #7]
 8018a4a:	4613      	mov	r3, r2
 8018a4c:	005b      	lsls	r3, r3, #1
 8018a4e:	4413      	add	r3, r2
 8018a50:	00db      	lsls	r3, r3, #3
 8018a52:	4a1b      	ldr	r2, [pc, #108]	; (8018ac0 <etharp_output_to_arp_index+0x12c>)
 8018a54:	4413      	add	r3, r2
 8018a56:	1d19      	adds	r1, r3, #4
 8018a58:	79fa      	ldrb	r2, [r7, #7]
 8018a5a:	4613      	mov	r3, r2
 8018a5c:	005b      	lsls	r3, r3, #1
 8018a5e:	4413      	add	r3, r2
 8018a60:	00db      	lsls	r3, r3, #3
 8018a62:	3308      	adds	r3, #8
 8018a64:	4a16      	ldr	r2, [pc, #88]	; (8018ac0 <etharp_output_to_arp_index+0x12c>)
 8018a66:	4413      	add	r3, r2
 8018a68:	3304      	adds	r3, #4
 8018a6a:	461a      	mov	r2, r3
 8018a6c:	68f8      	ldr	r0, [r7, #12]
 8018a6e:	f000 fb51 	bl	8019114 <etharp_request_dst>
 8018a72:	4603      	mov	r3, r0
 8018a74:	2b00      	cmp	r3, #0
 8018a76:	d109      	bne.n	8018a8c <etharp_output_to_arp_index+0xf8>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8018a78:	79fa      	ldrb	r2, [r7, #7]
 8018a7a:	4911      	ldr	r1, [pc, #68]	; (8018ac0 <etharp_output_to_arp_index+0x12c>)
 8018a7c:	4613      	mov	r3, r2
 8018a7e:	005b      	lsls	r3, r3, #1
 8018a80:	4413      	add	r3, r2
 8018a82:	00db      	lsls	r3, r3, #3
 8018a84:	440b      	add	r3, r1
 8018a86:	3314      	adds	r3, #20
 8018a88:	2203      	movs	r2, #3
 8018a8a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8018a8c:	68fb      	ldr	r3, [r7, #12]
 8018a8e:	f103 012a 	add.w	r1, r3, #42	; 0x2a
 8018a92:	79fa      	ldrb	r2, [r7, #7]
 8018a94:	4613      	mov	r3, r2
 8018a96:	005b      	lsls	r3, r3, #1
 8018a98:	4413      	add	r3, r2
 8018a9a:	00db      	lsls	r3, r3, #3
 8018a9c:	3308      	adds	r3, #8
 8018a9e:	4a08      	ldr	r2, [pc, #32]	; (8018ac0 <etharp_output_to_arp_index+0x12c>)
 8018aa0:	4413      	add	r3, r2
 8018aa2:	3304      	adds	r3, #4
 8018aa4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8018aa8:	9200      	str	r2, [sp, #0]
 8018aaa:	460a      	mov	r2, r1
 8018aac:	68b9      	ldr	r1, [r7, #8]
 8018aae:	68f8      	ldr	r0, [r7, #12]
 8018ab0:	f002 f82a 	bl	801ab08 <ethernet_output>
 8018ab4:	4603      	mov	r3, r0
}
 8018ab6:	4618      	mov	r0, r3
 8018ab8:	3710      	adds	r7, #16
 8018aba:	46bd      	mov	sp, r7
 8018abc:	bd80      	pop	{r7, pc}
 8018abe:	bf00      	nop
 8018ac0:	20009fe0 	.word	0x20009fe0
 8018ac4:	08020030 	.word	0x08020030
 8018ac8:	0801ff04 	.word	0x0801ff04
 8018acc:	0801ff24 	.word	0x0801ff24
 8018ad0:	0801ff5c 	.word	0x0801ff5c

08018ad4 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8018ad4:	b580      	push	{r7, lr}
 8018ad6:	b08a      	sub	sp, #40	; 0x28
 8018ad8:	af02      	add	r7, sp, #8
 8018ada:	60f8      	str	r0, [r7, #12]
 8018adc:	60b9      	str	r1, [r7, #8]
 8018ade:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8018ae0:	687b      	ldr	r3, [r7, #4]
 8018ae2:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8018ae4:	68fb      	ldr	r3, [r7, #12]
 8018ae6:	2b00      	cmp	r3, #0
 8018ae8:	d10a      	bne.n	8018b00 <etharp_output+0x2c>
 8018aea:	f240 321e 	movw	r2, #798	; 0x31e
 8018aee:	497b      	ldr	r1, [pc, #492]	; (8018cdc <etharp_output+0x208>)
 8018af0:	487b      	ldr	r0, [pc, #492]	; (8018ce0 <etharp_output+0x20c>)
 8018af2:	f002 fb0f 	bl	801b114 <trace_printf>
 8018af6:	497b      	ldr	r1, [pc, #492]	; (8018ce4 <etharp_output+0x210>)
 8018af8:	487b      	ldr	r0, [pc, #492]	; (8018ce8 <etharp_output+0x214>)
 8018afa:	f002 fb0b 	bl	801b114 <trace_printf>
 8018afe:	e7fe      	b.n	8018afe <etharp_output+0x2a>
  LWIP_ASSERT("q != NULL", q != NULL);
 8018b00:	68bb      	ldr	r3, [r7, #8]
 8018b02:	2b00      	cmp	r3, #0
 8018b04:	d10a      	bne.n	8018b1c <etharp_output+0x48>
 8018b06:	f240 321f 	movw	r2, #799	; 0x31f
 8018b0a:	4978      	ldr	r1, [pc, #480]	; (8018cec <etharp_output+0x218>)
 8018b0c:	4874      	ldr	r0, [pc, #464]	; (8018ce0 <etharp_output+0x20c>)
 8018b0e:	f002 fb01 	bl	801b114 <trace_printf>
 8018b12:	4974      	ldr	r1, [pc, #464]	; (8018ce4 <etharp_output+0x210>)
 8018b14:	4874      	ldr	r0, [pc, #464]	; (8018ce8 <etharp_output+0x214>)
 8018b16:	f002 fafd 	bl	801b114 <trace_printf>
 8018b1a:	e7fe      	b.n	8018b1a <etharp_output+0x46>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8018b1c:	687b      	ldr	r3, [r7, #4]
 8018b1e:	2b00      	cmp	r3, #0
 8018b20:	d10a      	bne.n	8018b38 <etharp_output+0x64>
 8018b22:	f44f 7248 	mov.w	r2, #800	; 0x320
 8018b26:	4972      	ldr	r1, [pc, #456]	; (8018cf0 <etharp_output+0x21c>)
 8018b28:	486d      	ldr	r0, [pc, #436]	; (8018ce0 <etharp_output+0x20c>)
 8018b2a:	f002 faf3 	bl	801b114 <trace_printf>
 8018b2e:	496d      	ldr	r1, [pc, #436]	; (8018ce4 <etharp_output+0x210>)
 8018b30:	486d      	ldr	r0, [pc, #436]	; (8018ce8 <etharp_output+0x214>)
 8018b32:	f002 faef 	bl	801b114 <trace_printf>
 8018b36:	e7fe      	b.n	8018b36 <etharp_output+0x62>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8018b38:	687b      	ldr	r3, [r7, #4]
 8018b3a:	681b      	ldr	r3, [r3, #0]
 8018b3c:	68f9      	ldr	r1, [r7, #12]
 8018b3e:	4618      	mov	r0, r3
 8018b40:	f001 f828 	bl	8019b94 <ip4_addr_isbroadcast_u32>
 8018b44:	4603      	mov	r3, r0
 8018b46:	2b00      	cmp	r3, #0
 8018b48:	d002      	beq.n	8018b50 <etharp_output+0x7c>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8018b4a:	4b6a      	ldr	r3, [pc, #424]	; (8018cf4 <etharp_output+0x220>)
 8018b4c:	61fb      	str	r3, [r7, #28]
 8018b4e:	e0b5      	b.n	8018cbc <etharp_output+0x1e8>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8018b50:	687b      	ldr	r3, [r7, #4]
 8018b52:	681b      	ldr	r3, [r3, #0]
 8018b54:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8018b58:	2be0      	cmp	r3, #224	; 0xe0
 8018b5a:	d118      	bne.n	8018b8e <etharp_output+0xba>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8018b5c:	2301      	movs	r3, #1
 8018b5e:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8018b60:	2300      	movs	r3, #0
 8018b62:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8018b64:	235e      	movs	r3, #94	; 0x5e
 8018b66:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8018b68:	687b      	ldr	r3, [r7, #4]
 8018b6a:	3301      	adds	r3, #1
 8018b6c:	781b      	ldrb	r3, [r3, #0]
 8018b6e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8018b72:	b2db      	uxtb	r3, r3
 8018b74:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8018b76:	687b      	ldr	r3, [r7, #4]
 8018b78:	3302      	adds	r3, #2
 8018b7a:	781b      	ldrb	r3, [r3, #0]
 8018b7c:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8018b7e:	687b      	ldr	r3, [r7, #4]
 8018b80:	3303      	adds	r3, #3
 8018b82:	781b      	ldrb	r3, [r3, #0]
 8018b84:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8018b86:	f107 0310 	add.w	r3, r7, #16
 8018b8a:	61fb      	str	r3, [r7, #28]
 8018b8c:	e096      	b.n	8018cbc <etharp_output+0x1e8>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8018b8e:	687b      	ldr	r3, [r7, #4]
 8018b90:	681a      	ldr	r2, [r3, #0]
 8018b92:	68fb      	ldr	r3, [r7, #12]
 8018b94:	3304      	adds	r3, #4
 8018b96:	681b      	ldr	r3, [r3, #0]
 8018b98:	405a      	eors	r2, r3
 8018b9a:	68fb      	ldr	r3, [r7, #12]
 8018b9c:	3308      	adds	r3, #8
 8018b9e:	681b      	ldr	r3, [r3, #0]
 8018ba0:	4013      	ands	r3, r2
 8018ba2:	2b00      	cmp	r3, #0
 8018ba4:	d012      	beq.n	8018bcc <etharp_output+0xf8>
        !ip4_addr_islinklocal(ipaddr)) {
 8018ba6:	687b      	ldr	r3, [r7, #4]
 8018ba8:	681b      	ldr	r3, [r3, #0]
 8018baa:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8018bac:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8018bb0:	4293      	cmp	r3, r2
 8018bb2:	d00b      	beq.n	8018bcc <etharp_output+0xf8>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8018bb4:	68fb      	ldr	r3, [r7, #12]
 8018bb6:	330c      	adds	r3, #12
 8018bb8:	681b      	ldr	r3, [r3, #0]
 8018bba:	2b00      	cmp	r3, #0
 8018bbc:	d003      	beq.n	8018bc6 <etharp_output+0xf2>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8018bbe:	68fb      	ldr	r3, [r7, #12]
 8018bc0:	330c      	adds	r3, #12
 8018bc2:	61bb      	str	r3, [r7, #24]
 8018bc4:	e002      	b.n	8018bcc <etharp_output+0xf8>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8018bc6:	f06f 0303 	mvn.w	r3, #3
 8018bca:	e083      	b.n	8018cd4 <etharp_output+0x200>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8018bcc:	4b4a      	ldr	r3, [pc, #296]	; (8018cf8 <etharp_output+0x224>)
 8018bce:	781b      	ldrb	r3, [r3, #0]
 8018bd0:	4619      	mov	r1, r3
 8018bd2:	4a4a      	ldr	r2, [pc, #296]	; (8018cfc <etharp_output+0x228>)
 8018bd4:	460b      	mov	r3, r1
 8018bd6:	005b      	lsls	r3, r3, #1
 8018bd8:	440b      	add	r3, r1
 8018bda:	00db      	lsls	r3, r3, #3
 8018bdc:	4413      	add	r3, r2
 8018bde:	3314      	adds	r3, #20
 8018be0:	781b      	ldrb	r3, [r3, #0]
 8018be2:	2b01      	cmp	r3, #1
 8018be4:	d92b      	bls.n	8018c3e <etharp_output+0x16a>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8018be6:	4b44      	ldr	r3, [pc, #272]	; (8018cf8 <etharp_output+0x224>)
 8018be8:	781b      	ldrb	r3, [r3, #0]
 8018bea:	4619      	mov	r1, r3
 8018bec:	4a43      	ldr	r2, [pc, #268]	; (8018cfc <etharp_output+0x228>)
 8018bee:	460b      	mov	r3, r1
 8018bf0:	005b      	lsls	r3, r3, #1
 8018bf2:	440b      	add	r3, r1
 8018bf4:	00db      	lsls	r3, r3, #3
 8018bf6:	4413      	add	r3, r2
 8018bf8:	3308      	adds	r3, #8
 8018bfa:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8018bfc:	68fa      	ldr	r2, [r7, #12]
 8018bfe:	429a      	cmp	r2, r3
 8018c00:	d11d      	bne.n	8018c3e <etharp_output+0x16a>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8018c02:	69bb      	ldr	r3, [r7, #24]
 8018c04:	681a      	ldr	r2, [r3, #0]
 8018c06:	4b3c      	ldr	r3, [pc, #240]	; (8018cf8 <etharp_output+0x224>)
 8018c08:	781b      	ldrb	r3, [r3, #0]
 8018c0a:	4618      	mov	r0, r3
 8018c0c:	493b      	ldr	r1, [pc, #236]	; (8018cfc <etharp_output+0x228>)
 8018c0e:	4603      	mov	r3, r0
 8018c10:	005b      	lsls	r3, r3, #1
 8018c12:	4403      	add	r3, r0
 8018c14:	00db      	lsls	r3, r3, #3
 8018c16:	440b      	add	r3, r1
 8018c18:	3304      	adds	r3, #4
 8018c1a:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8018c1c:	429a      	cmp	r2, r3
 8018c1e:	d10e      	bne.n	8018c3e <etharp_output+0x16a>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
 8018c20:	4b37      	ldr	r3, [pc, #220]	; (8018d00 <etharp_output+0x22c>)
 8018c22:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8018c24:	3301      	adds	r3, #1
 8018c26:	b29a      	uxth	r2, r3
 8018c28:	4b35      	ldr	r3, [pc, #212]	; (8018d00 <etharp_output+0x22c>)
 8018c2a:	85da      	strh	r2, [r3, #46]	; 0x2e
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8018c2c:	4b32      	ldr	r3, [pc, #200]	; (8018cf8 <etharp_output+0x224>)
 8018c2e:	781b      	ldrb	r3, [r3, #0]
 8018c30:	461a      	mov	r2, r3
 8018c32:	68b9      	ldr	r1, [r7, #8]
 8018c34:	68f8      	ldr	r0, [r7, #12]
 8018c36:	f7ff fead 	bl	8018994 <etharp_output_to_arp_index>
 8018c3a:	4603      	mov	r3, r0
 8018c3c:	e04a      	b.n	8018cd4 <etharp_output+0x200>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8018c3e:	2300      	movs	r3, #0
 8018c40:	75fb      	strb	r3, [r7, #23]
 8018c42:	e031      	b.n	8018ca8 <etharp_output+0x1d4>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8018c44:	7dfa      	ldrb	r2, [r7, #23]
 8018c46:	492d      	ldr	r1, [pc, #180]	; (8018cfc <etharp_output+0x228>)
 8018c48:	4613      	mov	r3, r2
 8018c4a:	005b      	lsls	r3, r3, #1
 8018c4c:	4413      	add	r3, r2
 8018c4e:	00db      	lsls	r3, r3, #3
 8018c50:	440b      	add	r3, r1
 8018c52:	3314      	adds	r3, #20
 8018c54:	781b      	ldrb	r3, [r3, #0]
 8018c56:	2b01      	cmp	r3, #1
 8018c58:	d923      	bls.n	8018ca2 <etharp_output+0x1ce>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8018c5a:	7dfa      	ldrb	r2, [r7, #23]
 8018c5c:	4927      	ldr	r1, [pc, #156]	; (8018cfc <etharp_output+0x228>)
 8018c5e:	4613      	mov	r3, r2
 8018c60:	005b      	lsls	r3, r3, #1
 8018c62:	4413      	add	r3, r2
 8018c64:	00db      	lsls	r3, r3, #3
 8018c66:	440b      	add	r3, r1
 8018c68:	3308      	adds	r3, #8
 8018c6a:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8018c6c:	68fa      	ldr	r2, [r7, #12]
 8018c6e:	429a      	cmp	r2, r3
 8018c70:	d117      	bne.n	8018ca2 <etharp_output+0x1ce>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8018c72:	69bb      	ldr	r3, [r7, #24]
 8018c74:	6819      	ldr	r1, [r3, #0]
 8018c76:	7dfa      	ldrb	r2, [r7, #23]
 8018c78:	4820      	ldr	r0, [pc, #128]	; (8018cfc <etharp_output+0x228>)
 8018c7a:	4613      	mov	r3, r2
 8018c7c:	005b      	lsls	r3, r3, #1
 8018c7e:	4413      	add	r3, r2
 8018c80:	00db      	lsls	r3, r3, #3
 8018c82:	4403      	add	r3, r0
 8018c84:	3304      	adds	r3, #4
 8018c86:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8018c88:	4299      	cmp	r1, r3
 8018c8a:	d10a      	bne.n	8018ca2 <etharp_output+0x1ce>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8018c8c:	4a1a      	ldr	r2, [pc, #104]	; (8018cf8 <etharp_output+0x224>)
 8018c8e:	7dfb      	ldrb	r3, [r7, #23]
 8018c90:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8018c92:	7dfb      	ldrb	r3, [r7, #23]
 8018c94:	461a      	mov	r2, r3
 8018c96:	68b9      	ldr	r1, [r7, #8]
 8018c98:	68f8      	ldr	r0, [r7, #12]
 8018c9a:	f7ff fe7b 	bl	8018994 <etharp_output_to_arp_index>
 8018c9e:	4603      	mov	r3, r0
 8018ca0:	e018      	b.n	8018cd4 <etharp_output+0x200>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8018ca2:	7dfb      	ldrb	r3, [r7, #23]
 8018ca4:	3301      	adds	r3, #1
 8018ca6:	75fb      	strb	r3, [r7, #23]
 8018ca8:	7dfb      	ldrb	r3, [r7, #23]
 8018caa:	2b09      	cmp	r3, #9
 8018cac:	d9ca      	bls.n	8018c44 <etharp_output+0x170>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8018cae:	68ba      	ldr	r2, [r7, #8]
 8018cb0:	69b9      	ldr	r1, [r7, #24]
 8018cb2:	68f8      	ldr	r0, [r7, #12]
 8018cb4:	f000 f826 	bl	8018d04 <etharp_query>
 8018cb8:	4603      	mov	r3, r0
 8018cba:	e00b      	b.n	8018cd4 <etharp_output+0x200>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8018cbc:	68fb      	ldr	r3, [r7, #12]
 8018cbe:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 8018cc2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8018cc6:	9300      	str	r3, [sp, #0]
 8018cc8:	69fb      	ldr	r3, [r7, #28]
 8018cca:	68b9      	ldr	r1, [r7, #8]
 8018ccc:	68f8      	ldr	r0, [r7, #12]
 8018cce:	f001 ff1b 	bl	801ab08 <ethernet_output>
 8018cd2:	4603      	mov	r3, r0
}
 8018cd4:	4618      	mov	r0, r3
 8018cd6:	3720      	adds	r7, #32
 8018cd8:	46bd      	mov	sp, r7
 8018cda:	bd80      	pop	{r7, pc}
 8018cdc:	08020010 	.word	0x08020010
 8018ce0:	0801ff04 	.word	0x0801ff04
 8018ce4:	0801ff24 	.word	0x0801ff24
 8018ce8:	0801ff5c 	.word	0x0801ff5c
 8018cec:	08020060 	.word	0x08020060
 8018cf0:	08020000 	.word	0x08020000
 8018cf4:	08020720 	.word	0x08020720
 8018cf8:	2000a0d0 	.word	0x2000a0d0
 8018cfc:	20009fe0 	.word	0x20009fe0
 8018d00:	20010b7c 	.word	0x20010b7c

08018d04 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8018d04:	b580      	push	{r7, lr}
 8018d06:	b08c      	sub	sp, #48	; 0x30
 8018d08:	af02      	add	r7, sp, #8
 8018d0a:	60f8      	str	r0, [r7, #12]
 8018d0c:	60b9      	str	r1, [r7, #8]
 8018d0e:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8018d10:	68fb      	ldr	r3, [r7, #12]
 8018d12:	332a      	adds	r3, #42	; 0x2a
 8018d14:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8018d16:	23ff      	movs	r3, #255	; 0xff
 8018d18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8018d1c:	2300      	movs	r3, #0
 8018d1e:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8018d20:	68bb      	ldr	r3, [r7, #8]
 8018d22:	681b      	ldr	r3, [r3, #0]
 8018d24:	68f9      	ldr	r1, [r7, #12]
 8018d26:	4618      	mov	r0, r3
 8018d28:	f000 ff34 	bl	8019b94 <ip4_addr_isbroadcast_u32>
 8018d2c:	4603      	mov	r3, r0
 8018d2e:	2b00      	cmp	r3, #0
 8018d30:	d10c      	bne.n	8018d4c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8018d32:	68bb      	ldr	r3, [r7, #8]
 8018d34:	681b      	ldr	r3, [r3, #0]
 8018d36:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8018d3a:	2be0      	cmp	r3, #224	; 0xe0
 8018d3c:	d006      	beq.n	8018d4c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8018d3e:	68bb      	ldr	r3, [r7, #8]
 8018d40:	2b00      	cmp	r3, #0
 8018d42:	d003      	beq.n	8018d4c <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8018d44:	68bb      	ldr	r3, [r7, #8]
 8018d46:	681b      	ldr	r3, [r3, #0]
 8018d48:	2b00      	cmp	r3, #0
 8018d4a:	d102      	bne.n	8018d52 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8018d4c:	f06f 030f 	mvn.w	r3, #15
 8018d50:	e120      	b.n	8018f94 <etharp_query+0x290>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8018d52:	68fa      	ldr	r2, [r7, #12]
 8018d54:	2101      	movs	r1, #1
 8018d56:	68b8      	ldr	r0, [r7, #8]
 8018d58:	f7ff fb06 	bl	8018368 <etharp_find_entry>
 8018d5c:	4603      	mov	r3, r0
 8018d5e:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8018d60:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8018d64:	2b00      	cmp	r3, #0
 8018d66:	da0b      	bge.n	8018d80 <etharp_query+0x7c>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
 8018d68:	687b      	ldr	r3, [r7, #4]
 8018d6a:	2b00      	cmp	r3, #0
 8018d6c:	d005      	beq.n	8018d7a <etharp_query+0x76>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
 8018d6e:	4b8b      	ldr	r3, [pc, #556]	; (8018f9c <etharp_query+0x298>)
 8018d70:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8018d72:	3301      	adds	r3, #1
 8018d74:	b29a      	uxth	r2, r3
 8018d76:	4b89      	ldr	r3, [pc, #548]	; (8018f9c <etharp_query+0x298>)
 8018d78:	849a      	strh	r2, [r3, #36]	; 0x24
    }
    return (err_t)i_err;
 8018d7a:	8a7b      	ldrh	r3, [r7, #18]
 8018d7c:	b25b      	sxtb	r3, r3
 8018d7e:	e109      	b.n	8018f94 <etharp_query+0x290>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8018d80:	8a7b      	ldrh	r3, [r7, #18]
 8018d82:	2b7e      	cmp	r3, #126	; 0x7e
 8018d84:	d90a      	bls.n	8018d9c <etharp_query+0x98>
 8018d86:	f240 32c1 	movw	r2, #961	; 0x3c1
 8018d8a:	4985      	ldr	r1, [pc, #532]	; (8018fa0 <etharp_query+0x29c>)
 8018d8c:	4885      	ldr	r0, [pc, #532]	; (8018fa4 <etharp_query+0x2a0>)
 8018d8e:	f002 f9c1 	bl	801b114 <trace_printf>
 8018d92:	4985      	ldr	r1, [pc, #532]	; (8018fa8 <etharp_query+0x2a4>)
 8018d94:	4885      	ldr	r0, [pc, #532]	; (8018fac <etharp_query+0x2a8>)
 8018d96:	f002 f9bd 	bl	801b114 <trace_printf>
 8018d9a:	e7fe      	b.n	8018d9a <etharp_query+0x96>
  i = (netif_addr_idx_t)i_err;
 8018d9c:	8a7b      	ldrh	r3, [r7, #18]
 8018d9e:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8018da0:	7c7a      	ldrb	r2, [r7, #17]
 8018da2:	4983      	ldr	r1, [pc, #524]	; (8018fb0 <etharp_query+0x2ac>)
 8018da4:	4613      	mov	r3, r2
 8018da6:	005b      	lsls	r3, r3, #1
 8018da8:	4413      	add	r3, r2
 8018daa:	00db      	lsls	r3, r3, #3
 8018dac:	440b      	add	r3, r1
 8018dae:	3314      	adds	r3, #20
 8018db0:	781b      	ldrb	r3, [r3, #0]
 8018db2:	2b00      	cmp	r3, #0
 8018db4:	d115      	bne.n	8018de2 <etharp_query+0xde>
    is_new_entry = 1;
 8018db6:	2301      	movs	r3, #1
 8018db8:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8018dba:	7c7a      	ldrb	r2, [r7, #17]
 8018dbc:	497c      	ldr	r1, [pc, #496]	; (8018fb0 <etharp_query+0x2ac>)
 8018dbe:	4613      	mov	r3, r2
 8018dc0:	005b      	lsls	r3, r3, #1
 8018dc2:	4413      	add	r3, r2
 8018dc4:	00db      	lsls	r3, r3, #3
 8018dc6:	440b      	add	r3, r1
 8018dc8:	3314      	adds	r3, #20
 8018dca:	2201      	movs	r2, #1
 8018dcc:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8018dce:	7c7a      	ldrb	r2, [r7, #17]
 8018dd0:	4977      	ldr	r1, [pc, #476]	; (8018fb0 <etharp_query+0x2ac>)
 8018dd2:	4613      	mov	r3, r2
 8018dd4:	005b      	lsls	r3, r3, #1
 8018dd6:	4413      	add	r3, r2
 8018dd8:	00db      	lsls	r3, r3, #3
 8018dda:	440b      	add	r3, r1
 8018ddc:	3308      	adds	r3, #8
 8018dde:	68fa      	ldr	r2, [r7, #12]
 8018de0:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8018de2:	7c7a      	ldrb	r2, [r7, #17]
 8018de4:	4972      	ldr	r1, [pc, #456]	; (8018fb0 <etharp_query+0x2ac>)
 8018de6:	4613      	mov	r3, r2
 8018de8:	005b      	lsls	r3, r3, #1
 8018dea:	4413      	add	r3, r2
 8018dec:	00db      	lsls	r3, r3, #3
 8018dee:	440b      	add	r3, r1
 8018df0:	3314      	adds	r3, #20
 8018df2:	781b      	ldrb	r3, [r3, #0]
 8018df4:	2b01      	cmp	r3, #1
 8018df6:	d015      	beq.n	8018e24 <etharp_query+0x120>
 8018df8:	7c7a      	ldrb	r2, [r7, #17]
 8018dfa:	496d      	ldr	r1, [pc, #436]	; (8018fb0 <etharp_query+0x2ac>)
 8018dfc:	4613      	mov	r3, r2
 8018dfe:	005b      	lsls	r3, r3, #1
 8018e00:	4413      	add	r3, r2
 8018e02:	00db      	lsls	r3, r3, #3
 8018e04:	440b      	add	r3, r1
 8018e06:	3314      	adds	r3, #20
 8018e08:	781b      	ldrb	r3, [r3, #0]
 8018e0a:	2b01      	cmp	r3, #1
 8018e0c:	d80a      	bhi.n	8018e24 <etharp_query+0x120>
 8018e0e:	f240 32cd 	movw	r2, #973	; 0x3cd
 8018e12:	4968      	ldr	r1, [pc, #416]	; (8018fb4 <etharp_query+0x2b0>)
 8018e14:	4863      	ldr	r0, [pc, #396]	; (8018fa4 <etharp_query+0x2a0>)
 8018e16:	f002 f97d 	bl	801b114 <trace_printf>
 8018e1a:	4963      	ldr	r1, [pc, #396]	; (8018fa8 <etharp_query+0x2a4>)
 8018e1c:	4863      	ldr	r0, [pc, #396]	; (8018fac <etharp_query+0x2a8>)
 8018e1e:	f002 f979 	bl	801b114 <trace_printf>
 8018e22:	e7fe      	b.n	8018e22 <etharp_query+0x11e>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8018e24:	6a3b      	ldr	r3, [r7, #32]
 8018e26:	2b00      	cmp	r3, #0
 8018e28:	d102      	bne.n	8018e30 <etharp_query+0x12c>
 8018e2a:	687b      	ldr	r3, [r7, #4]
 8018e2c:	2b00      	cmp	r3, #0
 8018e2e:	d10c      	bne.n	8018e4a <etharp_query+0x146>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8018e30:	68b9      	ldr	r1, [r7, #8]
 8018e32:	68f8      	ldr	r0, [r7, #12]
 8018e34:	f000 f990 	bl	8019158 <etharp_request>
 8018e38:	4603      	mov	r3, r0
 8018e3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8018e3e:	687b      	ldr	r3, [r7, #4]
 8018e40:	2b00      	cmp	r3, #0
 8018e42:	d102      	bne.n	8018e4a <etharp_query+0x146>
      return result;
 8018e44:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8018e48:	e0a4      	b.n	8018f94 <etharp_query+0x290>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8018e4a:	687b      	ldr	r3, [r7, #4]
 8018e4c:	2b00      	cmp	r3, #0
 8018e4e:	d10a      	bne.n	8018e66 <etharp_query+0x162>
 8018e50:	f240 32e1 	movw	r2, #993	; 0x3e1
 8018e54:	4958      	ldr	r1, [pc, #352]	; (8018fb8 <etharp_query+0x2b4>)
 8018e56:	4853      	ldr	r0, [pc, #332]	; (8018fa4 <etharp_query+0x2a0>)
 8018e58:	f002 f95c 	bl	801b114 <trace_printf>
 8018e5c:	4952      	ldr	r1, [pc, #328]	; (8018fa8 <etharp_query+0x2a4>)
 8018e5e:	4853      	ldr	r0, [pc, #332]	; (8018fac <etharp_query+0x2a8>)
 8018e60:	f002 f958 	bl	801b114 <trace_printf>
 8018e64:	e7fe      	b.n	8018e64 <etharp_query+0x160>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8018e66:	7c7a      	ldrb	r2, [r7, #17]
 8018e68:	4951      	ldr	r1, [pc, #324]	; (8018fb0 <etharp_query+0x2ac>)
 8018e6a:	4613      	mov	r3, r2
 8018e6c:	005b      	lsls	r3, r3, #1
 8018e6e:	4413      	add	r3, r2
 8018e70:	00db      	lsls	r3, r3, #3
 8018e72:	440b      	add	r3, r1
 8018e74:	3314      	adds	r3, #20
 8018e76:	781b      	ldrb	r3, [r3, #0]
 8018e78:	2b01      	cmp	r3, #1
 8018e7a:	d917      	bls.n	8018eac <etharp_query+0x1a8>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8018e7c:	4a4f      	ldr	r2, [pc, #316]	; (8018fbc <etharp_query+0x2b8>)
 8018e7e:	7c7b      	ldrb	r3, [r7, #17]
 8018e80:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8018e82:	7c7a      	ldrb	r2, [r7, #17]
 8018e84:	4613      	mov	r3, r2
 8018e86:	005b      	lsls	r3, r3, #1
 8018e88:	4413      	add	r3, r2
 8018e8a:	00db      	lsls	r3, r3, #3
 8018e8c:	3308      	adds	r3, #8
 8018e8e:	4a48      	ldr	r2, [pc, #288]	; (8018fb0 <etharp_query+0x2ac>)
 8018e90:	4413      	add	r3, r2
 8018e92:	3304      	adds	r3, #4
 8018e94:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8018e98:	9200      	str	r2, [sp, #0]
 8018e9a:	697a      	ldr	r2, [r7, #20]
 8018e9c:	6879      	ldr	r1, [r7, #4]
 8018e9e:	68f8      	ldr	r0, [r7, #12]
 8018ea0:	f001 fe32 	bl	801ab08 <ethernet_output>
 8018ea4:	4603      	mov	r3, r0
 8018ea6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8018eaa:	e071      	b.n	8018f90 <etharp_query+0x28c>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8018eac:	7c7a      	ldrb	r2, [r7, #17]
 8018eae:	4940      	ldr	r1, [pc, #256]	; (8018fb0 <etharp_query+0x2ac>)
 8018eb0:	4613      	mov	r3, r2
 8018eb2:	005b      	lsls	r3, r3, #1
 8018eb4:	4413      	add	r3, r2
 8018eb6:	00db      	lsls	r3, r3, #3
 8018eb8:	440b      	add	r3, r1
 8018eba:	3314      	adds	r3, #20
 8018ebc:	781b      	ldrb	r3, [r3, #0]
 8018ebe:	2b01      	cmp	r3, #1
 8018ec0:	d166      	bne.n	8018f90 <etharp_query+0x28c>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8018ec2:	2300      	movs	r3, #0
 8018ec4:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8018ec6:	687b      	ldr	r3, [r7, #4]
 8018ec8:	61fb      	str	r3, [r7, #28]
    while (p) {
 8018eca:	e020      	b.n	8018f0e <etharp_query+0x20a>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8018ecc:	69fb      	ldr	r3, [r7, #28]
 8018ece:	895a      	ldrh	r2, [r3, #10]
 8018ed0:	69fb      	ldr	r3, [r7, #28]
 8018ed2:	891b      	ldrh	r3, [r3, #8]
 8018ed4:	429a      	cmp	r2, r3
 8018ed6:	d10e      	bne.n	8018ef6 <etharp_query+0x1f2>
 8018ed8:	69fb      	ldr	r3, [r7, #28]
 8018eda:	681b      	ldr	r3, [r3, #0]
 8018edc:	2b00      	cmp	r3, #0
 8018ede:	d00a      	beq.n	8018ef6 <etharp_query+0x1f2>
 8018ee0:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8018ee4:	4936      	ldr	r1, [pc, #216]	; (8018fc0 <etharp_query+0x2bc>)
 8018ee6:	482f      	ldr	r0, [pc, #188]	; (8018fa4 <etharp_query+0x2a0>)
 8018ee8:	f002 f914 	bl	801b114 <trace_printf>
 8018eec:	492e      	ldr	r1, [pc, #184]	; (8018fa8 <etharp_query+0x2a4>)
 8018eee:	482f      	ldr	r0, [pc, #188]	; (8018fac <etharp_query+0x2a8>)
 8018ef0:	f002 f910 	bl	801b114 <trace_printf>
 8018ef4:	e7fe      	b.n	8018ef4 <etharp_query+0x1f0>
      if (PBUF_NEEDS_COPY(p)) {
 8018ef6:	69fb      	ldr	r3, [r7, #28]
 8018ef8:	7b1b      	ldrb	r3, [r3, #12]
 8018efa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8018efe:	2b00      	cmp	r3, #0
 8018f00:	d002      	beq.n	8018f08 <etharp_query+0x204>
        copy_needed = 1;
 8018f02:	2301      	movs	r3, #1
 8018f04:	61bb      	str	r3, [r7, #24]
        break;
 8018f06:	e005      	b.n	8018f14 <etharp_query+0x210>
      }
      p = p->next;
 8018f08:	69fb      	ldr	r3, [r7, #28]
 8018f0a:	681b      	ldr	r3, [r3, #0]
 8018f0c:	61fb      	str	r3, [r7, #28]
    while (p) {
 8018f0e:	69fb      	ldr	r3, [r7, #28]
 8018f10:	2b00      	cmp	r3, #0
 8018f12:	d1db      	bne.n	8018ecc <etharp_query+0x1c8>
    }
    if (copy_needed) {
 8018f14:	69bb      	ldr	r3, [r7, #24]
 8018f16:	2b00      	cmp	r3, #0
 8018f18:	d007      	beq.n	8018f2a <etharp_query+0x226>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8018f1a:	687a      	ldr	r2, [r7, #4]
 8018f1c:	f44f 7120 	mov.w	r1, #640	; 0x280
 8018f20:	200e      	movs	r0, #14
 8018f22:	f7f5 fed5 	bl	800ecd0 <pbuf_clone>
 8018f26:	61f8      	str	r0, [r7, #28]
 8018f28:	e004      	b.n	8018f34 <etharp_query+0x230>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8018f2a:	687b      	ldr	r3, [r7, #4]
 8018f2c:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8018f2e:	69f8      	ldr	r0, [r7, #28]
 8018f30:	f7f5 fcd6 	bl	800e8e0 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8018f34:	69fb      	ldr	r3, [r7, #28]
 8018f36:	2b00      	cmp	r3, #0
 8018f38:	d021      	beq.n	8018f7e <etharp_query+0x27a>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8018f3a:	7c7a      	ldrb	r2, [r7, #17]
 8018f3c:	491c      	ldr	r1, [pc, #112]	; (8018fb0 <etharp_query+0x2ac>)
 8018f3e:	4613      	mov	r3, r2
 8018f40:	005b      	lsls	r3, r3, #1
 8018f42:	4413      	add	r3, r2
 8018f44:	00db      	lsls	r3, r3, #3
 8018f46:	440b      	add	r3, r1
 8018f48:	681b      	ldr	r3, [r3, #0]
 8018f4a:	2b00      	cmp	r3, #0
 8018f4c:	d00a      	beq.n	8018f64 <etharp_query+0x260>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8018f4e:	7c7a      	ldrb	r2, [r7, #17]
 8018f50:	4917      	ldr	r1, [pc, #92]	; (8018fb0 <etharp_query+0x2ac>)
 8018f52:	4613      	mov	r3, r2
 8018f54:	005b      	lsls	r3, r3, #1
 8018f56:	4413      	add	r3, r2
 8018f58:	00db      	lsls	r3, r3, #3
 8018f5a:	440b      	add	r3, r1
 8018f5c:	681b      	ldr	r3, [r3, #0]
 8018f5e:	4618      	mov	r0, r3
 8018f60:	f7f5 fc06 	bl	800e770 <pbuf_free>
      }
      arp_table[i].q = p;
 8018f64:	7c7a      	ldrb	r2, [r7, #17]
 8018f66:	4912      	ldr	r1, [pc, #72]	; (8018fb0 <etharp_query+0x2ac>)
 8018f68:	4613      	mov	r3, r2
 8018f6a:	005b      	lsls	r3, r3, #1
 8018f6c:	4413      	add	r3, r2
 8018f6e:	00db      	lsls	r3, r3, #3
 8018f70:	440b      	add	r3, r1
 8018f72:	69fa      	ldr	r2, [r7, #28]
 8018f74:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8018f76:	2300      	movs	r3, #0
 8018f78:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8018f7c:	e008      	b.n	8018f90 <etharp_query+0x28c>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
 8018f7e:	4b07      	ldr	r3, [pc, #28]	; (8018f9c <etharp_query+0x298>)
 8018f80:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8018f82:	3301      	adds	r3, #1
 8018f84:	b29a      	uxth	r2, r3
 8018f86:	4b05      	ldr	r3, [pc, #20]	; (8018f9c <etharp_query+0x298>)
 8018f88:	849a      	strh	r2, [r3, #36]	; 0x24
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8018f8a:	23ff      	movs	r3, #255	; 0xff
 8018f8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8018f90:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8018f94:	4618      	mov	r0, r3
 8018f96:	3728      	adds	r7, #40	; 0x28
 8018f98:	46bd      	mov	sp, r7
 8018f9a:	bd80      	pop	{r7, pc}
 8018f9c:	20010b7c 	.word	0x20010b7c
 8018fa0:	0802006c 	.word	0x0802006c
 8018fa4:	0801ff04 	.word	0x0801ff04
 8018fa8:	0801ff24 	.word	0x0801ff24
 8018fac:	0801ff5c 	.word	0x0801ff5c
 8018fb0:	20009fe0 	.word	0x20009fe0
 8018fb4:	0802007c 	.word	0x0802007c
 8018fb8:	08020060 	.word	0x08020060
 8018fbc:	2000a0d0 	.word	0x2000a0d0
 8018fc0:	080200a4 	.word	0x080200a4

08018fc4 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8018fc4:	b580      	push	{r7, lr}
 8018fc6:	b08a      	sub	sp, #40	; 0x28
 8018fc8:	af02      	add	r7, sp, #8
 8018fca:	60f8      	str	r0, [r7, #12]
 8018fcc:	60b9      	str	r1, [r7, #8]
 8018fce:	607a      	str	r2, [r7, #4]
 8018fd0:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8018fd2:	2300      	movs	r3, #0
 8018fd4:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8018fd6:	68fb      	ldr	r3, [r7, #12]
 8018fd8:	2b00      	cmp	r3, #0
 8018fda:	d10a      	bne.n	8018ff2 <etharp_raw+0x2e>
 8018fdc:	f240 4257 	movw	r2, #1111	; 0x457
 8018fe0:	4945      	ldr	r1, [pc, #276]	; (80190f8 <etharp_raw+0x134>)
 8018fe2:	4846      	ldr	r0, [pc, #280]	; (80190fc <etharp_raw+0x138>)
 8018fe4:	f002 f896 	bl	801b114 <trace_printf>
 8018fe8:	4945      	ldr	r1, [pc, #276]	; (8019100 <etharp_raw+0x13c>)
 8018fea:	4846      	ldr	r0, [pc, #280]	; (8019104 <etharp_raw+0x140>)
 8018fec:	f002 f892 	bl	801b114 <trace_printf>
 8018ff0:	e7fe      	b.n	8018ff0 <etharp_raw+0x2c>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8018ff2:	f44f 7220 	mov.w	r2, #640	; 0x280
 8018ff6:	211c      	movs	r1, #28
 8018ff8:	200e      	movs	r0, #14
 8018ffa:	f7f5 f8a3 	bl	800e144 <pbuf_alloc>
 8018ffe:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8019000:	69bb      	ldr	r3, [r7, #24]
 8019002:	2b00      	cmp	r3, #0
 8019004:	d108      	bne.n	8019018 <etharp_raw+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
 8019006:	4b40      	ldr	r3, [pc, #256]	; (8019108 <etharp_raw+0x144>)
 8019008:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801900a:	3301      	adds	r3, #1
 801900c:	b29a      	uxth	r2, r3
 801900e:	4b3e      	ldr	r3, [pc, #248]	; (8019108 <etharp_raw+0x144>)
 8019010:	849a      	strh	r2, [r3, #36]	; 0x24
    return ERR_MEM;
 8019012:	f04f 33ff 	mov.w	r3, #4294967295
 8019016:	e06b      	b.n	80190f0 <etharp_raw+0x12c>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8019018:	69bb      	ldr	r3, [r7, #24]
 801901a:	895b      	ldrh	r3, [r3, #10]
 801901c:	2b1b      	cmp	r3, #27
 801901e:	d80a      	bhi.n	8019036 <etharp_raw+0x72>
 8019020:	f240 4262 	movw	r2, #1122	; 0x462
 8019024:	4939      	ldr	r1, [pc, #228]	; (801910c <etharp_raw+0x148>)
 8019026:	4835      	ldr	r0, [pc, #212]	; (80190fc <etharp_raw+0x138>)
 8019028:	f002 f874 	bl	801b114 <trace_printf>
 801902c:	4934      	ldr	r1, [pc, #208]	; (8019100 <etharp_raw+0x13c>)
 801902e:	4835      	ldr	r0, [pc, #212]	; (8019104 <etharp_raw+0x140>)
 8019030:	f002 f870 	bl	801b114 <trace_printf>
 8019034:	e7fe      	b.n	8019034 <etharp_raw+0x70>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8019036:	69bb      	ldr	r3, [r7, #24]
 8019038:	685b      	ldr	r3, [r3, #4]
 801903a:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 801903c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801903e:	4618      	mov	r0, r3
 8019040:	f7f3 fe80 	bl	800cd44 <lwip_htons>
 8019044:	4603      	mov	r3, r0
 8019046:	461a      	mov	r2, r3
 8019048:	697b      	ldr	r3, [r7, #20]
 801904a:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 801904c:	68fb      	ldr	r3, [r7, #12]
 801904e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8019052:	2b06      	cmp	r3, #6
 8019054:	d00a      	beq.n	801906c <etharp_raw+0xa8>
 8019056:	f240 4269 	movw	r2, #1129	; 0x469
 801905a:	492d      	ldr	r1, [pc, #180]	; (8019110 <etharp_raw+0x14c>)
 801905c:	4827      	ldr	r0, [pc, #156]	; (80190fc <etharp_raw+0x138>)
 801905e:	f002 f859 	bl	801b114 <trace_printf>
 8019062:	4927      	ldr	r1, [pc, #156]	; (8019100 <etharp_raw+0x13c>)
 8019064:	4827      	ldr	r0, [pc, #156]	; (8019104 <etharp_raw+0x140>)
 8019066:	f002 f855 	bl	801b114 <trace_printf>
 801906a:	e7fe      	b.n	801906a <etharp_raw+0xa6>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 801906c:	697b      	ldr	r3, [r7, #20]
 801906e:	3308      	adds	r3, #8
 8019070:	2206      	movs	r2, #6
 8019072:	6839      	ldr	r1, [r7, #0]
 8019074:	4618      	mov	r0, r3
 8019076:	f002 f8a1 	bl	801b1bc <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 801907a:	697b      	ldr	r3, [r7, #20]
 801907c:	3312      	adds	r3, #18
 801907e:	2206      	movs	r2, #6
 8019080:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8019082:	4618      	mov	r0, r3
 8019084:	f002 f89a 	bl	801b1bc <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8019088:	697b      	ldr	r3, [r7, #20]
 801908a:	330e      	adds	r3, #14
 801908c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801908e:	6812      	ldr	r2, [r2, #0]
 8019090:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8019092:	697b      	ldr	r3, [r7, #20]
 8019094:	3318      	adds	r3, #24
 8019096:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8019098:	6812      	ldr	r2, [r2, #0]
 801909a:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 801909c:	697b      	ldr	r3, [r7, #20]
 801909e:	2200      	movs	r2, #0
 80190a0:	701a      	strb	r2, [r3, #0]
 80190a2:	2200      	movs	r2, #0
 80190a4:	f042 0201 	orr.w	r2, r2, #1
 80190a8:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 80190aa:	697b      	ldr	r3, [r7, #20]
 80190ac:	2200      	movs	r2, #0
 80190ae:	f042 0208 	orr.w	r2, r2, #8
 80190b2:	709a      	strb	r2, [r3, #2]
 80190b4:	2200      	movs	r2, #0
 80190b6:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 80190b8:	697b      	ldr	r3, [r7, #20]
 80190ba:	2206      	movs	r2, #6
 80190bc:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 80190be:	697b      	ldr	r3, [r7, #20]
 80190c0:	2204      	movs	r2, #4
 80190c2:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 80190c4:	f640 0306 	movw	r3, #2054	; 0x806
 80190c8:	9300      	str	r3, [sp, #0]
 80190ca:	687b      	ldr	r3, [r7, #4]
 80190cc:	68ba      	ldr	r2, [r7, #8]
 80190ce:	69b9      	ldr	r1, [r7, #24]
 80190d0:	68f8      	ldr	r0, [r7, #12]
 80190d2:	f001 fd19 	bl	801ab08 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
 80190d6:	4b0c      	ldr	r3, [pc, #48]	; (8019108 <etharp_raw+0x144>)
 80190d8:	8b1b      	ldrh	r3, [r3, #24]
 80190da:	3301      	adds	r3, #1
 80190dc:	b29a      	uxth	r2, r3
 80190de:	4b0a      	ldr	r3, [pc, #40]	; (8019108 <etharp_raw+0x144>)
 80190e0:	831a      	strh	r2, [r3, #24]
  /* free ARP query packet */
  pbuf_free(p);
 80190e2:	69b8      	ldr	r0, [r7, #24]
 80190e4:	f7f5 fb44 	bl	800e770 <pbuf_free>
  p = NULL;
 80190e8:	2300      	movs	r3, #0
 80190ea:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 80190ec:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80190f0:	4618      	mov	r0, r3
 80190f2:	3720      	adds	r7, #32
 80190f4:	46bd      	mov	sp, r7
 80190f6:	bd80      	pop	{r7, pc}
 80190f8:	08020010 	.word	0x08020010
 80190fc:	0801ff04 	.word	0x0801ff04
 8019100:	0801ff24 	.word	0x0801ff24
 8019104:	0801ff5c 	.word	0x0801ff5c
 8019108:	20010b7c 	.word	0x20010b7c
 801910c:	080200c0 	.word	0x080200c0
 8019110:	080200f4 	.word	0x080200f4

08019114 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8019114:	b580      	push	{r7, lr}
 8019116:	b088      	sub	sp, #32
 8019118:	af04      	add	r7, sp, #16
 801911a:	60f8      	str	r0, [r7, #12]
 801911c:	60b9      	str	r1, [r7, #8]
 801911e:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8019120:	68fb      	ldr	r3, [r7, #12]
 8019122:	f103 012a 	add.w	r1, r3, #42	; 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8019126:	68fb      	ldr	r3, [r7, #12]
 8019128:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 801912c:	68fb      	ldr	r3, [r7, #12]
 801912e:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8019130:	2201      	movs	r2, #1
 8019132:	9203      	str	r2, [sp, #12]
 8019134:	68ba      	ldr	r2, [r7, #8]
 8019136:	9202      	str	r2, [sp, #8]
 8019138:	4a06      	ldr	r2, [pc, #24]	; (8019154 <etharp_request_dst+0x40>)
 801913a:	9201      	str	r2, [sp, #4]
 801913c:	9300      	str	r3, [sp, #0]
 801913e:	4603      	mov	r3, r0
 8019140:	687a      	ldr	r2, [r7, #4]
 8019142:	68f8      	ldr	r0, [r7, #12]
 8019144:	f7ff ff3e 	bl	8018fc4 <etharp_raw>
 8019148:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 801914a:	4618      	mov	r0, r3
 801914c:	3710      	adds	r7, #16
 801914e:	46bd      	mov	sp, r7
 8019150:	bd80      	pop	{r7, pc}
 8019152:	bf00      	nop
 8019154:	08020728 	.word	0x08020728

08019158 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8019158:	b580      	push	{r7, lr}
 801915a:	b082      	sub	sp, #8
 801915c:	af00      	add	r7, sp, #0
 801915e:	6078      	str	r0, [r7, #4]
 8019160:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8019162:	4a05      	ldr	r2, [pc, #20]	; (8019178 <etharp_request+0x20>)
 8019164:	6839      	ldr	r1, [r7, #0]
 8019166:	6878      	ldr	r0, [r7, #4]
 8019168:	f7ff ffd4 	bl	8019114 <etharp_request_dst>
 801916c:	4603      	mov	r3, r0
}
 801916e:	4618      	mov	r0, r3
 8019170:	3708      	adds	r7, #8
 8019172:	46bd      	mov	sp, r7
 8019174:	bd80      	pop	{r7, pc}
 8019176:	bf00      	nop
 8019178:	08020720 	.word	0x08020720

0801917c <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 801917c:	b580      	push	{r7, lr}
 801917e:	b08e      	sub	sp, #56	; 0x38
 8019180:	af04      	add	r7, sp, #16
 8019182:	6078      	str	r0, [r7, #4]
 8019184:	6039      	str	r1, [r7, #0]
  struct icmp_echo_hdr *iecho;
  const struct ip_hdr *iphdr_in;
  u16_t hlen;
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
 8019186:	4b96      	ldr	r3, [pc, #600]	; (80193e0 <icmp_input+0x264>)
 8019188:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801918c:	3301      	adds	r3, #1
 801918e:	b29a      	uxth	r2, r3
 8019190:	4b93      	ldr	r3, [pc, #588]	; (80193e0 <icmp_input+0x264>)
 8019192:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8019196:	4b93      	ldr	r3, [pc, #588]	; (80193e4 <icmp_input+0x268>)
 8019198:	689b      	ldr	r3, [r3, #8]
 801919a:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 801919c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801919e:	781b      	ldrb	r3, [r3, #0]
 80191a0:	f003 030f 	and.w	r3, r3, #15
 80191a4:	b2db      	uxtb	r3, r3
 80191a6:	009b      	lsls	r3, r3, #2
 80191a8:	b2db      	uxtb	r3, r3
 80191aa:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 80191ac:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80191ae:	2b13      	cmp	r3, #19
 80191b0:	f240 80ee 	bls.w	8019390 <icmp_input+0x214>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 80191b4:	687b      	ldr	r3, [r7, #4]
 80191b6:	895b      	ldrh	r3, [r3, #10]
 80191b8:	2b03      	cmp	r3, #3
 80191ba:	f240 80eb 	bls.w	8019394 <icmp_input+0x218>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 80191be:	687b      	ldr	r3, [r7, #4]
 80191c0:	685b      	ldr	r3, [r3, #4]
 80191c2:	781b      	ldrb	r3, [r3, #0]
 80191c4:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
 80191c8:	687b      	ldr	r3, [r7, #4]
 80191ca:	685b      	ldr	r3, [r3, #4]
 80191cc:	785b      	ldrb	r3, [r3, #1]
 80191ce:	f887 3020 	strb.w	r3, [r7, #32]
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 80191d2:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80191d6:	2b00      	cmp	r3, #0
 80191d8:	f000 80d3 	beq.w	8019382 <icmp_input+0x206>
 80191dc:	2b08      	cmp	r3, #8
 80191de:	f040 80bf 	bne.w	8019360 <icmp_input+0x1e4>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 80191e2:	4b81      	ldr	r3, [pc, #516]	; (80193e8 <icmp_input+0x26c>)
 80191e4:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80191e6:	4b7f      	ldr	r3, [pc, #508]	; (80193e4 <icmp_input+0x268>)
 80191e8:	695b      	ldr	r3, [r3, #20]
 80191ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80191ee:	2be0      	cmp	r3, #224	; 0xe0
 80191f0:	f000 80df 	beq.w	80193b2 <icmp_input+0x236>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 80191f4:	4b7b      	ldr	r3, [pc, #492]	; (80193e4 <icmp_input+0x268>)
 80191f6:	695b      	ldr	r3, [r3, #20]
 80191f8:	4a7a      	ldr	r2, [pc, #488]	; (80193e4 <icmp_input+0x268>)
 80191fa:	6812      	ldr	r2, [r2, #0]
 80191fc:	4611      	mov	r1, r2
 80191fe:	4618      	mov	r0, r3
 8019200:	f000 fcc8 	bl	8019b94 <ip4_addr_isbroadcast_u32>
 8019204:	4603      	mov	r3, r0
 8019206:	2b00      	cmp	r3, #0
 8019208:	f040 80d5 	bne.w	80193b6 <icmp_input+0x23a>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801920c:	687b      	ldr	r3, [r7, #4]
 801920e:	891b      	ldrh	r3, [r3, #8]
 8019210:	2b07      	cmp	r3, #7
 8019212:	f240 80c1 	bls.w	8019398 <icmp_input+0x21c>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8019216:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8019218:	330e      	adds	r3, #14
 801921a:	4619      	mov	r1, r3
 801921c:	6878      	ldr	r0, [r7, #4]
 801921e:	f7f5 fa09 	bl	800e634 <pbuf_add_header>
 8019222:	4603      	mov	r3, r0
 8019224:	2b00      	cmp	r3, #0
 8019226:	d04b      	beq.n	80192c0 <icmp_input+0x144>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8019228:	687b      	ldr	r3, [r7, #4]
 801922a:	891a      	ldrh	r2, [r3, #8]
 801922c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801922e:	4413      	add	r3, r2
 8019230:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8019232:	687b      	ldr	r3, [r7, #4]
 8019234:	891b      	ldrh	r3, [r3, #8]
 8019236:	8b7a      	ldrh	r2, [r7, #26]
 8019238:	429a      	cmp	r2, r3
 801923a:	f0c0 80be 	bcc.w	80193ba <icmp_input+0x23e>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 801923e:	8b7b      	ldrh	r3, [r7, #26]
 8019240:	f44f 7220 	mov.w	r2, #640	; 0x280
 8019244:	4619      	mov	r1, r3
 8019246:	200e      	movs	r0, #14
 8019248:	f7f4 ff7c 	bl	800e144 <pbuf_alloc>
 801924c:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 801924e:	697b      	ldr	r3, [r7, #20]
 8019250:	2b00      	cmp	r3, #0
 8019252:	f000 80b4 	beq.w	80193be <icmp_input+0x242>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8019256:	697b      	ldr	r3, [r7, #20]
 8019258:	895b      	ldrh	r3, [r3, #10]
 801925a:	461a      	mov	r2, r3
 801925c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801925e:	3308      	adds	r3, #8
 8019260:	429a      	cmp	r2, r3
 8019262:	d203      	bcs.n	801926c <icmp_input+0xf0>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8019264:	6978      	ldr	r0, [r7, #20]
 8019266:	f7f5 fa83 	bl	800e770 <pbuf_free>
          goto icmperr;
 801926a:	e0a9      	b.n	80193c0 <icmp_input+0x244>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 801926c:	697b      	ldr	r3, [r7, #20]
 801926e:	685b      	ldr	r3, [r3, #4]
 8019270:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8019272:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8019274:	4618      	mov	r0, r3
 8019276:	f001 ffa1 	bl	801b1bc <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 801927a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801927c:	4619      	mov	r1, r3
 801927e:	6978      	ldr	r0, [r7, #20]
 8019280:	f7f5 f9e8 	bl	800e654 <pbuf_remove_header>
 8019284:	4603      	mov	r3, r0
 8019286:	2b00      	cmp	r3, #0
 8019288:	d009      	beq.n	801929e <icmp_input+0x122>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 801928a:	22b6      	movs	r2, #182	; 0xb6
 801928c:	4957      	ldr	r1, [pc, #348]	; (80193ec <icmp_input+0x270>)
 801928e:	4858      	ldr	r0, [pc, #352]	; (80193f0 <icmp_input+0x274>)
 8019290:	f001 ff40 	bl	801b114 <trace_printf>
 8019294:	4957      	ldr	r1, [pc, #348]	; (80193f4 <icmp_input+0x278>)
 8019296:	4858      	ldr	r0, [pc, #352]	; (80193f8 <icmp_input+0x27c>)
 8019298:	f001 ff3c 	bl	801b114 <trace_printf>
 801929c:	e7fe      	b.n	801929c <icmp_input+0x120>
          pbuf_free(r);
          goto icmperr;
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 801929e:	6879      	ldr	r1, [r7, #4]
 80192a0:	6978      	ldr	r0, [r7, #20]
 80192a2:	f7f5 fbbd 	bl	800ea20 <pbuf_copy>
 80192a6:	4603      	mov	r3, r0
 80192a8:	2b00      	cmp	r3, #0
 80192aa:	d003      	beq.n	80192b4 <icmp_input+0x138>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 80192ac:	6978      	ldr	r0, [r7, #20]
 80192ae:	f7f5 fa5f 	bl	800e770 <pbuf_free>
          goto icmperr;
 80192b2:	e085      	b.n	80193c0 <icmp_input+0x244>
        }
        /* free the original p */
        pbuf_free(p);
 80192b4:	6878      	ldr	r0, [r7, #4]
 80192b6:	f7f5 fa5b 	bl	800e770 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 80192ba:	697b      	ldr	r3, [r7, #20]
 80192bc:	607b      	str	r3, [r7, #4]
 80192be:	e012      	b.n	80192e6 <icmp_input+0x16a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80192c0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80192c2:	330e      	adds	r3, #14
 80192c4:	4619      	mov	r1, r3
 80192c6:	6878      	ldr	r0, [r7, #4]
 80192c8:	f7f5 f9c4 	bl	800e654 <pbuf_remove_header>
 80192cc:	4603      	mov	r3, r0
 80192ce:	2b00      	cmp	r3, #0
 80192d0:	d009      	beq.n	80192e6 <icmp_input+0x16a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 80192d2:	22c7      	movs	r2, #199	; 0xc7
 80192d4:	4949      	ldr	r1, [pc, #292]	; (80193fc <icmp_input+0x280>)
 80192d6:	4846      	ldr	r0, [pc, #280]	; (80193f0 <icmp_input+0x274>)
 80192d8:	f001 ff1c 	bl	801b114 <trace_printf>
 80192dc:	4945      	ldr	r1, [pc, #276]	; (80193f4 <icmp_input+0x278>)
 80192de:	4846      	ldr	r0, [pc, #280]	; (80193f8 <icmp_input+0x27c>)
 80192e0:	f001 ff18 	bl	801b114 <trace_printf>
 80192e4:	e7fe      	b.n	80192e4 <icmp_input+0x168>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 80192e6:	687b      	ldr	r3, [r7, #4]
 80192e8:	685b      	ldr	r3, [r3, #4]
 80192ea:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 80192ec:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80192ee:	4619      	mov	r1, r3
 80192f0:	6878      	ldr	r0, [r7, #4]
 80192f2:	f7f5 f99f 	bl	800e634 <pbuf_add_header>
 80192f6:	4603      	mov	r3, r0
 80192f8:	2b00      	cmp	r3, #0
 80192fa:	d144      	bne.n	8019386 <icmp_input+0x20a>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 80192fc:	687b      	ldr	r3, [r7, #4]
 80192fe:	685b      	ldr	r3, [r3, #4]
 8019300:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8019302:	69fb      	ldr	r3, [r7, #28]
 8019304:	681a      	ldr	r2, [r3, #0]
 8019306:	68fb      	ldr	r3, [r7, #12]
 8019308:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801930a:	4b36      	ldr	r3, [pc, #216]	; (80193e4 <icmp_input+0x268>)
 801930c:	691a      	ldr	r2, [r3, #16]
 801930e:	68fb      	ldr	r3, [r7, #12]
 8019310:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8019312:	693b      	ldr	r3, [r7, #16]
 8019314:	2200      	movs	r2, #0
 8019316:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8019318:	693b      	ldr	r3, [r7, #16]
 801931a:	2200      	movs	r2, #0
 801931c:	709a      	strb	r2, [r3, #2]
 801931e:	2200      	movs	r2, #0
 8019320:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8019322:	68fb      	ldr	r3, [r7, #12]
 8019324:	22ff      	movs	r2, #255	; 0xff
 8019326:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8019328:	68fb      	ldr	r3, [r7, #12]
 801932a:	2200      	movs	r2, #0
 801932c:	729a      	strb	r2, [r3, #10]
 801932e:	2200      	movs	r2, #0
 8019330:	72da      	strb	r2, [r3, #11]
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_IP) {
          IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, hlen));
        }
#endif /* CHECKSUM_GEN_IP */

        ICMP_STATS_INC(icmp.xmit);
 8019332:	4b2b      	ldr	r3, [pc, #172]	; (80193e0 <icmp_input+0x264>)
 8019334:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8019338:	3301      	adds	r3, #1
 801933a:	b29a      	uxth	r2, r3
 801933c:	4b28      	ldr	r3, [pc, #160]	; (80193e0 <icmp_input+0x264>)
 801933e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8019342:	683b      	ldr	r3, [r7, #0]
 8019344:	9302      	str	r3, [sp, #8]
 8019346:	2301      	movs	r3, #1
 8019348:	9301      	str	r3, [sp, #4]
 801934a:	2300      	movs	r3, #0
 801934c:	9300      	str	r3, [sp, #0]
 801934e:	23ff      	movs	r3, #255	; 0xff
 8019350:	2200      	movs	r2, #0
 8019352:	69f9      	ldr	r1, [r7, #28]
 8019354:	6878      	ldr	r0, [r7, #4]
 8019356:	f000 fb21 	bl	801999c <ip4_output_if>
 801935a:	4603      	mov	r3, r0
 801935c:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 801935e:	e012      	b.n	8019386 <icmp_input+0x20a>
      } else if (type == ICMP_AMR) {
        MIB2_STATS_INC(mib2.icmpinaddrmaskreps);
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
 8019360:	4b1f      	ldr	r3, [pc, #124]	; (80193e0 <icmp_input+0x264>)
 8019362:	f8b3 3070 	ldrh.w	r3, [r3, #112]	; 0x70
 8019366:	3301      	adds	r3, #1
 8019368:	b29a      	uxth	r2, r3
 801936a:	4b1d      	ldr	r3, [pc, #116]	; (80193e0 <icmp_input+0x264>)
 801936c:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
      ICMP_STATS_INC(icmp.drop);
 8019370:	4b1b      	ldr	r3, [pc, #108]	; (80193e0 <icmp_input+0x264>)
 8019372:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8019376:	3301      	adds	r3, #1
 8019378:	b29a      	uxth	r2, r3
 801937a:	4b19      	ldr	r3, [pc, #100]	; (80193e0 <icmp_input+0x264>)
 801937c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
 8019380:	e002      	b.n	8019388 <icmp_input+0x20c>
      break;
 8019382:	bf00      	nop
 8019384:	e000      	b.n	8019388 <icmp_input+0x20c>
      break;
 8019386:	bf00      	nop
  }
  pbuf_free(p);
 8019388:	6878      	ldr	r0, [r7, #4]
 801938a:	f7f5 f9f1 	bl	800e770 <pbuf_free>
  return;
 801938e:	e023      	b.n	80193d8 <icmp_input+0x25c>
    goto lenerr;
 8019390:	bf00      	nop
 8019392:	e002      	b.n	801939a <icmp_input+0x21e>
    goto lenerr;
 8019394:	bf00      	nop
 8019396:	e000      	b.n	801939a <icmp_input+0x21e>
        goto lenerr;
 8019398:	bf00      	nop
lenerr:
  pbuf_free(p);
 801939a:	6878      	ldr	r0, [r7, #4]
 801939c:	f7f5 f9e8 	bl	800e770 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
 80193a0:	4b0f      	ldr	r3, [pc, #60]	; (80193e0 <icmp_input+0x264>)
 80193a2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80193a6:	3301      	adds	r3, #1
 80193a8:	b29a      	uxth	r2, r3
 80193aa:	4b0d      	ldr	r3, [pc, #52]	; (80193e0 <icmp_input+0x264>)
 80193ac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80193b0:	e012      	b.n	80193d8 <icmp_input+0x25c>
        goto icmperr;
 80193b2:	bf00      	nop
 80193b4:	e004      	b.n	80193c0 <icmp_input+0x244>
        goto icmperr;
 80193b6:	bf00      	nop
 80193b8:	e002      	b.n	80193c0 <icmp_input+0x244>
          goto icmperr;
 80193ba:	bf00      	nop
 80193bc:	e000      	b.n	80193c0 <icmp_input+0x244>
          goto icmperr;
 80193be:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 80193c0:	6878      	ldr	r0, [r7, #4]
 80193c2:	f7f5 f9d5 	bl	800e770 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
 80193c6:	4b06      	ldr	r3, [pc, #24]	; (80193e0 <icmp_input+0x264>)
 80193c8:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 80193cc:	3301      	adds	r3, #1
 80193ce:	b29a      	uxth	r2, r3
 80193d0:	4b03      	ldr	r3, [pc, #12]	; (80193e0 <icmp_input+0x264>)
 80193d2:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80193d6:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 80193d8:	3728      	adds	r7, #40	; 0x28
 80193da:	46bd      	mov	sp, r7
 80193dc:	bd80      	pop	{r7, pc}
 80193de:	bf00      	nop
 80193e0:	20010b7c 	.word	0x20010b7c
 80193e4:	2000d40c 	.word	0x2000d40c
 80193e8:	2000d420 	.word	0x2000d420
 80193ec:	08020138 	.word	0x08020138
 80193f0:	08020170 	.word	0x08020170
 80193f4:	08020190 	.word	0x08020190
 80193f8:	080201c8 	.word	0x080201c8
 80193fc:	080201cc 	.word	0x080201cc

08019400 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8019400:	b580      	push	{r7, lr}
 8019402:	b082      	sub	sp, #8
 8019404:	af00      	add	r7, sp, #0
 8019406:	6078      	str	r0, [r7, #4]
 8019408:	460b      	mov	r3, r1
 801940a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 801940c:	78fb      	ldrb	r3, [r7, #3]
 801940e:	461a      	mov	r2, r3
 8019410:	2103      	movs	r1, #3
 8019412:	6878      	ldr	r0, [r7, #4]
 8019414:	f000 f814 	bl	8019440 <icmp_send_response>
}
 8019418:	bf00      	nop
 801941a:	3708      	adds	r7, #8
 801941c:	46bd      	mov	sp, r7
 801941e:	bd80      	pop	{r7, pc}

08019420 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8019420:	b580      	push	{r7, lr}
 8019422:	b082      	sub	sp, #8
 8019424:	af00      	add	r7, sp, #0
 8019426:	6078      	str	r0, [r7, #4]
 8019428:	460b      	mov	r3, r1
 801942a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 801942c:	78fb      	ldrb	r3, [r7, #3]
 801942e:	461a      	mov	r2, r3
 8019430:	210b      	movs	r1, #11
 8019432:	6878      	ldr	r0, [r7, #4]
 8019434:	f000 f804 	bl	8019440 <icmp_send_response>
}
 8019438:	bf00      	nop
 801943a:	3708      	adds	r7, #8
 801943c:	46bd      	mov	sp, r7
 801943e:	bd80      	pop	{r7, pc}

08019440 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8019440:	b580      	push	{r7, lr}
 8019442:	b08c      	sub	sp, #48	; 0x30
 8019444:	af04      	add	r7, sp, #16
 8019446:	6078      	str	r0, [r7, #4]
 8019448:	460b      	mov	r3, r1
 801944a:	70fb      	strb	r3, [r7, #3]
 801944c:	4613      	mov	r3, r2
 801944e:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8019450:	f44f 7220 	mov.w	r2, #640	; 0x280
 8019454:	2124      	movs	r1, #36	; 0x24
 8019456:	2022      	movs	r0, #34	; 0x22
 8019458:	f7f4 fe74 	bl	800e144 <pbuf_alloc>
 801945c:	61b8      	str	r0, [r7, #24]
                 PBUF_RAM);
  if (q == NULL) {
 801945e:	69bb      	ldr	r3, [r7, #24]
 8019460:	2b00      	cmp	r3, #0
 8019462:	d058      	beq.n	8019516 <icmp_send_response+0xd6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8019464:	69bb      	ldr	r3, [r7, #24]
 8019466:	895b      	ldrh	r3, [r3, #10]
 8019468:	2b23      	cmp	r3, #35	; 0x23
 801946a:	d80a      	bhi.n	8019482 <icmp_send_response+0x42>
 801946c:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8019470:	492b      	ldr	r1, [pc, #172]	; (8019520 <icmp_send_response+0xe0>)
 8019472:	482c      	ldr	r0, [pc, #176]	; (8019524 <icmp_send_response+0xe4>)
 8019474:	f001 fe4e 	bl	801b114 <trace_printf>
 8019478:	492b      	ldr	r1, [pc, #172]	; (8019528 <icmp_send_response+0xe8>)
 801947a:	482c      	ldr	r0, [pc, #176]	; (801952c <icmp_send_response+0xec>)
 801947c:	f001 fe4a 	bl	801b114 <trace_printf>
 8019480:	e7fe      	b.n	8019480 <icmp_send_response+0x40>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8019482:	687b      	ldr	r3, [r7, #4]
 8019484:	685b      	ldr	r3, [r3, #4]
 8019486:	617b      	str	r3, [r7, #20]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8019488:	69bb      	ldr	r3, [r7, #24]
 801948a:	685b      	ldr	r3, [r3, #4]
 801948c:	613b      	str	r3, [r7, #16]
  icmphdr->type = type;
 801948e:	693b      	ldr	r3, [r7, #16]
 8019490:	78fa      	ldrb	r2, [r7, #3]
 8019492:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8019494:	693b      	ldr	r3, [r7, #16]
 8019496:	78ba      	ldrb	r2, [r7, #2]
 8019498:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 801949a:	693b      	ldr	r3, [r7, #16]
 801949c:	2200      	movs	r2, #0
 801949e:	711a      	strb	r2, [r3, #4]
 80194a0:	2200      	movs	r2, #0
 80194a2:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 80194a4:	693b      	ldr	r3, [r7, #16]
 80194a6:	2200      	movs	r2, #0
 80194a8:	719a      	strb	r2, [r3, #6]
 80194aa:	2200      	movs	r2, #0
 80194ac:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 80194ae:	69bb      	ldr	r3, [r7, #24]
 80194b0:	685b      	ldr	r3, [r3, #4]
 80194b2:	f103 0008 	add.w	r0, r3, #8
 80194b6:	687b      	ldr	r3, [r7, #4]
 80194b8:	685b      	ldr	r3, [r3, #4]
 80194ba:	221c      	movs	r2, #28
 80194bc:	4619      	mov	r1, r3
 80194be:	f001 fe7d 	bl	801b1bc <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 80194c2:	697b      	ldr	r3, [r7, #20]
 80194c4:	68db      	ldr	r3, [r3, #12]
 80194c6:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 80194c8:	f107 030c 	add.w	r3, r7, #12
 80194cc:	4618      	mov	r0, r3
 80194ce:	f000 f831 	bl	8019534 <ip4_route>
 80194d2:	61f8      	str	r0, [r7, #28]
#endif
  if (netif != NULL) {
 80194d4:	69fb      	ldr	r3, [r7, #28]
 80194d6:	2b00      	cmp	r3, #0
 80194d8:	d019      	beq.n	801950e <icmp_send_response+0xce>
    /* calculate checksum */
    icmphdr->chksum = 0;
 80194da:	693b      	ldr	r3, [r7, #16]
 80194dc:	2200      	movs	r2, #0
 80194de:	709a      	strb	r2, [r3, #2]
 80194e0:	2200      	movs	r2, #0
 80194e2:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
 80194e4:	4b12      	ldr	r3, [pc, #72]	; (8019530 <icmp_send_response+0xf0>)
 80194e6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80194ea:	3301      	adds	r3, #1
 80194ec:	b29a      	uxth	r2, r3
 80194ee:	4b10      	ldr	r3, [pc, #64]	; (8019530 <icmp_send_response+0xf0>)
 80194f0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 80194f4:	f107 020c 	add.w	r2, r7, #12
 80194f8:	69fb      	ldr	r3, [r7, #28]
 80194fa:	9302      	str	r3, [sp, #8]
 80194fc:	2301      	movs	r3, #1
 80194fe:	9301      	str	r3, [sp, #4]
 8019500:	2300      	movs	r3, #0
 8019502:	9300      	str	r3, [sp, #0]
 8019504:	23ff      	movs	r3, #255	; 0xff
 8019506:	2100      	movs	r1, #0
 8019508:	69b8      	ldr	r0, [r7, #24]
 801950a:	f000 fa47 	bl	801999c <ip4_output_if>
  }
  pbuf_free(q);
 801950e:	69b8      	ldr	r0, [r7, #24]
 8019510:	f7f5 f92e 	bl	800e770 <pbuf_free>
 8019514:	e000      	b.n	8019518 <icmp_send_response+0xd8>
    return;
 8019516:	bf00      	nop
}
 8019518:	3720      	adds	r7, #32
 801951a:	46bd      	mov	sp, r7
 801951c:	bd80      	pop	{r7, pc}
 801951e:	bf00      	nop
 8019520:	08020200 	.word	0x08020200
 8019524:	08020170 	.word	0x08020170
 8019528:	08020190 	.word	0x08020190
 801952c:	080201c8 	.word	0x080201c8
 8019530:	20010b7c 	.word	0x20010b7c

08019534 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8019534:	b480      	push	{r7}
 8019536:	b085      	sub	sp, #20
 8019538:	af00      	add	r7, sp, #0
 801953a:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 801953c:	4b37      	ldr	r3, [pc, #220]	; (801961c <ip4_route+0xe8>)
 801953e:	681b      	ldr	r3, [r3, #0]
 8019540:	60fb      	str	r3, [r7, #12]
 8019542:	e036      	b.n	80195b2 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8019544:	68fb      	ldr	r3, [r7, #12]
 8019546:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801954a:	f003 0301 	and.w	r3, r3, #1
 801954e:	b2db      	uxtb	r3, r3
 8019550:	2b00      	cmp	r3, #0
 8019552:	d02b      	beq.n	80195ac <ip4_route+0x78>
 8019554:	68fb      	ldr	r3, [r7, #12]
 8019556:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801955a:	089b      	lsrs	r3, r3, #2
 801955c:	f003 0301 	and.w	r3, r3, #1
 8019560:	b2db      	uxtb	r3, r3
 8019562:	2b00      	cmp	r3, #0
 8019564:	d022      	beq.n	80195ac <ip4_route+0x78>
 8019566:	68fb      	ldr	r3, [r7, #12]
 8019568:	3304      	adds	r3, #4
 801956a:	681b      	ldr	r3, [r3, #0]
 801956c:	2b00      	cmp	r3, #0
 801956e:	d01d      	beq.n	80195ac <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8019570:	687b      	ldr	r3, [r7, #4]
 8019572:	681a      	ldr	r2, [r3, #0]
 8019574:	68fb      	ldr	r3, [r7, #12]
 8019576:	3304      	adds	r3, #4
 8019578:	681b      	ldr	r3, [r3, #0]
 801957a:	405a      	eors	r2, r3
 801957c:	68fb      	ldr	r3, [r7, #12]
 801957e:	3308      	adds	r3, #8
 8019580:	681b      	ldr	r3, [r3, #0]
 8019582:	4013      	ands	r3, r2
 8019584:	2b00      	cmp	r3, #0
 8019586:	d101      	bne.n	801958c <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8019588:	68fb      	ldr	r3, [r7, #12]
 801958a:	e040      	b.n	801960e <ip4_route+0xda>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 801958c:	68fb      	ldr	r3, [r7, #12]
 801958e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8019592:	f003 0302 	and.w	r3, r3, #2
 8019596:	2b00      	cmp	r3, #0
 8019598:	d108      	bne.n	80195ac <ip4_route+0x78>
 801959a:	687b      	ldr	r3, [r7, #4]
 801959c:	681a      	ldr	r2, [r3, #0]
 801959e:	68fb      	ldr	r3, [r7, #12]
 80195a0:	330c      	adds	r3, #12
 80195a2:	681b      	ldr	r3, [r3, #0]
 80195a4:	429a      	cmp	r2, r3
 80195a6:	d101      	bne.n	80195ac <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 80195a8:	68fb      	ldr	r3, [r7, #12]
 80195aa:	e030      	b.n	801960e <ip4_route+0xda>
  NETIF_FOREACH(netif) {
 80195ac:	68fb      	ldr	r3, [r7, #12]
 80195ae:	681b      	ldr	r3, [r3, #0]
 80195b0:	60fb      	str	r3, [r7, #12]
 80195b2:	68fb      	ldr	r3, [r7, #12]
 80195b4:	2b00      	cmp	r3, #0
 80195b6:	d1c5      	bne.n	8019544 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80195b8:	4b19      	ldr	r3, [pc, #100]	; (8019620 <ip4_route+0xec>)
 80195ba:	681b      	ldr	r3, [r3, #0]
 80195bc:	2b00      	cmp	r3, #0
 80195be:	d01a      	beq.n	80195f6 <ip4_route+0xc2>
 80195c0:	4b17      	ldr	r3, [pc, #92]	; (8019620 <ip4_route+0xec>)
 80195c2:	681b      	ldr	r3, [r3, #0]
 80195c4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80195c8:	f003 0301 	and.w	r3, r3, #1
 80195cc:	2b00      	cmp	r3, #0
 80195ce:	d012      	beq.n	80195f6 <ip4_route+0xc2>
 80195d0:	4b13      	ldr	r3, [pc, #76]	; (8019620 <ip4_route+0xec>)
 80195d2:	681b      	ldr	r3, [r3, #0]
 80195d4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80195d8:	f003 0304 	and.w	r3, r3, #4
 80195dc:	2b00      	cmp	r3, #0
 80195de:	d00a      	beq.n	80195f6 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80195e0:	4b0f      	ldr	r3, [pc, #60]	; (8019620 <ip4_route+0xec>)
 80195e2:	681b      	ldr	r3, [r3, #0]
 80195e4:	3304      	adds	r3, #4
 80195e6:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80195e8:	2b00      	cmp	r3, #0
 80195ea:	d004      	beq.n	80195f6 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80195ec:	687b      	ldr	r3, [r7, #4]
 80195ee:	681b      	ldr	r3, [r3, #0]
 80195f0:	b2db      	uxtb	r3, r3
 80195f2:	2b7f      	cmp	r3, #127	; 0x7f
 80195f4:	d109      	bne.n	801960a <ip4_route+0xd6>
    /* No matching netif found and default netif is not usable.
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
 80195f6:	4b0b      	ldr	r3, [pc, #44]	; (8019624 <ip4_route+0xf0>)
 80195f8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80195fc:	3301      	adds	r3, #1
 80195fe:	b29a      	uxth	r2, r3
 8019600:	4b08      	ldr	r3, [pc, #32]	; (8019624 <ip4_route+0xf0>)
 8019602:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8019606:	2300      	movs	r3, #0
 8019608:	e001      	b.n	801960e <ip4_route+0xda>
  }

  return netif_default;
 801960a:	4b05      	ldr	r3, [pc, #20]	; (8019620 <ip4_route+0xec>)
 801960c:	681b      	ldr	r3, [r3, #0]
}
 801960e:	4618      	mov	r0, r3
 8019610:	3714      	adds	r7, #20
 8019612:	46bd      	mov	sp, r7
 8019614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019618:	4770      	bx	lr
 801961a:	bf00      	nop
 801961c:	20010b70 	.word	0x20010b70
 8019620:	20010b74 	.word	0x20010b74
 8019624:	20010b7c 	.word	0x20010b7c

08019628 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8019628:	b580      	push	{r7, lr}
 801962a:	b082      	sub	sp, #8
 801962c:	af00      	add	r7, sp, #0
 801962e:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8019630:	687b      	ldr	r3, [r7, #4]
 8019632:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8019636:	f003 0301 	and.w	r3, r3, #1
 801963a:	b2db      	uxtb	r3, r3
 801963c:	2b00      	cmp	r3, #0
 801963e:	d016      	beq.n	801966e <ip4_input_accept+0x46>
 8019640:	687b      	ldr	r3, [r7, #4]
 8019642:	3304      	adds	r3, #4
 8019644:	681b      	ldr	r3, [r3, #0]
 8019646:	2b00      	cmp	r3, #0
 8019648:	d011      	beq.n	801966e <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801964a:	4b0b      	ldr	r3, [pc, #44]	; (8019678 <ip4_input_accept+0x50>)
 801964c:	695a      	ldr	r2, [r3, #20]
 801964e:	687b      	ldr	r3, [r7, #4]
 8019650:	3304      	adds	r3, #4
 8019652:	681b      	ldr	r3, [r3, #0]
 8019654:	429a      	cmp	r2, r3
 8019656:	d008      	beq.n	801966a <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8019658:	4b07      	ldr	r3, [pc, #28]	; (8019678 <ip4_input_accept+0x50>)
 801965a:	695b      	ldr	r3, [r3, #20]
 801965c:	6879      	ldr	r1, [r7, #4]
 801965e:	4618      	mov	r0, r3
 8019660:	f000 fa98 	bl	8019b94 <ip4_addr_isbroadcast_u32>
 8019664:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8019666:	2b00      	cmp	r3, #0
 8019668:	d001      	beq.n	801966e <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 801966a:	2301      	movs	r3, #1
 801966c:	e000      	b.n	8019670 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 801966e:	2300      	movs	r3, #0
}
 8019670:	4618      	mov	r0, r3
 8019672:	3708      	adds	r7, #8
 8019674:	46bd      	mov	sp, r7
 8019676:	bd80      	pop	{r7, pc}
 8019678:	2000d40c 	.word	0x2000d40c

0801967c <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 801967c:	b580      	push	{r7, lr}
 801967e:	b088      	sub	sp, #32
 8019680:	af00      	add	r7, sp, #0
 8019682:	6078      	str	r0, [r7, #4]
 8019684:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 8019686:	2301      	movs	r3, #1
 8019688:	617b      	str	r3, [r7, #20]
  raw_input_state_t raw_status;
#endif /* LWIP_RAW */

  LWIP_ASSERT_CORE_LOCKED();

  IP_STATS_INC(ip.recv);
 801968a:	4b9d      	ldr	r3, [pc, #628]	; (8019900 <ip4_input+0x284>)
 801968c:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8019690:	3301      	adds	r3, #1
 8019692:	b29a      	uxth	r2, r3
 8019694:	4b9a      	ldr	r3, [pc, #616]	; (8019900 <ip4_input+0x284>)
 8019696:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801969a:	687b      	ldr	r3, [r7, #4]
 801969c:	685b      	ldr	r3, [r3, #4]
 801969e:	613b      	str	r3, [r7, #16]
  if (IPH_V(iphdr) != 4) {
 80196a0:	693b      	ldr	r3, [r7, #16]
 80196a2:	781b      	ldrb	r3, [r3, #0]
 80196a4:	091b      	lsrs	r3, r3, #4
 80196a6:	b2db      	uxtb	r3, r3
 80196a8:	2b04      	cmp	r3, #4
 80196aa:	d014      	beq.n	80196d6 <ip4_input+0x5a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 80196ac:	6878      	ldr	r0, [r7, #4]
 80196ae:	f7f5 f85f 	bl	800e770 <pbuf_free>
    IP_STATS_INC(ip.err);
 80196b2:	4b93      	ldr	r3, [pc, #588]	; (8019900 <ip4_input+0x284>)
 80196b4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80196b8:	3301      	adds	r3, #1
 80196ba:	b29a      	uxth	r2, r3
 80196bc:	4b90      	ldr	r3, [pc, #576]	; (8019900 <ip4_input+0x284>)
 80196be:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    IP_STATS_INC(ip.drop);
 80196c2:	4b8f      	ldr	r3, [pc, #572]	; (8019900 <ip4_input+0x284>)
 80196c4:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 80196c8:	3301      	adds	r3, #1
 80196ca:	b29a      	uxth	r2, r3
 80196cc:	4b8c      	ldr	r3, [pc, #560]	; (8019900 <ip4_input+0x284>)
 80196ce:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 80196d2:	2300      	movs	r3, #0
 80196d4:	e15a      	b.n	801998c <ip4_input+0x310>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 80196d6:	693b      	ldr	r3, [r7, #16]
 80196d8:	781b      	ldrb	r3, [r3, #0]
 80196da:	f003 030f 	and.w	r3, r3, #15
 80196de:	b2db      	uxtb	r3, r3
 80196e0:	009b      	lsls	r3, r3, #2
 80196e2:	b2db      	uxtb	r3, r3
 80196e4:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 80196e6:	693b      	ldr	r3, [r7, #16]
 80196e8:	885b      	ldrh	r3, [r3, #2]
 80196ea:	b29b      	uxth	r3, r3
 80196ec:	4618      	mov	r0, r3
 80196ee:	f7f3 fb29 	bl	800cd44 <lwip_htons>
 80196f2:	4603      	mov	r3, r0
 80196f4:	837b      	strh	r3, [r7, #26]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 80196f6:	687b      	ldr	r3, [r7, #4]
 80196f8:	891b      	ldrh	r3, [r3, #8]
 80196fa:	8b7a      	ldrh	r2, [r7, #26]
 80196fc:	429a      	cmp	r2, r3
 80196fe:	d204      	bcs.n	801970a <ip4_input+0x8e>
    pbuf_realloc(p, iphdr_len);
 8019700:	8b7b      	ldrh	r3, [r7, #26]
 8019702:	4619      	mov	r1, r3
 8019704:	6878      	ldr	r0, [r7, #4]
 8019706:	f7f4 fe91 	bl	800e42c <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801970a:	687b      	ldr	r3, [r7, #4]
 801970c:	895b      	ldrh	r3, [r3, #10]
 801970e:	89fa      	ldrh	r2, [r7, #14]
 8019710:	429a      	cmp	r2, r3
 8019712:	d807      	bhi.n	8019724 <ip4_input+0xa8>
 8019714:	687b      	ldr	r3, [r7, #4]
 8019716:	891b      	ldrh	r3, [r3, #8]
 8019718:	8b7a      	ldrh	r2, [r7, #26]
 801971a:	429a      	cmp	r2, r3
 801971c:	d802      	bhi.n	8019724 <ip4_input+0xa8>
 801971e:	89fb      	ldrh	r3, [r7, #14]
 8019720:	2b13      	cmp	r3, #19
 8019722:	d814      	bhi.n	801974e <ip4_input+0xd2>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8019724:	6878      	ldr	r0, [r7, #4]
 8019726:	f7f5 f823 	bl	800e770 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
 801972a:	4b75      	ldr	r3, [pc, #468]	; (8019900 <ip4_input+0x284>)
 801972c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8019730:	3301      	adds	r3, #1
 8019732:	b29a      	uxth	r2, r3
 8019734:	4b72      	ldr	r3, [pc, #456]	; (8019900 <ip4_input+0x284>)
 8019736:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    IP_STATS_INC(ip.drop);
 801973a:	4b71      	ldr	r3, [pc, #452]	; (8019900 <ip4_input+0x284>)
 801973c:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 8019740:	3301      	adds	r3, #1
 8019742:	b29a      	uxth	r2, r3
 8019744:	4b6e      	ldr	r3, [pc, #440]	; (8019900 <ip4_input+0x284>)
 8019746:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 801974a:	2300      	movs	r3, #0
 801974c:	e11e      	b.n	801998c <ip4_input+0x310>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 801974e:	693b      	ldr	r3, [r7, #16]
 8019750:	691b      	ldr	r3, [r3, #16]
 8019752:	4a6c      	ldr	r2, [pc, #432]	; (8019904 <ip4_input+0x288>)
 8019754:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8019756:	693b      	ldr	r3, [r7, #16]
 8019758:	68db      	ldr	r3, [r3, #12]
 801975a:	4a6a      	ldr	r2, [pc, #424]	; (8019904 <ip4_input+0x288>)
 801975c:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801975e:	4b69      	ldr	r3, [pc, #420]	; (8019904 <ip4_input+0x288>)
 8019760:	695b      	ldr	r3, [r3, #20]
 8019762:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8019766:	2be0      	cmp	r3, #224	; 0xe0
 8019768:	d112      	bne.n	8019790 <ip4_input+0x114>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 801976a:	683b      	ldr	r3, [r7, #0]
 801976c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8019770:	f003 0301 	and.w	r3, r3, #1
 8019774:	b2db      	uxtb	r3, r3
 8019776:	2b00      	cmp	r3, #0
 8019778:	d007      	beq.n	801978a <ip4_input+0x10e>
 801977a:	683b      	ldr	r3, [r7, #0]
 801977c:	3304      	adds	r3, #4
 801977e:	681b      	ldr	r3, [r3, #0]
 8019780:	2b00      	cmp	r3, #0
 8019782:	d002      	beq.n	801978a <ip4_input+0x10e>
      netif = inp;
 8019784:	683b      	ldr	r3, [r7, #0]
 8019786:	61fb      	str	r3, [r7, #28]
 8019788:	e02a      	b.n	80197e0 <ip4_input+0x164>
    } else {
      netif = NULL;
 801978a:	2300      	movs	r3, #0
 801978c:	61fb      	str	r3, [r7, #28]
 801978e:	e027      	b.n	80197e0 <ip4_input+0x164>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8019790:	6838      	ldr	r0, [r7, #0]
 8019792:	f7ff ff49 	bl	8019628 <ip4_input_accept>
 8019796:	4603      	mov	r3, r0
 8019798:	2b00      	cmp	r3, #0
 801979a:	d002      	beq.n	80197a2 <ip4_input+0x126>
      netif = inp;
 801979c:	683b      	ldr	r3, [r7, #0]
 801979e:	61fb      	str	r3, [r7, #28]
 80197a0:	e01e      	b.n	80197e0 <ip4_input+0x164>
    } else {
      netif = NULL;
 80197a2:	2300      	movs	r3, #0
 80197a4:	61fb      	str	r3, [r7, #28]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 80197a6:	4b57      	ldr	r3, [pc, #348]	; (8019904 <ip4_input+0x288>)
 80197a8:	695b      	ldr	r3, [r3, #20]
 80197aa:	b2db      	uxtb	r3, r3
 80197ac:	2b7f      	cmp	r3, #127	; 0x7f
 80197ae:	d017      	beq.n	80197e0 <ip4_input+0x164>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 80197b0:	4b55      	ldr	r3, [pc, #340]	; (8019908 <ip4_input+0x28c>)
 80197b2:	681b      	ldr	r3, [r3, #0]
 80197b4:	61fb      	str	r3, [r7, #28]
 80197b6:	e00e      	b.n	80197d6 <ip4_input+0x15a>
          if (netif == inp) {
 80197b8:	69fa      	ldr	r2, [r7, #28]
 80197ba:	683b      	ldr	r3, [r7, #0]
 80197bc:	429a      	cmp	r2, r3
 80197be:	d006      	beq.n	80197ce <ip4_input+0x152>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 80197c0:	69f8      	ldr	r0, [r7, #28]
 80197c2:	f7ff ff31 	bl	8019628 <ip4_input_accept>
 80197c6:	4603      	mov	r3, r0
 80197c8:	2b00      	cmp	r3, #0
 80197ca:	d108      	bne.n	80197de <ip4_input+0x162>
 80197cc:	e000      	b.n	80197d0 <ip4_input+0x154>
            continue;
 80197ce:	bf00      	nop
        NETIF_FOREACH(netif) {
 80197d0:	69fb      	ldr	r3, [r7, #28]
 80197d2:	681b      	ldr	r3, [r3, #0]
 80197d4:	61fb      	str	r3, [r7, #28]
 80197d6:	69fb      	ldr	r3, [r7, #28]
 80197d8:	2b00      	cmp	r3, #0
 80197da:	d1ed      	bne.n	80197b8 <ip4_input+0x13c>
 80197dc:	e000      	b.n	80197e0 <ip4_input+0x164>
            break;
 80197de:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 80197e0:	69fb      	ldr	r3, [r7, #28]
 80197e2:	2b00      	cmp	r3, #0
 80197e4:	d111      	bne.n	801980a <ip4_input+0x18e>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 80197e6:	693b      	ldr	r3, [r7, #16]
 80197e8:	7a5b      	ldrb	r3, [r3, #9]
 80197ea:	2b11      	cmp	r3, #17
 80197ec:	d10d      	bne.n	801980a <ip4_input+0x18e>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 80197ee:	89fb      	ldrh	r3, [r7, #14]
 80197f0:	693a      	ldr	r2, [r7, #16]
 80197f2:	4413      	add	r3, r2
 80197f4:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 80197f6:	68bb      	ldr	r3, [r7, #8]
 80197f8:	885b      	ldrh	r3, [r3, #2]
 80197fa:	b29b      	uxth	r3, r3
 80197fc:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 8019800:	d103      	bne.n	801980a <ip4_input+0x18e>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 8019802:	683b      	ldr	r3, [r7, #0]
 8019804:	61fb      	str	r3, [r7, #28]
        check_ip_src = 0;
 8019806:	2300      	movs	r3, #0
 8019808:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 801980a:	697b      	ldr	r3, [r7, #20]
 801980c:	2b00      	cmp	r3, #0
 801980e:	d01f      	beq.n	8019850 <ip4_input+0x1d4>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 8019810:	4b3c      	ldr	r3, [pc, #240]	; (8019904 <ip4_input+0x288>)
 8019812:	691b      	ldr	r3, [r3, #16]
 8019814:	2b00      	cmp	r3, #0
 8019816:	d01b      	beq.n	8019850 <ip4_input+0x1d4>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8019818:	4b3a      	ldr	r3, [pc, #232]	; (8019904 <ip4_input+0x288>)
 801981a:	691b      	ldr	r3, [r3, #16]
 801981c:	6839      	ldr	r1, [r7, #0]
 801981e:	4618      	mov	r0, r3
 8019820:	f000 f9b8 	bl	8019b94 <ip4_addr_isbroadcast_u32>
 8019824:	4603      	mov	r3, r0
 8019826:	2b00      	cmp	r3, #0
 8019828:	d105      	bne.n	8019836 <ip4_input+0x1ba>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801982a:	4b36      	ldr	r3, [pc, #216]	; (8019904 <ip4_input+0x288>)
 801982c:	691b      	ldr	r3, [r3, #16]
 801982e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8019832:	2be0      	cmp	r3, #224	; 0xe0
 8019834:	d10c      	bne.n	8019850 <ip4_input+0x1d4>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8019836:	6878      	ldr	r0, [r7, #4]
 8019838:	f7f4 ff9a 	bl	800e770 <pbuf_free>
      IP_STATS_INC(ip.drop);
 801983c:	4b30      	ldr	r3, [pc, #192]	; (8019900 <ip4_input+0x284>)
 801983e:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 8019842:	3301      	adds	r3, #1
 8019844:	b29a      	uxth	r2, r3
 8019846:	4b2e      	ldr	r3, [pc, #184]	; (8019900 <ip4_input+0x284>)
 8019848:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 801984c:	2300      	movs	r3, #0
 801984e:	e09d      	b.n	801998c <ip4_input+0x310>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8019850:	69fb      	ldr	r3, [r7, #28]
 8019852:	2b00      	cmp	r3, #0
 8019854:	d10c      	bne.n	8019870 <ip4_input+0x1f4>
      /* try to forward IP packet on (other) interfaces */
      ip4_forward(p, (struct ip_hdr *)p->payload, inp);
    } else
#endif /* IP_FORWARD */
    {
      IP_STATS_INC(ip.drop);
 8019856:	4b2a      	ldr	r3, [pc, #168]	; (8019900 <ip4_input+0x284>)
 8019858:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 801985c:	3301      	adds	r3, #1
 801985e:	b29a      	uxth	r2, r3
 8019860:	4b27      	ldr	r3, [pc, #156]	; (8019900 <ip4_input+0x284>)
 8019862:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8019866:	6878      	ldr	r0, [r7, #4]
 8019868:	f7f4 ff82 	bl	800e770 <pbuf_free>
    return ERR_OK;
 801986c:	2300      	movs	r3, #0
 801986e:	e08d      	b.n	801998c <ip4_input+0x310>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8019870:	693b      	ldr	r3, [r7, #16]
 8019872:	88db      	ldrh	r3, [r3, #6]
 8019874:	b29b      	uxth	r3, r3
 8019876:	461a      	mov	r2, r3
 8019878:	f64f 733f 	movw	r3, #65343	; 0xff3f
 801987c:	4013      	ands	r3, r2
 801987e:	2b00      	cmp	r3, #0
 8019880:	d00b      	beq.n	801989a <ip4_input+0x21e>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8019882:	6878      	ldr	r0, [r7, #4]
 8019884:	f000 fd06 	bl	801a294 <ip4_reass>
 8019888:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 801988a:	687b      	ldr	r3, [r7, #4]
 801988c:	2b00      	cmp	r3, #0
 801988e:	d101      	bne.n	8019894 <ip4_input+0x218>
      return ERR_OK;
 8019890:	2300      	movs	r3, #0
 8019892:	e07b      	b.n	801998c <ip4_input+0x310>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8019894:	687b      	ldr	r3, [r7, #4]
 8019896:	685b      	ldr	r3, [r3, #4]
 8019898:	613b      	str	r3, [r7, #16]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 801989a:	4a1a      	ldr	r2, [pc, #104]	; (8019904 <ip4_input+0x288>)
 801989c:	69fb      	ldr	r3, [r7, #28]
 801989e:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 80198a0:	4a18      	ldr	r2, [pc, #96]	; (8019904 <ip4_input+0x288>)
 80198a2:	683b      	ldr	r3, [r7, #0]
 80198a4:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 80198a6:	4a17      	ldr	r2, [pc, #92]	; (8019904 <ip4_input+0x288>)
 80198a8:	693b      	ldr	r3, [r7, #16]
 80198aa:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 80198ac:	693b      	ldr	r3, [r7, #16]
 80198ae:	781b      	ldrb	r3, [r3, #0]
 80198b0:	f003 030f 	and.w	r3, r3, #15
 80198b4:	b2db      	uxtb	r3, r3
 80198b6:	009b      	lsls	r3, r3, #2
 80198b8:	b2db      	uxtb	r3, r3
 80198ba:	b29a      	uxth	r2, r3
 80198bc:	4b11      	ldr	r3, [pc, #68]	; (8019904 <ip4_input+0x288>)
 80198be:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 80198c0:	89fb      	ldrh	r3, [r7, #14]
 80198c2:	4619      	mov	r1, r3
 80198c4:	6878      	ldr	r0, [r7, #4]
 80198c6:	f7f4 fec5 	bl	800e654 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 80198ca:	693b      	ldr	r3, [r7, #16]
 80198cc:	7a5b      	ldrb	r3, [r3, #9]
 80198ce:	2b11      	cmp	r3, #17
 80198d0:	d006      	beq.n	80198e0 <ip4_input+0x264>
 80198d2:	2b11      	cmp	r3, #17
 80198d4:	dc1a      	bgt.n	801990c <ip4_input+0x290>
 80198d6:	2b01      	cmp	r3, #1
 80198d8:	d00c      	beq.n	80198f4 <ip4_input+0x278>
 80198da:	2b06      	cmp	r3, #6
 80198dc:	d005      	beq.n	80198ea <ip4_input+0x26e>
 80198de:	e015      	b.n	801990c <ip4_input+0x290>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 80198e0:	6839      	ldr	r1, [r7, #0]
 80198e2:	6878      	ldr	r0, [r7, #4]
 80198e4:	f7fc f812 	bl	801590c <udp_input>
        break;
 80198e8:	e03d      	b.n	8019966 <ip4_input+0x2ea>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 80198ea:	6839      	ldr	r1, [r7, #0]
 80198ec:	6878      	ldr	r0, [r7, #4]
 80198ee:	f7f7 f8d9 	bl	8010aa4 <tcp_input>
        break;
 80198f2:	e038      	b.n	8019966 <ip4_input+0x2ea>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 80198f4:	6839      	ldr	r1, [r7, #0]
 80198f6:	6878      	ldr	r0, [r7, #4]
 80198f8:	f7ff fc40 	bl	801917c <icmp_input>
        break;
 80198fc:	e033      	b.n	8019966 <ip4_input+0x2ea>
 80198fe:	bf00      	nop
 8019900:	20010b7c 	.word	0x20010b7c
 8019904:	2000d40c 	.word	0x2000d40c
 8019908:	20010b70 	.word	0x20010b70
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801990c:	4b21      	ldr	r3, [pc, #132]	; (8019994 <ip4_input+0x318>)
 801990e:	695b      	ldr	r3, [r3, #20]
 8019910:	69f9      	ldr	r1, [r7, #28]
 8019912:	4618      	mov	r0, r3
 8019914:	f000 f93e 	bl	8019b94 <ip4_addr_isbroadcast_u32>
 8019918:	4603      	mov	r3, r0
 801991a:	2b00      	cmp	r3, #0
 801991c:	d10f      	bne.n	801993e <ip4_input+0x2c2>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801991e:	4b1d      	ldr	r3, [pc, #116]	; (8019994 <ip4_input+0x318>)
 8019920:	695b      	ldr	r3, [r3, #20]
 8019922:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8019926:	2be0      	cmp	r3, #224	; 0xe0
 8019928:	d009      	beq.n	801993e <ip4_input+0x2c2>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 801992a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801992e:	4619      	mov	r1, r3
 8019930:	6878      	ldr	r0, [r7, #4]
 8019932:	f7f4 ff0a 	bl	800e74a <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8019936:	2102      	movs	r1, #2
 8019938:	6878      	ldr	r0, [r7, #4]
 801993a:	f7ff fd61 	bl	8019400 <icmp_dest_unreach>
          }
#endif /* LWIP_ICMP */

          LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Unsupported transport protocol %"U16_F"\n", (u16_t)IPH_PROTO(iphdr)));

          IP_STATS_INC(ip.proterr);
 801993e:	4b16      	ldr	r3, [pc, #88]	; (8019998 <ip4_input+0x31c>)
 8019940:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8019944:	3301      	adds	r3, #1
 8019946:	b29a      	uxth	r2, r3
 8019948:	4b13      	ldr	r3, [pc, #76]	; (8019998 <ip4_input+0x31c>)
 801994a:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
          IP_STATS_INC(ip.drop);
 801994e:	4b12      	ldr	r3, [pc, #72]	; (8019998 <ip4_input+0x31c>)
 8019950:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 8019954:	3301      	adds	r3, #1
 8019956:	b29a      	uxth	r2, r3
 8019958:	4b0f      	ldr	r3, [pc, #60]	; (8019998 <ip4_input+0x31c>)
 801995a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 801995e:	6878      	ldr	r0, [r7, #4]
 8019960:	f7f4 ff06 	bl	800e770 <pbuf_free>
        break;
 8019964:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8019966:	4b0b      	ldr	r3, [pc, #44]	; (8019994 <ip4_input+0x318>)
 8019968:	2200      	movs	r2, #0
 801996a:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 801996c:	4b09      	ldr	r3, [pc, #36]	; (8019994 <ip4_input+0x318>)
 801996e:	2200      	movs	r2, #0
 8019970:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8019972:	4b08      	ldr	r3, [pc, #32]	; (8019994 <ip4_input+0x318>)
 8019974:	2200      	movs	r2, #0
 8019976:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8019978:	4b06      	ldr	r3, [pc, #24]	; (8019994 <ip4_input+0x318>)
 801997a:	2200      	movs	r2, #0
 801997c:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 801997e:	4b05      	ldr	r3, [pc, #20]	; (8019994 <ip4_input+0x318>)
 8019980:	2200      	movs	r2, #0
 8019982:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8019984:	4b03      	ldr	r3, [pc, #12]	; (8019994 <ip4_input+0x318>)
 8019986:	2200      	movs	r2, #0
 8019988:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 801998a:	2300      	movs	r3, #0
}
 801998c:	4618      	mov	r0, r3
 801998e:	3720      	adds	r7, #32
 8019990:	46bd      	mov	sp, r7
 8019992:	bd80      	pop	{r7, pc}
 8019994:	2000d40c 	.word	0x2000d40c
 8019998:	20010b7c 	.word	0x20010b7c

0801999c <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 801999c:	b580      	push	{r7, lr}
 801999e:	b08a      	sub	sp, #40	; 0x28
 80199a0:	af04      	add	r7, sp, #16
 80199a2:	60f8      	str	r0, [r7, #12]
 80199a4:	60b9      	str	r1, [r7, #8]
 80199a6:	607a      	str	r2, [r7, #4]
 80199a8:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 80199aa:	68bb      	ldr	r3, [r7, #8]
 80199ac:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 80199ae:	687b      	ldr	r3, [r7, #4]
 80199b0:	2b00      	cmp	r3, #0
 80199b2:	d009      	beq.n	80199c8 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 80199b4:	68bb      	ldr	r3, [r7, #8]
 80199b6:	2b00      	cmp	r3, #0
 80199b8:	d003      	beq.n	80199c2 <ip4_output_if+0x26>
 80199ba:	68bb      	ldr	r3, [r7, #8]
 80199bc:	681b      	ldr	r3, [r3, #0]
 80199be:	2b00      	cmp	r3, #0
 80199c0:	d102      	bne.n	80199c8 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 80199c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80199c4:	3304      	adds	r3, #4
 80199c6:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 80199c8:	78fa      	ldrb	r2, [r7, #3]
 80199ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80199cc:	9302      	str	r3, [sp, #8]
 80199ce:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80199d2:	9301      	str	r3, [sp, #4]
 80199d4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80199d8:	9300      	str	r3, [sp, #0]
 80199da:	4613      	mov	r3, r2
 80199dc:	687a      	ldr	r2, [r7, #4]
 80199de:	6979      	ldr	r1, [r7, #20]
 80199e0:	68f8      	ldr	r0, [r7, #12]
 80199e2:	f000 f805 	bl	80199f0 <ip4_output_if_src>
 80199e6:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 80199e8:	4618      	mov	r0, r3
 80199ea:	3718      	adds	r7, #24
 80199ec:	46bd      	mov	sp, r7
 80199ee:	bd80      	pop	{r7, pc}

080199f0 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 80199f0:	b580      	push	{r7, lr}
 80199f2:	b088      	sub	sp, #32
 80199f4:	af00      	add	r7, sp, #0
 80199f6:	60f8      	str	r0, [r7, #12]
 80199f8:	60b9      	str	r1, [r7, #8]
 80199fa:	607a      	str	r2, [r7, #4]
 80199fc:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 80199fe:	68fb      	ldr	r3, [r7, #12]
 8019a00:	7b9b      	ldrb	r3, [r3, #14]
 8019a02:	2b01      	cmp	r3, #1
 8019a04:	d00a      	beq.n	8019a1c <ip4_output_if_src+0x2c>
 8019a06:	f44f 7255 	mov.w	r2, #852	; 0x354
 8019a0a:	495a      	ldr	r1, [pc, #360]	; (8019b74 <ip4_output_if_src+0x184>)
 8019a0c:	485a      	ldr	r0, [pc, #360]	; (8019b78 <ip4_output_if_src+0x188>)
 8019a0e:	f001 fb81 	bl	801b114 <trace_printf>
 8019a12:	495a      	ldr	r1, [pc, #360]	; (8019b7c <ip4_output_if_src+0x18c>)
 8019a14:	485a      	ldr	r0, [pc, #360]	; (8019b80 <ip4_output_if_src+0x190>)
 8019a16:	f001 fb7d 	bl	801b114 <trace_printf>
 8019a1a:	e7fe      	b.n	8019a1a <ip4_output_if_src+0x2a>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8019a1c:	687b      	ldr	r3, [r7, #4]
 8019a1e:	2b00      	cmp	r3, #0
 8019a20:	d06c      	beq.n	8019afc <ip4_output_if_src+0x10c>
    u16_t ip_hlen = IP_HLEN;
 8019a22:	2314      	movs	r3, #20
 8019a24:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8019a26:	2114      	movs	r1, #20
 8019a28:	68f8      	ldr	r0, [r7, #12]
 8019a2a:	f7f4 fe03 	bl	800e634 <pbuf_add_header>
 8019a2e:	4603      	mov	r3, r0
 8019a30:	2b00      	cmp	r3, #0
 8019a32:	d00a      	beq.n	8019a4a <ip4_output_if_src+0x5a>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
 8019a34:	4b53      	ldr	r3, [pc, #332]	; (8019b84 <ip4_output_if_src+0x194>)
 8019a36:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8019a3a:	3301      	adds	r3, #1
 8019a3c:	b29a      	uxth	r2, r3
 8019a3e:	4b51      	ldr	r3, [pc, #324]	; (8019b84 <ip4_output_if_src+0x194>)
 8019a40:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8019a44:	f06f 0301 	mvn.w	r3, #1
 8019a48:	e090      	b.n	8019b6c <ip4_output_if_src+0x17c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8019a4a:	68fb      	ldr	r3, [r7, #12]
 8019a4c:	685b      	ldr	r3, [r3, #4]
 8019a4e:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8019a50:	68fb      	ldr	r3, [r7, #12]
 8019a52:	895b      	ldrh	r3, [r3, #10]
 8019a54:	2b13      	cmp	r3, #19
 8019a56:	d80a      	bhi.n	8019a6e <ip4_output_if_src+0x7e>
 8019a58:	f44f 7262 	mov.w	r2, #904	; 0x388
 8019a5c:	494a      	ldr	r1, [pc, #296]	; (8019b88 <ip4_output_if_src+0x198>)
 8019a5e:	4846      	ldr	r0, [pc, #280]	; (8019b78 <ip4_output_if_src+0x188>)
 8019a60:	f001 fb58 	bl	801b114 <trace_printf>
 8019a64:	4945      	ldr	r1, [pc, #276]	; (8019b7c <ip4_output_if_src+0x18c>)
 8019a66:	4846      	ldr	r0, [pc, #280]	; (8019b80 <ip4_output_if_src+0x190>)
 8019a68:	f001 fb54 	bl	801b114 <trace_printf>
 8019a6c:	e7fe      	b.n	8019a6c <ip4_output_if_src+0x7c>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8019a6e:	69fb      	ldr	r3, [r7, #28]
 8019a70:	78fa      	ldrb	r2, [r7, #3]
 8019a72:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8019a74:	69fb      	ldr	r3, [r7, #28]
 8019a76:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8019a7a:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8019a7c:	687b      	ldr	r3, [r7, #4]
 8019a7e:	681a      	ldr	r2, [r3, #0]
 8019a80:	69fb      	ldr	r3, [r7, #28]
 8019a82:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8019a84:	8b7b      	ldrh	r3, [r7, #26]
 8019a86:	089b      	lsrs	r3, r3, #2
 8019a88:	b29b      	uxth	r3, r3
 8019a8a:	b2db      	uxtb	r3, r3
 8019a8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019a90:	b2da      	uxtb	r2, r3
 8019a92:	69fb      	ldr	r3, [r7, #28]
 8019a94:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8019a96:	69fb      	ldr	r3, [r7, #28]
 8019a98:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8019a9c:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8019a9e:	68fb      	ldr	r3, [r7, #12]
 8019aa0:	891b      	ldrh	r3, [r3, #8]
 8019aa2:	4618      	mov	r0, r3
 8019aa4:	f7f3 f94e 	bl	800cd44 <lwip_htons>
 8019aa8:	4603      	mov	r3, r0
 8019aaa:	461a      	mov	r2, r3
 8019aac:	69fb      	ldr	r3, [r7, #28]
 8019aae:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8019ab0:	69fb      	ldr	r3, [r7, #28]
 8019ab2:	2200      	movs	r2, #0
 8019ab4:	719a      	strb	r2, [r3, #6]
 8019ab6:	2200      	movs	r2, #0
 8019ab8:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8019aba:	4b34      	ldr	r3, [pc, #208]	; (8019b8c <ip4_output_if_src+0x19c>)
 8019abc:	881b      	ldrh	r3, [r3, #0]
 8019abe:	4618      	mov	r0, r3
 8019ac0:	f7f3 f940 	bl	800cd44 <lwip_htons>
 8019ac4:	4603      	mov	r3, r0
 8019ac6:	461a      	mov	r2, r3
 8019ac8:	69fb      	ldr	r3, [r7, #28]
 8019aca:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8019acc:	4b2f      	ldr	r3, [pc, #188]	; (8019b8c <ip4_output_if_src+0x19c>)
 8019ace:	881b      	ldrh	r3, [r3, #0]
 8019ad0:	3301      	adds	r3, #1
 8019ad2:	b29a      	uxth	r2, r3
 8019ad4:	4b2d      	ldr	r3, [pc, #180]	; (8019b8c <ip4_output_if_src+0x19c>)
 8019ad6:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8019ad8:	68bb      	ldr	r3, [r7, #8]
 8019ada:	2b00      	cmp	r3, #0
 8019adc:	d104      	bne.n	8019ae8 <ip4_output_if_src+0xf8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8019ade:	4b2c      	ldr	r3, [pc, #176]	; (8019b90 <ip4_output_if_src+0x1a0>)
 8019ae0:	681a      	ldr	r2, [r3, #0]
 8019ae2:	69fb      	ldr	r3, [r7, #28]
 8019ae4:	60da      	str	r2, [r3, #12]
 8019ae6:	e003      	b.n	8019af0 <ip4_output_if_src+0x100>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8019ae8:	68bb      	ldr	r3, [r7, #8]
 8019aea:	681a      	ldr	r2, [r3, #0]
 8019aec:	69fb      	ldr	r3, [r7, #28]
 8019aee:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8019af0:	69fb      	ldr	r3, [r7, #28]
 8019af2:	2200      	movs	r2, #0
 8019af4:	729a      	strb	r2, [r3, #10]
 8019af6:	2200      	movs	r2, #0
 8019af8:	72da      	strb	r2, [r3, #11]
 8019afa:	e017      	b.n	8019b2c <ip4_output_if_src+0x13c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8019afc:	68fb      	ldr	r3, [r7, #12]
 8019afe:	895b      	ldrh	r3, [r3, #10]
 8019b00:	2b13      	cmp	r3, #19
 8019b02:	d80a      	bhi.n	8019b1a <ip4_output_if_src+0x12a>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
 8019b04:	4b1f      	ldr	r3, [pc, #124]	; (8019b84 <ip4_output_if_src+0x194>)
 8019b06:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8019b0a:	3301      	adds	r3, #1
 8019b0c:	b29a      	uxth	r2, r3
 8019b0e:	4b1d      	ldr	r3, [pc, #116]	; (8019b84 <ip4_output_if_src+0x194>)
 8019b10:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8019b14:	f06f 0301 	mvn.w	r3, #1
 8019b18:	e028      	b.n	8019b6c <ip4_output_if_src+0x17c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8019b1a:	68fb      	ldr	r3, [r7, #12]
 8019b1c:	685b      	ldr	r3, [r3, #4]
 8019b1e:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8019b20:	69fb      	ldr	r3, [r7, #28]
 8019b22:	691b      	ldr	r3, [r3, #16]
 8019b24:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8019b26:	f107 0314 	add.w	r3, r7, #20
 8019b2a:	607b      	str	r3, [r7, #4]
  }

  IP_STATS_INC(ip.xmit);
 8019b2c:	4b15      	ldr	r3, [pc, #84]	; (8019b84 <ip4_output_if_src+0x194>)
 8019b2e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8019b32:	3301      	adds	r3, #1
 8019b34:	b29a      	uxth	r2, r3
 8019b36:	4b13      	ldr	r3, [pc, #76]	; (8019b84 <ip4_output_if_src+0x194>)
 8019b38:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8019b3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019b3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8019b40:	2b00      	cmp	r3, #0
 8019b42:	d00c      	beq.n	8019b5e <ip4_output_if_src+0x16e>
 8019b44:	68fb      	ldr	r3, [r7, #12]
 8019b46:	891a      	ldrh	r2, [r3, #8]
 8019b48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019b4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8019b4c:	429a      	cmp	r2, r3
 8019b4e:	d906      	bls.n	8019b5e <ip4_output_if_src+0x16e>
    return ip4_frag(p, netif, dest);
 8019b50:	687a      	ldr	r2, [r7, #4]
 8019b52:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8019b54:	68f8      	ldr	r0, [r7, #12]
 8019b56:	f000 fdcd 	bl	801a6f4 <ip4_frag>
 8019b5a:	4603      	mov	r3, r0
 8019b5c:	e006      	b.n	8019b6c <ip4_output_if_src+0x17c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8019b5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019b60:	695b      	ldr	r3, [r3, #20]
 8019b62:	687a      	ldr	r2, [r7, #4]
 8019b64:	68f9      	ldr	r1, [r7, #12]
 8019b66:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8019b68:	4798      	blx	r3
 8019b6a:	4603      	mov	r3, r0
}
 8019b6c:	4618      	mov	r0, r3
 8019b6e:	3720      	adds	r7, #32
 8019b70:	46bd      	mov	sp, r7
 8019b72:	bd80      	pop	{r7, pc}
 8019b74:	0802022c 	.word	0x0802022c
 8019b78:	08020238 	.word	0x08020238
 8019b7c:	08020258 	.word	0x08020258
 8019b80:	0802028c 	.word	0x0802028c
 8019b84:	20010b7c 	.word	0x20010b7c
 8019b88:	08020290 	.word	0x08020290
 8019b8c:	2000a0d2 	.word	0x2000a0d2
 8019b90:	08020718 	.word	0x08020718

08019b94 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8019b94:	b480      	push	{r7}
 8019b96:	b085      	sub	sp, #20
 8019b98:	af00      	add	r7, sp, #0
 8019b9a:	6078      	str	r0, [r7, #4]
 8019b9c:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8019b9e:	687b      	ldr	r3, [r7, #4]
 8019ba0:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8019ba2:	687b      	ldr	r3, [r7, #4]
 8019ba4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019ba8:	d002      	beq.n	8019bb0 <ip4_addr_isbroadcast_u32+0x1c>
 8019baa:	687b      	ldr	r3, [r7, #4]
 8019bac:	2b00      	cmp	r3, #0
 8019bae:	d101      	bne.n	8019bb4 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8019bb0:	2301      	movs	r3, #1
 8019bb2:	e02a      	b.n	8019c0a <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8019bb4:	683b      	ldr	r3, [r7, #0]
 8019bb6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8019bba:	f003 0302 	and.w	r3, r3, #2
 8019bbe:	2b00      	cmp	r3, #0
 8019bc0:	d101      	bne.n	8019bc6 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8019bc2:	2300      	movs	r3, #0
 8019bc4:	e021      	b.n	8019c0a <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8019bc6:	683b      	ldr	r3, [r7, #0]
 8019bc8:	3304      	adds	r3, #4
 8019bca:	681b      	ldr	r3, [r3, #0]
 8019bcc:	687a      	ldr	r2, [r7, #4]
 8019bce:	429a      	cmp	r2, r3
 8019bd0:	d101      	bne.n	8019bd6 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8019bd2:	2300      	movs	r3, #0
 8019bd4:	e019      	b.n	8019c0a <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8019bd6:	68fa      	ldr	r2, [r7, #12]
 8019bd8:	683b      	ldr	r3, [r7, #0]
 8019bda:	3304      	adds	r3, #4
 8019bdc:	681b      	ldr	r3, [r3, #0]
 8019bde:	405a      	eors	r2, r3
 8019be0:	683b      	ldr	r3, [r7, #0]
 8019be2:	3308      	adds	r3, #8
 8019be4:	681b      	ldr	r3, [r3, #0]
 8019be6:	4013      	ands	r3, r2
 8019be8:	2b00      	cmp	r3, #0
 8019bea:	d10d      	bne.n	8019c08 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8019bec:	683b      	ldr	r3, [r7, #0]
 8019bee:	3308      	adds	r3, #8
 8019bf0:	681b      	ldr	r3, [r3, #0]
 8019bf2:	43da      	mvns	r2, r3
 8019bf4:	687b      	ldr	r3, [r7, #4]
 8019bf6:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8019bf8:	683b      	ldr	r3, [r7, #0]
 8019bfa:	3308      	adds	r3, #8
 8019bfc:	681b      	ldr	r3, [r3, #0]
 8019bfe:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8019c00:	429a      	cmp	r2, r3
 8019c02:	d101      	bne.n	8019c08 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8019c04:	2301      	movs	r3, #1
 8019c06:	e000      	b.n	8019c0a <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8019c08:	2300      	movs	r3, #0
  }
}
 8019c0a:	4618      	mov	r0, r3
 8019c0c:	3714      	adds	r7, #20
 8019c0e:	46bd      	mov	sp, r7
 8019c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c14:	4770      	bx	lr
	...

08019c18 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8019c18:	b580      	push	{r7, lr}
 8019c1a:	b084      	sub	sp, #16
 8019c1c:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8019c1e:	2300      	movs	r3, #0
 8019c20:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8019c22:	4b12      	ldr	r3, [pc, #72]	; (8019c6c <ip_reass_tmr+0x54>)
 8019c24:	681b      	ldr	r3, [r3, #0]
 8019c26:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8019c28:	e018      	b.n	8019c5c <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8019c2a:	68fb      	ldr	r3, [r7, #12]
 8019c2c:	7fdb      	ldrb	r3, [r3, #31]
 8019c2e:	2b00      	cmp	r3, #0
 8019c30:	d00b      	beq.n	8019c4a <ip_reass_tmr+0x32>
      r->timer--;
 8019c32:	68fb      	ldr	r3, [r7, #12]
 8019c34:	7fdb      	ldrb	r3, [r3, #31]
 8019c36:	3b01      	subs	r3, #1
 8019c38:	b2da      	uxtb	r2, r3
 8019c3a:	68fb      	ldr	r3, [r7, #12]
 8019c3c:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8019c3e:	68fb      	ldr	r3, [r7, #12]
 8019c40:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8019c42:	68fb      	ldr	r3, [r7, #12]
 8019c44:	681b      	ldr	r3, [r3, #0]
 8019c46:	60fb      	str	r3, [r7, #12]
 8019c48:	e008      	b.n	8019c5c <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8019c4a:	68fb      	ldr	r3, [r7, #12]
 8019c4c:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8019c4e:	68fb      	ldr	r3, [r7, #12]
 8019c50:	681b      	ldr	r3, [r3, #0]
 8019c52:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8019c54:	68b9      	ldr	r1, [r7, #8]
 8019c56:	6878      	ldr	r0, [r7, #4]
 8019c58:	f000 f80a 	bl	8019c70 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8019c5c:	68fb      	ldr	r3, [r7, #12]
 8019c5e:	2b00      	cmp	r3, #0
 8019c60:	d1e3      	bne.n	8019c2a <ip_reass_tmr+0x12>
    }
  }
}
 8019c62:	bf00      	nop
 8019c64:	bf00      	nop
 8019c66:	3710      	adds	r7, #16
 8019c68:	46bd      	mov	sp, r7
 8019c6a:	bd80      	pop	{r7, pc}
 8019c6c:	2000a0d4 	.word	0x2000a0d4

08019c70 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8019c70:	b580      	push	{r7, lr}
 8019c72:	b088      	sub	sp, #32
 8019c74:	af00      	add	r7, sp, #0
 8019c76:	6078      	str	r0, [r7, #4]
 8019c78:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8019c7a:	2300      	movs	r3, #0
 8019c7c:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8019c7e:	683a      	ldr	r2, [r7, #0]
 8019c80:	687b      	ldr	r3, [r7, #4]
 8019c82:	429a      	cmp	r2, r3
 8019c84:	d109      	bne.n	8019c9a <ip_reass_free_complete_datagram+0x2a>
 8019c86:	22ab      	movs	r2, #171	; 0xab
 8019c88:	494e      	ldr	r1, [pc, #312]	; (8019dc4 <ip_reass_free_complete_datagram+0x154>)
 8019c8a:	484f      	ldr	r0, [pc, #316]	; (8019dc8 <ip_reass_free_complete_datagram+0x158>)
 8019c8c:	f001 fa42 	bl	801b114 <trace_printf>
 8019c90:	494e      	ldr	r1, [pc, #312]	; (8019dcc <ip_reass_free_complete_datagram+0x15c>)
 8019c92:	484f      	ldr	r0, [pc, #316]	; (8019dd0 <ip_reass_free_complete_datagram+0x160>)
 8019c94:	f001 fa3e 	bl	801b114 <trace_printf>
 8019c98:	e7fe      	b.n	8019c98 <ip_reass_free_complete_datagram+0x28>
  if (prev != NULL) {
 8019c9a:	683b      	ldr	r3, [r7, #0]
 8019c9c:	2b00      	cmp	r3, #0
 8019c9e:	d00e      	beq.n	8019cbe <ip_reass_free_complete_datagram+0x4e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8019ca0:	683b      	ldr	r3, [r7, #0]
 8019ca2:	681b      	ldr	r3, [r3, #0]
 8019ca4:	687a      	ldr	r2, [r7, #4]
 8019ca6:	429a      	cmp	r2, r3
 8019ca8:	d009      	beq.n	8019cbe <ip_reass_free_complete_datagram+0x4e>
 8019caa:	22ad      	movs	r2, #173	; 0xad
 8019cac:	4949      	ldr	r1, [pc, #292]	; (8019dd4 <ip_reass_free_complete_datagram+0x164>)
 8019cae:	4846      	ldr	r0, [pc, #280]	; (8019dc8 <ip_reass_free_complete_datagram+0x158>)
 8019cb0:	f001 fa30 	bl	801b114 <trace_printf>
 8019cb4:	4945      	ldr	r1, [pc, #276]	; (8019dcc <ip_reass_free_complete_datagram+0x15c>)
 8019cb6:	4846      	ldr	r0, [pc, #280]	; (8019dd0 <ip_reass_free_complete_datagram+0x160>)
 8019cb8:	f001 fa2c 	bl	801b114 <trace_printf>
 8019cbc:	e7fe      	b.n	8019cbc <ip_reass_free_complete_datagram+0x4c>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8019cbe:	687b      	ldr	r3, [r7, #4]
 8019cc0:	685b      	ldr	r3, [r3, #4]
 8019cc2:	685b      	ldr	r3, [r3, #4]
 8019cc4:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8019cc6:	697b      	ldr	r3, [r7, #20]
 8019cc8:	889b      	ldrh	r3, [r3, #4]
 8019cca:	b29b      	uxth	r3, r3
 8019ccc:	2b00      	cmp	r3, #0
 8019cce:	d12e      	bne.n	8019d2e <ip_reass_free_complete_datagram+0xbe>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8019cd0:	687b      	ldr	r3, [r7, #4]
 8019cd2:	685b      	ldr	r3, [r3, #4]
 8019cd4:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8019cd6:	697b      	ldr	r3, [r7, #20]
 8019cd8:	681a      	ldr	r2, [r3, #0]
 8019cda:	687b      	ldr	r3, [r7, #4]
 8019cdc:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8019cde:	69bb      	ldr	r3, [r7, #24]
 8019ce0:	6858      	ldr	r0, [r3, #4]
 8019ce2:	687b      	ldr	r3, [r7, #4]
 8019ce4:	3308      	adds	r3, #8
 8019ce6:	2214      	movs	r2, #20
 8019ce8:	4619      	mov	r1, r3
 8019cea:	f001 fa67 	bl	801b1bc <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8019cee:	2101      	movs	r1, #1
 8019cf0:	69b8      	ldr	r0, [r7, #24]
 8019cf2:	f7ff fb95 	bl	8019420 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8019cf6:	69b8      	ldr	r0, [r7, #24]
 8019cf8:	f7f4 fdda 	bl	800e8b0 <pbuf_clen>
 8019cfc:	4603      	mov	r3, r0
 8019cfe:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8019d00:	8bfa      	ldrh	r2, [r7, #30]
 8019d02:	8a7b      	ldrh	r3, [r7, #18]
 8019d04:	4413      	add	r3, r2
 8019d06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8019d0a:	db09      	blt.n	8019d20 <ip_reass_free_complete_datagram+0xb0>
 8019d0c:	22bc      	movs	r2, #188	; 0xbc
 8019d0e:	4932      	ldr	r1, [pc, #200]	; (8019dd8 <ip_reass_free_complete_datagram+0x168>)
 8019d10:	482d      	ldr	r0, [pc, #180]	; (8019dc8 <ip_reass_free_complete_datagram+0x158>)
 8019d12:	f001 f9ff 	bl	801b114 <trace_printf>
 8019d16:	492d      	ldr	r1, [pc, #180]	; (8019dcc <ip_reass_free_complete_datagram+0x15c>)
 8019d18:	482d      	ldr	r0, [pc, #180]	; (8019dd0 <ip_reass_free_complete_datagram+0x160>)
 8019d1a:	f001 f9fb 	bl	801b114 <trace_printf>
 8019d1e:	e7fe      	b.n	8019d1e <ip_reass_free_complete_datagram+0xae>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8019d20:	8bfa      	ldrh	r2, [r7, #30]
 8019d22:	8a7b      	ldrh	r3, [r7, #18]
 8019d24:	4413      	add	r3, r2
 8019d26:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8019d28:	69b8      	ldr	r0, [r7, #24]
 8019d2a:	f7f4 fd21 	bl	800e770 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8019d2e:	687b      	ldr	r3, [r7, #4]
 8019d30:	685b      	ldr	r3, [r3, #4]
 8019d32:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8019d34:	e023      	b.n	8019d7e <ip_reass_free_complete_datagram+0x10e>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8019d36:	69bb      	ldr	r3, [r7, #24]
 8019d38:	685b      	ldr	r3, [r3, #4]
 8019d3a:	617b      	str	r3, [r7, #20]
    pcur = p;
 8019d3c:	69bb      	ldr	r3, [r7, #24]
 8019d3e:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8019d40:	697b      	ldr	r3, [r7, #20]
 8019d42:	681b      	ldr	r3, [r3, #0]
 8019d44:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8019d46:	68f8      	ldr	r0, [r7, #12]
 8019d48:	f7f4 fdb2 	bl	800e8b0 <pbuf_clen>
 8019d4c:	4603      	mov	r3, r0
 8019d4e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8019d50:	8bfa      	ldrh	r2, [r7, #30]
 8019d52:	8a7b      	ldrh	r3, [r7, #18]
 8019d54:	4413      	add	r3, r2
 8019d56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8019d5a:	db09      	blt.n	8019d70 <ip_reass_free_complete_datagram+0x100>
 8019d5c:	22cc      	movs	r2, #204	; 0xcc
 8019d5e:	491e      	ldr	r1, [pc, #120]	; (8019dd8 <ip_reass_free_complete_datagram+0x168>)
 8019d60:	4819      	ldr	r0, [pc, #100]	; (8019dc8 <ip_reass_free_complete_datagram+0x158>)
 8019d62:	f001 f9d7 	bl	801b114 <trace_printf>
 8019d66:	4919      	ldr	r1, [pc, #100]	; (8019dcc <ip_reass_free_complete_datagram+0x15c>)
 8019d68:	4819      	ldr	r0, [pc, #100]	; (8019dd0 <ip_reass_free_complete_datagram+0x160>)
 8019d6a:	f001 f9d3 	bl	801b114 <trace_printf>
 8019d6e:	e7fe      	b.n	8019d6e <ip_reass_free_complete_datagram+0xfe>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8019d70:	8bfa      	ldrh	r2, [r7, #30]
 8019d72:	8a7b      	ldrh	r3, [r7, #18]
 8019d74:	4413      	add	r3, r2
 8019d76:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8019d78:	68f8      	ldr	r0, [r7, #12]
 8019d7a:	f7f4 fcf9 	bl	800e770 <pbuf_free>
  while (p != NULL) {
 8019d7e:	69bb      	ldr	r3, [r7, #24]
 8019d80:	2b00      	cmp	r3, #0
 8019d82:	d1d8      	bne.n	8019d36 <ip_reass_free_complete_datagram+0xc6>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8019d84:	6839      	ldr	r1, [r7, #0]
 8019d86:	6878      	ldr	r0, [r7, #4]
 8019d88:	f000 f8d0 	bl	8019f2c <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8019d8c:	4b13      	ldr	r3, [pc, #76]	; (8019ddc <ip_reass_free_complete_datagram+0x16c>)
 8019d8e:	881b      	ldrh	r3, [r3, #0]
 8019d90:	8bfa      	ldrh	r2, [r7, #30]
 8019d92:	429a      	cmp	r2, r3
 8019d94:	d909      	bls.n	8019daa <ip_reass_free_complete_datagram+0x13a>
 8019d96:	22d2      	movs	r2, #210	; 0xd2
 8019d98:	4911      	ldr	r1, [pc, #68]	; (8019de0 <ip_reass_free_complete_datagram+0x170>)
 8019d9a:	480b      	ldr	r0, [pc, #44]	; (8019dc8 <ip_reass_free_complete_datagram+0x158>)
 8019d9c:	f001 f9ba 	bl	801b114 <trace_printf>
 8019da0:	490a      	ldr	r1, [pc, #40]	; (8019dcc <ip_reass_free_complete_datagram+0x15c>)
 8019da2:	480b      	ldr	r0, [pc, #44]	; (8019dd0 <ip_reass_free_complete_datagram+0x160>)
 8019da4:	f001 f9b6 	bl	801b114 <trace_printf>
 8019da8:	e7fe      	b.n	8019da8 <ip_reass_free_complete_datagram+0x138>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8019daa:	4b0c      	ldr	r3, [pc, #48]	; (8019ddc <ip_reass_free_complete_datagram+0x16c>)
 8019dac:	881a      	ldrh	r2, [r3, #0]
 8019dae:	8bfb      	ldrh	r3, [r7, #30]
 8019db0:	1ad3      	subs	r3, r2, r3
 8019db2:	b29a      	uxth	r2, r3
 8019db4:	4b09      	ldr	r3, [pc, #36]	; (8019ddc <ip_reass_free_complete_datagram+0x16c>)
 8019db6:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8019db8:	8bfb      	ldrh	r3, [r7, #30]
}
 8019dba:	4618      	mov	r0, r3
 8019dbc:	3720      	adds	r7, #32
 8019dbe:	46bd      	mov	sp, r7
 8019dc0:	bd80      	pop	{r7, pc}
 8019dc2:	bf00      	nop
 8019dc4:	080202c0 	.word	0x080202c0
 8019dc8:	080202cc 	.word	0x080202cc
 8019dcc:	080202ec 	.word	0x080202ec
 8019dd0:	08020328 	.word	0x08020328
 8019dd4:	0802032c 	.word	0x0802032c
 8019dd8:	08020340 	.word	0x08020340
 8019ddc:	2000a0d8 	.word	0x2000a0d8
 8019de0:	08020360 	.word	0x08020360

08019de4 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8019de4:	b580      	push	{r7, lr}
 8019de6:	b08a      	sub	sp, #40	; 0x28
 8019de8:	af00      	add	r7, sp, #0
 8019dea:	6078      	str	r0, [r7, #4]
 8019dec:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8019dee:	2300      	movs	r3, #0
 8019df0:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8019df2:	2300      	movs	r3, #0
 8019df4:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8019df6:	2300      	movs	r3, #0
 8019df8:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8019dfa:	2300      	movs	r3, #0
 8019dfc:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8019dfe:	2300      	movs	r3, #0
 8019e00:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8019e02:	4b28      	ldr	r3, [pc, #160]	; (8019ea4 <ip_reass_remove_oldest_datagram+0xc0>)
 8019e04:	681b      	ldr	r3, [r3, #0]
 8019e06:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8019e08:	e030      	b.n	8019e6c <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8019e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019e0c:	695a      	ldr	r2, [r3, #20]
 8019e0e:	687b      	ldr	r3, [r7, #4]
 8019e10:	68db      	ldr	r3, [r3, #12]
 8019e12:	429a      	cmp	r2, r3
 8019e14:	d10c      	bne.n	8019e30 <ip_reass_remove_oldest_datagram+0x4c>
 8019e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019e18:	699a      	ldr	r2, [r3, #24]
 8019e1a:	687b      	ldr	r3, [r7, #4]
 8019e1c:	691b      	ldr	r3, [r3, #16]
 8019e1e:	429a      	cmp	r2, r3
 8019e20:	d106      	bne.n	8019e30 <ip_reass_remove_oldest_datagram+0x4c>
 8019e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019e24:	899a      	ldrh	r2, [r3, #12]
 8019e26:	687b      	ldr	r3, [r7, #4]
 8019e28:	889b      	ldrh	r3, [r3, #4]
 8019e2a:	b29b      	uxth	r3, r3
 8019e2c:	429a      	cmp	r2, r3
 8019e2e:	d014      	beq.n	8019e5a <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8019e30:	693b      	ldr	r3, [r7, #16]
 8019e32:	3301      	adds	r3, #1
 8019e34:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8019e36:	6a3b      	ldr	r3, [r7, #32]
 8019e38:	2b00      	cmp	r3, #0
 8019e3a:	d104      	bne.n	8019e46 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8019e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019e3e:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8019e40:	69fb      	ldr	r3, [r7, #28]
 8019e42:	61bb      	str	r3, [r7, #24]
 8019e44:	e009      	b.n	8019e5a <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8019e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019e48:	7fda      	ldrb	r2, [r3, #31]
 8019e4a:	6a3b      	ldr	r3, [r7, #32]
 8019e4c:	7fdb      	ldrb	r3, [r3, #31]
 8019e4e:	429a      	cmp	r2, r3
 8019e50:	d803      	bhi.n	8019e5a <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8019e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019e54:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8019e56:	69fb      	ldr	r3, [r7, #28]
 8019e58:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8019e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019e5c:	681b      	ldr	r3, [r3, #0]
 8019e5e:	2b00      	cmp	r3, #0
 8019e60:	d001      	beq.n	8019e66 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8019e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019e64:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8019e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019e68:	681b      	ldr	r3, [r3, #0]
 8019e6a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8019e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019e6e:	2b00      	cmp	r3, #0
 8019e70:	d1cb      	bne.n	8019e0a <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8019e72:	6a3b      	ldr	r3, [r7, #32]
 8019e74:	2b00      	cmp	r3, #0
 8019e76:	d008      	beq.n	8019e8a <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8019e78:	69b9      	ldr	r1, [r7, #24]
 8019e7a:	6a38      	ldr	r0, [r7, #32]
 8019e7c:	f7ff fef8 	bl	8019c70 <ip_reass_free_complete_datagram>
 8019e80:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8019e82:	697a      	ldr	r2, [r7, #20]
 8019e84:	68fb      	ldr	r3, [r7, #12]
 8019e86:	4413      	add	r3, r2
 8019e88:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8019e8a:	697a      	ldr	r2, [r7, #20]
 8019e8c:	683b      	ldr	r3, [r7, #0]
 8019e8e:	429a      	cmp	r2, r3
 8019e90:	da02      	bge.n	8019e98 <ip_reass_remove_oldest_datagram+0xb4>
 8019e92:	693b      	ldr	r3, [r7, #16]
 8019e94:	2b01      	cmp	r3, #1
 8019e96:	dcac      	bgt.n	8019df2 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8019e98:	697b      	ldr	r3, [r7, #20]
}
 8019e9a:	4618      	mov	r0, r3
 8019e9c:	3728      	adds	r7, #40	; 0x28
 8019e9e:	46bd      	mov	sp, r7
 8019ea0:	bd80      	pop	{r7, pc}
 8019ea2:	bf00      	nop
 8019ea4:	2000a0d4 	.word	0x2000a0d4

08019ea8 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8019ea8:	b580      	push	{r7, lr}
 8019eaa:	b084      	sub	sp, #16
 8019eac:	af00      	add	r7, sp, #0
 8019eae:	6078      	str	r0, [r7, #4]
 8019eb0:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8019eb2:	2004      	movs	r0, #4
 8019eb4:	f7f3 fce0 	bl	800d878 <memp_malloc>
 8019eb8:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8019eba:	68fb      	ldr	r3, [r7, #12]
 8019ebc:	2b00      	cmp	r3, #0
 8019ebe:	d116      	bne.n	8019eee <ip_reass_enqueue_new_datagram+0x46>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8019ec0:	6839      	ldr	r1, [r7, #0]
 8019ec2:	6878      	ldr	r0, [r7, #4]
 8019ec4:	f7ff ff8e 	bl	8019de4 <ip_reass_remove_oldest_datagram>
 8019ec8:	4602      	mov	r2, r0
 8019eca:	683b      	ldr	r3, [r7, #0]
 8019ecc:	4293      	cmp	r3, r2
 8019ece:	dc03      	bgt.n	8019ed8 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8019ed0:	2004      	movs	r0, #4
 8019ed2:	f7f3 fcd1 	bl	800d878 <memp_malloc>
 8019ed6:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8019ed8:	68fb      	ldr	r3, [r7, #12]
 8019eda:	2b00      	cmp	r3, #0
 8019edc:	d107      	bne.n	8019eee <ip_reass_enqueue_new_datagram+0x46>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
 8019ede:	4b11      	ldr	r3, [pc, #68]	; (8019f24 <ip_reass_enqueue_new_datagram+0x7c>)
 8019ee0:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8019ee2:	3301      	adds	r3, #1
 8019ee4:	b29a      	uxth	r2, r3
 8019ee6:	4b0f      	ldr	r3, [pc, #60]	; (8019f24 <ip_reass_enqueue_new_datagram+0x7c>)
 8019ee8:	879a      	strh	r2, [r3, #60]	; 0x3c
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8019eea:	2300      	movs	r3, #0
 8019eec:	e016      	b.n	8019f1c <ip_reass_enqueue_new_datagram+0x74>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8019eee:	2220      	movs	r2, #32
 8019ef0:	2100      	movs	r1, #0
 8019ef2:	68f8      	ldr	r0, [r7, #12]
 8019ef4:	f001 f98a 	bl	801b20c <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8019ef8:	68fb      	ldr	r3, [r7, #12]
 8019efa:	220f      	movs	r2, #15
 8019efc:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8019efe:	4b0a      	ldr	r3, [pc, #40]	; (8019f28 <ip_reass_enqueue_new_datagram+0x80>)
 8019f00:	681a      	ldr	r2, [r3, #0]
 8019f02:	68fb      	ldr	r3, [r7, #12]
 8019f04:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8019f06:	4a08      	ldr	r2, [pc, #32]	; (8019f28 <ip_reass_enqueue_new_datagram+0x80>)
 8019f08:	68fb      	ldr	r3, [r7, #12]
 8019f0a:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8019f0c:	68fb      	ldr	r3, [r7, #12]
 8019f0e:	3308      	adds	r3, #8
 8019f10:	2214      	movs	r2, #20
 8019f12:	6879      	ldr	r1, [r7, #4]
 8019f14:	4618      	mov	r0, r3
 8019f16:	f001 f951 	bl	801b1bc <memcpy>
  return ipr;
 8019f1a:	68fb      	ldr	r3, [r7, #12]
}
 8019f1c:	4618      	mov	r0, r3
 8019f1e:	3710      	adds	r7, #16
 8019f20:	46bd      	mov	sp, r7
 8019f22:	bd80      	pop	{r7, pc}
 8019f24:	20010b7c 	.word	0x20010b7c
 8019f28:	2000a0d4 	.word	0x2000a0d4

08019f2c <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8019f2c:	b580      	push	{r7, lr}
 8019f2e:	b082      	sub	sp, #8
 8019f30:	af00      	add	r7, sp, #0
 8019f32:	6078      	str	r0, [r7, #4]
 8019f34:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8019f36:	4b12      	ldr	r3, [pc, #72]	; (8019f80 <ip_reass_dequeue_datagram+0x54>)
 8019f38:	681b      	ldr	r3, [r3, #0]
 8019f3a:	687a      	ldr	r2, [r7, #4]
 8019f3c:	429a      	cmp	r2, r3
 8019f3e:	d104      	bne.n	8019f4a <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8019f40:	687b      	ldr	r3, [r7, #4]
 8019f42:	681b      	ldr	r3, [r3, #0]
 8019f44:	4a0e      	ldr	r2, [pc, #56]	; (8019f80 <ip_reass_dequeue_datagram+0x54>)
 8019f46:	6013      	str	r3, [r2, #0]
 8019f48:	e011      	b.n	8019f6e <ip_reass_dequeue_datagram+0x42>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8019f4a:	683b      	ldr	r3, [r7, #0]
 8019f4c:	2b00      	cmp	r3, #0
 8019f4e:	d10a      	bne.n	8019f66 <ip_reass_dequeue_datagram+0x3a>
 8019f50:	f240 1245 	movw	r2, #325	; 0x145
 8019f54:	490b      	ldr	r1, [pc, #44]	; (8019f84 <ip_reass_dequeue_datagram+0x58>)
 8019f56:	480c      	ldr	r0, [pc, #48]	; (8019f88 <ip_reass_dequeue_datagram+0x5c>)
 8019f58:	f001 f8dc 	bl	801b114 <trace_printf>
 8019f5c:	490b      	ldr	r1, [pc, #44]	; (8019f8c <ip_reass_dequeue_datagram+0x60>)
 8019f5e:	480c      	ldr	r0, [pc, #48]	; (8019f90 <ip_reass_dequeue_datagram+0x64>)
 8019f60:	f001 f8d8 	bl	801b114 <trace_printf>
 8019f64:	e7fe      	b.n	8019f64 <ip_reass_dequeue_datagram+0x38>
    prev->next = ipr->next;
 8019f66:	687b      	ldr	r3, [r7, #4]
 8019f68:	681a      	ldr	r2, [r3, #0]
 8019f6a:	683b      	ldr	r3, [r7, #0]
 8019f6c:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8019f6e:	6879      	ldr	r1, [r7, #4]
 8019f70:	2004      	movs	r0, #4
 8019f72:	f7f3 fce3 	bl	800d93c <memp_free>
}
 8019f76:	bf00      	nop
 8019f78:	3708      	adds	r7, #8
 8019f7a:	46bd      	mov	sp, r7
 8019f7c:	bd80      	pop	{r7, pc}
 8019f7e:	bf00      	nop
 8019f80:	2000a0d4 	.word	0x2000a0d4
 8019f84:	08020384 	.word	0x08020384
 8019f88:	080202cc 	.word	0x080202cc
 8019f8c:	080202ec 	.word	0x080202ec
 8019f90:	08020328 	.word	0x08020328

08019f94 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8019f94:	b580      	push	{r7, lr}
 8019f96:	b08c      	sub	sp, #48	; 0x30
 8019f98:	af00      	add	r7, sp, #0
 8019f9a:	60f8      	str	r0, [r7, #12]
 8019f9c:	60b9      	str	r1, [r7, #8]
 8019f9e:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8019fa0:	2300      	movs	r3, #0
 8019fa2:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8019fa4:	2301      	movs	r3, #1
 8019fa6:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8019fa8:	68bb      	ldr	r3, [r7, #8]
 8019faa:	685b      	ldr	r3, [r3, #4]
 8019fac:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8019fae:	69fb      	ldr	r3, [r7, #28]
 8019fb0:	885b      	ldrh	r3, [r3, #2]
 8019fb2:	b29b      	uxth	r3, r3
 8019fb4:	4618      	mov	r0, r3
 8019fb6:	f7f2 fec5 	bl	800cd44 <lwip_htons>
 8019fba:	4603      	mov	r3, r0
 8019fbc:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8019fbe:	69fb      	ldr	r3, [r7, #28]
 8019fc0:	781b      	ldrb	r3, [r3, #0]
 8019fc2:	f003 030f 	and.w	r3, r3, #15
 8019fc6:	b2db      	uxtb	r3, r3
 8019fc8:	009b      	lsls	r3, r3, #2
 8019fca:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8019fcc:	7e7b      	ldrb	r3, [r7, #25]
 8019fce:	b29b      	uxth	r3, r3
 8019fd0:	8b7a      	ldrh	r2, [r7, #26]
 8019fd2:	429a      	cmp	r2, r3
 8019fd4:	d202      	bcs.n	8019fdc <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8019fd6:	f04f 33ff 	mov.w	r3, #4294967295
 8019fda:	e149      	b.n	801a270 <ip_reass_chain_frag_into_datagram_and_validate+0x2dc>
  }
  len = (u16_t)(len - hlen);
 8019fdc:	7e7b      	ldrb	r3, [r7, #25]
 8019fde:	b29b      	uxth	r3, r3
 8019fe0:	8b7a      	ldrh	r2, [r7, #26]
 8019fe2:	1ad3      	subs	r3, r2, r3
 8019fe4:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8019fe6:	69fb      	ldr	r3, [r7, #28]
 8019fe8:	88db      	ldrh	r3, [r3, #6]
 8019fea:	b29b      	uxth	r3, r3
 8019fec:	4618      	mov	r0, r3
 8019fee:	f7f2 fea9 	bl	800cd44 <lwip_htons>
 8019ff2:	4603      	mov	r3, r0
 8019ff4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8019ff8:	b29b      	uxth	r3, r3
 8019ffa:	00db      	lsls	r3, r3, #3
 8019ffc:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8019ffe:	68bb      	ldr	r3, [r7, #8]
 801a000:	685b      	ldr	r3, [r3, #4]
 801a002:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 801a004:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a006:	2200      	movs	r2, #0
 801a008:	701a      	strb	r2, [r3, #0]
 801a00a:	2200      	movs	r2, #0
 801a00c:	705a      	strb	r2, [r3, #1]
 801a00e:	2200      	movs	r2, #0
 801a010:	709a      	strb	r2, [r3, #2]
 801a012:	2200      	movs	r2, #0
 801a014:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801a016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a018:	8afa      	ldrh	r2, [r7, #22]
 801a01a:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 801a01c:	8afa      	ldrh	r2, [r7, #22]
 801a01e:	8b7b      	ldrh	r3, [r7, #26]
 801a020:	4413      	add	r3, r2
 801a022:	b29a      	uxth	r2, r3
 801a024:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a026:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 801a028:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a02a:	88db      	ldrh	r3, [r3, #6]
 801a02c:	b29b      	uxth	r3, r3
 801a02e:	8afa      	ldrh	r2, [r7, #22]
 801a030:	429a      	cmp	r2, r3
 801a032:	d902      	bls.n	801a03a <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801a034:	f04f 33ff 	mov.w	r3, #4294967295
 801a038:	e11a      	b.n	801a270 <ip_reass_chain_frag_into_datagram_and_validate+0x2dc>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 801a03a:	68fb      	ldr	r3, [r7, #12]
 801a03c:	685b      	ldr	r3, [r3, #4]
 801a03e:	627b      	str	r3, [r7, #36]	; 0x24
 801a040:	e068      	b.n	801a114 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801a042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a044:	685b      	ldr	r3, [r3, #4]
 801a046:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 801a048:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a04a:	889b      	ldrh	r3, [r3, #4]
 801a04c:	b29a      	uxth	r2, r3
 801a04e:	693b      	ldr	r3, [r7, #16]
 801a050:	889b      	ldrh	r3, [r3, #4]
 801a052:	b29b      	uxth	r3, r3
 801a054:	429a      	cmp	r2, r3
 801a056:	d235      	bcs.n	801a0c4 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 801a058:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a05a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a05c:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801a05e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a060:	2b00      	cmp	r3, #0
 801a062:	d020      	beq.n	801a0a6 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 801a064:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a066:	889b      	ldrh	r3, [r3, #4]
 801a068:	b29a      	uxth	r2, r3
 801a06a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a06c:	88db      	ldrh	r3, [r3, #6]
 801a06e:	b29b      	uxth	r3, r3
 801a070:	429a      	cmp	r2, r3
 801a072:	d307      	bcc.n	801a084 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 801a074:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a076:	88db      	ldrh	r3, [r3, #6]
 801a078:	b29a      	uxth	r2, r3
 801a07a:	693b      	ldr	r3, [r7, #16]
 801a07c:	889b      	ldrh	r3, [r3, #4]
 801a07e:	b29b      	uxth	r3, r3
 801a080:	429a      	cmp	r2, r3
 801a082:	d902      	bls.n	801a08a <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801a084:	f04f 33ff 	mov.w	r3, #4294967295
 801a088:	e0f2      	b.n	801a270 <ip_reass_chain_frag_into_datagram_and_validate+0x2dc>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 801a08a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a08c:	68ba      	ldr	r2, [r7, #8]
 801a08e:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 801a090:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a092:	88db      	ldrh	r3, [r3, #6]
 801a094:	b29a      	uxth	r2, r3
 801a096:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a098:	889b      	ldrh	r3, [r3, #4]
 801a09a:	b29b      	uxth	r3, r3
 801a09c:	429a      	cmp	r2, r3
 801a09e:	d03d      	beq.n	801a11c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801a0a0:	2300      	movs	r3, #0
 801a0a2:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 801a0a4:	e03a      	b.n	801a11c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 801a0a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a0a8:	88db      	ldrh	r3, [r3, #6]
 801a0aa:	b29a      	uxth	r2, r3
 801a0ac:	693b      	ldr	r3, [r7, #16]
 801a0ae:	889b      	ldrh	r3, [r3, #4]
 801a0b0:	b29b      	uxth	r3, r3
 801a0b2:	429a      	cmp	r2, r3
 801a0b4:	d902      	bls.n	801a0bc <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801a0b6:	f04f 33ff 	mov.w	r3, #4294967295
 801a0ba:	e0d9      	b.n	801a270 <ip_reass_chain_frag_into_datagram_and_validate+0x2dc>
        ipr->p = new_p;
 801a0bc:	68fb      	ldr	r3, [r7, #12]
 801a0be:	68ba      	ldr	r2, [r7, #8]
 801a0c0:	605a      	str	r2, [r3, #4]
      break;
 801a0c2:	e02b      	b.n	801a11c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 801a0c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a0c6:	889b      	ldrh	r3, [r3, #4]
 801a0c8:	b29a      	uxth	r2, r3
 801a0ca:	693b      	ldr	r3, [r7, #16]
 801a0cc:	889b      	ldrh	r3, [r3, #4]
 801a0ce:	b29b      	uxth	r3, r3
 801a0d0:	429a      	cmp	r2, r3
 801a0d2:	d102      	bne.n	801a0da <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801a0d4:	f04f 33ff 	mov.w	r3, #4294967295
 801a0d8:	e0ca      	b.n	801a270 <ip_reass_chain_frag_into_datagram_and_validate+0x2dc>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801a0da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a0dc:	889b      	ldrh	r3, [r3, #4]
 801a0de:	b29a      	uxth	r2, r3
 801a0e0:	693b      	ldr	r3, [r7, #16]
 801a0e2:	88db      	ldrh	r3, [r3, #6]
 801a0e4:	b29b      	uxth	r3, r3
 801a0e6:	429a      	cmp	r2, r3
 801a0e8:	d202      	bcs.n	801a0f0 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801a0ea:	f04f 33ff 	mov.w	r3, #4294967295
 801a0ee:	e0bf      	b.n	801a270 <ip_reass_chain_frag_into_datagram_and_validate+0x2dc>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 801a0f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a0f2:	2b00      	cmp	r3, #0
 801a0f4:	d009      	beq.n	801a10a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801a0f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a0f8:	88db      	ldrh	r3, [r3, #6]
 801a0fa:	b29a      	uxth	r2, r3
 801a0fc:	693b      	ldr	r3, [r7, #16]
 801a0fe:	889b      	ldrh	r3, [r3, #4]
 801a100:	b29b      	uxth	r3, r3
 801a102:	429a      	cmp	r2, r3
 801a104:	d001      	beq.n	801a10a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801a106:	2300      	movs	r3, #0
 801a108:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801a10a:	693b      	ldr	r3, [r7, #16]
 801a10c:	681b      	ldr	r3, [r3, #0]
 801a10e:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 801a110:	693b      	ldr	r3, [r7, #16]
 801a112:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 801a114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a116:	2b00      	cmp	r3, #0
 801a118:	d193      	bne.n	801a042 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 801a11a:	e000      	b.n	801a11e <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 801a11c:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801a11e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a120:	2b00      	cmp	r3, #0
 801a122:	d135      	bne.n	801a190 <ip_reass_chain_frag_into_datagram_and_validate+0x1fc>
    if (iprh_prev != NULL) {
 801a124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a126:	2b00      	cmp	r3, #0
 801a128:	d020      	beq.n	801a16c <ip_reass_chain_frag_into_datagram_and_validate+0x1d8>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801a12a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a12c:	88db      	ldrh	r3, [r3, #6]
 801a12e:	b29a      	uxth	r2, r3
 801a130:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a132:	889b      	ldrh	r3, [r3, #4]
 801a134:	b29b      	uxth	r3, r3
 801a136:	429a      	cmp	r2, r3
 801a138:	d90a      	bls.n	801a150 <ip_reass_chain_frag_into_datagram_and_validate+0x1bc>
 801a13a:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 801a13e:	494e      	ldr	r1, [pc, #312]	; (801a278 <ip_reass_chain_frag_into_datagram_and_validate+0x2e4>)
 801a140:	484e      	ldr	r0, [pc, #312]	; (801a27c <ip_reass_chain_frag_into_datagram_and_validate+0x2e8>)
 801a142:	f000 ffe7 	bl	801b114 <trace_printf>
 801a146:	494e      	ldr	r1, [pc, #312]	; (801a280 <ip_reass_chain_frag_into_datagram_and_validate+0x2ec>)
 801a148:	484e      	ldr	r0, [pc, #312]	; (801a284 <ip_reass_chain_frag_into_datagram_and_validate+0x2f0>)
 801a14a:	f000 ffe3 	bl	801b114 <trace_printf>
 801a14e:	e7fe      	b.n	801a14e <ip_reass_chain_frag_into_datagram_and_validate+0x1ba>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 801a150:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a152:	68ba      	ldr	r2, [r7, #8]
 801a154:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801a156:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a158:	88db      	ldrh	r3, [r3, #6]
 801a15a:	b29a      	uxth	r2, r3
 801a15c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a15e:	889b      	ldrh	r3, [r3, #4]
 801a160:	b29b      	uxth	r3, r3
 801a162:	429a      	cmp	r2, r3
 801a164:	d014      	beq.n	801a190 <ip_reass_chain_frag_into_datagram_and_validate+0x1fc>
        valid = 0;
 801a166:	2300      	movs	r3, #0
 801a168:	623b      	str	r3, [r7, #32]
 801a16a:	e011      	b.n	801a190 <ip_reass_chain_frag_into_datagram_and_validate+0x1fc>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 801a16c:	68fb      	ldr	r3, [r7, #12]
 801a16e:	685b      	ldr	r3, [r3, #4]
 801a170:	2b00      	cmp	r3, #0
 801a172:	d00a      	beq.n	801a18a <ip_reass_chain_frag_into_datagram_and_validate+0x1f6>
 801a174:	f44f 72df 	mov.w	r2, #446	; 0x1be
 801a178:	4943      	ldr	r1, [pc, #268]	; (801a288 <ip_reass_chain_frag_into_datagram_and_validate+0x2f4>)
 801a17a:	4840      	ldr	r0, [pc, #256]	; (801a27c <ip_reass_chain_frag_into_datagram_and_validate+0x2e8>)
 801a17c:	f000 ffca 	bl	801b114 <trace_printf>
 801a180:	493f      	ldr	r1, [pc, #252]	; (801a280 <ip_reass_chain_frag_into_datagram_and_validate+0x2ec>)
 801a182:	4840      	ldr	r0, [pc, #256]	; (801a284 <ip_reass_chain_frag_into_datagram_and_validate+0x2f0>)
 801a184:	f000 ffc6 	bl	801b114 <trace_printf>
 801a188:	e7fe      	b.n	801a188 <ip_reass_chain_frag_into_datagram_and_validate+0x1f4>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 801a18a:	68fb      	ldr	r3, [r7, #12]
 801a18c:	68ba      	ldr	r2, [r7, #8]
 801a18e:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801a190:	687b      	ldr	r3, [r7, #4]
 801a192:	2b00      	cmp	r3, #0
 801a194:	d105      	bne.n	801a1a2 <ip_reass_chain_frag_into_datagram_and_validate+0x20e>
 801a196:	68fb      	ldr	r3, [r7, #12]
 801a198:	7f9b      	ldrb	r3, [r3, #30]
 801a19a:	f003 0301 	and.w	r3, r3, #1
 801a19e:	2b00      	cmp	r3, #0
 801a1a0:	d065      	beq.n	801a26e <ip_reass_chain_frag_into_datagram_and_validate+0x2da>
    /* and had no holes so far */
    if (valid) {
 801a1a2:	6a3b      	ldr	r3, [r7, #32]
 801a1a4:	2b00      	cmp	r3, #0
 801a1a6:	d05b      	beq.n	801a260 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 801a1a8:	68fb      	ldr	r3, [r7, #12]
 801a1aa:	685b      	ldr	r3, [r3, #4]
 801a1ac:	2b00      	cmp	r3, #0
 801a1ae:	d006      	beq.n	801a1be <ip_reass_chain_frag_into_datagram_and_validate+0x22a>
 801a1b0:	68fb      	ldr	r3, [r7, #12]
 801a1b2:	685b      	ldr	r3, [r3, #4]
 801a1b4:	685b      	ldr	r3, [r3, #4]
 801a1b6:	889b      	ldrh	r3, [r3, #4]
 801a1b8:	b29b      	uxth	r3, r3
 801a1ba:	2b00      	cmp	r3, #0
 801a1bc:	d002      	beq.n	801a1c4 <ip_reass_chain_frag_into_datagram_and_validate+0x230>
        valid = 0;
 801a1be:	2300      	movs	r3, #0
 801a1c0:	623b      	str	r3, [r7, #32]
 801a1c2:	e04d      	b.n	801a260 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 801a1c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a1c6:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 801a1c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a1ca:	681b      	ldr	r3, [r3, #0]
 801a1cc:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801a1ce:	e012      	b.n	801a1f6 <ip_reass_chain_frag_into_datagram_and_validate+0x262>
          iprh = (struct ip_reass_helper *)q->payload;
 801a1d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a1d2:	685b      	ldr	r3, [r3, #4]
 801a1d4:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 801a1d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a1d8:	88db      	ldrh	r3, [r3, #6]
 801a1da:	b29a      	uxth	r2, r3
 801a1dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a1de:	889b      	ldrh	r3, [r3, #4]
 801a1e0:	b29b      	uxth	r3, r3
 801a1e2:	429a      	cmp	r2, r3
 801a1e4:	d002      	beq.n	801a1ec <ip_reass_chain_frag_into_datagram_and_validate+0x258>
            valid = 0;
 801a1e6:	2300      	movs	r3, #0
 801a1e8:	623b      	str	r3, [r7, #32]
            break;
 801a1ea:	e007      	b.n	801a1fc <ip_reass_chain_frag_into_datagram_and_validate+0x268>
          }
          iprh_prev = iprh;
 801a1ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a1ee:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 801a1f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a1f2:	681b      	ldr	r3, [r3, #0]
 801a1f4:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801a1f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a1f8:	2b00      	cmp	r3, #0
 801a1fa:	d1e9      	bne.n	801a1d0 <ip_reass_chain_frag_into_datagram_and_validate+0x23c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 801a1fc:	6a3b      	ldr	r3, [r7, #32]
 801a1fe:	2b00      	cmp	r3, #0
 801a200:	d02e      	beq.n	801a260 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801a202:	68fb      	ldr	r3, [r7, #12]
 801a204:	685b      	ldr	r3, [r3, #4]
 801a206:	2b00      	cmp	r3, #0
 801a208:	d10a      	bne.n	801a220 <ip_reass_chain_frag_into_datagram_and_validate+0x28c>
 801a20a:	f240 12df 	movw	r2, #479	; 0x1df
 801a20e:	491f      	ldr	r1, [pc, #124]	; (801a28c <ip_reass_chain_frag_into_datagram_and_validate+0x2f8>)
 801a210:	481a      	ldr	r0, [pc, #104]	; (801a27c <ip_reass_chain_frag_into_datagram_and_validate+0x2e8>)
 801a212:	f000 ff7f 	bl	801b114 <trace_printf>
 801a216:	491a      	ldr	r1, [pc, #104]	; (801a280 <ip_reass_chain_frag_into_datagram_and_validate+0x2ec>)
 801a218:	481a      	ldr	r0, [pc, #104]	; (801a284 <ip_reass_chain_frag_into_datagram_and_validate+0x2f0>)
 801a21a:	f000 ff7b 	bl	801b114 <trace_printf>
 801a21e:	e7fe      	b.n	801a21e <ip_reass_chain_frag_into_datagram_and_validate+0x28a>
          LWIP_ASSERT("sanity check",
 801a220:	68fb      	ldr	r3, [r7, #12]
 801a222:	685b      	ldr	r3, [r3, #4]
 801a224:	685b      	ldr	r3, [r3, #4]
 801a226:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a228:	429a      	cmp	r2, r3
 801a22a:	d10a      	bne.n	801a242 <ip_reass_chain_frag_into_datagram_and_validate+0x2ae>
 801a22c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 801a230:	4916      	ldr	r1, [pc, #88]	; (801a28c <ip_reass_chain_frag_into_datagram_and_validate+0x2f8>)
 801a232:	4812      	ldr	r0, [pc, #72]	; (801a27c <ip_reass_chain_frag_into_datagram_and_validate+0x2e8>)
 801a234:	f000 ff6e 	bl	801b114 <trace_printf>
 801a238:	4911      	ldr	r1, [pc, #68]	; (801a280 <ip_reass_chain_frag_into_datagram_and_validate+0x2ec>)
 801a23a:	4812      	ldr	r0, [pc, #72]	; (801a284 <ip_reass_chain_frag_into_datagram_and_validate+0x2f0>)
 801a23c:	f000 ff6a 	bl	801b114 <trace_printf>
 801a240:	e7fe      	b.n	801a240 <ip_reass_chain_frag_into_datagram_and_validate+0x2ac>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801a242:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a244:	681b      	ldr	r3, [r3, #0]
 801a246:	2b00      	cmp	r3, #0
 801a248:	d00a      	beq.n	801a260 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>
 801a24a:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 801a24e:	4910      	ldr	r1, [pc, #64]	; (801a290 <ip_reass_chain_frag_into_datagram_and_validate+0x2fc>)
 801a250:	480a      	ldr	r0, [pc, #40]	; (801a27c <ip_reass_chain_frag_into_datagram_and_validate+0x2e8>)
 801a252:	f000 ff5f 	bl	801b114 <trace_printf>
 801a256:	490a      	ldr	r1, [pc, #40]	; (801a280 <ip_reass_chain_frag_into_datagram_and_validate+0x2ec>)
 801a258:	480a      	ldr	r0, [pc, #40]	; (801a284 <ip_reass_chain_frag_into_datagram_and_validate+0x2f0>)
 801a25a:	f000 ff5b 	bl	801b114 <trace_printf>
 801a25e:	e7fe      	b.n	801a25e <ip_reass_chain_frag_into_datagram_and_validate+0x2ca>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 801a260:	6a3b      	ldr	r3, [r7, #32]
 801a262:	2b00      	cmp	r3, #0
 801a264:	bf14      	ite	ne
 801a266:	2301      	movne	r3, #1
 801a268:	2300      	moveq	r3, #0
 801a26a:	b2db      	uxtb	r3, r3
 801a26c:	e000      	b.n	801a270 <ip_reass_chain_frag_into_datagram_and_validate+0x2dc>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801a26e:	2300      	movs	r3, #0
}
 801a270:	4618      	mov	r0, r3
 801a272:	3730      	adds	r7, #48	; 0x30
 801a274:	46bd      	mov	sp, r7
 801a276:	bd80      	pop	{r7, pc}
 801a278:	080203a0 	.word	0x080203a0
 801a27c:	080202cc 	.word	0x080202cc
 801a280:	080202ec 	.word	0x080202ec
 801a284:	08020328 	.word	0x08020328
 801a288:	080203c0 	.word	0x080203c0
 801a28c:	080203f8 	.word	0x080203f8
 801a290:	08020408 	.word	0x08020408

0801a294 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 801a294:	b580      	push	{r7, lr}
 801a296:	b08e      	sub	sp, #56	; 0x38
 801a298:	af00      	add	r7, sp, #0
 801a29a:	6078      	str	r0, [r7, #4]
  u16_t offset, len, clen;
  u8_t hlen;
  int valid;
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
 801a29c:	4b9f      	ldr	r3, [pc, #636]	; (801a51c <ip4_reass+0x288>)
 801a29e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801a2a0:	3301      	adds	r3, #1
 801a2a2:	b29a      	uxth	r2, r3
 801a2a4:	4b9d      	ldr	r3, [pc, #628]	; (801a51c <ip4_reass+0x288>)
 801a2a6:	865a      	strh	r2, [r3, #50]	; 0x32
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 801a2a8:	687b      	ldr	r3, [r7, #4]
 801a2aa:	685b      	ldr	r3, [r3, #4]
 801a2ac:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801a2ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a2b0:	781b      	ldrb	r3, [r3, #0]
 801a2b2:	f003 030f 	and.w	r3, r3, #15
 801a2b6:	b2db      	uxtb	r3, r3
 801a2b8:	009b      	lsls	r3, r3, #2
 801a2ba:	b2db      	uxtb	r3, r3
 801a2bc:	2b14      	cmp	r3, #20
 801a2be:	d008      	beq.n	801a2d2 <ip4_reass+0x3e>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
 801a2c0:	4b96      	ldr	r3, [pc, #600]	; (801a51c <ip4_reass+0x288>)
 801a2c2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 801a2c6:	3301      	adds	r3, #1
 801a2c8:	b29a      	uxth	r2, r3
 801a2ca:	4b94      	ldr	r3, [pc, #592]	; (801a51c <ip4_reass+0x288>)
 801a2cc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    goto nullreturn;
 801a2d0:	e188      	b.n	801a5e4 <ip4_reass+0x350>
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 801a2d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a2d4:	88db      	ldrh	r3, [r3, #6]
 801a2d6:	b29b      	uxth	r3, r3
 801a2d8:	4618      	mov	r0, r3
 801a2da:	f7f2 fd33 	bl	800cd44 <lwip_htons>
 801a2de:	4603      	mov	r3, r0
 801a2e0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801a2e4:	b29b      	uxth	r3, r3
 801a2e6:	00db      	lsls	r3, r3, #3
 801a2e8:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801a2ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a2ec:	885b      	ldrh	r3, [r3, #2]
 801a2ee:	b29b      	uxth	r3, r3
 801a2f0:	4618      	mov	r0, r3
 801a2f2:	f7f2 fd27 	bl	800cd44 <lwip_htons>
 801a2f6:	4603      	mov	r3, r0
 801a2f8:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801a2fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a2fc:	781b      	ldrb	r3, [r3, #0]
 801a2fe:	f003 030f 	and.w	r3, r3, #15
 801a302:	b2db      	uxtb	r3, r3
 801a304:	009b      	lsls	r3, r3, #2
 801a306:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 801a30a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801a30e:	b29b      	uxth	r3, r3
 801a310:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801a312:	429a      	cmp	r2, r3
 801a314:	f0c0 8163 	bcc.w	801a5de <ip4_reass+0x34a>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 801a318:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801a31c:	b29b      	uxth	r3, r3
 801a31e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801a320:	1ad3      	subs	r3, r2, r3
 801a322:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 801a324:	6878      	ldr	r0, [r7, #4]
 801a326:	f7f4 fac3 	bl	800e8b0 <pbuf_clen>
 801a32a:	4603      	mov	r3, r0
 801a32c:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801a32e:	4b7c      	ldr	r3, [pc, #496]	; (801a520 <ip4_reass+0x28c>)
 801a330:	881b      	ldrh	r3, [r3, #0]
 801a332:	461a      	mov	r2, r3
 801a334:	8c3b      	ldrh	r3, [r7, #32]
 801a336:	4413      	add	r3, r2
 801a338:	2b0a      	cmp	r3, #10
 801a33a:	dd15      	ble.n	801a368 <ip4_reass+0xd4>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801a33c:	8c3b      	ldrh	r3, [r7, #32]
 801a33e:	4619      	mov	r1, r3
 801a340:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801a342:	f7ff fd4f 	bl	8019de4 <ip_reass_remove_oldest_datagram>
 801a346:	4603      	mov	r3, r0
 801a348:	2b00      	cmp	r3, #0
 801a34a:	d006      	beq.n	801a35a <ip4_reass+0xc6>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801a34c:	4b74      	ldr	r3, [pc, #464]	; (801a520 <ip4_reass+0x28c>)
 801a34e:	881b      	ldrh	r3, [r3, #0]
 801a350:	461a      	mov	r2, r3
 801a352:	8c3b      	ldrh	r3, [r7, #32]
 801a354:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801a356:	2b0a      	cmp	r3, #10
 801a358:	dd06      	ble.n	801a368 <ip4_reass+0xd4>
#endif /* IP_REASS_FREE_OLDEST */
    {
      /* No datagram could be freed and still too many pbufs enqueued */
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: Overflow condition: pbufct=%d, clen=%d, MAX=%d\n",
                                   ip_reass_pbufcount, clen, IP_REASS_MAX_PBUFS));
      IPFRAG_STATS_INC(ip_frag.memerr);
 801a35a:	4b70      	ldr	r3, [pc, #448]	; (801a51c <ip4_reass+0x288>)
 801a35c:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801a35e:	3301      	adds	r3, #1
 801a360:	b29a      	uxth	r2, r3
 801a362:	4b6e      	ldr	r3, [pc, #440]	; (801a51c <ip4_reass+0x288>)
 801a364:	879a      	strh	r2, [r3, #60]	; 0x3c
      /* @todo: send ICMP time exceeded here? */
      /* drop this pbuf */
      goto nullreturn;
 801a366:	e13d      	b.n	801a5e4 <ip4_reass+0x350>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801a368:	4b6e      	ldr	r3, [pc, #440]	; (801a524 <ip4_reass+0x290>)
 801a36a:	681b      	ldr	r3, [r3, #0]
 801a36c:	633b      	str	r3, [r7, #48]	; 0x30
 801a36e:	e01e      	b.n	801a3ae <ip4_reass+0x11a>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801a370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a372:	695a      	ldr	r2, [r3, #20]
 801a374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a376:	68db      	ldr	r3, [r3, #12]
 801a378:	429a      	cmp	r2, r3
 801a37a:	d115      	bne.n	801a3a8 <ip4_reass+0x114>
 801a37c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a37e:	699a      	ldr	r2, [r3, #24]
 801a380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a382:	691b      	ldr	r3, [r3, #16]
 801a384:	429a      	cmp	r2, r3
 801a386:	d10f      	bne.n	801a3a8 <ip4_reass+0x114>
 801a388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a38a:	899a      	ldrh	r2, [r3, #12]
 801a38c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a38e:	889b      	ldrh	r3, [r3, #4]
 801a390:	b29b      	uxth	r3, r3
 801a392:	429a      	cmp	r2, r3
 801a394:	d108      	bne.n	801a3a8 <ip4_reass+0x114>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
 801a396:	4b61      	ldr	r3, [pc, #388]	; (801a51c <ip4_reass+0x288>)
 801a398:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801a39c:	3301      	adds	r3, #1
 801a39e:	b29a      	uxth	r2, r3
 801a3a0:	4b5e      	ldr	r3, [pc, #376]	; (801a51c <ip4_reass+0x288>)
 801a3a2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      break;
 801a3a6:	e005      	b.n	801a3b4 <ip4_reass+0x120>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801a3a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a3aa:	681b      	ldr	r3, [r3, #0]
 801a3ac:	633b      	str	r3, [r7, #48]	; 0x30
 801a3ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a3b0:	2b00      	cmp	r3, #0
 801a3b2:	d1dd      	bne.n	801a370 <ip4_reass+0xdc>
    }
  }

  if (ipr == NULL) {
 801a3b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a3b6:	2b00      	cmp	r3, #0
 801a3b8:	d109      	bne.n	801a3ce <ip4_reass+0x13a>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801a3ba:	8c3b      	ldrh	r3, [r7, #32]
 801a3bc:	4619      	mov	r1, r3
 801a3be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801a3c0:	f7ff fd72 	bl	8019ea8 <ip_reass_enqueue_new_datagram>
 801a3c4:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801a3c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a3c8:	2b00      	cmp	r3, #0
 801a3ca:	d11c      	bne.n	801a406 <ip4_reass+0x172>
      goto nullreturn;
 801a3cc:	e10a      	b.n	801a5e4 <ip4_reass+0x350>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801a3ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a3d0:	88db      	ldrh	r3, [r3, #6]
 801a3d2:	b29b      	uxth	r3, r3
 801a3d4:	4618      	mov	r0, r3
 801a3d6:	f7f2 fcb5 	bl	800cd44 <lwip_htons>
 801a3da:	4603      	mov	r3, r0
 801a3dc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801a3e0:	2b00      	cmp	r3, #0
 801a3e2:	d110      	bne.n	801a406 <ip4_reass+0x172>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 801a3e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a3e6:	89db      	ldrh	r3, [r3, #14]
 801a3e8:	4618      	mov	r0, r3
 801a3ea:	f7f2 fcab 	bl	800cd44 <lwip_htons>
 801a3ee:	4603      	mov	r3, r0
 801a3f0:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801a3f4:	2b00      	cmp	r3, #0
 801a3f6:	d006      	beq.n	801a406 <ip4_reass+0x172>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 801a3f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a3fa:	3308      	adds	r3, #8
 801a3fc:	2214      	movs	r2, #20
 801a3fe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801a400:	4618      	mov	r0, r3
 801a402:	f000 fedb 	bl	801b1bc <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801a406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a408:	88db      	ldrh	r3, [r3, #6]
 801a40a:	b29b      	uxth	r3, r3
 801a40c:	f003 0320 	and.w	r3, r3, #32
 801a410:	2b00      	cmp	r3, #0
 801a412:	bf0c      	ite	eq
 801a414:	2301      	moveq	r3, #1
 801a416:	2300      	movne	r3, #0
 801a418:	b2db      	uxtb	r3, r3
 801a41a:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 801a41c:	69fb      	ldr	r3, [r7, #28]
 801a41e:	2b00      	cmp	r3, #0
 801a420:	d00e      	beq.n	801a440 <ip4_reass+0x1ac>
    u16_t datagram_len = (u16_t)(offset + len);
 801a422:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801a424:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801a426:	4413      	add	r3, r2
 801a428:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801a42a:	8b7a      	ldrh	r2, [r7, #26]
 801a42c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801a42e:	429a      	cmp	r2, r3
 801a430:	f0c0 80ab 	bcc.w	801a58a <ip4_reass+0x2f6>
 801a434:	8b7b      	ldrh	r3, [r7, #26]
 801a436:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 801a43a:	4293      	cmp	r3, r2
 801a43c:	f200 80a5 	bhi.w	801a58a <ip4_reass+0x2f6>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 801a440:	69fa      	ldr	r2, [r7, #28]
 801a442:	6879      	ldr	r1, [r7, #4]
 801a444:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801a446:	f7ff fda5 	bl	8019f94 <ip_reass_chain_frag_into_datagram_and_validate>
 801a44a:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 801a44c:	697b      	ldr	r3, [r7, #20]
 801a44e:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a452:	f000 809c 	beq.w	801a58e <ip4_reass+0x2fa>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801a456:	4b32      	ldr	r3, [pc, #200]	; (801a520 <ip4_reass+0x28c>)
 801a458:	881a      	ldrh	r2, [r3, #0]
 801a45a:	8c3b      	ldrh	r3, [r7, #32]
 801a45c:	4413      	add	r3, r2
 801a45e:	b29a      	uxth	r2, r3
 801a460:	4b2f      	ldr	r3, [pc, #188]	; (801a520 <ip4_reass+0x28c>)
 801a462:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 801a464:	69fb      	ldr	r3, [r7, #28]
 801a466:	2b00      	cmp	r3, #0
 801a468:	d00d      	beq.n	801a486 <ip4_reass+0x1f2>
    u16_t datagram_len = (u16_t)(offset + len);
 801a46a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801a46c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801a46e:	4413      	add	r3, r2
 801a470:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801a472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a474:	8a7a      	ldrh	r2, [r7, #18]
 801a476:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801a478:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a47a:	7f9b      	ldrb	r3, [r3, #30]
 801a47c:	f043 0301 	orr.w	r3, r3, #1
 801a480:	b2da      	uxtb	r2, r3
 801a482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a484:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801a486:	697b      	ldr	r3, [r7, #20]
 801a488:	2b01      	cmp	r3, #1
 801a48a:	d17c      	bne.n	801a586 <ip4_reass+0x2f2>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 801a48c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a48e:	8b9b      	ldrh	r3, [r3, #28]
 801a490:	3314      	adds	r3, #20
 801a492:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 801a494:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a496:	685b      	ldr	r3, [r3, #4]
 801a498:	685b      	ldr	r3, [r3, #4]
 801a49a:	681b      	ldr	r3, [r3, #0]
 801a49c:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801a49e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a4a0:	685b      	ldr	r3, [r3, #4]
 801a4a2:	685b      	ldr	r3, [r3, #4]
 801a4a4:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801a4a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a4a8:	3308      	adds	r3, #8
 801a4aa:	2214      	movs	r2, #20
 801a4ac:	4619      	mov	r1, r3
 801a4ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801a4b0:	f000 fe84 	bl	801b1bc <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 801a4b4:	8a3b      	ldrh	r3, [r7, #16]
 801a4b6:	4618      	mov	r0, r3
 801a4b8:	f7f2 fc44 	bl	800cd44 <lwip_htons>
 801a4bc:	4603      	mov	r3, r0
 801a4be:	461a      	mov	r2, r3
 801a4c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a4c2:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 801a4c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a4c6:	2200      	movs	r2, #0
 801a4c8:	719a      	strb	r2, [r3, #6]
 801a4ca:	2200      	movs	r2, #0
 801a4cc:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801a4ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a4d0:	2200      	movs	r2, #0
 801a4d2:	729a      	strb	r2, [r3, #10]
 801a4d4:	2200      	movs	r2, #0
 801a4d6:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 801a4d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a4da:	685b      	ldr	r3, [r3, #4]
 801a4dc:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801a4de:	e00d      	b.n	801a4fc <ip4_reass+0x268>
      iprh = (struct ip_reass_helper *)r->payload;
 801a4e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a4e2:	685b      	ldr	r3, [r3, #4]
 801a4e4:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801a4e6:	2114      	movs	r1, #20
 801a4e8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801a4ea:	f7f4 f8b3 	bl	800e654 <pbuf_remove_header>
      pbuf_cat(p, r);
 801a4ee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801a4f0:	6878      	ldr	r0, [r7, #4]
 801a4f2:	f7f4 fa23 	bl	800e93c <pbuf_cat>
      r = iprh->next_pbuf;
 801a4f6:	68fb      	ldr	r3, [r7, #12]
 801a4f8:	681b      	ldr	r3, [r3, #0]
 801a4fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (r != NULL) {
 801a4fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a4fe:	2b00      	cmp	r3, #0
 801a500:	d1ee      	bne.n	801a4e0 <ip4_reass+0x24c>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801a502:	4b08      	ldr	r3, [pc, #32]	; (801a524 <ip4_reass+0x290>)
 801a504:	681b      	ldr	r3, [r3, #0]
 801a506:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801a508:	429a      	cmp	r2, r3
 801a50a:	d102      	bne.n	801a512 <ip4_reass+0x27e>
      ipr_prev = NULL;
 801a50c:	2300      	movs	r3, #0
 801a50e:	637b      	str	r3, [r7, #52]	; 0x34
 801a510:	e017      	b.n	801a542 <ip4_reass+0x2ae>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801a512:	4b04      	ldr	r3, [pc, #16]	; (801a524 <ip4_reass+0x290>)
 801a514:	681b      	ldr	r3, [r3, #0]
 801a516:	637b      	str	r3, [r7, #52]	; 0x34
 801a518:	e00e      	b.n	801a538 <ip4_reass+0x2a4>
 801a51a:	bf00      	nop
 801a51c:	20010b7c 	.word	0x20010b7c
 801a520:	2000a0d8 	.word	0x2000a0d8
 801a524:	2000a0d4 	.word	0x2000a0d4
        if (ipr_prev->next == ipr) {
 801a528:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a52a:	681b      	ldr	r3, [r3, #0]
 801a52c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801a52e:	429a      	cmp	r2, r3
 801a530:	d006      	beq.n	801a540 <ip4_reass+0x2ac>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801a532:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a534:	681b      	ldr	r3, [r3, #0]
 801a536:	637b      	str	r3, [r7, #52]	; 0x34
 801a538:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a53a:	2b00      	cmp	r3, #0
 801a53c:	d1f4      	bne.n	801a528 <ip4_reass+0x294>
 801a53e:	e000      	b.n	801a542 <ip4_reass+0x2ae>
          break;
 801a540:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 801a542:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801a544:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801a546:	f7ff fcf1 	bl	8019f2c <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 801a54a:	6878      	ldr	r0, [r7, #4]
 801a54c:	f7f4 f9b0 	bl	800e8b0 <pbuf_clen>
 801a550:	4603      	mov	r3, r0
 801a552:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801a554:	4b2a      	ldr	r3, [pc, #168]	; (801a600 <ip4_reass+0x36c>)
 801a556:	881b      	ldrh	r3, [r3, #0]
 801a558:	8c3a      	ldrh	r2, [r7, #32]
 801a55a:	429a      	cmp	r2, r3
 801a55c:	d90a      	bls.n	801a574 <ip4_reass+0x2e0>
 801a55e:	f240 229b 	movw	r2, #667	; 0x29b
 801a562:	4928      	ldr	r1, [pc, #160]	; (801a604 <ip4_reass+0x370>)
 801a564:	4828      	ldr	r0, [pc, #160]	; (801a608 <ip4_reass+0x374>)
 801a566:	f000 fdd5 	bl	801b114 <trace_printf>
 801a56a:	4928      	ldr	r1, [pc, #160]	; (801a60c <ip4_reass+0x378>)
 801a56c:	4828      	ldr	r0, [pc, #160]	; (801a610 <ip4_reass+0x37c>)
 801a56e:	f000 fdd1 	bl	801b114 <trace_printf>
 801a572:	e7fe      	b.n	801a572 <ip4_reass+0x2de>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801a574:	4b22      	ldr	r3, [pc, #136]	; (801a600 <ip4_reass+0x36c>)
 801a576:	881a      	ldrh	r2, [r3, #0]
 801a578:	8c3b      	ldrh	r3, [r7, #32]
 801a57a:	1ad3      	subs	r3, r2, r3
 801a57c:	b29a      	uxth	r2, r3
 801a57e:	4b20      	ldr	r3, [pc, #128]	; (801a600 <ip4_reass+0x36c>)
 801a580:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 801a582:	687b      	ldr	r3, [r7, #4]
 801a584:	e038      	b.n	801a5f8 <ip4_reass+0x364>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 801a586:	2300      	movs	r3, #0
 801a588:	e036      	b.n	801a5f8 <ip4_reass+0x364>
      goto nullreturn_ipr;
 801a58a:	bf00      	nop
 801a58c:	e000      	b.n	801a590 <ip4_reass+0x2fc>
    goto nullreturn_ipr;
 801a58e:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801a590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a592:	2b00      	cmp	r3, #0
 801a594:	d10a      	bne.n	801a5ac <ip4_reass+0x318>
 801a596:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 801a59a:	491e      	ldr	r1, [pc, #120]	; (801a614 <ip4_reass+0x380>)
 801a59c:	481a      	ldr	r0, [pc, #104]	; (801a608 <ip4_reass+0x374>)
 801a59e:	f000 fdb9 	bl	801b114 <trace_printf>
 801a5a2:	491a      	ldr	r1, [pc, #104]	; (801a60c <ip4_reass+0x378>)
 801a5a4:	481a      	ldr	r0, [pc, #104]	; (801a610 <ip4_reass+0x37c>)
 801a5a6:	f000 fdb5 	bl	801b114 <trace_printf>
 801a5aa:	e7fe      	b.n	801a5aa <ip4_reass+0x316>
  if (ipr->p == NULL) {
 801a5ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a5ae:	685b      	ldr	r3, [r3, #4]
 801a5b0:	2b00      	cmp	r3, #0
 801a5b2:	d116      	bne.n	801a5e2 <ip4_reass+0x34e>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801a5b4:	4b18      	ldr	r3, [pc, #96]	; (801a618 <ip4_reass+0x384>)
 801a5b6:	681b      	ldr	r3, [r3, #0]
 801a5b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801a5ba:	429a      	cmp	r2, r3
 801a5bc:	d00a      	beq.n	801a5d4 <ip4_reass+0x340>
 801a5be:	f240 22ab 	movw	r2, #683	; 0x2ab
 801a5c2:	4916      	ldr	r1, [pc, #88]	; (801a61c <ip4_reass+0x388>)
 801a5c4:	4810      	ldr	r0, [pc, #64]	; (801a608 <ip4_reass+0x374>)
 801a5c6:	f000 fda5 	bl	801b114 <trace_printf>
 801a5ca:	4910      	ldr	r1, [pc, #64]	; (801a60c <ip4_reass+0x378>)
 801a5cc:	4810      	ldr	r0, [pc, #64]	; (801a610 <ip4_reass+0x37c>)
 801a5ce:	f000 fda1 	bl	801b114 <trace_printf>
 801a5d2:	e7fe      	b.n	801a5d2 <ip4_reass+0x33e>
    ip_reass_dequeue_datagram(ipr, NULL);
 801a5d4:	2100      	movs	r1, #0
 801a5d6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801a5d8:	f7ff fca8 	bl	8019f2c <ip_reass_dequeue_datagram>
 801a5dc:	e002      	b.n	801a5e4 <ip4_reass+0x350>
    goto nullreturn;
 801a5de:	bf00      	nop
 801a5e0:	e000      	b.n	801a5e4 <ip4_reass+0x350>
  }

nullreturn:
 801a5e2:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
 801a5e4:	4b0e      	ldr	r3, [pc, #56]	; (801a620 <ip4_reass+0x38c>)
 801a5e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801a5e8:	3301      	adds	r3, #1
 801a5ea:	b29a      	uxth	r2, r3
 801a5ec:	4b0c      	ldr	r3, [pc, #48]	; (801a620 <ip4_reass+0x38c>)
 801a5ee:	86da      	strh	r2, [r3, #54]	; 0x36
  pbuf_free(p);
 801a5f0:	6878      	ldr	r0, [r7, #4]
 801a5f2:	f7f4 f8bd 	bl	800e770 <pbuf_free>
  return NULL;
 801a5f6:	2300      	movs	r3, #0
}
 801a5f8:	4618      	mov	r0, r3
 801a5fa:	3738      	adds	r7, #56	; 0x38
 801a5fc:	46bd      	mov	sp, r7
 801a5fe:	bd80      	pop	{r7, pc}
 801a600:	2000a0d8 	.word	0x2000a0d8
 801a604:	0802042c 	.word	0x0802042c
 801a608:	080202cc 	.word	0x080202cc
 801a60c:	080202ec 	.word	0x080202ec
 801a610:	08020328 	.word	0x08020328
 801a614:	08020448 	.word	0x08020448
 801a618:	2000a0d4 	.word	0x2000a0d4
 801a61c:	08020454 	.word	0x08020454
 801a620:	20010b7c 	.word	0x20010b7c

0801a624 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 801a624:	b580      	push	{r7, lr}
 801a626:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 801a628:	2005      	movs	r0, #5
 801a62a:	f7f3 f925 	bl	800d878 <memp_malloc>
 801a62e:	4603      	mov	r3, r0
}
 801a630:	4618      	mov	r0, r3
 801a632:	bd80      	pop	{r7, pc}

0801a634 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 801a634:	b580      	push	{r7, lr}
 801a636:	b082      	sub	sp, #8
 801a638:	af00      	add	r7, sp, #0
 801a63a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 801a63c:	687b      	ldr	r3, [r7, #4]
 801a63e:	2b00      	cmp	r3, #0
 801a640:	d10a      	bne.n	801a658 <ip_frag_free_pbuf_custom_ref+0x24>
 801a642:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 801a646:	4908      	ldr	r1, [pc, #32]	; (801a668 <ip_frag_free_pbuf_custom_ref+0x34>)
 801a648:	4808      	ldr	r0, [pc, #32]	; (801a66c <ip_frag_free_pbuf_custom_ref+0x38>)
 801a64a:	f000 fd63 	bl	801b114 <trace_printf>
 801a64e:	4908      	ldr	r1, [pc, #32]	; (801a670 <ip_frag_free_pbuf_custom_ref+0x3c>)
 801a650:	4808      	ldr	r0, [pc, #32]	; (801a674 <ip_frag_free_pbuf_custom_ref+0x40>)
 801a652:	f000 fd5f 	bl	801b114 <trace_printf>
 801a656:	e7fe      	b.n	801a656 <ip_frag_free_pbuf_custom_ref+0x22>
  memp_free(MEMP_FRAG_PBUF, p);
 801a658:	6879      	ldr	r1, [r7, #4]
 801a65a:	2005      	movs	r0, #5
 801a65c:	f7f3 f96e 	bl	800d93c <memp_free>
}
 801a660:	bf00      	nop
 801a662:	3708      	adds	r7, #8
 801a664:	46bd      	mov	sp, r7
 801a666:	bd80      	pop	{r7, pc}
 801a668:	08020474 	.word	0x08020474
 801a66c:	080202cc 	.word	0x080202cc
 801a670:	080202ec 	.word	0x080202ec
 801a674:	08020328 	.word	0x08020328

0801a678 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 801a678:	b580      	push	{r7, lr}
 801a67a:	b084      	sub	sp, #16
 801a67c:	af00      	add	r7, sp, #0
 801a67e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 801a680:	687b      	ldr	r3, [r7, #4]
 801a682:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801a684:	68fb      	ldr	r3, [r7, #12]
 801a686:	2b00      	cmp	r3, #0
 801a688:	d10a      	bne.n	801a6a0 <ipfrag_free_pbuf_custom+0x28>
 801a68a:	f240 22ce 	movw	r2, #718	; 0x2ce
 801a68e:	4914      	ldr	r1, [pc, #80]	; (801a6e0 <ipfrag_free_pbuf_custom+0x68>)
 801a690:	4814      	ldr	r0, [pc, #80]	; (801a6e4 <ipfrag_free_pbuf_custom+0x6c>)
 801a692:	f000 fd3f 	bl	801b114 <trace_printf>
 801a696:	4914      	ldr	r1, [pc, #80]	; (801a6e8 <ipfrag_free_pbuf_custom+0x70>)
 801a698:	4814      	ldr	r0, [pc, #80]	; (801a6ec <ipfrag_free_pbuf_custom+0x74>)
 801a69a:	f000 fd3b 	bl	801b114 <trace_printf>
 801a69e:	e7fe      	b.n	801a69e <ipfrag_free_pbuf_custom+0x26>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 801a6a0:	68fa      	ldr	r2, [r7, #12]
 801a6a2:	687b      	ldr	r3, [r7, #4]
 801a6a4:	429a      	cmp	r2, r3
 801a6a6:	d00a      	beq.n	801a6be <ipfrag_free_pbuf_custom+0x46>
 801a6a8:	f240 22cf 	movw	r2, #719	; 0x2cf
 801a6ac:	4910      	ldr	r1, [pc, #64]	; (801a6f0 <ipfrag_free_pbuf_custom+0x78>)
 801a6ae:	480d      	ldr	r0, [pc, #52]	; (801a6e4 <ipfrag_free_pbuf_custom+0x6c>)
 801a6b0:	f000 fd30 	bl	801b114 <trace_printf>
 801a6b4:	490c      	ldr	r1, [pc, #48]	; (801a6e8 <ipfrag_free_pbuf_custom+0x70>)
 801a6b6:	480d      	ldr	r0, [pc, #52]	; (801a6ec <ipfrag_free_pbuf_custom+0x74>)
 801a6b8:	f000 fd2c 	bl	801b114 <trace_printf>
 801a6bc:	e7fe      	b.n	801a6bc <ipfrag_free_pbuf_custom+0x44>
  if (pcr->original != NULL) {
 801a6be:	68fb      	ldr	r3, [r7, #12]
 801a6c0:	695b      	ldr	r3, [r3, #20]
 801a6c2:	2b00      	cmp	r3, #0
 801a6c4:	d004      	beq.n	801a6d0 <ipfrag_free_pbuf_custom+0x58>
    pbuf_free(pcr->original);
 801a6c6:	68fb      	ldr	r3, [r7, #12]
 801a6c8:	695b      	ldr	r3, [r3, #20]
 801a6ca:	4618      	mov	r0, r3
 801a6cc:	f7f4 f850 	bl	800e770 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 801a6d0:	68f8      	ldr	r0, [r7, #12]
 801a6d2:	f7ff ffaf 	bl	801a634 <ip_frag_free_pbuf_custom_ref>
}
 801a6d6:	bf00      	nop
 801a6d8:	3710      	adds	r7, #16
 801a6da:	46bd      	mov	sp, r7
 801a6dc:	bd80      	pop	{r7, pc}
 801a6de:	bf00      	nop
 801a6e0:	08020480 	.word	0x08020480
 801a6e4:	080202cc 	.word	0x080202cc
 801a6e8:	080202ec 	.word	0x080202ec
 801a6ec:	08020328 	.word	0x08020328
 801a6f0:	0802048c 	.word	0x0802048c

0801a6f4 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 801a6f4:	b580      	push	{r7, lr}
 801a6f6:	b094      	sub	sp, #80	; 0x50
 801a6f8:	af02      	add	r7, sp, #8
 801a6fa:	60f8      	str	r0, [r7, #12]
 801a6fc:	60b9      	str	r1, [r7, #8]
 801a6fe:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 801a700:	2300      	movs	r3, #0
 801a702:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801a706:	68bb      	ldr	r3, [r7, #8]
 801a708:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801a70a:	3b14      	subs	r3, #20
 801a70c:	2b00      	cmp	r3, #0
 801a70e:	da00      	bge.n	801a712 <ip4_frag+0x1e>
 801a710:	3307      	adds	r3, #7
 801a712:	10db      	asrs	r3, r3, #3
 801a714:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801a716:	2314      	movs	r3, #20
 801a718:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801a71a:	68fb      	ldr	r3, [r7, #12]
 801a71c:	685b      	ldr	r3, [r3, #4]
 801a71e:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 801a720:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a722:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 801a724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a726:	781b      	ldrb	r3, [r3, #0]
 801a728:	f003 030f 	and.w	r3, r3, #15
 801a72c:	b2db      	uxtb	r3, r3
 801a72e:	009b      	lsls	r3, r3, #2
 801a730:	b2db      	uxtb	r3, r3
 801a732:	2b14      	cmp	r3, #20
 801a734:	d002      	beq.n	801a73c <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801a736:	f06f 0305 	mvn.w	r3, #5
 801a73a:	e11f      	b.n	801a97c <ip4_frag+0x288>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 801a73c:	68fb      	ldr	r3, [r7, #12]
 801a73e:	895b      	ldrh	r3, [r3, #10]
 801a740:	2b13      	cmp	r3, #19
 801a742:	d80a      	bhi.n	801a75a <ip4_frag+0x66>
 801a744:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 801a748:	498e      	ldr	r1, [pc, #568]	; (801a984 <ip4_frag+0x290>)
 801a74a:	488f      	ldr	r0, [pc, #572]	; (801a988 <ip4_frag+0x294>)
 801a74c:	f000 fce2 	bl	801b114 <trace_printf>
 801a750:	498e      	ldr	r1, [pc, #568]	; (801a98c <ip4_frag+0x298>)
 801a752:	488f      	ldr	r0, [pc, #572]	; (801a990 <ip4_frag+0x29c>)
 801a754:	f000 fcde 	bl	801b114 <trace_printf>
 801a758:	e7fe      	b.n	801a758 <ip4_frag+0x64>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 801a75a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a75c:	88db      	ldrh	r3, [r3, #6]
 801a75e:	b29b      	uxth	r3, r3
 801a760:	4618      	mov	r0, r3
 801a762:	f7f2 faef 	bl	800cd44 <lwip_htons>
 801a766:	4603      	mov	r3, r0
 801a768:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 801a76a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801a76c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801a770:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801a774:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801a776:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801a77a:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801a77c:	68fb      	ldr	r3, [r7, #12]
 801a77e:	891b      	ldrh	r3, [r3, #8]
 801a780:	3b14      	subs	r3, #20
 801a782:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 801a786:	e0ef      	b.n	801a968 <ip4_frag+0x274>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801a788:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801a78a:	00db      	lsls	r3, r3, #3
 801a78c:	b29b      	uxth	r3, r3
 801a78e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801a792:	4293      	cmp	r3, r2
 801a794:	bf28      	it	cs
 801a796:	4613      	movcs	r3, r2
 801a798:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801a79a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801a79e:	2114      	movs	r1, #20
 801a7a0:	200e      	movs	r0, #14
 801a7a2:	f7f3 fccf 	bl	800e144 <pbuf_alloc>
 801a7a6:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 801a7a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a7aa:	2b00      	cmp	r3, #0
 801a7ac:	f000 80e3 	beq.w	801a976 <ip4_frag+0x282>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801a7b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a7b2:	895b      	ldrh	r3, [r3, #10]
 801a7b4:	2b13      	cmp	r3, #19
 801a7b6:	d80a      	bhi.n	801a7ce <ip4_frag+0xda>
 801a7b8:	f44f 7249 	mov.w	r2, #804	; 0x324
 801a7bc:	4975      	ldr	r1, [pc, #468]	; (801a994 <ip4_frag+0x2a0>)
 801a7be:	4872      	ldr	r0, [pc, #456]	; (801a988 <ip4_frag+0x294>)
 801a7c0:	f000 fca8 	bl	801b114 <trace_printf>
 801a7c4:	4971      	ldr	r1, [pc, #452]	; (801a98c <ip4_frag+0x298>)
 801a7c6:	4872      	ldr	r0, [pc, #456]	; (801a990 <ip4_frag+0x29c>)
 801a7c8:	f000 fca4 	bl	801b114 <trace_printf>
 801a7cc:	e7fe      	b.n	801a7cc <ip4_frag+0xd8>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 801a7ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a7d0:	685b      	ldr	r3, [r3, #4]
 801a7d2:	2214      	movs	r2, #20
 801a7d4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801a7d6:	4618      	mov	r0, r3
 801a7d8:	f000 fcf0 	bl	801b1bc <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801a7dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a7de:	685b      	ldr	r3, [r3, #4]
 801a7e0:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 801a7e2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801a7e4:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 801a7e8:	e068      	b.n	801a8bc <ip4_frag+0x1c8>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 801a7ea:	68fb      	ldr	r3, [r7, #12]
 801a7ec:	895a      	ldrh	r2, [r3, #10]
 801a7ee:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801a7f0:	1ad3      	subs	r3, r2, r3
 801a7f2:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801a7f4:	68fb      	ldr	r3, [r7, #12]
 801a7f6:	895b      	ldrh	r3, [r3, #10]
 801a7f8:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801a7fa:	429a      	cmp	r2, r3
 801a7fc:	d90a      	bls.n	801a814 <ip4_frag+0x120>
 801a7fe:	f240 322d 	movw	r2, #813	; 0x32d
 801a802:	4965      	ldr	r1, [pc, #404]	; (801a998 <ip4_frag+0x2a4>)
 801a804:	4860      	ldr	r0, [pc, #384]	; (801a988 <ip4_frag+0x294>)
 801a806:	f000 fc85 	bl	801b114 <trace_printf>
 801a80a:	4960      	ldr	r1, [pc, #384]	; (801a98c <ip4_frag+0x298>)
 801a80c:	4860      	ldr	r0, [pc, #384]	; (801a990 <ip4_frag+0x29c>)
 801a80e:	f000 fc81 	bl	801b114 <trace_printf>
 801a812:	e7fe      	b.n	801a812 <ip4_frag+0x11e>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801a814:	8bfa      	ldrh	r2, [r7, #30]
 801a816:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801a81a:	4293      	cmp	r3, r2
 801a81c:	bf28      	it	cs
 801a81e:	4613      	movcs	r3, r2
 801a820:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801a824:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801a828:	2b00      	cmp	r3, #0
 801a82a:	d105      	bne.n	801a838 <ip4_frag+0x144>
        poff = 0;
 801a82c:	2300      	movs	r3, #0
 801a82e:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801a830:	68fb      	ldr	r3, [r7, #12]
 801a832:	681b      	ldr	r3, [r3, #0]
 801a834:	60fb      	str	r3, [r7, #12]
        continue;
 801a836:	e041      	b.n	801a8bc <ip4_frag+0x1c8>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801a838:	f7ff fef4 	bl	801a624 <ip_frag_alloc_pbuf_custom_ref>
 801a83c:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 801a83e:	69bb      	ldr	r3, [r7, #24]
 801a840:	2b00      	cmp	r3, #0
 801a842:	d103      	bne.n	801a84c <ip4_frag+0x158>
        pbuf_free(rambuf);
 801a844:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801a846:	f7f3 ff93 	bl	800e770 <pbuf_free>
        goto memerr;
 801a84a:	e095      	b.n	801a978 <ip4_frag+0x284>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801a84c:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 801a84e:	68fb      	ldr	r3, [r7, #12]
 801a850:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801a852:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801a854:	4413      	add	r3, r2
 801a856:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 801a85a:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 801a85e:	9201      	str	r2, [sp, #4]
 801a860:	9300      	str	r3, [sp, #0]
 801a862:	4603      	mov	r3, r0
 801a864:	2241      	movs	r2, #65	; 0x41
 801a866:	2000      	movs	r0, #0
 801a868:	f7f3 fdac 	bl	800e3c4 <pbuf_alloced_custom>
 801a86c:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 801a86e:	697b      	ldr	r3, [r7, #20]
 801a870:	2b00      	cmp	r3, #0
 801a872:	d106      	bne.n	801a882 <ip4_frag+0x18e>
        ip_frag_free_pbuf_custom_ref(pcr);
 801a874:	69b8      	ldr	r0, [r7, #24]
 801a876:	f7ff fedd 	bl	801a634 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 801a87a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801a87c:	f7f3 ff78 	bl	800e770 <pbuf_free>
        goto memerr;
 801a880:	e07a      	b.n	801a978 <ip4_frag+0x284>
      }
      pbuf_ref(p);
 801a882:	68f8      	ldr	r0, [r7, #12]
 801a884:	f7f4 f82c 	bl	800e8e0 <pbuf_ref>
      pcr->original = p;
 801a888:	69bb      	ldr	r3, [r7, #24]
 801a88a:	68fa      	ldr	r2, [r7, #12]
 801a88c:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 801a88e:	69bb      	ldr	r3, [r7, #24]
 801a890:	4a42      	ldr	r2, [pc, #264]	; (801a99c <ip4_frag+0x2a8>)
 801a892:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801a894:	6979      	ldr	r1, [r7, #20]
 801a896:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801a898:	f7f4 f850 	bl	800e93c <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801a89c:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 801a8a0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801a8a4:	1ad3      	subs	r3, r2, r3
 801a8a6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 801a8aa:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801a8ae:	2b00      	cmp	r3, #0
 801a8b0:	d004      	beq.n	801a8bc <ip4_frag+0x1c8>
        poff = 0;
 801a8b2:	2300      	movs	r3, #0
 801a8b4:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801a8b6:	68fb      	ldr	r3, [r7, #12]
 801a8b8:	681b      	ldr	r3, [r3, #0]
 801a8ba:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801a8bc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801a8c0:	2b00      	cmp	r3, #0
 801a8c2:	d192      	bne.n	801a7ea <ip4_frag+0xf6>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801a8c4:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801a8c6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801a8ca:	4413      	add	r3, r2
 801a8cc:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 801a8ce:	68bb      	ldr	r3, [r7, #8]
 801a8d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801a8d2:	f1a3 0213 	sub.w	r2, r3, #19
 801a8d6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801a8da:	429a      	cmp	r2, r3
 801a8dc:	bfcc      	ite	gt
 801a8de:	2301      	movgt	r3, #1
 801a8e0:	2300      	movle	r3, #0
 801a8e2:	b2db      	uxtb	r3, r3
 801a8e4:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 801a8e6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801a8ea:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801a8ee:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 801a8f0:	6a3b      	ldr	r3, [r7, #32]
 801a8f2:	2b00      	cmp	r3, #0
 801a8f4:	d002      	beq.n	801a8fc <ip4_frag+0x208>
 801a8f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a8f8:	2b00      	cmp	r3, #0
 801a8fa:	d003      	beq.n	801a904 <ip4_frag+0x210>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801a8fc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801a8fe:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801a902:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801a904:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801a906:	4618      	mov	r0, r3
 801a908:	f7f2 fa1c 	bl	800cd44 <lwip_htons>
 801a90c:	4603      	mov	r3, r0
 801a90e:	461a      	mov	r2, r3
 801a910:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a912:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801a914:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801a916:	3314      	adds	r3, #20
 801a918:	b29b      	uxth	r3, r3
 801a91a:	4618      	mov	r0, r3
 801a91c:	f7f2 fa12 	bl	800cd44 <lwip_htons>
 801a920:	4603      	mov	r3, r0
 801a922:	461a      	mov	r2, r3
 801a924:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a926:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801a928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a92a:	2200      	movs	r2, #0
 801a92c:	729a      	strb	r2, [r3, #10]
 801a92e:	2200      	movs	r2, #0
 801a930:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 801a932:	68bb      	ldr	r3, [r7, #8]
 801a934:	695b      	ldr	r3, [r3, #20]
 801a936:	687a      	ldr	r2, [r7, #4]
 801a938:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801a93a:	68b8      	ldr	r0, [r7, #8]
 801a93c:	4798      	blx	r3
    IPFRAG_STATS_INC(ip_frag.xmit);
 801a93e:	4b18      	ldr	r3, [pc, #96]	; (801a9a0 <ip4_frag+0x2ac>)
 801a940:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 801a942:	3301      	adds	r3, #1
 801a944:	b29a      	uxth	r2, r3
 801a946:	4b16      	ldr	r3, [pc, #88]	; (801a9a0 <ip4_frag+0x2ac>)
 801a948:	861a      	strh	r2, [r3, #48]	; 0x30
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 801a94a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801a94c:	f7f3 ff10 	bl	800e770 <pbuf_free>
    left = (u16_t)(left - fragsize);
 801a950:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801a954:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801a956:	1ad3      	subs	r3, r2, r3
 801a958:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 801a95c:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801a960:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801a962:	4413      	add	r3, r2
 801a964:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 801a968:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801a96c:	2b00      	cmp	r3, #0
 801a96e:	f47f af0b 	bne.w	801a788 <ip4_frag+0x94>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 801a972:	2300      	movs	r3, #0
 801a974:	e002      	b.n	801a97c <ip4_frag+0x288>
      goto memerr;
 801a976:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801a978:	f04f 33ff 	mov.w	r3, #4294967295
}
 801a97c:	4618      	mov	r0, r3
 801a97e:	3748      	adds	r7, #72	; 0x48
 801a980:	46bd      	mov	sp, r7
 801a982:	bd80      	pop	{r7, pc}
 801a984:	08020498 	.word	0x08020498
 801a988:	080202cc 	.word	0x080202cc
 801a98c:	080202ec 	.word	0x080202ec
 801a990:	08020328 	.word	0x08020328
 801a994:	080204b4 	.word	0x080204b4
 801a998:	080204d4 	.word	0x080204d4
 801a99c:	0801a679 	.word	0x0801a679
 801a9a0:	20010b7c 	.word	0x20010b7c

0801a9a4 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 801a9a4:	b580      	push	{r7, lr}
 801a9a6:	b086      	sub	sp, #24
 801a9a8:	af00      	add	r7, sp, #0
 801a9aa:	6078      	str	r0, [r7, #4]
 801a9ac:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801a9ae:	230e      	movs	r3, #14
 801a9b0:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801a9b2:	687b      	ldr	r3, [r7, #4]
 801a9b4:	895b      	ldrh	r3, [r3, #10]
 801a9b6:	2b0e      	cmp	r3, #14
 801a9b8:	d80c      	bhi.n	801a9d4 <ethernet_input+0x30>
    /* a packet with only an ethernet header (or less) is not valid for us */
    ETHARP_STATS_INC(etharp.proterr);
 801a9ba:	4b51      	ldr	r3, [pc, #324]	; (801ab00 <ethernet_input+0x15c>)
 801a9bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801a9be:	3301      	adds	r3, #1
 801a9c0:	b29a      	uxth	r2, r3
 801a9c2:	4b4f      	ldr	r3, [pc, #316]	; (801ab00 <ethernet_input+0x15c>)
 801a9c4:	851a      	strh	r2, [r3, #40]	; 0x28
    ETHARP_STATS_INC(etharp.drop);
 801a9c6:	4b4e      	ldr	r3, [pc, #312]	; (801ab00 <ethernet_input+0x15c>)
 801a9c8:	8bdb      	ldrh	r3, [r3, #30]
 801a9ca:	3301      	adds	r3, #1
 801a9cc:	b29a      	uxth	r2, r3
 801a9ce:	4b4c      	ldr	r3, [pc, #304]	; (801ab00 <ethernet_input+0x15c>)
 801a9d0:	83da      	strh	r2, [r3, #30]
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
 801a9d2:	e08d      	b.n	801aaf0 <ethernet_input+0x14c>
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801a9d4:	687b      	ldr	r3, [r7, #4]
 801a9d6:	7bdb      	ldrb	r3, [r3, #15]
 801a9d8:	2b00      	cmp	r3, #0
 801a9da:	d106      	bne.n	801a9ea <ethernet_input+0x46>
    p->if_idx = netif_get_index(netif);
 801a9dc:	683b      	ldr	r3, [r7, #0]
 801a9de:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801a9e2:	3301      	adds	r3, #1
 801a9e4:	b2da      	uxtb	r2, r3
 801a9e6:	687b      	ldr	r3, [r7, #4]
 801a9e8:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 801a9ea:	687b      	ldr	r3, [r7, #4]
 801a9ec:	685b      	ldr	r3, [r3, #4]
 801a9ee:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801a9f0:	693b      	ldr	r3, [r7, #16]
 801a9f2:	7b1a      	ldrb	r2, [r3, #12]
 801a9f4:	7b5b      	ldrb	r3, [r3, #13]
 801a9f6:	021b      	lsls	r3, r3, #8
 801a9f8:	4313      	orrs	r3, r2
 801a9fa:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801a9fc:	693b      	ldr	r3, [r7, #16]
 801a9fe:	781b      	ldrb	r3, [r3, #0]
 801aa00:	f003 0301 	and.w	r3, r3, #1
 801aa04:	2b00      	cmp	r3, #0
 801aa06:	d023      	beq.n	801aa50 <ethernet_input+0xac>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801aa08:	693b      	ldr	r3, [r7, #16]
 801aa0a:	781b      	ldrb	r3, [r3, #0]
 801aa0c:	2b01      	cmp	r3, #1
 801aa0e:	d10f      	bne.n	801aa30 <ethernet_input+0x8c>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801aa10:	693b      	ldr	r3, [r7, #16]
 801aa12:	785b      	ldrb	r3, [r3, #1]
 801aa14:	2b00      	cmp	r3, #0
 801aa16:	d11b      	bne.n	801aa50 <ethernet_input+0xac>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801aa18:	693b      	ldr	r3, [r7, #16]
 801aa1a:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801aa1c:	2b5e      	cmp	r3, #94	; 0x5e
 801aa1e:	d117      	bne.n	801aa50 <ethernet_input+0xac>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801aa20:	687b      	ldr	r3, [r7, #4]
 801aa22:	7b5b      	ldrb	r3, [r3, #13]
 801aa24:	f043 0310 	orr.w	r3, r3, #16
 801aa28:	b2da      	uxtb	r2, r3
 801aa2a:	687b      	ldr	r3, [r7, #4]
 801aa2c:	735a      	strb	r2, [r3, #13]
 801aa2e:	e00f      	b.n	801aa50 <ethernet_input+0xac>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801aa30:	693b      	ldr	r3, [r7, #16]
 801aa32:	2206      	movs	r2, #6
 801aa34:	4933      	ldr	r1, [pc, #204]	; (801ab04 <ethernet_input+0x160>)
 801aa36:	4618      	mov	r0, r3
 801aa38:	f000 fbb2 	bl	801b1a0 <memcmp>
 801aa3c:	4603      	mov	r3, r0
 801aa3e:	2b00      	cmp	r3, #0
 801aa40:	d106      	bne.n	801aa50 <ethernet_input+0xac>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 801aa42:	687b      	ldr	r3, [r7, #4]
 801aa44:	7b5b      	ldrb	r3, [r3, #13]
 801aa46:	f043 0308 	orr.w	r3, r3, #8
 801aa4a:	b2da      	uxtb	r2, r3
 801aa4c:	687b      	ldr	r3, [r7, #4]
 801aa4e:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801aa50:	89fb      	ldrh	r3, [r7, #14]
 801aa52:	2b08      	cmp	r3, #8
 801aa54:	d003      	beq.n	801aa5e <ethernet_input+0xba>
 801aa56:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 801aa5a:	d014      	beq.n	801aa86 <ethernet_input+0xe2>
 801aa5c:	e034      	b.n	801aac8 <ethernet_input+0x124>
#if LWIP_IPV4 && LWIP_ARP
    /* IP packet? */
    case PP_HTONS(ETHTYPE_IP):
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801aa5e:	683b      	ldr	r3, [r7, #0]
 801aa60:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801aa64:	f003 0308 	and.w	r3, r3, #8
 801aa68:	2b00      	cmp	r3, #0
 801aa6a:	d03c      	beq.n	801aae6 <ethernet_input+0x142>
        goto free_and_return;
      }
      /* skip Ethernet header (min. size checked above) */
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801aa6c:	8afb      	ldrh	r3, [r7, #22]
 801aa6e:	4619      	mov	r1, r3
 801aa70:	6878      	ldr	r0, [r7, #4]
 801aa72:	f7f3 fdef 	bl	800e654 <pbuf_remove_header>
 801aa76:	4603      	mov	r3, r0
 801aa78:	2b00      	cmp	r3, #0
 801aa7a:	d136      	bne.n	801aaea <ethernet_input+0x146>
                     p->tot_len, next_hdr_offset));
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("Can't move over header in packet"));
        goto free_and_return;
      } else {
        /* pass to IP layer */
        ip4_input(p, netif);
 801aa7c:	6839      	ldr	r1, [r7, #0]
 801aa7e:	6878      	ldr	r0, [r7, #4]
 801aa80:	f7fe fdfc 	bl	801967c <ip4_input>
      }
      break;
 801aa84:	e02d      	b.n	801aae2 <ethernet_input+0x13e>

    case PP_HTONS(ETHTYPE_ARP):
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801aa86:	683b      	ldr	r3, [r7, #0]
 801aa88:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801aa8c:	f003 0308 	and.w	r3, r3, #8
 801aa90:	2b00      	cmp	r3, #0
 801aa92:	d02c      	beq.n	801aaee <ethernet_input+0x14a>
        goto free_and_return;
      }
      /* skip Ethernet header (min. size checked above) */
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801aa94:	8afb      	ldrh	r3, [r7, #22]
 801aa96:	4619      	mov	r1, r3
 801aa98:	6878      	ldr	r0, [r7, #4]
 801aa9a:	f7f3 fddb 	bl	800e654 <pbuf_remove_header>
 801aa9e:	4603      	mov	r3, r0
 801aaa0:	2b00      	cmp	r3, #0
 801aaa2:	d00c      	beq.n	801aabe <ethernet_input+0x11a>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                    ("ethernet_input: ARP response packet dropped, too short (%"U16_F"/%"U16_F")\n",
                     p->tot_len, next_hdr_offset));
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("Can't move over header in packet"));
        ETHARP_STATS_INC(etharp.lenerr);
 801aaa4:	4b16      	ldr	r3, [pc, #88]	; (801ab00 <ethernet_input+0x15c>)
 801aaa6:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 801aaa8:	3301      	adds	r3, #1
 801aaaa:	b29a      	uxth	r2, r3
 801aaac:	4b14      	ldr	r3, [pc, #80]	; (801ab00 <ethernet_input+0x15c>)
 801aaae:	845a      	strh	r2, [r3, #34]	; 0x22
        ETHARP_STATS_INC(etharp.drop);
 801aab0:	4b13      	ldr	r3, [pc, #76]	; (801ab00 <ethernet_input+0x15c>)
 801aab2:	8bdb      	ldrh	r3, [r3, #30]
 801aab4:	3301      	adds	r3, #1
 801aab6:	b29a      	uxth	r2, r3
 801aab8:	4b11      	ldr	r3, [pc, #68]	; (801ab00 <ethernet_input+0x15c>)
 801aaba:	83da      	strh	r2, [r3, #30]
        goto free_and_return;
 801aabc:	e018      	b.n	801aaf0 <ethernet_input+0x14c>
      } else {
        /* pass p to ARP module */
        etharp_input(p, netif);
 801aabe:	6839      	ldr	r1, [r7, #0]
 801aac0:	6878      	ldr	r0, [r7, #4]
 801aac2:	f7fd feb9 	bl	8018838 <etharp_input>
      }
      break;
 801aac6:	e00c      	b.n	801aae2 <ethernet_input+0x13e>
#ifdef LWIP_HOOK_UNKNOWN_ETH_PROTOCOL
      if (LWIP_HOOK_UNKNOWN_ETH_PROTOCOL(p, netif) == ERR_OK) {
        break;
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
 801aac8:	4b0d      	ldr	r3, [pc, #52]	; (801ab00 <ethernet_input+0x15c>)
 801aaca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801aacc:	3301      	adds	r3, #1
 801aace:	b29a      	uxth	r2, r3
 801aad0:	4b0b      	ldr	r3, [pc, #44]	; (801ab00 <ethernet_input+0x15c>)
 801aad2:	851a      	strh	r2, [r3, #40]	; 0x28
      ETHARP_STATS_INC(etharp.drop);
 801aad4:	4b0a      	ldr	r3, [pc, #40]	; (801ab00 <ethernet_input+0x15c>)
 801aad6:	8bdb      	ldrh	r3, [r3, #30]
 801aad8:	3301      	adds	r3, #1
 801aada:	b29a      	uxth	r2, r3
 801aadc:	4b08      	ldr	r3, [pc, #32]	; (801ab00 <ethernet_input+0x15c>)
 801aade:	83da      	strh	r2, [r3, #30]
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801aae0:	e006      	b.n	801aaf0 <ethernet_input+0x14c>
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 801aae2:	2300      	movs	r3, #0
 801aae4:	e008      	b.n	801aaf8 <ethernet_input+0x154>
        goto free_and_return;
 801aae6:	bf00      	nop
 801aae8:	e002      	b.n	801aaf0 <ethernet_input+0x14c>
        goto free_and_return;
 801aaea:	bf00      	nop
 801aaec:	e000      	b.n	801aaf0 <ethernet_input+0x14c>
        goto free_and_return;
 801aaee:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801aaf0:	6878      	ldr	r0, [r7, #4]
 801aaf2:	f7f3 fe3d 	bl	800e770 <pbuf_free>
  return ERR_OK;
 801aaf6:	2300      	movs	r3, #0
}
 801aaf8:	4618      	mov	r0, r3
 801aafa:	3718      	adds	r7, #24
 801aafc:	46bd      	mov	sp, r7
 801aafe:	bd80      	pop	{r7, pc}
 801ab00:	20010b7c 	.word	0x20010b7c
 801ab04:	08020720 	.word	0x08020720

0801ab08 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 801ab08:	b580      	push	{r7, lr}
 801ab0a:	b086      	sub	sp, #24
 801ab0c:	af00      	add	r7, sp, #0
 801ab0e:	60f8      	str	r0, [r7, #12]
 801ab10:	60b9      	str	r1, [r7, #8]
 801ab12:	607a      	str	r2, [r7, #4]
 801ab14:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801ab16:	8c3b      	ldrh	r3, [r7, #32]
 801ab18:	4618      	mov	r0, r3
 801ab1a:	f7f2 f913 	bl	800cd44 <lwip_htons>
 801ab1e:	4603      	mov	r3, r0
 801ab20:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801ab22:	210e      	movs	r1, #14
 801ab24:	68b8      	ldr	r0, [r7, #8]
 801ab26:	f7f3 fd85 	bl	800e634 <pbuf_add_header>
 801ab2a:	4603      	mov	r3, r0
 801ab2c:	2b00      	cmp	r3, #0
 801ab2e:	d129      	bne.n	801ab84 <ethernet_output+0x7c>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 801ab30:	68bb      	ldr	r3, [r7, #8]
 801ab32:	685b      	ldr	r3, [r3, #4]
 801ab34:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801ab36:	693b      	ldr	r3, [r7, #16]
 801ab38:	8afa      	ldrh	r2, [r7, #22]
 801ab3a:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 801ab3c:	693b      	ldr	r3, [r7, #16]
 801ab3e:	2206      	movs	r2, #6
 801ab40:	6839      	ldr	r1, [r7, #0]
 801ab42:	4618      	mov	r0, r3
 801ab44:	f000 fb3a 	bl	801b1bc <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 801ab48:	693b      	ldr	r3, [r7, #16]
 801ab4a:	3306      	adds	r3, #6
 801ab4c:	2206      	movs	r2, #6
 801ab4e:	6879      	ldr	r1, [r7, #4]
 801ab50:	4618      	mov	r0, r3
 801ab52:	f000 fb33 	bl	801b1bc <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801ab56:	68fb      	ldr	r3, [r7, #12]
 801ab58:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801ab5c:	2b06      	cmp	r3, #6
 801ab5e:	d00a      	beq.n	801ab76 <ethernet_output+0x6e>
 801ab60:	f44f 7299 	mov.w	r2, #306	; 0x132
 801ab64:	490e      	ldr	r1, [pc, #56]	; (801aba0 <ethernet_output+0x98>)
 801ab66:	480f      	ldr	r0, [pc, #60]	; (801aba4 <ethernet_output+0x9c>)
 801ab68:	f000 fad4 	bl	801b114 <trace_printf>
 801ab6c:	490e      	ldr	r1, [pc, #56]	; (801aba8 <ethernet_output+0xa0>)
 801ab6e:	480f      	ldr	r0, [pc, #60]	; (801abac <ethernet_output+0xa4>)
 801ab70:	f000 fad0 	bl	801b114 <trace_printf>
 801ab74:	e7fe      	b.n	801ab74 <ethernet_output+0x6c>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801ab76:	68fb      	ldr	r3, [r7, #12]
 801ab78:	699b      	ldr	r3, [r3, #24]
 801ab7a:	68b9      	ldr	r1, [r7, #8]
 801ab7c:	68f8      	ldr	r0, [r7, #12]
 801ab7e:	4798      	blx	r3
 801ab80:	4603      	mov	r3, r0
 801ab82:	e008      	b.n	801ab96 <ethernet_output+0x8e>
      goto pbuf_header_failed;
 801ab84:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
 801ab86:	4b0a      	ldr	r3, [pc, #40]	; (801abb0 <ethernet_output+0xa8>)
 801ab88:	895b      	ldrh	r3, [r3, #10]
 801ab8a:	3301      	adds	r3, #1
 801ab8c:	b29a      	uxth	r2, r3
 801ab8e:	4b08      	ldr	r3, [pc, #32]	; (801abb0 <ethernet_output+0xa8>)
 801ab90:	815a      	strh	r2, [r3, #10]
  return ERR_BUF;
 801ab92:	f06f 0301 	mvn.w	r3, #1
}
 801ab96:	4618      	mov	r0, r3
 801ab98:	3718      	adds	r7, #24
 801ab9a:	46bd      	mov	sp, r7
 801ab9c:	bd80      	pop	{r7, pc}
 801ab9e:	bf00      	nop
 801aba0:	080204e4 	.word	0x080204e4
 801aba4:	08020518 	.word	0x08020518
 801aba8:	08020538 	.word	0x08020538
 801abac:	08020570 	.word	0x08020570
 801abb0:	20010b7c 	.word	0x20010b7c

0801abb4 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 801abb4:	b580      	push	{r7, lr}
 801abb6:	b086      	sub	sp, #24
 801abb8:	af00      	add	r7, sp, #0
 801abba:	6078      	str	r0, [r7, #4]
 801abbc:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 801abbe:	683b      	ldr	r3, [r7, #0]
 801abc0:	60bb      	str	r3, [r7, #8]
 801abc2:	2304      	movs	r3, #4
 801abc4:	60fb      	str	r3, [r7, #12]
 801abc6:	2300      	movs	r3, #0
 801abc8:	613b      	str	r3, [r7, #16]
 801abca:	2300      	movs	r3, #0
 801abcc:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 801abce:	f107 0308 	add.w	r3, r7, #8
 801abd2:	2100      	movs	r1, #0
 801abd4:	4618      	mov	r0, r3
 801abd6:	f7ed f924 	bl	8007e22 <osMessageCreate>
 801abda:	4602      	mov	r2, r0
 801abdc:	687b      	ldr	r3, [r7, #4]
 801abde:	601a      	str	r2, [r3, #0]
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
#endif
#if SYS_STATS
  ++lwip_stats.sys.mbox.used;
 801abe0:	4b10      	ldr	r3, [pc, #64]	; (801ac24 <sys_mbox_new+0x70>)
 801abe2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 801abe6:	3301      	adds	r3, #1
 801abe8:	b29a      	uxth	r2, r3
 801abea:	4b0e      	ldr	r3, [pc, #56]	; (801ac24 <sys_mbox_new+0x70>)
 801abec:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
 801abf0:	4b0c      	ldr	r3, [pc, #48]	; (801ac24 <sys_mbox_new+0x70>)
 801abf2:	f8b3 20fa 	ldrh.w	r2, [r3, #250]	; 0xfa
 801abf6:	4b0b      	ldr	r3, [pc, #44]	; (801ac24 <sys_mbox_new+0x70>)
 801abf8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 801abfc:	429a      	cmp	r2, r3
 801abfe:	d205      	bcs.n	801ac0c <sys_mbox_new+0x58>
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
 801ac00:	4b08      	ldr	r3, [pc, #32]	; (801ac24 <sys_mbox_new+0x70>)
 801ac02:	f8b3 20f8 	ldrh.w	r2, [r3, #248]	; 0xf8
 801ac06:	4b07      	ldr	r3, [pc, #28]	; (801ac24 <sys_mbox_new+0x70>)
 801ac08:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 801ac0c:	687b      	ldr	r3, [r7, #4]
 801ac0e:	681b      	ldr	r3, [r3, #0]
 801ac10:	2b00      	cmp	r3, #0
 801ac12:	d102      	bne.n	801ac1a <sys_mbox_new+0x66>
    return ERR_MEM;
 801ac14:	f04f 33ff 	mov.w	r3, #4294967295
 801ac18:	e000      	b.n	801ac1c <sys_mbox_new+0x68>

  return ERR_OK;
 801ac1a:	2300      	movs	r3, #0
}
 801ac1c:	4618      	mov	r0, r3
 801ac1e:	3718      	adds	r7, #24
 801ac20:	46bd      	mov	sp, r7
 801ac22:	bd80      	pop	{r7, pc}
 801ac24:	20010b7c 	.word	0x20010b7c

0801ac28 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 801ac28:	b580      	push	{r7, lr}
 801ac2a:	b082      	sub	sp, #8
 801ac2c:	af00      	add	r7, sp, #0
 801ac2e:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
 801ac30:	687b      	ldr	r3, [r7, #4]
 801ac32:	681b      	ldr	r3, [r3, #0]
 801ac34:	4618      	mov	r0, r3
 801ac36:	f7ed f9d1 	bl	8007fdc <osMessageWaiting>
 801ac3a:	4603      	mov	r3, r0
 801ac3c:	2b00      	cmp	r3, #0
 801ac3e:	d007      	beq.n	801ac50 <sys_mbox_free+0x28>
#endif
  {
    /* Line for breakpoint.  Should never break here! */
    portNOP();
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
 801ac40:	4b0c      	ldr	r3, [pc, #48]	; (801ac74 <sys_mbox_free+0x4c>)
 801ac42:	f8b3 30fc 	ldrh.w	r3, [r3, #252]	; 0xfc
 801ac46:	3301      	adds	r3, #1
 801ac48:	b29a      	uxth	r2, r3
 801ac4a:	4b0a      	ldr	r3, [pc, #40]	; (801ac74 <sys_mbox_free+0x4c>)
 801ac4c:	f8a3 20fc 	strh.w	r2, [r3, #252]	; 0xfc
#endif /* SYS_STATS */

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
 801ac50:	687b      	ldr	r3, [r7, #4]
 801ac52:	681b      	ldr	r3, [r3, #0]
 801ac54:	4618      	mov	r0, r3
 801ac56:	f7ed f9d7 	bl	8008008 <osMessageDelete>
#else
  osMessageQueueDelete(*mbox);
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
 801ac5a:	4b06      	ldr	r3, [pc, #24]	; (801ac74 <sys_mbox_free+0x4c>)
 801ac5c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 801ac60:	3b01      	subs	r3, #1
 801ac62:	b29a      	uxth	r2, r3
 801ac64:	4b03      	ldr	r3, [pc, #12]	; (801ac74 <sys_mbox_free+0x4c>)
 801ac66:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
#endif /* SYS_STATS */
}
 801ac6a:	bf00      	nop
 801ac6c:	3708      	adds	r7, #8
 801ac6e:	46bd      	mov	sp, r7
 801ac70:	bd80      	pop	{r7, pc}
 801ac72:	bf00      	nop
 801ac74:	20010b7c 	.word	0x20010b7c

0801ac78 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 801ac78:	b580      	push	{r7, lr}
 801ac7a:	b084      	sub	sp, #16
 801ac7c:	af00      	add	r7, sp, #0
 801ac7e:	6078      	str	r0, [r7, #4]
 801ac80:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 801ac82:	687b      	ldr	r3, [r7, #4]
 801ac84:	681b      	ldr	r3, [r3, #0]
 801ac86:	6839      	ldr	r1, [r7, #0]
 801ac88:	2200      	movs	r2, #0
 801ac8a:	4618      	mov	r0, r3
 801ac8c:	f7ed f8f2 	bl	8007e74 <osMessagePut>
 801ac90:	4603      	mov	r3, r0
 801ac92:	2b00      	cmp	r3, #0
 801ac94:	d102      	bne.n	801ac9c <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 801ac96:	2300      	movs	r3, #0
 801ac98:	73fb      	strb	r3, [r7, #15]
 801ac9a:	e009      	b.n	801acb0 <sys_mbox_trypost+0x38>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 801ac9c:	23ff      	movs	r3, #255	; 0xff
 801ac9e:	73fb      	strb	r3, [r7, #15]

#if SYS_STATS
    lwip_stats.sys.mbox.err++;
 801aca0:	4b06      	ldr	r3, [pc, #24]	; (801acbc <sys_mbox_trypost+0x44>)
 801aca2:	f8b3 30fc 	ldrh.w	r3, [r3, #252]	; 0xfc
 801aca6:	3301      	adds	r3, #1
 801aca8:	b29a      	uxth	r2, r3
 801acaa:	4b04      	ldr	r3, [pc, #16]	; (801acbc <sys_mbox_trypost+0x44>)
 801acac:	f8a3 20fc 	strh.w	r2, [r3, #252]	; 0xfc
#endif /* SYS_STATS */
  }

  return result;
 801acb0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801acb4:	4618      	mov	r0, r3
 801acb6:	3710      	adds	r7, #16
 801acb8:	46bd      	mov	sp, r7
 801acba:	bd80      	pop	{r7, pc}
 801acbc:	20010b7c 	.word	0x20010b7c

0801acc0 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 801acc0:	b580      	push	{r7, lr}
 801acc2:	b08c      	sub	sp, #48	; 0x30
 801acc4:	af00      	add	r7, sp, #0
 801acc6:	61f8      	str	r0, [r7, #28]
 801acc8:	61b9      	str	r1, [r7, #24]
 801acca:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 801accc:	f7ec fed3 	bl	8007a76 <osKernelSysTick>
 801acd0:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 801acd2:	697b      	ldr	r3, [r7, #20]
 801acd4:	2b00      	cmp	r3, #0
 801acd6:	d017      	beq.n	801ad08 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 801acd8:	69fb      	ldr	r3, [r7, #28]
 801acda:	6819      	ldr	r1, [r3, #0]
 801acdc:	f107 0320 	add.w	r3, r7, #32
 801ace0:	697a      	ldr	r2, [r7, #20]
 801ace2:	4618      	mov	r0, r3
 801ace4:	f7ed f906 	bl	8007ef4 <osMessageGet>

    if(event.status == osEventMessage)
 801ace8:	6a3b      	ldr	r3, [r7, #32]
 801acea:	2b10      	cmp	r3, #16
 801acec:	d109      	bne.n	801ad02 <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 801acee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801acf0:	461a      	mov	r2, r3
 801acf2:	69bb      	ldr	r3, [r7, #24]
 801acf4:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 801acf6:	f7ec febe 	bl	8007a76 <osKernelSysTick>
 801acfa:	4602      	mov	r2, r0
 801acfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801acfe:	1ad3      	subs	r3, r2, r3
 801ad00:	e019      	b.n	801ad36 <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 801ad02:	f04f 33ff 	mov.w	r3, #4294967295
 801ad06:	e016      	b.n	801ad36 <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 801ad08:	69fb      	ldr	r3, [r7, #28]
 801ad0a:	6819      	ldr	r1, [r3, #0]
 801ad0c:	463b      	mov	r3, r7
 801ad0e:	f04f 32ff 	mov.w	r2, #4294967295
 801ad12:	4618      	mov	r0, r3
 801ad14:	f7ed f8ee 	bl	8007ef4 <osMessageGet>
 801ad18:	f107 0320 	add.w	r3, r7, #32
 801ad1c:	463a      	mov	r2, r7
 801ad1e:	ca07      	ldmia	r2, {r0, r1, r2}
 801ad20:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 801ad24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ad26:	461a      	mov	r2, r3
 801ad28:	69bb      	ldr	r3, [r7, #24]
 801ad2a:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 801ad2c:	f7ec fea3 	bl	8007a76 <osKernelSysTick>
 801ad30:	4602      	mov	r2, r0
 801ad32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ad34:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 801ad36:	4618      	mov	r0, r3
 801ad38:	3730      	adds	r7, #48	; 0x30
 801ad3a:	46bd      	mov	sp, r7
 801ad3c:	bd80      	pop	{r7, pc}

0801ad3e <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 801ad3e:	b580      	push	{r7, lr}
 801ad40:	b086      	sub	sp, #24
 801ad42:	af00      	add	r7, sp, #0
 801ad44:	6078      	str	r0, [r7, #4]
 801ad46:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osEvent event;

  event = osMessageGet (*mbox, 0);
 801ad48:	687b      	ldr	r3, [r7, #4]
 801ad4a:	6819      	ldr	r1, [r3, #0]
 801ad4c:	f107 030c 	add.w	r3, r7, #12
 801ad50:	2200      	movs	r2, #0
 801ad52:	4618      	mov	r0, r3
 801ad54:	f7ed f8ce 	bl	8007ef4 <osMessageGet>

  if(event.status == osEventMessage)
 801ad58:	68fb      	ldr	r3, [r7, #12]
 801ad5a:	2b10      	cmp	r3, #16
 801ad5c:	d105      	bne.n	801ad6a <sys_arch_mbox_tryfetch+0x2c>
  {
    *msg = (void *)event.value.v;
 801ad5e:	693b      	ldr	r3, [r7, #16]
 801ad60:	461a      	mov	r2, r3
 801ad62:	683b      	ldr	r3, [r7, #0]
 801ad64:	601a      	str	r2, [r3, #0]
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
  {
#endif
    return ERR_OK;
 801ad66:	2300      	movs	r3, #0
 801ad68:	e001      	b.n	801ad6e <sys_arch_mbox_tryfetch+0x30>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 801ad6a:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 801ad6e:	4618      	mov	r0, r3
 801ad70:	3718      	adds	r7, #24
 801ad72:	46bd      	mov	sp, r7
 801ad74:	bd80      	pop	{r7, pc}

0801ad76 <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 801ad76:	b480      	push	{r7}
 801ad78:	b083      	sub	sp, #12
 801ad7a:	af00      	add	r7, sp, #0
 801ad7c:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 801ad7e:	687b      	ldr	r3, [r7, #4]
 801ad80:	681b      	ldr	r3, [r3, #0]
 801ad82:	2b00      	cmp	r3, #0
 801ad84:	d101      	bne.n	801ad8a <sys_mbox_valid+0x14>
    return 0;
 801ad86:	2300      	movs	r3, #0
 801ad88:	e000      	b.n	801ad8c <sys_mbox_valid+0x16>
  else
    return 1;
 801ad8a:	2301      	movs	r3, #1
}
 801ad8c:	4618      	mov	r0, r3
 801ad8e:	370c      	adds	r7, #12
 801ad90:	46bd      	mov	sp, r7
 801ad92:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ad96:	4770      	bx	lr

0801ad98 <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 801ad98:	b480      	push	{r7}
 801ad9a:	b083      	sub	sp, #12
 801ad9c:	af00      	add	r7, sp, #0
 801ad9e:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 801ada0:	687b      	ldr	r3, [r7, #4]
 801ada2:	2200      	movs	r2, #0
 801ada4:	601a      	str	r2, [r3, #0]
}
 801ada6:	bf00      	nop
 801ada8:	370c      	adds	r7, #12
 801adaa:	46bd      	mov	sp, r7
 801adac:	f85d 7b04 	ldr.w	r7, [sp], #4
 801adb0:	4770      	bx	lr
	...

0801adb4 <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 801adb4:	b580      	push	{r7, lr}
 801adb6:	b084      	sub	sp, #16
 801adb8:	af00      	add	r7, sp, #0
 801adba:	6078      	str	r0, [r7, #4]
 801adbc:	460b      	mov	r3, r1
 801adbe:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
 801adc0:	2300      	movs	r3, #0
 801adc2:	60bb      	str	r3, [r7, #8]
 801adc4:	2300      	movs	r3, #0
 801adc6:	60fb      	str	r3, [r7, #12]
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 801adc8:	f107 0308 	add.w	r3, r7, #8
 801adcc:	2101      	movs	r1, #1
 801adce:	4618      	mov	r0, r3
 801add0:	f7ec ff5e 	bl	8007c90 <osSemaphoreCreate>
 801add4:	4602      	mov	r2, r0
 801add6:	687b      	ldr	r3, [r7, #4]
 801add8:	601a      	str	r2, [r3, #0]
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
#endif

  if(*sem == NULL)
 801adda:	687b      	ldr	r3, [r7, #4]
 801addc:	681b      	ldr	r3, [r3, #0]
 801adde:	2b00      	cmp	r3, #0
 801ade0:	d10a      	bne.n	801adf8 <sys_sem_new+0x44>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
 801ade2:	4b17      	ldr	r3, [pc, #92]	; (801ae40 <sys_sem_new+0x8c>)
 801ade4:	f8b3 30f0 	ldrh.w	r3, [r3, #240]	; 0xf0
 801ade8:	3301      	adds	r3, #1
 801adea:	b29a      	uxth	r2, r3
 801adec:	4b14      	ldr	r3, [pc, #80]	; (801ae40 <sys_sem_new+0x8c>)
 801adee:	f8a3 20f0 	strh.w	r2, [r3, #240]	; 0xf0
#endif /* SYS_STATS */
    return ERR_MEM;
 801adf2:	f04f 33ff 	mov.w	r3, #4294967295
 801adf6:	e01f      	b.n	801ae38 <sys_sem_new+0x84>
  }

  if(count == 0)	// Means it can't be taken
 801adf8:	78fb      	ldrb	r3, [r7, #3]
 801adfa:	2b00      	cmp	r3, #0
 801adfc:	d105      	bne.n	801ae0a <sys_sem_new+0x56>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
 801adfe:	687b      	ldr	r3, [r7, #4]
 801ae00:	681b      	ldr	r3, [r3, #0]
 801ae02:	2100      	movs	r1, #0
 801ae04:	4618      	mov	r0, r3
 801ae06:	f7ec ff75 	bl	8007cf4 <osSemaphoreWait>
    osSemaphoreAcquire(*sem, 0);
#endif
  }

#if SYS_STATS
  ++lwip_stats.sys.sem.used;
 801ae0a:	4b0d      	ldr	r3, [pc, #52]	; (801ae40 <sys_sem_new+0x8c>)
 801ae0c:	f8b3 30ec 	ldrh.w	r3, [r3, #236]	; 0xec
 801ae10:	3301      	adds	r3, #1
 801ae12:	b29a      	uxth	r2, r3
 801ae14:	4b0a      	ldr	r3, [pc, #40]	; (801ae40 <sys_sem_new+0x8c>)
 801ae16:	f8a3 20ec 	strh.w	r2, [r3, #236]	; 0xec
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
 801ae1a:	4b09      	ldr	r3, [pc, #36]	; (801ae40 <sys_sem_new+0x8c>)
 801ae1c:	f8b3 20ee 	ldrh.w	r2, [r3, #238]	; 0xee
 801ae20:	4b07      	ldr	r3, [pc, #28]	; (801ae40 <sys_sem_new+0x8c>)
 801ae22:	f8b3 30ec 	ldrh.w	r3, [r3, #236]	; 0xec
 801ae26:	429a      	cmp	r2, r3
 801ae28:	d205      	bcs.n	801ae36 <sys_sem_new+0x82>
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
 801ae2a:	4b05      	ldr	r3, [pc, #20]	; (801ae40 <sys_sem_new+0x8c>)
 801ae2c:	f8b3 20ec 	ldrh.w	r2, [r3, #236]	; 0xec
 801ae30:	4b03      	ldr	r3, [pc, #12]	; (801ae40 <sys_sem_new+0x8c>)
 801ae32:	f8a3 20ee 	strh.w	r2, [r3, #238]	; 0xee
  }
#endif /* SYS_STATS */

  return ERR_OK;
 801ae36:	2300      	movs	r3, #0
}
 801ae38:	4618      	mov	r0, r3
 801ae3a:	3710      	adds	r7, #16
 801ae3c:	46bd      	mov	sp, r7
 801ae3e:	bd80      	pop	{r7, pc}
 801ae40:	20010b7c 	.word	0x20010b7c

0801ae44 <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 801ae44:	b580      	push	{r7, lr}
 801ae46:	b084      	sub	sp, #16
 801ae48:	af00      	add	r7, sp, #0
 801ae4a:	6078      	str	r0, [r7, #4]
 801ae4c:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
 801ae4e:	f7ec fe12 	bl	8007a76 <osKernelSysTick>
 801ae52:	60f8      	str	r0, [r7, #12]
#else
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 801ae54:	683b      	ldr	r3, [r7, #0]
 801ae56:	2b00      	cmp	r3, #0
 801ae58:	d011      	beq.n	801ae7e <sys_arch_sem_wait+0x3a>
  {
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
 801ae5a:	687b      	ldr	r3, [r7, #4]
 801ae5c:	681b      	ldr	r3, [r3, #0]
 801ae5e:	6839      	ldr	r1, [r7, #0]
 801ae60:	4618      	mov	r0, r3
 801ae62:	f7ec ff47 	bl	8007cf4 <osSemaphoreWait>
 801ae66:	4603      	mov	r3, r0
 801ae68:	2b00      	cmp	r3, #0
 801ae6a:	d105      	bne.n	801ae78 <sys_arch_sem_wait+0x34>
    {
      return (osKernelSysTick() - starttime);
 801ae6c:	f7ec fe03 	bl	8007a76 <osKernelSysTick>
 801ae70:	4602      	mov	r2, r0
 801ae72:	68fb      	ldr	r3, [r7, #12]
 801ae74:	1ad3      	subs	r3, r2, r3
 801ae76:	e012      	b.n	801ae9e <sys_arch_sem_wait+0x5a>
        return (osKernelGetTickCount() - starttime);
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 801ae78:	f04f 33ff 	mov.w	r3, #4294967295
 801ae7c:	e00f      	b.n	801ae9e <sys_arch_sem_wait+0x5a>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
 801ae7e:	bf00      	nop
 801ae80:	687b      	ldr	r3, [r7, #4]
 801ae82:	681b      	ldr	r3, [r3, #0]
 801ae84:	f04f 31ff 	mov.w	r1, #4294967295
 801ae88:	4618      	mov	r0, r3
 801ae8a:	f7ec ff33 	bl	8007cf4 <osSemaphoreWait>
 801ae8e:	4603      	mov	r3, r0
 801ae90:	2b00      	cmp	r3, #0
 801ae92:	d1f5      	bne.n	801ae80 <sys_arch_sem_wait+0x3c>
    return (osKernelSysTick() - starttime);
 801ae94:	f7ec fdef 	bl	8007a76 <osKernelSysTick>
 801ae98:	4602      	mov	r2, r0
 801ae9a:	68fb      	ldr	r3, [r7, #12]
 801ae9c:	1ad3      	subs	r3, r2, r3
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 801ae9e:	4618      	mov	r0, r3
 801aea0:	3710      	adds	r7, #16
 801aea2:	46bd      	mov	sp, r7
 801aea4:	bd80      	pop	{r7, pc}

0801aea6 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 801aea6:	b580      	push	{r7, lr}
 801aea8:	b082      	sub	sp, #8
 801aeaa:	af00      	add	r7, sp, #0
 801aeac:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 801aeae:	687b      	ldr	r3, [r7, #4]
 801aeb0:	681b      	ldr	r3, [r3, #0]
 801aeb2:	4618      	mov	r0, r3
 801aeb4:	f7ec ff6c 	bl	8007d90 <osSemaphoreRelease>
}
 801aeb8:	bf00      	nop
 801aeba:	3708      	adds	r7, #8
 801aebc:	46bd      	mov	sp, r7
 801aebe:	bd80      	pop	{r7, pc}

0801aec0 <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 801aec0:	b580      	push	{r7, lr}
 801aec2:	b082      	sub	sp, #8
 801aec4:	af00      	add	r7, sp, #0
 801aec6:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
 801aec8:	4b08      	ldr	r3, [pc, #32]	; (801aeec <sys_sem_free+0x2c>)
 801aeca:	f8b3 30ec 	ldrh.w	r3, [r3, #236]	; 0xec
 801aece:	3b01      	subs	r3, #1
 801aed0:	b29a      	uxth	r2, r3
 801aed2:	4b06      	ldr	r3, [pc, #24]	; (801aeec <sys_sem_free+0x2c>)
 801aed4:	f8a3 20ec 	strh.w	r2, [r3, #236]	; 0xec
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 801aed8:	687b      	ldr	r3, [r7, #4]
 801aeda:	681b      	ldr	r3, [r3, #0]
 801aedc:	4618      	mov	r0, r3
 801aede:	f7ec ff8d 	bl	8007dfc <osSemaphoreDelete>
}
 801aee2:	bf00      	nop
 801aee4:	3708      	adds	r7, #8
 801aee6:	46bd      	mov	sp, r7
 801aee8:	bd80      	pop	{r7, pc}
 801aeea:	bf00      	nop
 801aeec:	20010b7c 	.word	0x20010b7c

0801aef0 <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 801aef0:	b480      	push	{r7}
 801aef2:	b083      	sub	sp, #12
 801aef4:	af00      	add	r7, sp, #0
 801aef6:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 801aef8:	687b      	ldr	r3, [r7, #4]
 801aefa:	681b      	ldr	r3, [r3, #0]
 801aefc:	2b00      	cmp	r3, #0
 801aefe:	d101      	bne.n	801af04 <sys_sem_valid+0x14>
    return 0;
 801af00:	2300      	movs	r3, #0
 801af02:	e000      	b.n	801af06 <sys_sem_valid+0x16>
  else
    return 1;
 801af04:	2301      	movs	r3, #1
}
 801af06:	4618      	mov	r0, r3
 801af08:	370c      	adds	r7, #12
 801af0a:	46bd      	mov	sp, r7
 801af0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801af10:	4770      	bx	lr

0801af12 <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 801af12:	b480      	push	{r7}
 801af14:	b083      	sub	sp, #12
 801af16:	af00      	add	r7, sp, #0
 801af18:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 801af1a:	687b      	ldr	r3, [r7, #4]
 801af1c:	2200      	movs	r2, #0
 801af1e:	601a      	str	r2, [r3, #0]
}
 801af20:	bf00      	nop
 801af22:	370c      	adds	r7, #12
 801af24:	46bd      	mov	sp, r7
 801af26:	f85d 7b04 	ldr.w	r7, [sp], #4
 801af2a:	4770      	bx	lr

0801af2c <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 801af2c:	b580      	push	{r7, lr}
 801af2e:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 801af30:	4803      	ldr	r0, [pc, #12]	; (801af40 <sys_init+0x14>)
 801af32:	f7ec fe10 	bl	8007b56 <osMutexCreate>
 801af36:	4603      	mov	r3, r0
 801af38:	4a02      	ldr	r2, [pc, #8]	; (801af44 <sys_init+0x18>)
 801af3a:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 801af3c:	bf00      	nop
 801af3e:	bd80      	pop	{r7, pc}
 801af40:	08020730 	.word	0x08020730
 801af44:	20010cc8 	.word	0x20010cc8

0801af48 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 801af48:	b580      	push	{r7, lr}
 801af4a:	b084      	sub	sp, #16
 801af4c:	af00      	add	r7, sp, #0
 801af4e:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 801af50:	2300      	movs	r3, #0
 801af52:	60bb      	str	r3, [r7, #8]
 801af54:	2300      	movs	r3, #0
 801af56:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 801af58:	f107 0308 	add.w	r3, r7, #8
 801af5c:	4618      	mov	r0, r3
 801af5e:	f7ec fdfa 	bl	8007b56 <osMutexCreate>
 801af62:	4602      	mov	r2, r0
 801af64:	687b      	ldr	r3, [r7, #4]
 801af66:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 801af68:	687b      	ldr	r3, [r7, #4]
 801af6a:	681b      	ldr	r3, [r3, #0]
 801af6c:	2b00      	cmp	r3, #0
 801af6e:	d10a      	bne.n	801af86 <sys_mutex_new+0x3e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
 801af70:	4b12      	ldr	r3, [pc, #72]	; (801afbc <sys_mutex_new+0x74>)
 801af72:	f8b3 30f6 	ldrh.w	r3, [r3, #246]	; 0xf6
 801af76:	3301      	adds	r3, #1
 801af78:	b29a      	uxth	r2, r3
 801af7a:	4b10      	ldr	r3, [pc, #64]	; (801afbc <sys_mutex_new+0x74>)
 801af7c:	f8a3 20f6 	strh.w	r2, [r3, #246]	; 0xf6
#endif /* SYS_STATS */
    return ERR_MEM;
 801af80:	f04f 33ff 	mov.w	r3, #4294967295
 801af84:	e016      	b.n	801afb4 <sys_mutex_new+0x6c>
  }

#if SYS_STATS
  ++lwip_stats.sys.mutex.used;
 801af86:	4b0d      	ldr	r3, [pc, #52]	; (801afbc <sys_mutex_new+0x74>)
 801af88:	f8b3 30f2 	ldrh.w	r3, [r3, #242]	; 0xf2
 801af8c:	3301      	adds	r3, #1
 801af8e:	b29a      	uxth	r2, r3
 801af90:	4b0a      	ldr	r3, [pc, #40]	; (801afbc <sys_mutex_new+0x74>)
 801af92:	f8a3 20f2 	strh.w	r2, [r3, #242]	; 0xf2
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
 801af96:	4b09      	ldr	r3, [pc, #36]	; (801afbc <sys_mutex_new+0x74>)
 801af98:	f8b3 20f4 	ldrh.w	r2, [r3, #244]	; 0xf4
 801af9c:	4b07      	ldr	r3, [pc, #28]	; (801afbc <sys_mutex_new+0x74>)
 801af9e:	f8b3 30f2 	ldrh.w	r3, [r3, #242]	; 0xf2
 801afa2:	429a      	cmp	r2, r3
 801afa4:	d205      	bcs.n	801afb2 <sys_mutex_new+0x6a>
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
 801afa6:	4b05      	ldr	r3, [pc, #20]	; (801afbc <sys_mutex_new+0x74>)
 801afa8:	f8b3 20f2 	ldrh.w	r2, [r3, #242]	; 0xf2
 801afac:	4b03      	ldr	r3, [pc, #12]	; (801afbc <sys_mutex_new+0x74>)
 801afae:	f8a3 20f4 	strh.w	r2, [r3, #244]	; 0xf4
  }
#endif /* SYS_STATS */
  return ERR_OK;
 801afb2:	2300      	movs	r3, #0
}
 801afb4:	4618      	mov	r0, r3
 801afb6:	3710      	adds	r7, #16
 801afb8:	46bd      	mov	sp, r7
 801afba:	bd80      	pop	{r7, pc}
 801afbc:	20010b7c 	.word	0x20010b7c

0801afc0 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 801afc0:	b580      	push	{r7, lr}
 801afc2:	b082      	sub	sp, #8
 801afc4:	af00      	add	r7, sp, #0
 801afc6:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 801afc8:	687b      	ldr	r3, [r7, #4]
 801afca:	681b      	ldr	r3, [r3, #0]
 801afcc:	f04f 31ff 	mov.w	r1, #4294967295
 801afd0:	4618      	mov	r0, r3
 801afd2:	f7ec fdd9 	bl	8007b88 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 801afd6:	bf00      	nop
 801afd8:	3708      	adds	r7, #8
 801afda:	46bd      	mov	sp, r7
 801afdc:	bd80      	pop	{r7, pc}

0801afde <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 801afde:	b580      	push	{r7, lr}
 801afe0:	b082      	sub	sp, #8
 801afe2:	af00      	add	r7, sp, #0
 801afe4:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 801afe6:	687b      	ldr	r3, [r7, #4]
 801afe8:	681b      	ldr	r3, [r3, #0]
 801afea:	4618      	mov	r0, r3
 801afec:	f7ec fe1a 	bl	8007c24 <osMutexRelease>
}
 801aff0:	bf00      	nop
 801aff2:	3708      	adds	r7, #8
 801aff4:	46bd      	mov	sp, r7
 801aff6:	bd80      	pop	{r7, pc}

0801aff8 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 801aff8:	b580      	push	{r7, lr}
 801affa:	b08c      	sub	sp, #48	; 0x30
 801affc:	af00      	add	r7, sp, #0
 801affe:	60f8      	str	r0, [r7, #12]
 801b000:	60b9      	str	r1, [r7, #8]
 801b002:	607a      	str	r2, [r7, #4]
 801b004:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 801b006:	f107 0314 	add.w	r3, r7, #20
 801b00a:	2200      	movs	r2, #0
 801b00c:	601a      	str	r2, [r3, #0]
 801b00e:	605a      	str	r2, [r3, #4]
 801b010:	609a      	str	r2, [r3, #8]
 801b012:	60da      	str	r2, [r3, #12]
 801b014:	611a      	str	r2, [r3, #16]
 801b016:	615a      	str	r2, [r3, #20]
 801b018:	619a      	str	r2, [r3, #24]
 801b01a:	68fb      	ldr	r3, [r7, #12]
 801b01c:	617b      	str	r3, [r7, #20]
 801b01e:	68bb      	ldr	r3, [r7, #8]
 801b020:	61bb      	str	r3, [r7, #24]
 801b022:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b024:	b21b      	sxth	r3, r3
 801b026:	83bb      	strh	r3, [r7, #28]
 801b028:	683b      	ldr	r3, [r7, #0]
 801b02a:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 801b02c:	f107 0314 	add.w	r3, r7, #20
 801b030:	6879      	ldr	r1, [r7, #4]
 801b032:	4618      	mov	r0, r3
 801b034:	f7ec fd2f 	bl	8007a96 <osThreadCreate>
 801b038:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 801b03a:	4618      	mov	r0, r3
 801b03c:	3730      	adds	r7, #48	; 0x30
 801b03e:	46bd      	mov	sp, r7
 801b040:	bd80      	pop	{r7, pc}
	...

0801b044 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 801b044:	b580      	push	{r7, lr}
 801b046:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 801b048:	4b04      	ldr	r3, [pc, #16]	; (801b05c <sys_arch_protect+0x18>)
 801b04a:	681b      	ldr	r3, [r3, #0]
 801b04c:	f04f 31ff 	mov.w	r1, #4294967295
 801b050:	4618      	mov	r0, r3
 801b052:	f7ec fd99 	bl	8007b88 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 801b056:	2301      	movs	r3, #1
}
 801b058:	4618      	mov	r0, r3
 801b05a:	bd80      	pop	{r7, pc}
 801b05c:	20010cc8 	.word	0x20010cc8

0801b060 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 801b060:	b580      	push	{r7, lr}
 801b062:	b082      	sub	sp, #8
 801b064:	af00      	add	r7, sp, #0
 801b066:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 801b068:	4b04      	ldr	r3, [pc, #16]	; (801b07c <sys_arch_unprotect+0x1c>)
 801b06a:	681b      	ldr	r3, [r3, #0]
 801b06c:	4618      	mov	r0, r3
 801b06e:	f7ec fdd9 	bl	8007c24 <osMutexRelease>
}
 801b072:	bf00      	nop
 801b074:	3708      	adds	r7, #8
 801b076:	46bd      	mov	sp, r7
 801b078:	bd80      	pop	{r7, pc}
 801b07a:	bf00      	nop
 801b07c:	20010cc8 	.word	0x20010cc8

0801b080 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 801b080:	b480      	push	{r7}
 801b082:	b083      	sub	sp, #12
 801b084:	af00      	add	r7, sp, #0
 801b086:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 801b088:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 801b08c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 801b090:	f003 0301 	and.w	r3, r3, #1
 801b094:	2b00      	cmp	r3, #0
 801b096:	d013      	beq.n	801b0c0 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 801b098:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 801b09c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 801b0a0:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 801b0a4:	2b00      	cmp	r3, #0
 801b0a6:	d00b      	beq.n	801b0c0 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 801b0a8:	e000      	b.n	801b0ac <ITM_SendChar+0x2c>
    {
      __NOP();
 801b0aa:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 801b0ac:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 801b0b0:	681b      	ldr	r3, [r3, #0]
 801b0b2:	2b00      	cmp	r3, #0
 801b0b4:	d0f9      	beq.n	801b0aa <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 801b0b6:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 801b0ba:	687a      	ldr	r2, [r7, #4]
 801b0bc:	b2d2      	uxtb	r2, r2
 801b0be:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 801b0c0:	687b      	ldr	r3, [r7, #4]
}
 801b0c2:	4618      	mov	r0, r3
 801b0c4:	370c      	adds	r7, #12
 801b0c6:	46bd      	mov	sp, r7
 801b0c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b0cc:	4770      	bx	lr

0801b0ce <trace_init>:
#include <stdarg.h>
#include "stm32f4xx.h"
#include "trace.h"

void trace_init(void)
{
 801b0ce:	b480      	push	{r7}
 801b0d0:	af00      	add	r7, sp, #0
//	CoreDebug->DEMCR |= _VAL2FLD(CoreDebug_DEMCR_TRCENA, 1);
//	TPI->SPPR |= _VAL2FLD(TPI_SPPR_TXMODE, 2);
//	DBGMCU->CR  |= _VAL2FLD(DBGMCU_CR_TRACE_IOEN, DBGMCU_CR_TRACE_IOEN);
//	ITM->TER = 1;
	return;
 801b0d2:	bf00      	nop
}
 801b0d4:	46bd      	mov	sp, r7
 801b0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b0da:	4770      	bx	lr

0801b0dc <trace_write>:
static ssize_t trace_write (const char* buf, size_t nbyte)
{
 801b0dc:	b580      	push	{r7, lr}
 801b0de:	b084      	sub	sp, #16
 801b0e0:	af00      	add	r7, sp, #0
 801b0e2:	6078      	str	r0, [r7, #4]
 801b0e4:	6039      	str	r1, [r7, #0]
  for (size_t i = 0; i < nbyte; i++)
 801b0e6:	2300      	movs	r3, #0
 801b0e8:	60fb      	str	r3, [r7, #12]
 801b0ea:	e009      	b.n	801b100 <trace_write+0x24>
    {

      ITM_SendChar(*(buf+i));
 801b0ec:	687a      	ldr	r2, [r7, #4]
 801b0ee:	68fb      	ldr	r3, [r7, #12]
 801b0f0:	4413      	add	r3, r2
 801b0f2:	781b      	ldrb	r3, [r3, #0]
 801b0f4:	4618      	mov	r0, r3
 801b0f6:	f7ff ffc3 	bl	801b080 <ITM_SendChar>
  for (size_t i = 0; i < nbyte; i++)
 801b0fa:	68fb      	ldr	r3, [r7, #12]
 801b0fc:	3301      	adds	r3, #1
 801b0fe:	60fb      	str	r3, [r7, #12]
 801b100:	68fa      	ldr	r2, [r7, #12]
 801b102:	683b      	ldr	r3, [r7, #0]
 801b104:	429a      	cmp	r2, r3
 801b106:	d3f1      	bcc.n	801b0ec <trace_write+0x10>
    }

  return (ssize_t)nbyte; // all characters successfully sent
 801b108:	683b      	ldr	r3, [r7, #0]
}
 801b10a:	4618      	mov	r0, r3
 801b10c:	3710      	adds	r7, #16
 801b10e:	46bd      	mov	sp, r7
 801b110:	bd80      	pop	{r7, pc}
	...

0801b114 <trace_printf>:

int trace_printf(const char* format, ...)
{
 801b114:	b40f      	push	{r0, r1, r2, r3}
 801b116:	b580      	push	{r7, lr}
 801b118:	b082      	sub	sp, #8
 801b11a:	af00      	add	r7, sp, #0
  static char buf[TRACE_BUFF];
  int ret;
  va_list ap;

  va_start (ap, format);
 801b11c:	f107 0314 	add.w	r3, r7, #20
 801b120:	603b      	str	r3, [r7, #0]


  // Print to the local buffer
  ret = vsnprintf (buf, sizeof(buf), format, ap);
 801b122:	683b      	ldr	r3, [r7, #0]
 801b124:	693a      	ldr	r2, [r7, #16]
 801b126:	2140      	movs	r1, #64	; 0x40
 801b128:	480a      	ldr	r0, [pc, #40]	; (801b154 <trace_printf+0x40>)
 801b12a:	f000 f903 	bl	801b334 <vsniprintf>
 801b12e:	6078      	str	r0, [r7, #4]
  if (ret > 0)
 801b130:	687b      	ldr	r3, [r7, #4]
 801b132:	2b00      	cmp	r3, #0
 801b134:	dd05      	ble.n	801b142 <trace_printf+0x2e>
    {
      // Transfer the buffer to the device
      ret = trace_write (buf, (size_t)ret);
 801b136:	687b      	ldr	r3, [r7, #4]
 801b138:	4619      	mov	r1, r3
 801b13a:	4806      	ldr	r0, [pc, #24]	; (801b154 <trace_printf+0x40>)
 801b13c:	f7ff ffce 	bl	801b0dc <trace_write>
 801b140:	6078      	str	r0, [r7, #4]
    }

  va_end (ap);
  return ret;
 801b142:	687b      	ldr	r3, [r7, #4]
}
 801b144:	4618      	mov	r0, r3
 801b146:	3708      	adds	r7, #8
 801b148:	46bd      	mov	sp, r7
 801b14a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801b14e:	b004      	add	sp, #16
 801b150:	4770      	bx	lr
 801b152:	bf00      	nop
 801b154:	2000a0dc 	.word	0x2000a0dc

0801b158 <__libc_init_array>:
 801b158:	b570      	push	{r4, r5, r6, lr}
 801b15a:	4d0d      	ldr	r5, [pc, #52]	; (801b190 <__libc_init_array+0x38>)
 801b15c:	4c0d      	ldr	r4, [pc, #52]	; (801b194 <__libc_init_array+0x3c>)
 801b15e:	1b64      	subs	r4, r4, r5
 801b160:	10a4      	asrs	r4, r4, #2
 801b162:	2600      	movs	r6, #0
 801b164:	42a6      	cmp	r6, r4
 801b166:	d109      	bne.n	801b17c <__libc_init_array+0x24>
 801b168:	4d0b      	ldr	r5, [pc, #44]	; (801b198 <__libc_init_array+0x40>)
 801b16a:	4c0c      	ldr	r4, [pc, #48]	; (801b19c <__libc_init_array+0x44>)
 801b16c:	f001 fa3c 	bl	801c5e8 <_init>
 801b170:	1b64      	subs	r4, r4, r5
 801b172:	10a4      	asrs	r4, r4, #2
 801b174:	2600      	movs	r6, #0
 801b176:	42a6      	cmp	r6, r4
 801b178:	d105      	bne.n	801b186 <__libc_init_array+0x2e>
 801b17a:	bd70      	pop	{r4, r5, r6, pc}
 801b17c:	f855 3b04 	ldr.w	r3, [r5], #4
 801b180:	4798      	blx	r3
 801b182:	3601      	adds	r6, #1
 801b184:	e7ee      	b.n	801b164 <__libc_init_array+0xc>
 801b186:	f855 3b04 	ldr.w	r3, [r5], #4
 801b18a:	4798      	blx	r3
 801b18c:	3601      	adds	r6, #1
 801b18e:	e7f2      	b.n	801b176 <__libc_init_array+0x1e>
 801b190:	0802088c 	.word	0x0802088c
 801b194:	0802088c 	.word	0x0802088c
 801b198:	0802088c 	.word	0x0802088c
 801b19c:	08020890 	.word	0x08020890

0801b1a0 <memcmp>:
 801b1a0:	b530      	push	{r4, r5, lr}
 801b1a2:	3901      	subs	r1, #1
 801b1a4:	2400      	movs	r4, #0
 801b1a6:	42a2      	cmp	r2, r4
 801b1a8:	d101      	bne.n	801b1ae <memcmp+0xe>
 801b1aa:	2000      	movs	r0, #0
 801b1ac:	e005      	b.n	801b1ba <memcmp+0x1a>
 801b1ae:	5d03      	ldrb	r3, [r0, r4]
 801b1b0:	3401      	adds	r4, #1
 801b1b2:	5d0d      	ldrb	r5, [r1, r4]
 801b1b4:	42ab      	cmp	r3, r5
 801b1b6:	d0f6      	beq.n	801b1a6 <memcmp+0x6>
 801b1b8:	1b58      	subs	r0, r3, r5
 801b1ba:	bd30      	pop	{r4, r5, pc}

0801b1bc <memcpy>:
 801b1bc:	440a      	add	r2, r1
 801b1be:	4291      	cmp	r1, r2
 801b1c0:	f100 33ff 	add.w	r3, r0, #4294967295
 801b1c4:	d100      	bne.n	801b1c8 <memcpy+0xc>
 801b1c6:	4770      	bx	lr
 801b1c8:	b510      	push	{r4, lr}
 801b1ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 801b1ce:	f803 4f01 	strb.w	r4, [r3, #1]!
 801b1d2:	4291      	cmp	r1, r2
 801b1d4:	d1f9      	bne.n	801b1ca <memcpy+0xe>
 801b1d6:	bd10      	pop	{r4, pc}

0801b1d8 <memmove>:
 801b1d8:	4288      	cmp	r0, r1
 801b1da:	b510      	push	{r4, lr}
 801b1dc:	eb01 0402 	add.w	r4, r1, r2
 801b1e0:	d902      	bls.n	801b1e8 <memmove+0x10>
 801b1e2:	4284      	cmp	r4, r0
 801b1e4:	4623      	mov	r3, r4
 801b1e6:	d807      	bhi.n	801b1f8 <memmove+0x20>
 801b1e8:	1e43      	subs	r3, r0, #1
 801b1ea:	42a1      	cmp	r1, r4
 801b1ec:	d008      	beq.n	801b200 <memmove+0x28>
 801b1ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 801b1f2:	f803 2f01 	strb.w	r2, [r3, #1]!
 801b1f6:	e7f8      	b.n	801b1ea <memmove+0x12>
 801b1f8:	4402      	add	r2, r0
 801b1fa:	4601      	mov	r1, r0
 801b1fc:	428a      	cmp	r2, r1
 801b1fe:	d100      	bne.n	801b202 <memmove+0x2a>
 801b200:	bd10      	pop	{r4, pc}
 801b202:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801b206:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801b20a:	e7f7      	b.n	801b1fc <memmove+0x24>

0801b20c <memset>:
 801b20c:	4402      	add	r2, r0
 801b20e:	4603      	mov	r3, r0
 801b210:	4293      	cmp	r3, r2
 801b212:	d100      	bne.n	801b216 <memset+0xa>
 801b214:	4770      	bx	lr
 801b216:	f803 1b01 	strb.w	r1, [r3], #1
 801b21a:	e7f9      	b.n	801b210 <memset+0x4>

0801b21c <rand>:
 801b21c:	4b17      	ldr	r3, [pc, #92]	; (801b27c <rand+0x60>)
 801b21e:	b510      	push	{r4, lr}
 801b220:	681c      	ldr	r4, [r3, #0]
 801b222:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801b224:	b9b3      	cbnz	r3, 801b254 <rand+0x38>
 801b226:	2018      	movs	r0, #24
 801b228:	f000 f8c2 	bl	801b3b0 <malloc>
 801b22c:	63a0      	str	r0, [r4, #56]	; 0x38
 801b22e:	b928      	cbnz	r0, 801b23c <rand+0x20>
 801b230:	4602      	mov	r2, r0
 801b232:	4b13      	ldr	r3, [pc, #76]	; (801b280 <rand+0x64>)
 801b234:	4813      	ldr	r0, [pc, #76]	; (801b284 <rand+0x68>)
 801b236:	214e      	movs	r1, #78	; 0x4e
 801b238:	f000 f88a 	bl	801b350 <__assert_func>
 801b23c:	4a12      	ldr	r2, [pc, #72]	; (801b288 <rand+0x6c>)
 801b23e:	4b13      	ldr	r3, [pc, #76]	; (801b28c <rand+0x70>)
 801b240:	e9c0 2300 	strd	r2, r3, [r0]
 801b244:	4b12      	ldr	r3, [pc, #72]	; (801b290 <rand+0x74>)
 801b246:	6083      	str	r3, [r0, #8]
 801b248:	230b      	movs	r3, #11
 801b24a:	8183      	strh	r3, [r0, #12]
 801b24c:	2201      	movs	r2, #1
 801b24e:	2300      	movs	r3, #0
 801b250:	e9c0 2304 	strd	r2, r3, [r0, #16]
 801b254:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801b256:	480f      	ldr	r0, [pc, #60]	; (801b294 <rand+0x78>)
 801b258:	690a      	ldr	r2, [r1, #16]
 801b25a:	694b      	ldr	r3, [r1, #20]
 801b25c:	4c0e      	ldr	r4, [pc, #56]	; (801b298 <rand+0x7c>)
 801b25e:	4350      	muls	r0, r2
 801b260:	fb04 0003 	mla	r0, r4, r3, r0
 801b264:	fba2 3404 	umull	r3, r4, r2, r4
 801b268:	1c5a      	adds	r2, r3, #1
 801b26a:	4404      	add	r4, r0
 801b26c:	f144 0000 	adc.w	r0, r4, #0
 801b270:	e9c1 2004 	strd	r2, r0, [r1, #16]
 801b274:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801b278:	bd10      	pop	{r4, pc}
 801b27a:	bf00      	nop
 801b27c:	20000024 	.word	0x20000024
 801b280:	0802073c 	.word	0x0802073c
 801b284:	08020753 	.word	0x08020753
 801b288:	abcd330e 	.word	0xabcd330e
 801b28c:	e66d1234 	.word	0xe66d1234
 801b290:	0005deec 	.word	0x0005deec
 801b294:	5851f42d 	.word	0x5851f42d
 801b298:	4c957f2d 	.word	0x4c957f2d

0801b29c <siprintf>:
 801b29c:	b40e      	push	{r1, r2, r3}
 801b29e:	b500      	push	{lr}
 801b2a0:	b09c      	sub	sp, #112	; 0x70
 801b2a2:	ab1d      	add	r3, sp, #116	; 0x74
 801b2a4:	9002      	str	r0, [sp, #8]
 801b2a6:	9006      	str	r0, [sp, #24]
 801b2a8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801b2ac:	4809      	ldr	r0, [pc, #36]	; (801b2d4 <siprintf+0x38>)
 801b2ae:	9107      	str	r1, [sp, #28]
 801b2b0:	9104      	str	r1, [sp, #16]
 801b2b2:	4909      	ldr	r1, [pc, #36]	; (801b2d8 <siprintf+0x3c>)
 801b2b4:	f853 2b04 	ldr.w	r2, [r3], #4
 801b2b8:	9105      	str	r1, [sp, #20]
 801b2ba:	6800      	ldr	r0, [r0, #0]
 801b2bc:	9301      	str	r3, [sp, #4]
 801b2be:	a902      	add	r1, sp, #8
 801b2c0:	f000 f984 	bl	801b5cc <_svfiprintf_r>
 801b2c4:	9b02      	ldr	r3, [sp, #8]
 801b2c6:	2200      	movs	r2, #0
 801b2c8:	701a      	strb	r2, [r3, #0]
 801b2ca:	b01c      	add	sp, #112	; 0x70
 801b2cc:	f85d eb04 	ldr.w	lr, [sp], #4
 801b2d0:	b003      	add	sp, #12
 801b2d2:	4770      	bx	lr
 801b2d4:	20000024 	.word	0x20000024
 801b2d8:	ffff0208 	.word	0xffff0208

0801b2dc <_vsniprintf_r>:
 801b2dc:	b530      	push	{r4, r5, lr}
 801b2de:	1e14      	subs	r4, r2, #0
 801b2e0:	4605      	mov	r5, r0
 801b2e2:	b09b      	sub	sp, #108	; 0x6c
 801b2e4:	4618      	mov	r0, r3
 801b2e6:	da05      	bge.n	801b2f4 <_vsniprintf_r+0x18>
 801b2e8:	238b      	movs	r3, #139	; 0x8b
 801b2ea:	602b      	str	r3, [r5, #0]
 801b2ec:	f04f 30ff 	mov.w	r0, #4294967295
 801b2f0:	b01b      	add	sp, #108	; 0x6c
 801b2f2:	bd30      	pop	{r4, r5, pc}
 801b2f4:	f44f 7302 	mov.w	r3, #520	; 0x208
 801b2f8:	f8ad 300c 	strh.w	r3, [sp, #12]
 801b2fc:	bf14      	ite	ne
 801b2fe:	f104 33ff 	addne.w	r3, r4, #4294967295
 801b302:	4623      	moveq	r3, r4
 801b304:	9302      	str	r3, [sp, #8]
 801b306:	9305      	str	r3, [sp, #20]
 801b308:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801b30c:	9100      	str	r1, [sp, #0]
 801b30e:	9104      	str	r1, [sp, #16]
 801b310:	f8ad 300e 	strh.w	r3, [sp, #14]
 801b314:	4602      	mov	r2, r0
 801b316:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801b318:	4669      	mov	r1, sp
 801b31a:	4628      	mov	r0, r5
 801b31c:	f000 f956 	bl	801b5cc <_svfiprintf_r>
 801b320:	1c43      	adds	r3, r0, #1
 801b322:	bfbc      	itt	lt
 801b324:	238b      	movlt	r3, #139	; 0x8b
 801b326:	602b      	strlt	r3, [r5, #0]
 801b328:	2c00      	cmp	r4, #0
 801b32a:	d0e1      	beq.n	801b2f0 <_vsniprintf_r+0x14>
 801b32c:	9b00      	ldr	r3, [sp, #0]
 801b32e:	2200      	movs	r2, #0
 801b330:	701a      	strb	r2, [r3, #0]
 801b332:	e7dd      	b.n	801b2f0 <_vsniprintf_r+0x14>

0801b334 <vsniprintf>:
 801b334:	b507      	push	{r0, r1, r2, lr}
 801b336:	9300      	str	r3, [sp, #0]
 801b338:	4613      	mov	r3, r2
 801b33a:	460a      	mov	r2, r1
 801b33c:	4601      	mov	r1, r0
 801b33e:	4803      	ldr	r0, [pc, #12]	; (801b34c <vsniprintf+0x18>)
 801b340:	6800      	ldr	r0, [r0, #0]
 801b342:	f7ff ffcb 	bl	801b2dc <_vsniprintf_r>
 801b346:	b003      	add	sp, #12
 801b348:	f85d fb04 	ldr.w	pc, [sp], #4
 801b34c:	20000024 	.word	0x20000024

0801b350 <__assert_func>:
 801b350:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801b352:	4614      	mov	r4, r2
 801b354:	461a      	mov	r2, r3
 801b356:	4b09      	ldr	r3, [pc, #36]	; (801b37c <__assert_func+0x2c>)
 801b358:	681b      	ldr	r3, [r3, #0]
 801b35a:	4605      	mov	r5, r0
 801b35c:	68d8      	ldr	r0, [r3, #12]
 801b35e:	b14c      	cbz	r4, 801b374 <__assert_func+0x24>
 801b360:	4b07      	ldr	r3, [pc, #28]	; (801b380 <__assert_func+0x30>)
 801b362:	9100      	str	r1, [sp, #0]
 801b364:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801b368:	4906      	ldr	r1, [pc, #24]	; (801b384 <__assert_func+0x34>)
 801b36a:	462b      	mov	r3, r5
 801b36c:	f000 f80e 	bl	801b38c <fiprintf>
 801b370:	f000 fdea 	bl	801bf48 <abort>
 801b374:	4b04      	ldr	r3, [pc, #16]	; (801b388 <__assert_func+0x38>)
 801b376:	461c      	mov	r4, r3
 801b378:	e7f3      	b.n	801b362 <__assert_func+0x12>
 801b37a:	bf00      	nop
 801b37c:	20000024 	.word	0x20000024
 801b380:	080207b2 	.word	0x080207b2
 801b384:	080207bf 	.word	0x080207bf
 801b388:	080207ed 	.word	0x080207ed

0801b38c <fiprintf>:
 801b38c:	b40e      	push	{r1, r2, r3}
 801b38e:	b503      	push	{r0, r1, lr}
 801b390:	4601      	mov	r1, r0
 801b392:	ab03      	add	r3, sp, #12
 801b394:	4805      	ldr	r0, [pc, #20]	; (801b3ac <fiprintf+0x20>)
 801b396:	f853 2b04 	ldr.w	r2, [r3], #4
 801b39a:	6800      	ldr	r0, [r0, #0]
 801b39c:	9301      	str	r3, [sp, #4]
 801b39e:	f000 fa3f 	bl	801b820 <_vfiprintf_r>
 801b3a2:	b002      	add	sp, #8
 801b3a4:	f85d eb04 	ldr.w	lr, [sp], #4
 801b3a8:	b003      	add	sp, #12
 801b3aa:	4770      	bx	lr
 801b3ac:	20000024 	.word	0x20000024

0801b3b0 <malloc>:
 801b3b0:	4b02      	ldr	r3, [pc, #8]	; (801b3bc <malloc+0xc>)
 801b3b2:	4601      	mov	r1, r0
 801b3b4:	6818      	ldr	r0, [r3, #0]
 801b3b6:	f000 b853 	b.w	801b460 <_malloc_r>
 801b3ba:	bf00      	nop
 801b3bc:	20000024 	.word	0x20000024

0801b3c0 <_free_r>:
 801b3c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801b3c2:	2900      	cmp	r1, #0
 801b3c4:	d048      	beq.n	801b458 <_free_r+0x98>
 801b3c6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801b3ca:	9001      	str	r0, [sp, #4]
 801b3cc:	2b00      	cmp	r3, #0
 801b3ce:	f1a1 0404 	sub.w	r4, r1, #4
 801b3d2:	bfb8      	it	lt
 801b3d4:	18e4      	addlt	r4, r4, r3
 801b3d6:	f000 ffdd 	bl	801c394 <__malloc_lock>
 801b3da:	4a20      	ldr	r2, [pc, #128]	; (801b45c <_free_r+0x9c>)
 801b3dc:	9801      	ldr	r0, [sp, #4]
 801b3de:	6813      	ldr	r3, [r2, #0]
 801b3e0:	4615      	mov	r5, r2
 801b3e2:	b933      	cbnz	r3, 801b3f2 <_free_r+0x32>
 801b3e4:	6063      	str	r3, [r4, #4]
 801b3e6:	6014      	str	r4, [r2, #0]
 801b3e8:	b003      	add	sp, #12
 801b3ea:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801b3ee:	f000 bfd7 	b.w	801c3a0 <__malloc_unlock>
 801b3f2:	42a3      	cmp	r3, r4
 801b3f4:	d90b      	bls.n	801b40e <_free_r+0x4e>
 801b3f6:	6821      	ldr	r1, [r4, #0]
 801b3f8:	1862      	adds	r2, r4, r1
 801b3fa:	4293      	cmp	r3, r2
 801b3fc:	bf04      	itt	eq
 801b3fe:	681a      	ldreq	r2, [r3, #0]
 801b400:	685b      	ldreq	r3, [r3, #4]
 801b402:	6063      	str	r3, [r4, #4]
 801b404:	bf04      	itt	eq
 801b406:	1852      	addeq	r2, r2, r1
 801b408:	6022      	streq	r2, [r4, #0]
 801b40a:	602c      	str	r4, [r5, #0]
 801b40c:	e7ec      	b.n	801b3e8 <_free_r+0x28>
 801b40e:	461a      	mov	r2, r3
 801b410:	685b      	ldr	r3, [r3, #4]
 801b412:	b10b      	cbz	r3, 801b418 <_free_r+0x58>
 801b414:	42a3      	cmp	r3, r4
 801b416:	d9fa      	bls.n	801b40e <_free_r+0x4e>
 801b418:	6811      	ldr	r1, [r2, #0]
 801b41a:	1855      	adds	r5, r2, r1
 801b41c:	42a5      	cmp	r5, r4
 801b41e:	d10b      	bne.n	801b438 <_free_r+0x78>
 801b420:	6824      	ldr	r4, [r4, #0]
 801b422:	4421      	add	r1, r4
 801b424:	1854      	adds	r4, r2, r1
 801b426:	42a3      	cmp	r3, r4
 801b428:	6011      	str	r1, [r2, #0]
 801b42a:	d1dd      	bne.n	801b3e8 <_free_r+0x28>
 801b42c:	681c      	ldr	r4, [r3, #0]
 801b42e:	685b      	ldr	r3, [r3, #4]
 801b430:	6053      	str	r3, [r2, #4]
 801b432:	4421      	add	r1, r4
 801b434:	6011      	str	r1, [r2, #0]
 801b436:	e7d7      	b.n	801b3e8 <_free_r+0x28>
 801b438:	d902      	bls.n	801b440 <_free_r+0x80>
 801b43a:	230c      	movs	r3, #12
 801b43c:	6003      	str	r3, [r0, #0]
 801b43e:	e7d3      	b.n	801b3e8 <_free_r+0x28>
 801b440:	6825      	ldr	r5, [r4, #0]
 801b442:	1961      	adds	r1, r4, r5
 801b444:	428b      	cmp	r3, r1
 801b446:	bf04      	itt	eq
 801b448:	6819      	ldreq	r1, [r3, #0]
 801b44a:	685b      	ldreq	r3, [r3, #4]
 801b44c:	6063      	str	r3, [r4, #4]
 801b44e:	bf04      	itt	eq
 801b450:	1949      	addeq	r1, r1, r5
 801b452:	6021      	streq	r1, [r4, #0]
 801b454:	6054      	str	r4, [r2, #4]
 801b456:	e7c7      	b.n	801b3e8 <_free_r+0x28>
 801b458:	b003      	add	sp, #12
 801b45a:	bd30      	pop	{r4, r5, pc}
 801b45c:	2000a11c 	.word	0x2000a11c

0801b460 <_malloc_r>:
 801b460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b462:	1ccd      	adds	r5, r1, #3
 801b464:	f025 0503 	bic.w	r5, r5, #3
 801b468:	3508      	adds	r5, #8
 801b46a:	2d0c      	cmp	r5, #12
 801b46c:	bf38      	it	cc
 801b46e:	250c      	movcc	r5, #12
 801b470:	2d00      	cmp	r5, #0
 801b472:	4606      	mov	r6, r0
 801b474:	db01      	blt.n	801b47a <_malloc_r+0x1a>
 801b476:	42a9      	cmp	r1, r5
 801b478:	d903      	bls.n	801b482 <_malloc_r+0x22>
 801b47a:	230c      	movs	r3, #12
 801b47c:	6033      	str	r3, [r6, #0]
 801b47e:	2000      	movs	r0, #0
 801b480:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b482:	f000 ff87 	bl	801c394 <__malloc_lock>
 801b486:	4921      	ldr	r1, [pc, #132]	; (801b50c <_malloc_r+0xac>)
 801b488:	680a      	ldr	r2, [r1, #0]
 801b48a:	4614      	mov	r4, r2
 801b48c:	b99c      	cbnz	r4, 801b4b6 <_malloc_r+0x56>
 801b48e:	4f20      	ldr	r7, [pc, #128]	; (801b510 <_malloc_r+0xb0>)
 801b490:	683b      	ldr	r3, [r7, #0]
 801b492:	b923      	cbnz	r3, 801b49e <_malloc_r+0x3e>
 801b494:	4621      	mov	r1, r4
 801b496:	4630      	mov	r0, r6
 801b498:	f000 fc86 	bl	801bda8 <_sbrk_r>
 801b49c:	6038      	str	r0, [r7, #0]
 801b49e:	4629      	mov	r1, r5
 801b4a0:	4630      	mov	r0, r6
 801b4a2:	f000 fc81 	bl	801bda8 <_sbrk_r>
 801b4a6:	1c43      	adds	r3, r0, #1
 801b4a8:	d123      	bne.n	801b4f2 <_malloc_r+0x92>
 801b4aa:	230c      	movs	r3, #12
 801b4ac:	6033      	str	r3, [r6, #0]
 801b4ae:	4630      	mov	r0, r6
 801b4b0:	f000 ff76 	bl	801c3a0 <__malloc_unlock>
 801b4b4:	e7e3      	b.n	801b47e <_malloc_r+0x1e>
 801b4b6:	6823      	ldr	r3, [r4, #0]
 801b4b8:	1b5b      	subs	r3, r3, r5
 801b4ba:	d417      	bmi.n	801b4ec <_malloc_r+0x8c>
 801b4bc:	2b0b      	cmp	r3, #11
 801b4be:	d903      	bls.n	801b4c8 <_malloc_r+0x68>
 801b4c0:	6023      	str	r3, [r4, #0]
 801b4c2:	441c      	add	r4, r3
 801b4c4:	6025      	str	r5, [r4, #0]
 801b4c6:	e004      	b.n	801b4d2 <_malloc_r+0x72>
 801b4c8:	6863      	ldr	r3, [r4, #4]
 801b4ca:	42a2      	cmp	r2, r4
 801b4cc:	bf0c      	ite	eq
 801b4ce:	600b      	streq	r3, [r1, #0]
 801b4d0:	6053      	strne	r3, [r2, #4]
 801b4d2:	4630      	mov	r0, r6
 801b4d4:	f000 ff64 	bl	801c3a0 <__malloc_unlock>
 801b4d8:	f104 000b 	add.w	r0, r4, #11
 801b4dc:	1d23      	adds	r3, r4, #4
 801b4de:	f020 0007 	bic.w	r0, r0, #7
 801b4e2:	1ac2      	subs	r2, r0, r3
 801b4e4:	d0cc      	beq.n	801b480 <_malloc_r+0x20>
 801b4e6:	1a1b      	subs	r3, r3, r0
 801b4e8:	50a3      	str	r3, [r4, r2]
 801b4ea:	e7c9      	b.n	801b480 <_malloc_r+0x20>
 801b4ec:	4622      	mov	r2, r4
 801b4ee:	6864      	ldr	r4, [r4, #4]
 801b4f0:	e7cc      	b.n	801b48c <_malloc_r+0x2c>
 801b4f2:	1cc4      	adds	r4, r0, #3
 801b4f4:	f024 0403 	bic.w	r4, r4, #3
 801b4f8:	42a0      	cmp	r0, r4
 801b4fa:	d0e3      	beq.n	801b4c4 <_malloc_r+0x64>
 801b4fc:	1a21      	subs	r1, r4, r0
 801b4fe:	4630      	mov	r0, r6
 801b500:	f000 fc52 	bl	801bda8 <_sbrk_r>
 801b504:	3001      	adds	r0, #1
 801b506:	d1dd      	bne.n	801b4c4 <_malloc_r+0x64>
 801b508:	e7cf      	b.n	801b4aa <_malloc_r+0x4a>
 801b50a:	bf00      	nop
 801b50c:	2000a11c 	.word	0x2000a11c
 801b510:	2000a120 	.word	0x2000a120

0801b514 <__ssputs_r>:
 801b514:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b518:	688e      	ldr	r6, [r1, #8]
 801b51a:	429e      	cmp	r6, r3
 801b51c:	4682      	mov	sl, r0
 801b51e:	460c      	mov	r4, r1
 801b520:	4690      	mov	r8, r2
 801b522:	461f      	mov	r7, r3
 801b524:	d838      	bhi.n	801b598 <__ssputs_r+0x84>
 801b526:	898a      	ldrh	r2, [r1, #12]
 801b528:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801b52c:	d032      	beq.n	801b594 <__ssputs_r+0x80>
 801b52e:	6825      	ldr	r5, [r4, #0]
 801b530:	6909      	ldr	r1, [r1, #16]
 801b532:	eba5 0901 	sub.w	r9, r5, r1
 801b536:	6965      	ldr	r5, [r4, #20]
 801b538:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801b53c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801b540:	3301      	adds	r3, #1
 801b542:	444b      	add	r3, r9
 801b544:	106d      	asrs	r5, r5, #1
 801b546:	429d      	cmp	r5, r3
 801b548:	bf38      	it	cc
 801b54a:	461d      	movcc	r5, r3
 801b54c:	0553      	lsls	r3, r2, #21
 801b54e:	d531      	bpl.n	801b5b4 <__ssputs_r+0xa0>
 801b550:	4629      	mov	r1, r5
 801b552:	f7ff ff85 	bl	801b460 <_malloc_r>
 801b556:	4606      	mov	r6, r0
 801b558:	b950      	cbnz	r0, 801b570 <__ssputs_r+0x5c>
 801b55a:	230c      	movs	r3, #12
 801b55c:	f8ca 3000 	str.w	r3, [sl]
 801b560:	89a3      	ldrh	r3, [r4, #12]
 801b562:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801b566:	81a3      	strh	r3, [r4, #12]
 801b568:	f04f 30ff 	mov.w	r0, #4294967295
 801b56c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b570:	6921      	ldr	r1, [r4, #16]
 801b572:	464a      	mov	r2, r9
 801b574:	f7ff fe22 	bl	801b1bc <memcpy>
 801b578:	89a3      	ldrh	r3, [r4, #12]
 801b57a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801b57e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801b582:	81a3      	strh	r3, [r4, #12]
 801b584:	6126      	str	r6, [r4, #16]
 801b586:	6165      	str	r5, [r4, #20]
 801b588:	444e      	add	r6, r9
 801b58a:	eba5 0509 	sub.w	r5, r5, r9
 801b58e:	6026      	str	r6, [r4, #0]
 801b590:	60a5      	str	r5, [r4, #8]
 801b592:	463e      	mov	r6, r7
 801b594:	42be      	cmp	r6, r7
 801b596:	d900      	bls.n	801b59a <__ssputs_r+0x86>
 801b598:	463e      	mov	r6, r7
 801b59a:	4632      	mov	r2, r6
 801b59c:	6820      	ldr	r0, [r4, #0]
 801b59e:	4641      	mov	r1, r8
 801b5a0:	f7ff fe1a 	bl	801b1d8 <memmove>
 801b5a4:	68a3      	ldr	r3, [r4, #8]
 801b5a6:	6822      	ldr	r2, [r4, #0]
 801b5a8:	1b9b      	subs	r3, r3, r6
 801b5aa:	4432      	add	r2, r6
 801b5ac:	60a3      	str	r3, [r4, #8]
 801b5ae:	6022      	str	r2, [r4, #0]
 801b5b0:	2000      	movs	r0, #0
 801b5b2:	e7db      	b.n	801b56c <__ssputs_r+0x58>
 801b5b4:	462a      	mov	r2, r5
 801b5b6:	f000 fef9 	bl	801c3ac <_realloc_r>
 801b5ba:	4606      	mov	r6, r0
 801b5bc:	2800      	cmp	r0, #0
 801b5be:	d1e1      	bne.n	801b584 <__ssputs_r+0x70>
 801b5c0:	6921      	ldr	r1, [r4, #16]
 801b5c2:	4650      	mov	r0, sl
 801b5c4:	f7ff fefc 	bl	801b3c0 <_free_r>
 801b5c8:	e7c7      	b.n	801b55a <__ssputs_r+0x46>
	...

0801b5cc <_svfiprintf_r>:
 801b5cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b5d0:	4698      	mov	r8, r3
 801b5d2:	898b      	ldrh	r3, [r1, #12]
 801b5d4:	061b      	lsls	r3, r3, #24
 801b5d6:	b09d      	sub	sp, #116	; 0x74
 801b5d8:	4607      	mov	r7, r0
 801b5da:	460d      	mov	r5, r1
 801b5dc:	4614      	mov	r4, r2
 801b5de:	d50e      	bpl.n	801b5fe <_svfiprintf_r+0x32>
 801b5e0:	690b      	ldr	r3, [r1, #16]
 801b5e2:	b963      	cbnz	r3, 801b5fe <_svfiprintf_r+0x32>
 801b5e4:	2140      	movs	r1, #64	; 0x40
 801b5e6:	f7ff ff3b 	bl	801b460 <_malloc_r>
 801b5ea:	6028      	str	r0, [r5, #0]
 801b5ec:	6128      	str	r0, [r5, #16]
 801b5ee:	b920      	cbnz	r0, 801b5fa <_svfiprintf_r+0x2e>
 801b5f0:	230c      	movs	r3, #12
 801b5f2:	603b      	str	r3, [r7, #0]
 801b5f4:	f04f 30ff 	mov.w	r0, #4294967295
 801b5f8:	e0d1      	b.n	801b79e <_svfiprintf_r+0x1d2>
 801b5fa:	2340      	movs	r3, #64	; 0x40
 801b5fc:	616b      	str	r3, [r5, #20]
 801b5fe:	2300      	movs	r3, #0
 801b600:	9309      	str	r3, [sp, #36]	; 0x24
 801b602:	2320      	movs	r3, #32
 801b604:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801b608:	f8cd 800c 	str.w	r8, [sp, #12]
 801b60c:	2330      	movs	r3, #48	; 0x30
 801b60e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801b7b8 <_svfiprintf_r+0x1ec>
 801b612:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801b616:	f04f 0901 	mov.w	r9, #1
 801b61a:	4623      	mov	r3, r4
 801b61c:	469a      	mov	sl, r3
 801b61e:	f813 2b01 	ldrb.w	r2, [r3], #1
 801b622:	b10a      	cbz	r2, 801b628 <_svfiprintf_r+0x5c>
 801b624:	2a25      	cmp	r2, #37	; 0x25
 801b626:	d1f9      	bne.n	801b61c <_svfiprintf_r+0x50>
 801b628:	ebba 0b04 	subs.w	fp, sl, r4
 801b62c:	d00b      	beq.n	801b646 <_svfiprintf_r+0x7a>
 801b62e:	465b      	mov	r3, fp
 801b630:	4622      	mov	r2, r4
 801b632:	4629      	mov	r1, r5
 801b634:	4638      	mov	r0, r7
 801b636:	f7ff ff6d 	bl	801b514 <__ssputs_r>
 801b63a:	3001      	adds	r0, #1
 801b63c:	f000 80aa 	beq.w	801b794 <_svfiprintf_r+0x1c8>
 801b640:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801b642:	445a      	add	r2, fp
 801b644:	9209      	str	r2, [sp, #36]	; 0x24
 801b646:	f89a 3000 	ldrb.w	r3, [sl]
 801b64a:	2b00      	cmp	r3, #0
 801b64c:	f000 80a2 	beq.w	801b794 <_svfiprintf_r+0x1c8>
 801b650:	2300      	movs	r3, #0
 801b652:	f04f 32ff 	mov.w	r2, #4294967295
 801b656:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801b65a:	f10a 0a01 	add.w	sl, sl, #1
 801b65e:	9304      	str	r3, [sp, #16]
 801b660:	9307      	str	r3, [sp, #28]
 801b662:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801b666:	931a      	str	r3, [sp, #104]	; 0x68
 801b668:	4654      	mov	r4, sl
 801b66a:	2205      	movs	r2, #5
 801b66c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b670:	4851      	ldr	r0, [pc, #324]	; (801b7b8 <_svfiprintf_r+0x1ec>)
 801b672:	f7e4 fdbd 	bl	80001f0 <memchr>
 801b676:	9a04      	ldr	r2, [sp, #16]
 801b678:	b9d8      	cbnz	r0, 801b6b2 <_svfiprintf_r+0xe6>
 801b67a:	06d0      	lsls	r0, r2, #27
 801b67c:	bf44      	itt	mi
 801b67e:	2320      	movmi	r3, #32
 801b680:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801b684:	0711      	lsls	r1, r2, #28
 801b686:	bf44      	itt	mi
 801b688:	232b      	movmi	r3, #43	; 0x2b
 801b68a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801b68e:	f89a 3000 	ldrb.w	r3, [sl]
 801b692:	2b2a      	cmp	r3, #42	; 0x2a
 801b694:	d015      	beq.n	801b6c2 <_svfiprintf_r+0xf6>
 801b696:	9a07      	ldr	r2, [sp, #28]
 801b698:	4654      	mov	r4, sl
 801b69a:	2000      	movs	r0, #0
 801b69c:	f04f 0c0a 	mov.w	ip, #10
 801b6a0:	4621      	mov	r1, r4
 801b6a2:	f811 3b01 	ldrb.w	r3, [r1], #1
 801b6a6:	3b30      	subs	r3, #48	; 0x30
 801b6a8:	2b09      	cmp	r3, #9
 801b6aa:	d94e      	bls.n	801b74a <_svfiprintf_r+0x17e>
 801b6ac:	b1b0      	cbz	r0, 801b6dc <_svfiprintf_r+0x110>
 801b6ae:	9207      	str	r2, [sp, #28]
 801b6b0:	e014      	b.n	801b6dc <_svfiprintf_r+0x110>
 801b6b2:	eba0 0308 	sub.w	r3, r0, r8
 801b6b6:	fa09 f303 	lsl.w	r3, r9, r3
 801b6ba:	4313      	orrs	r3, r2
 801b6bc:	9304      	str	r3, [sp, #16]
 801b6be:	46a2      	mov	sl, r4
 801b6c0:	e7d2      	b.n	801b668 <_svfiprintf_r+0x9c>
 801b6c2:	9b03      	ldr	r3, [sp, #12]
 801b6c4:	1d19      	adds	r1, r3, #4
 801b6c6:	681b      	ldr	r3, [r3, #0]
 801b6c8:	9103      	str	r1, [sp, #12]
 801b6ca:	2b00      	cmp	r3, #0
 801b6cc:	bfbb      	ittet	lt
 801b6ce:	425b      	neglt	r3, r3
 801b6d0:	f042 0202 	orrlt.w	r2, r2, #2
 801b6d4:	9307      	strge	r3, [sp, #28]
 801b6d6:	9307      	strlt	r3, [sp, #28]
 801b6d8:	bfb8      	it	lt
 801b6da:	9204      	strlt	r2, [sp, #16]
 801b6dc:	7823      	ldrb	r3, [r4, #0]
 801b6de:	2b2e      	cmp	r3, #46	; 0x2e
 801b6e0:	d10c      	bne.n	801b6fc <_svfiprintf_r+0x130>
 801b6e2:	7863      	ldrb	r3, [r4, #1]
 801b6e4:	2b2a      	cmp	r3, #42	; 0x2a
 801b6e6:	d135      	bne.n	801b754 <_svfiprintf_r+0x188>
 801b6e8:	9b03      	ldr	r3, [sp, #12]
 801b6ea:	1d1a      	adds	r2, r3, #4
 801b6ec:	681b      	ldr	r3, [r3, #0]
 801b6ee:	9203      	str	r2, [sp, #12]
 801b6f0:	2b00      	cmp	r3, #0
 801b6f2:	bfb8      	it	lt
 801b6f4:	f04f 33ff 	movlt.w	r3, #4294967295
 801b6f8:	3402      	adds	r4, #2
 801b6fa:	9305      	str	r3, [sp, #20]
 801b6fc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801b7c8 <_svfiprintf_r+0x1fc>
 801b700:	7821      	ldrb	r1, [r4, #0]
 801b702:	2203      	movs	r2, #3
 801b704:	4650      	mov	r0, sl
 801b706:	f7e4 fd73 	bl	80001f0 <memchr>
 801b70a:	b140      	cbz	r0, 801b71e <_svfiprintf_r+0x152>
 801b70c:	2340      	movs	r3, #64	; 0x40
 801b70e:	eba0 000a 	sub.w	r0, r0, sl
 801b712:	fa03 f000 	lsl.w	r0, r3, r0
 801b716:	9b04      	ldr	r3, [sp, #16]
 801b718:	4303      	orrs	r3, r0
 801b71a:	3401      	adds	r4, #1
 801b71c:	9304      	str	r3, [sp, #16]
 801b71e:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b722:	4826      	ldr	r0, [pc, #152]	; (801b7bc <_svfiprintf_r+0x1f0>)
 801b724:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801b728:	2206      	movs	r2, #6
 801b72a:	f7e4 fd61 	bl	80001f0 <memchr>
 801b72e:	2800      	cmp	r0, #0
 801b730:	d038      	beq.n	801b7a4 <_svfiprintf_r+0x1d8>
 801b732:	4b23      	ldr	r3, [pc, #140]	; (801b7c0 <_svfiprintf_r+0x1f4>)
 801b734:	bb1b      	cbnz	r3, 801b77e <_svfiprintf_r+0x1b2>
 801b736:	9b03      	ldr	r3, [sp, #12]
 801b738:	3307      	adds	r3, #7
 801b73a:	f023 0307 	bic.w	r3, r3, #7
 801b73e:	3308      	adds	r3, #8
 801b740:	9303      	str	r3, [sp, #12]
 801b742:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b744:	4433      	add	r3, r6
 801b746:	9309      	str	r3, [sp, #36]	; 0x24
 801b748:	e767      	b.n	801b61a <_svfiprintf_r+0x4e>
 801b74a:	fb0c 3202 	mla	r2, ip, r2, r3
 801b74e:	460c      	mov	r4, r1
 801b750:	2001      	movs	r0, #1
 801b752:	e7a5      	b.n	801b6a0 <_svfiprintf_r+0xd4>
 801b754:	2300      	movs	r3, #0
 801b756:	3401      	adds	r4, #1
 801b758:	9305      	str	r3, [sp, #20]
 801b75a:	4619      	mov	r1, r3
 801b75c:	f04f 0c0a 	mov.w	ip, #10
 801b760:	4620      	mov	r0, r4
 801b762:	f810 2b01 	ldrb.w	r2, [r0], #1
 801b766:	3a30      	subs	r2, #48	; 0x30
 801b768:	2a09      	cmp	r2, #9
 801b76a:	d903      	bls.n	801b774 <_svfiprintf_r+0x1a8>
 801b76c:	2b00      	cmp	r3, #0
 801b76e:	d0c5      	beq.n	801b6fc <_svfiprintf_r+0x130>
 801b770:	9105      	str	r1, [sp, #20]
 801b772:	e7c3      	b.n	801b6fc <_svfiprintf_r+0x130>
 801b774:	fb0c 2101 	mla	r1, ip, r1, r2
 801b778:	4604      	mov	r4, r0
 801b77a:	2301      	movs	r3, #1
 801b77c:	e7f0      	b.n	801b760 <_svfiprintf_r+0x194>
 801b77e:	ab03      	add	r3, sp, #12
 801b780:	9300      	str	r3, [sp, #0]
 801b782:	462a      	mov	r2, r5
 801b784:	4b0f      	ldr	r3, [pc, #60]	; (801b7c4 <_svfiprintf_r+0x1f8>)
 801b786:	a904      	add	r1, sp, #16
 801b788:	4638      	mov	r0, r7
 801b78a:	f3af 8000 	nop.w
 801b78e:	1c42      	adds	r2, r0, #1
 801b790:	4606      	mov	r6, r0
 801b792:	d1d6      	bne.n	801b742 <_svfiprintf_r+0x176>
 801b794:	89ab      	ldrh	r3, [r5, #12]
 801b796:	065b      	lsls	r3, r3, #25
 801b798:	f53f af2c 	bmi.w	801b5f4 <_svfiprintf_r+0x28>
 801b79c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801b79e:	b01d      	add	sp, #116	; 0x74
 801b7a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b7a4:	ab03      	add	r3, sp, #12
 801b7a6:	9300      	str	r3, [sp, #0]
 801b7a8:	462a      	mov	r2, r5
 801b7aa:	4b06      	ldr	r3, [pc, #24]	; (801b7c4 <_svfiprintf_r+0x1f8>)
 801b7ac:	a904      	add	r1, sp, #16
 801b7ae:	4638      	mov	r0, r7
 801b7b0:	f000 f9d4 	bl	801bb5c <_printf_i>
 801b7b4:	e7eb      	b.n	801b78e <_svfiprintf_r+0x1c2>
 801b7b6:	bf00      	nop
 801b7b8:	080207ee 	.word	0x080207ee
 801b7bc:	080207f8 	.word	0x080207f8
 801b7c0:	00000000 	.word	0x00000000
 801b7c4:	0801b515 	.word	0x0801b515
 801b7c8:	080207f4 	.word	0x080207f4

0801b7cc <__sfputc_r>:
 801b7cc:	6893      	ldr	r3, [r2, #8]
 801b7ce:	3b01      	subs	r3, #1
 801b7d0:	2b00      	cmp	r3, #0
 801b7d2:	b410      	push	{r4}
 801b7d4:	6093      	str	r3, [r2, #8]
 801b7d6:	da08      	bge.n	801b7ea <__sfputc_r+0x1e>
 801b7d8:	6994      	ldr	r4, [r2, #24]
 801b7da:	42a3      	cmp	r3, r4
 801b7dc:	db01      	blt.n	801b7e2 <__sfputc_r+0x16>
 801b7de:	290a      	cmp	r1, #10
 801b7e0:	d103      	bne.n	801b7ea <__sfputc_r+0x1e>
 801b7e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b7e6:	f000 baef 	b.w	801bdc8 <__swbuf_r>
 801b7ea:	6813      	ldr	r3, [r2, #0]
 801b7ec:	1c58      	adds	r0, r3, #1
 801b7ee:	6010      	str	r0, [r2, #0]
 801b7f0:	7019      	strb	r1, [r3, #0]
 801b7f2:	4608      	mov	r0, r1
 801b7f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b7f8:	4770      	bx	lr

0801b7fa <__sfputs_r>:
 801b7fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b7fc:	4606      	mov	r6, r0
 801b7fe:	460f      	mov	r7, r1
 801b800:	4614      	mov	r4, r2
 801b802:	18d5      	adds	r5, r2, r3
 801b804:	42ac      	cmp	r4, r5
 801b806:	d101      	bne.n	801b80c <__sfputs_r+0x12>
 801b808:	2000      	movs	r0, #0
 801b80a:	e007      	b.n	801b81c <__sfputs_r+0x22>
 801b80c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b810:	463a      	mov	r2, r7
 801b812:	4630      	mov	r0, r6
 801b814:	f7ff ffda 	bl	801b7cc <__sfputc_r>
 801b818:	1c43      	adds	r3, r0, #1
 801b81a:	d1f3      	bne.n	801b804 <__sfputs_r+0xa>
 801b81c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801b820 <_vfiprintf_r>:
 801b820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b824:	460d      	mov	r5, r1
 801b826:	b09d      	sub	sp, #116	; 0x74
 801b828:	4614      	mov	r4, r2
 801b82a:	4698      	mov	r8, r3
 801b82c:	4606      	mov	r6, r0
 801b82e:	b118      	cbz	r0, 801b838 <_vfiprintf_r+0x18>
 801b830:	6983      	ldr	r3, [r0, #24]
 801b832:	b90b      	cbnz	r3, 801b838 <_vfiprintf_r+0x18>
 801b834:	f000 fcaa 	bl	801c18c <__sinit>
 801b838:	4b89      	ldr	r3, [pc, #548]	; (801ba60 <_vfiprintf_r+0x240>)
 801b83a:	429d      	cmp	r5, r3
 801b83c:	d11b      	bne.n	801b876 <_vfiprintf_r+0x56>
 801b83e:	6875      	ldr	r5, [r6, #4]
 801b840:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801b842:	07d9      	lsls	r1, r3, #31
 801b844:	d405      	bmi.n	801b852 <_vfiprintf_r+0x32>
 801b846:	89ab      	ldrh	r3, [r5, #12]
 801b848:	059a      	lsls	r2, r3, #22
 801b84a:	d402      	bmi.n	801b852 <_vfiprintf_r+0x32>
 801b84c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801b84e:	f000 fd3b 	bl	801c2c8 <__retarget_lock_acquire_recursive>
 801b852:	89ab      	ldrh	r3, [r5, #12]
 801b854:	071b      	lsls	r3, r3, #28
 801b856:	d501      	bpl.n	801b85c <_vfiprintf_r+0x3c>
 801b858:	692b      	ldr	r3, [r5, #16]
 801b85a:	b9eb      	cbnz	r3, 801b898 <_vfiprintf_r+0x78>
 801b85c:	4629      	mov	r1, r5
 801b85e:	4630      	mov	r0, r6
 801b860:	f000 fb04 	bl	801be6c <__swsetup_r>
 801b864:	b1c0      	cbz	r0, 801b898 <_vfiprintf_r+0x78>
 801b866:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801b868:	07dc      	lsls	r4, r3, #31
 801b86a:	d50e      	bpl.n	801b88a <_vfiprintf_r+0x6a>
 801b86c:	f04f 30ff 	mov.w	r0, #4294967295
 801b870:	b01d      	add	sp, #116	; 0x74
 801b872:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b876:	4b7b      	ldr	r3, [pc, #492]	; (801ba64 <_vfiprintf_r+0x244>)
 801b878:	429d      	cmp	r5, r3
 801b87a:	d101      	bne.n	801b880 <_vfiprintf_r+0x60>
 801b87c:	68b5      	ldr	r5, [r6, #8]
 801b87e:	e7df      	b.n	801b840 <_vfiprintf_r+0x20>
 801b880:	4b79      	ldr	r3, [pc, #484]	; (801ba68 <_vfiprintf_r+0x248>)
 801b882:	429d      	cmp	r5, r3
 801b884:	bf08      	it	eq
 801b886:	68f5      	ldreq	r5, [r6, #12]
 801b888:	e7da      	b.n	801b840 <_vfiprintf_r+0x20>
 801b88a:	89ab      	ldrh	r3, [r5, #12]
 801b88c:	0598      	lsls	r0, r3, #22
 801b88e:	d4ed      	bmi.n	801b86c <_vfiprintf_r+0x4c>
 801b890:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801b892:	f000 fd1a 	bl	801c2ca <__retarget_lock_release_recursive>
 801b896:	e7e9      	b.n	801b86c <_vfiprintf_r+0x4c>
 801b898:	2300      	movs	r3, #0
 801b89a:	9309      	str	r3, [sp, #36]	; 0x24
 801b89c:	2320      	movs	r3, #32
 801b89e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801b8a2:	f8cd 800c 	str.w	r8, [sp, #12]
 801b8a6:	2330      	movs	r3, #48	; 0x30
 801b8a8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801ba6c <_vfiprintf_r+0x24c>
 801b8ac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801b8b0:	f04f 0901 	mov.w	r9, #1
 801b8b4:	4623      	mov	r3, r4
 801b8b6:	469a      	mov	sl, r3
 801b8b8:	f813 2b01 	ldrb.w	r2, [r3], #1
 801b8bc:	b10a      	cbz	r2, 801b8c2 <_vfiprintf_r+0xa2>
 801b8be:	2a25      	cmp	r2, #37	; 0x25
 801b8c0:	d1f9      	bne.n	801b8b6 <_vfiprintf_r+0x96>
 801b8c2:	ebba 0b04 	subs.w	fp, sl, r4
 801b8c6:	d00b      	beq.n	801b8e0 <_vfiprintf_r+0xc0>
 801b8c8:	465b      	mov	r3, fp
 801b8ca:	4622      	mov	r2, r4
 801b8cc:	4629      	mov	r1, r5
 801b8ce:	4630      	mov	r0, r6
 801b8d0:	f7ff ff93 	bl	801b7fa <__sfputs_r>
 801b8d4:	3001      	adds	r0, #1
 801b8d6:	f000 80aa 	beq.w	801ba2e <_vfiprintf_r+0x20e>
 801b8da:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801b8dc:	445a      	add	r2, fp
 801b8de:	9209      	str	r2, [sp, #36]	; 0x24
 801b8e0:	f89a 3000 	ldrb.w	r3, [sl]
 801b8e4:	2b00      	cmp	r3, #0
 801b8e6:	f000 80a2 	beq.w	801ba2e <_vfiprintf_r+0x20e>
 801b8ea:	2300      	movs	r3, #0
 801b8ec:	f04f 32ff 	mov.w	r2, #4294967295
 801b8f0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801b8f4:	f10a 0a01 	add.w	sl, sl, #1
 801b8f8:	9304      	str	r3, [sp, #16]
 801b8fa:	9307      	str	r3, [sp, #28]
 801b8fc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801b900:	931a      	str	r3, [sp, #104]	; 0x68
 801b902:	4654      	mov	r4, sl
 801b904:	2205      	movs	r2, #5
 801b906:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b90a:	4858      	ldr	r0, [pc, #352]	; (801ba6c <_vfiprintf_r+0x24c>)
 801b90c:	f7e4 fc70 	bl	80001f0 <memchr>
 801b910:	9a04      	ldr	r2, [sp, #16]
 801b912:	b9d8      	cbnz	r0, 801b94c <_vfiprintf_r+0x12c>
 801b914:	06d1      	lsls	r1, r2, #27
 801b916:	bf44      	itt	mi
 801b918:	2320      	movmi	r3, #32
 801b91a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801b91e:	0713      	lsls	r3, r2, #28
 801b920:	bf44      	itt	mi
 801b922:	232b      	movmi	r3, #43	; 0x2b
 801b924:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801b928:	f89a 3000 	ldrb.w	r3, [sl]
 801b92c:	2b2a      	cmp	r3, #42	; 0x2a
 801b92e:	d015      	beq.n	801b95c <_vfiprintf_r+0x13c>
 801b930:	9a07      	ldr	r2, [sp, #28]
 801b932:	4654      	mov	r4, sl
 801b934:	2000      	movs	r0, #0
 801b936:	f04f 0c0a 	mov.w	ip, #10
 801b93a:	4621      	mov	r1, r4
 801b93c:	f811 3b01 	ldrb.w	r3, [r1], #1
 801b940:	3b30      	subs	r3, #48	; 0x30
 801b942:	2b09      	cmp	r3, #9
 801b944:	d94e      	bls.n	801b9e4 <_vfiprintf_r+0x1c4>
 801b946:	b1b0      	cbz	r0, 801b976 <_vfiprintf_r+0x156>
 801b948:	9207      	str	r2, [sp, #28]
 801b94a:	e014      	b.n	801b976 <_vfiprintf_r+0x156>
 801b94c:	eba0 0308 	sub.w	r3, r0, r8
 801b950:	fa09 f303 	lsl.w	r3, r9, r3
 801b954:	4313      	orrs	r3, r2
 801b956:	9304      	str	r3, [sp, #16]
 801b958:	46a2      	mov	sl, r4
 801b95a:	e7d2      	b.n	801b902 <_vfiprintf_r+0xe2>
 801b95c:	9b03      	ldr	r3, [sp, #12]
 801b95e:	1d19      	adds	r1, r3, #4
 801b960:	681b      	ldr	r3, [r3, #0]
 801b962:	9103      	str	r1, [sp, #12]
 801b964:	2b00      	cmp	r3, #0
 801b966:	bfbb      	ittet	lt
 801b968:	425b      	neglt	r3, r3
 801b96a:	f042 0202 	orrlt.w	r2, r2, #2
 801b96e:	9307      	strge	r3, [sp, #28]
 801b970:	9307      	strlt	r3, [sp, #28]
 801b972:	bfb8      	it	lt
 801b974:	9204      	strlt	r2, [sp, #16]
 801b976:	7823      	ldrb	r3, [r4, #0]
 801b978:	2b2e      	cmp	r3, #46	; 0x2e
 801b97a:	d10c      	bne.n	801b996 <_vfiprintf_r+0x176>
 801b97c:	7863      	ldrb	r3, [r4, #1]
 801b97e:	2b2a      	cmp	r3, #42	; 0x2a
 801b980:	d135      	bne.n	801b9ee <_vfiprintf_r+0x1ce>
 801b982:	9b03      	ldr	r3, [sp, #12]
 801b984:	1d1a      	adds	r2, r3, #4
 801b986:	681b      	ldr	r3, [r3, #0]
 801b988:	9203      	str	r2, [sp, #12]
 801b98a:	2b00      	cmp	r3, #0
 801b98c:	bfb8      	it	lt
 801b98e:	f04f 33ff 	movlt.w	r3, #4294967295
 801b992:	3402      	adds	r4, #2
 801b994:	9305      	str	r3, [sp, #20]
 801b996:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801ba7c <_vfiprintf_r+0x25c>
 801b99a:	7821      	ldrb	r1, [r4, #0]
 801b99c:	2203      	movs	r2, #3
 801b99e:	4650      	mov	r0, sl
 801b9a0:	f7e4 fc26 	bl	80001f0 <memchr>
 801b9a4:	b140      	cbz	r0, 801b9b8 <_vfiprintf_r+0x198>
 801b9a6:	2340      	movs	r3, #64	; 0x40
 801b9a8:	eba0 000a 	sub.w	r0, r0, sl
 801b9ac:	fa03 f000 	lsl.w	r0, r3, r0
 801b9b0:	9b04      	ldr	r3, [sp, #16]
 801b9b2:	4303      	orrs	r3, r0
 801b9b4:	3401      	adds	r4, #1
 801b9b6:	9304      	str	r3, [sp, #16]
 801b9b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b9bc:	482c      	ldr	r0, [pc, #176]	; (801ba70 <_vfiprintf_r+0x250>)
 801b9be:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801b9c2:	2206      	movs	r2, #6
 801b9c4:	f7e4 fc14 	bl	80001f0 <memchr>
 801b9c8:	2800      	cmp	r0, #0
 801b9ca:	d03f      	beq.n	801ba4c <_vfiprintf_r+0x22c>
 801b9cc:	4b29      	ldr	r3, [pc, #164]	; (801ba74 <_vfiprintf_r+0x254>)
 801b9ce:	bb1b      	cbnz	r3, 801ba18 <_vfiprintf_r+0x1f8>
 801b9d0:	9b03      	ldr	r3, [sp, #12]
 801b9d2:	3307      	adds	r3, #7
 801b9d4:	f023 0307 	bic.w	r3, r3, #7
 801b9d8:	3308      	adds	r3, #8
 801b9da:	9303      	str	r3, [sp, #12]
 801b9dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b9de:	443b      	add	r3, r7
 801b9e0:	9309      	str	r3, [sp, #36]	; 0x24
 801b9e2:	e767      	b.n	801b8b4 <_vfiprintf_r+0x94>
 801b9e4:	fb0c 3202 	mla	r2, ip, r2, r3
 801b9e8:	460c      	mov	r4, r1
 801b9ea:	2001      	movs	r0, #1
 801b9ec:	e7a5      	b.n	801b93a <_vfiprintf_r+0x11a>
 801b9ee:	2300      	movs	r3, #0
 801b9f0:	3401      	adds	r4, #1
 801b9f2:	9305      	str	r3, [sp, #20]
 801b9f4:	4619      	mov	r1, r3
 801b9f6:	f04f 0c0a 	mov.w	ip, #10
 801b9fa:	4620      	mov	r0, r4
 801b9fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 801ba00:	3a30      	subs	r2, #48	; 0x30
 801ba02:	2a09      	cmp	r2, #9
 801ba04:	d903      	bls.n	801ba0e <_vfiprintf_r+0x1ee>
 801ba06:	2b00      	cmp	r3, #0
 801ba08:	d0c5      	beq.n	801b996 <_vfiprintf_r+0x176>
 801ba0a:	9105      	str	r1, [sp, #20]
 801ba0c:	e7c3      	b.n	801b996 <_vfiprintf_r+0x176>
 801ba0e:	fb0c 2101 	mla	r1, ip, r1, r2
 801ba12:	4604      	mov	r4, r0
 801ba14:	2301      	movs	r3, #1
 801ba16:	e7f0      	b.n	801b9fa <_vfiprintf_r+0x1da>
 801ba18:	ab03      	add	r3, sp, #12
 801ba1a:	9300      	str	r3, [sp, #0]
 801ba1c:	462a      	mov	r2, r5
 801ba1e:	4b16      	ldr	r3, [pc, #88]	; (801ba78 <_vfiprintf_r+0x258>)
 801ba20:	a904      	add	r1, sp, #16
 801ba22:	4630      	mov	r0, r6
 801ba24:	f3af 8000 	nop.w
 801ba28:	4607      	mov	r7, r0
 801ba2a:	1c78      	adds	r0, r7, #1
 801ba2c:	d1d6      	bne.n	801b9dc <_vfiprintf_r+0x1bc>
 801ba2e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801ba30:	07d9      	lsls	r1, r3, #31
 801ba32:	d405      	bmi.n	801ba40 <_vfiprintf_r+0x220>
 801ba34:	89ab      	ldrh	r3, [r5, #12]
 801ba36:	059a      	lsls	r2, r3, #22
 801ba38:	d402      	bmi.n	801ba40 <_vfiprintf_r+0x220>
 801ba3a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801ba3c:	f000 fc45 	bl	801c2ca <__retarget_lock_release_recursive>
 801ba40:	89ab      	ldrh	r3, [r5, #12]
 801ba42:	065b      	lsls	r3, r3, #25
 801ba44:	f53f af12 	bmi.w	801b86c <_vfiprintf_r+0x4c>
 801ba48:	9809      	ldr	r0, [sp, #36]	; 0x24
 801ba4a:	e711      	b.n	801b870 <_vfiprintf_r+0x50>
 801ba4c:	ab03      	add	r3, sp, #12
 801ba4e:	9300      	str	r3, [sp, #0]
 801ba50:	462a      	mov	r2, r5
 801ba52:	4b09      	ldr	r3, [pc, #36]	; (801ba78 <_vfiprintf_r+0x258>)
 801ba54:	a904      	add	r1, sp, #16
 801ba56:	4630      	mov	r0, r6
 801ba58:	f000 f880 	bl	801bb5c <_printf_i>
 801ba5c:	e7e4      	b.n	801ba28 <_vfiprintf_r+0x208>
 801ba5e:	bf00      	nop
 801ba60:	08020844 	.word	0x08020844
 801ba64:	08020864 	.word	0x08020864
 801ba68:	08020824 	.word	0x08020824
 801ba6c:	080207ee 	.word	0x080207ee
 801ba70:	080207f8 	.word	0x080207f8
 801ba74:	00000000 	.word	0x00000000
 801ba78:	0801b7fb 	.word	0x0801b7fb
 801ba7c:	080207f4 	.word	0x080207f4

0801ba80 <_printf_common>:
 801ba80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ba84:	4616      	mov	r6, r2
 801ba86:	4699      	mov	r9, r3
 801ba88:	688a      	ldr	r2, [r1, #8]
 801ba8a:	690b      	ldr	r3, [r1, #16]
 801ba8c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801ba90:	4293      	cmp	r3, r2
 801ba92:	bfb8      	it	lt
 801ba94:	4613      	movlt	r3, r2
 801ba96:	6033      	str	r3, [r6, #0]
 801ba98:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801ba9c:	4607      	mov	r7, r0
 801ba9e:	460c      	mov	r4, r1
 801baa0:	b10a      	cbz	r2, 801baa6 <_printf_common+0x26>
 801baa2:	3301      	adds	r3, #1
 801baa4:	6033      	str	r3, [r6, #0]
 801baa6:	6823      	ldr	r3, [r4, #0]
 801baa8:	0699      	lsls	r1, r3, #26
 801baaa:	bf42      	ittt	mi
 801baac:	6833      	ldrmi	r3, [r6, #0]
 801baae:	3302      	addmi	r3, #2
 801bab0:	6033      	strmi	r3, [r6, #0]
 801bab2:	6825      	ldr	r5, [r4, #0]
 801bab4:	f015 0506 	ands.w	r5, r5, #6
 801bab8:	d106      	bne.n	801bac8 <_printf_common+0x48>
 801baba:	f104 0a19 	add.w	sl, r4, #25
 801babe:	68e3      	ldr	r3, [r4, #12]
 801bac0:	6832      	ldr	r2, [r6, #0]
 801bac2:	1a9b      	subs	r3, r3, r2
 801bac4:	42ab      	cmp	r3, r5
 801bac6:	dc26      	bgt.n	801bb16 <_printf_common+0x96>
 801bac8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801bacc:	1e13      	subs	r3, r2, #0
 801bace:	6822      	ldr	r2, [r4, #0]
 801bad0:	bf18      	it	ne
 801bad2:	2301      	movne	r3, #1
 801bad4:	0692      	lsls	r2, r2, #26
 801bad6:	d42b      	bmi.n	801bb30 <_printf_common+0xb0>
 801bad8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801badc:	4649      	mov	r1, r9
 801bade:	4638      	mov	r0, r7
 801bae0:	47c0      	blx	r8
 801bae2:	3001      	adds	r0, #1
 801bae4:	d01e      	beq.n	801bb24 <_printf_common+0xa4>
 801bae6:	6823      	ldr	r3, [r4, #0]
 801bae8:	68e5      	ldr	r5, [r4, #12]
 801baea:	6832      	ldr	r2, [r6, #0]
 801baec:	f003 0306 	and.w	r3, r3, #6
 801baf0:	2b04      	cmp	r3, #4
 801baf2:	bf08      	it	eq
 801baf4:	1aad      	subeq	r5, r5, r2
 801baf6:	68a3      	ldr	r3, [r4, #8]
 801baf8:	6922      	ldr	r2, [r4, #16]
 801bafa:	bf0c      	ite	eq
 801bafc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801bb00:	2500      	movne	r5, #0
 801bb02:	4293      	cmp	r3, r2
 801bb04:	bfc4      	itt	gt
 801bb06:	1a9b      	subgt	r3, r3, r2
 801bb08:	18ed      	addgt	r5, r5, r3
 801bb0a:	2600      	movs	r6, #0
 801bb0c:	341a      	adds	r4, #26
 801bb0e:	42b5      	cmp	r5, r6
 801bb10:	d11a      	bne.n	801bb48 <_printf_common+0xc8>
 801bb12:	2000      	movs	r0, #0
 801bb14:	e008      	b.n	801bb28 <_printf_common+0xa8>
 801bb16:	2301      	movs	r3, #1
 801bb18:	4652      	mov	r2, sl
 801bb1a:	4649      	mov	r1, r9
 801bb1c:	4638      	mov	r0, r7
 801bb1e:	47c0      	blx	r8
 801bb20:	3001      	adds	r0, #1
 801bb22:	d103      	bne.n	801bb2c <_printf_common+0xac>
 801bb24:	f04f 30ff 	mov.w	r0, #4294967295
 801bb28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bb2c:	3501      	adds	r5, #1
 801bb2e:	e7c6      	b.n	801babe <_printf_common+0x3e>
 801bb30:	18e1      	adds	r1, r4, r3
 801bb32:	1c5a      	adds	r2, r3, #1
 801bb34:	2030      	movs	r0, #48	; 0x30
 801bb36:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801bb3a:	4422      	add	r2, r4
 801bb3c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801bb40:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801bb44:	3302      	adds	r3, #2
 801bb46:	e7c7      	b.n	801bad8 <_printf_common+0x58>
 801bb48:	2301      	movs	r3, #1
 801bb4a:	4622      	mov	r2, r4
 801bb4c:	4649      	mov	r1, r9
 801bb4e:	4638      	mov	r0, r7
 801bb50:	47c0      	blx	r8
 801bb52:	3001      	adds	r0, #1
 801bb54:	d0e6      	beq.n	801bb24 <_printf_common+0xa4>
 801bb56:	3601      	adds	r6, #1
 801bb58:	e7d9      	b.n	801bb0e <_printf_common+0x8e>
	...

0801bb5c <_printf_i>:
 801bb5c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801bb60:	460c      	mov	r4, r1
 801bb62:	4691      	mov	r9, r2
 801bb64:	7e27      	ldrb	r7, [r4, #24]
 801bb66:	990c      	ldr	r1, [sp, #48]	; 0x30
 801bb68:	2f78      	cmp	r7, #120	; 0x78
 801bb6a:	4680      	mov	r8, r0
 801bb6c:	469a      	mov	sl, r3
 801bb6e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801bb72:	d807      	bhi.n	801bb84 <_printf_i+0x28>
 801bb74:	2f62      	cmp	r7, #98	; 0x62
 801bb76:	d80a      	bhi.n	801bb8e <_printf_i+0x32>
 801bb78:	2f00      	cmp	r7, #0
 801bb7a:	f000 80d8 	beq.w	801bd2e <_printf_i+0x1d2>
 801bb7e:	2f58      	cmp	r7, #88	; 0x58
 801bb80:	f000 80a3 	beq.w	801bcca <_printf_i+0x16e>
 801bb84:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801bb88:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801bb8c:	e03a      	b.n	801bc04 <_printf_i+0xa8>
 801bb8e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801bb92:	2b15      	cmp	r3, #21
 801bb94:	d8f6      	bhi.n	801bb84 <_printf_i+0x28>
 801bb96:	a001      	add	r0, pc, #4	; (adr r0, 801bb9c <_printf_i+0x40>)
 801bb98:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 801bb9c:	0801bbf5 	.word	0x0801bbf5
 801bba0:	0801bc09 	.word	0x0801bc09
 801bba4:	0801bb85 	.word	0x0801bb85
 801bba8:	0801bb85 	.word	0x0801bb85
 801bbac:	0801bb85 	.word	0x0801bb85
 801bbb0:	0801bb85 	.word	0x0801bb85
 801bbb4:	0801bc09 	.word	0x0801bc09
 801bbb8:	0801bb85 	.word	0x0801bb85
 801bbbc:	0801bb85 	.word	0x0801bb85
 801bbc0:	0801bb85 	.word	0x0801bb85
 801bbc4:	0801bb85 	.word	0x0801bb85
 801bbc8:	0801bd15 	.word	0x0801bd15
 801bbcc:	0801bc39 	.word	0x0801bc39
 801bbd0:	0801bcf7 	.word	0x0801bcf7
 801bbd4:	0801bb85 	.word	0x0801bb85
 801bbd8:	0801bb85 	.word	0x0801bb85
 801bbdc:	0801bd37 	.word	0x0801bd37
 801bbe0:	0801bb85 	.word	0x0801bb85
 801bbe4:	0801bc39 	.word	0x0801bc39
 801bbe8:	0801bb85 	.word	0x0801bb85
 801bbec:	0801bb85 	.word	0x0801bb85
 801bbf0:	0801bcff 	.word	0x0801bcff
 801bbf4:	680b      	ldr	r3, [r1, #0]
 801bbf6:	1d1a      	adds	r2, r3, #4
 801bbf8:	681b      	ldr	r3, [r3, #0]
 801bbfa:	600a      	str	r2, [r1, #0]
 801bbfc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801bc00:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801bc04:	2301      	movs	r3, #1
 801bc06:	e0a3      	b.n	801bd50 <_printf_i+0x1f4>
 801bc08:	6825      	ldr	r5, [r4, #0]
 801bc0a:	6808      	ldr	r0, [r1, #0]
 801bc0c:	062e      	lsls	r6, r5, #24
 801bc0e:	f100 0304 	add.w	r3, r0, #4
 801bc12:	d50a      	bpl.n	801bc2a <_printf_i+0xce>
 801bc14:	6805      	ldr	r5, [r0, #0]
 801bc16:	600b      	str	r3, [r1, #0]
 801bc18:	2d00      	cmp	r5, #0
 801bc1a:	da03      	bge.n	801bc24 <_printf_i+0xc8>
 801bc1c:	232d      	movs	r3, #45	; 0x2d
 801bc1e:	426d      	negs	r5, r5
 801bc20:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801bc24:	485e      	ldr	r0, [pc, #376]	; (801bda0 <_printf_i+0x244>)
 801bc26:	230a      	movs	r3, #10
 801bc28:	e019      	b.n	801bc5e <_printf_i+0x102>
 801bc2a:	f015 0f40 	tst.w	r5, #64	; 0x40
 801bc2e:	6805      	ldr	r5, [r0, #0]
 801bc30:	600b      	str	r3, [r1, #0]
 801bc32:	bf18      	it	ne
 801bc34:	b22d      	sxthne	r5, r5
 801bc36:	e7ef      	b.n	801bc18 <_printf_i+0xbc>
 801bc38:	680b      	ldr	r3, [r1, #0]
 801bc3a:	6825      	ldr	r5, [r4, #0]
 801bc3c:	1d18      	adds	r0, r3, #4
 801bc3e:	6008      	str	r0, [r1, #0]
 801bc40:	0628      	lsls	r0, r5, #24
 801bc42:	d501      	bpl.n	801bc48 <_printf_i+0xec>
 801bc44:	681d      	ldr	r5, [r3, #0]
 801bc46:	e002      	b.n	801bc4e <_printf_i+0xf2>
 801bc48:	0669      	lsls	r1, r5, #25
 801bc4a:	d5fb      	bpl.n	801bc44 <_printf_i+0xe8>
 801bc4c:	881d      	ldrh	r5, [r3, #0]
 801bc4e:	4854      	ldr	r0, [pc, #336]	; (801bda0 <_printf_i+0x244>)
 801bc50:	2f6f      	cmp	r7, #111	; 0x6f
 801bc52:	bf0c      	ite	eq
 801bc54:	2308      	moveq	r3, #8
 801bc56:	230a      	movne	r3, #10
 801bc58:	2100      	movs	r1, #0
 801bc5a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801bc5e:	6866      	ldr	r6, [r4, #4]
 801bc60:	60a6      	str	r6, [r4, #8]
 801bc62:	2e00      	cmp	r6, #0
 801bc64:	bfa2      	ittt	ge
 801bc66:	6821      	ldrge	r1, [r4, #0]
 801bc68:	f021 0104 	bicge.w	r1, r1, #4
 801bc6c:	6021      	strge	r1, [r4, #0]
 801bc6e:	b90d      	cbnz	r5, 801bc74 <_printf_i+0x118>
 801bc70:	2e00      	cmp	r6, #0
 801bc72:	d04d      	beq.n	801bd10 <_printf_i+0x1b4>
 801bc74:	4616      	mov	r6, r2
 801bc76:	fbb5 f1f3 	udiv	r1, r5, r3
 801bc7a:	fb03 5711 	mls	r7, r3, r1, r5
 801bc7e:	5dc7      	ldrb	r7, [r0, r7]
 801bc80:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801bc84:	462f      	mov	r7, r5
 801bc86:	42bb      	cmp	r3, r7
 801bc88:	460d      	mov	r5, r1
 801bc8a:	d9f4      	bls.n	801bc76 <_printf_i+0x11a>
 801bc8c:	2b08      	cmp	r3, #8
 801bc8e:	d10b      	bne.n	801bca8 <_printf_i+0x14c>
 801bc90:	6823      	ldr	r3, [r4, #0]
 801bc92:	07df      	lsls	r7, r3, #31
 801bc94:	d508      	bpl.n	801bca8 <_printf_i+0x14c>
 801bc96:	6923      	ldr	r3, [r4, #16]
 801bc98:	6861      	ldr	r1, [r4, #4]
 801bc9a:	4299      	cmp	r1, r3
 801bc9c:	bfde      	ittt	le
 801bc9e:	2330      	movle	r3, #48	; 0x30
 801bca0:	f806 3c01 	strble.w	r3, [r6, #-1]
 801bca4:	f106 36ff 	addle.w	r6, r6, #4294967295
 801bca8:	1b92      	subs	r2, r2, r6
 801bcaa:	6122      	str	r2, [r4, #16]
 801bcac:	f8cd a000 	str.w	sl, [sp]
 801bcb0:	464b      	mov	r3, r9
 801bcb2:	aa03      	add	r2, sp, #12
 801bcb4:	4621      	mov	r1, r4
 801bcb6:	4640      	mov	r0, r8
 801bcb8:	f7ff fee2 	bl	801ba80 <_printf_common>
 801bcbc:	3001      	adds	r0, #1
 801bcbe:	d14c      	bne.n	801bd5a <_printf_i+0x1fe>
 801bcc0:	f04f 30ff 	mov.w	r0, #4294967295
 801bcc4:	b004      	add	sp, #16
 801bcc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bcca:	4835      	ldr	r0, [pc, #212]	; (801bda0 <_printf_i+0x244>)
 801bccc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801bcd0:	6823      	ldr	r3, [r4, #0]
 801bcd2:	680e      	ldr	r6, [r1, #0]
 801bcd4:	061f      	lsls	r7, r3, #24
 801bcd6:	f856 5b04 	ldr.w	r5, [r6], #4
 801bcda:	600e      	str	r6, [r1, #0]
 801bcdc:	d514      	bpl.n	801bd08 <_printf_i+0x1ac>
 801bcde:	07d9      	lsls	r1, r3, #31
 801bce0:	bf44      	itt	mi
 801bce2:	f043 0320 	orrmi.w	r3, r3, #32
 801bce6:	6023      	strmi	r3, [r4, #0]
 801bce8:	b91d      	cbnz	r5, 801bcf2 <_printf_i+0x196>
 801bcea:	6823      	ldr	r3, [r4, #0]
 801bcec:	f023 0320 	bic.w	r3, r3, #32
 801bcf0:	6023      	str	r3, [r4, #0]
 801bcf2:	2310      	movs	r3, #16
 801bcf4:	e7b0      	b.n	801bc58 <_printf_i+0xfc>
 801bcf6:	6823      	ldr	r3, [r4, #0]
 801bcf8:	f043 0320 	orr.w	r3, r3, #32
 801bcfc:	6023      	str	r3, [r4, #0]
 801bcfe:	2378      	movs	r3, #120	; 0x78
 801bd00:	4828      	ldr	r0, [pc, #160]	; (801bda4 <_printf_i+0x248>)
 801bd02:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801bd06:	e7e3      	b.n	801bcd0 <_printf_i+0x174>
 801bd08:	065e      	lsls	r6, r3, #25
 801bd0a:	bf48      	it	mi
 801bd0c:	b2ad      	uxthmi	r5, r5
 801bd0e:	e7e6      	b.n	801bcde <_printf_i+0x182>
 801bd10:	4616      	mov	r6, r2
 801bd12:	e7bb      	b.n	801bc8c <_printf_i+0x130>
 801bd14:	680b      	ldr	r3, [r1, #0]
 801bd16:	6826      	ldr	r6, [r4, #0]
 801bd18:	6960      	ldr	r0, [r4, #20]
 801bd1a:	1d1d      	adds	r5, r3, #4
 801bd1c:	600d      	str	r5, [r1, #0]
 801bd1e:	0635      	lsls	r5, r6, #24
 801bd20:	681b      	ldr	r3, [r3, #0]
 801bd22:	d501      	bpl.n	801bd28 <_printf_i+0x1cc>
 801bd24:	6018      	str	r0, [r3, #0]
 801bd26:	e002      	b.n	801bd2e <_printf_i+0x1d2>
 801bd28:	0671      	lsls	r1, r6, #25
 801bd2a:	d5fb      	bpl.n	801bd24 <_printf_i+0x1c8>
 801bd2c:	8018      	strh	r0, [r3, #0]
 801bd2e:	2300      	movs	r3, #0
 801bd30:	6123      	str	r3, [r4, #16]
 801bd32:	4616      	mov	r6, r2
 801bd34:	e7ba      	b.n	801bcac <_printf_i+0x150>
 801bd36:	680b      	ldr	r3, [r1, #0]
 801bd38:	1d1a      	adds	r2, r3, #4
 801bd3a:	600a      	str	r2, [r1, #0]
 801bd3c:	681e      	ldr	r6, [r3, #0]
 801bd3e:	6862      	ldr	r2, [r4, #4]
 801bd40:	2100      	movs	r1, #0
 801bd42:	4630      	mov	r0, r6
 801bd44:	f7e4 fa54 	bl	80001f0 <memchr>
 801bd48:	b108      	cbz	r0, 801bd4e <_printf_i+0x1f2>
 801bd4a:	1b80      	subs	r0, r0, r6
 801bd4c:	6060      	str	r0, [r4, #4]
 801bd4e:	6863      	ldr	r3, [r4, #4]
 801bd50:	6123      	str	r3, [r4, #16]
 801bd52:	2300      	movs	r3, #0
 801bd54:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801bd58:	e7a8      	b.n	801bcac <_printf_i+0x150>
 801bd5a:	6923      	ldr	r3, [r4, #16]
 801bd5c:	4632      	mov	r2, r6
 801bd5e:	4649      	mov	r1, r9
 801bd60:	4640      	mov	r0, r8
 801bd62:	47d0      	blx	sl
 801bd64:	3001      	adds	r0, #1
 801bd66:	d0ab      	beq.n	801bcc0 <_printf_i+0x164>
 801bd68:	6823      	ldr	r3, [r4, #0]
 801bd6a:	079b      	lsls	r3, r3, #30
 801bd6c:	d413      	bmi.n	801bd96 <_printf_i+0x23a>
 801bd6e:	68e0      	ldr	r0, [r4, #12]
 801bd70:	9b03      	ldr	r3, [sp, #12]
 801bd72:	4298      	cmp	r0, r3
 801bd74:	bfb8      	it	lt
 801bd76:	4618      	movlt	r0, r3
 801bd78:	e7a4      	b.n	801bcc4 <_printf_i+0x168>
 801bd7a:	2301      	movs	r3, #1
 801bd7c:	4632      	mov	r2, r6
 801bd7e:	4649      	mov	r1, r9
 801bd80:	4640      	mov	r0, r8
 801bd82:	47d0      	blx	sl
 801bd84:	3001      	adds	r0, #1
 801bd86:	d09b      	beq.n	801bcc0 <_printf_i+0x164>
 801bd88:	3501      	adds	r5, #1
 801bd8a:	68e3      	ldr	r3, [r4, #12]
 801bd8c:	9903      	ldr	r1, [sp, #12]
 801bd8e:	1a5b      	subs	r3, r3, r1
 801bd90:	42ab      	cmp	r3, r5
 801bd92:	dcf2      	bgt.n	801bd7a <_printf_i+0x21e>
 801bd94:	e7eb      	b.n	801bd6e <_printf_i+0x212>
 801bd96:	2500      	movs	r5, #0
 801bd98:	f104 0619 	add.w	r6, r4, #25
 801bd9c:	e7f5      	b.n	801bd8a <_printf_i+0x22e>
 801bd9e:	bf00      	nop
 801bda0:	080207ff 	.word	0x080207ff
 801bda4:	08020810 	.word	0x08020810

0801bda8 <_sbrk_r>:
 801bda8:	b538      	push	{r3, r4, r5, lr}
 801bdaa:	4d06      	ldr	r5, [pc, #24]	; (801bdc4 <_sbrk_r+0x1c>)
 801bdac:	2300      	movs	r3, #0
 801bdae:	4604      	mov	r4, r0
 801bdb0:	4608      	mov	r0, r1
 801bdb2:	602b      	str	r3, [r5, #0]
 801bdb4:	f7e7 fa9e 	bl	80032f4 <_sbrk>
 801bdb8:	1c43      	adds	r3, r0, #1
 801bdba:	d102      	bne.n	801bdc2 <_sbrk_r+0x1a>
 801bdbc:	682b      	ldr	r3, [r5, #0]
 801bdbe:	b103      	cbz	r3, 801bdc2 <_sbrk_r+0x1a>
 801bdc0:	6023      	str	r3, [r4, #0]
 801bdc2:	bd38      	pop	{r3, r4, r5, pc}
 801bdc4:	20010cc4 	.word	0x20010cc4

0801bdc8 <__swbuf_r>:
 801bdc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bdca:	460e      	mov	r6, r1
 801bdcc:	4614      	mov	r4, r2
 801bdce:	4605      	mov	r5, r0
 801bdd0:	b118      	cbz	r0, 801bdda <__swbuf_r+0x12>
 801bdd2:	6983      	ldr	r3, [r0, #24]
 801bdd4:	b90b      	cbnz	r3, 801bdda <__swbuf_r+0x12>
 801bdd6:	f000 f9d9 	bl	801c18c <__sinit>
 801bdda:	4b21      	ldr	r3, [pc, #132]	; (801be60 <__swbuf_r+0x98>)
 801bddc:	429c      	cmp	r4, r3
 801bdde:	d12b      	bne.n	801be38 <__swbuf_r+0x70>
 801bde0:	686c      	ldr	r4, [r5, #4]
 801bde2:	69a3      	ldr	r3, [r4, #24]
 801bde4:	60a3      	str	r3, [r4, #8]
 801bde6:	89a3      	ldrh	r3, [r4, #12]
 801bde8:	071a      	lsls	r2, r3, #28
 801bdea:	d52f      	bpl.n	801be4c <__swbuf_r+0x84>
 801bdec:	6923      	ldr	r3, [r4, #16]
 801bdee:	b36b      	cbz	r3, 801be4c <__swbuf_r+0x84>
 801bdf0:	6923      	ldr	r3, [r4, #16]
 801bdf2:	6820      	ldr	r0, [r4, #0]
 801bdf4:	1ac0      	subs	r0, r0, r3
 801bdf6:	6963      	ldr	r3, [r4, #20]
 801bdf8:	b2f6      	uxtb	r6, r6
 801bdfa:	4283      	cmp	r3, r0
 801bdfc:	4637      	mov	r7, r6
 801bdfe:	dc04      	bgt.n	801be0a <__swbuf_r+0x42>
 801be00:	4621      	mov	r1, r4
 801be02:	4628      	mov	r0, r5
 801be04:	f000 f92e 	bl	801c064 <_fflush_r>
 801be08:	bb30      	cbnz	r0, 801be58 <__swbuf_r+0x90>
 801be0a:	68a3      	ldr	r3, [r4, #8]
 801be0c:	3b01      	subs	r3, #1
 801be0e:	60a3      	str	r3, [r4, #8]
 801be10:	6823      	ldr	r3, [r4, #0]
 801be12:	1c5a      	adds	r2, r3, #1
 801be14:	6022      	str	r2, [r4, #0]
 801be16:	701e      	strb	r6, [r3, #0]
 801be18:	6963      	ldr	r3, [r4, #20]
 801be1a:	3001      	adds	r0, #1
 801be1c:	4283      	cmp	r3, r0
 801be1e:	d004      	beq.n	801be2a <__swbuf_r+0x62>
 801be20:	89a3      	ldrh	r3, [r4, #12]
 801be22:	07db      	lsls	r3, r3, #31
 801be24:	d506      	bpl.n	801be34 <__swbuf_r+0x6c>
 801be26:	2e0a      	cmp	r6, #10
 801be28:	d104      	bne.n	801be34 <__swbuf_r+0x6c>
 801be2a:	4621      	mov	r1, r4
 801be2c:	4628      	mov	r0, r5
 801be2e:	f000 f919 	bl	801c064 <_fflush_r>
 801be32:	b988      	cbnz	r0, 801be58 <__swbuf_r+0x90>
 801be34:	4638      	mov	r0, r7
 801be36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801be38:	4b0a      	ldr	r3, [pc, #40]	; (801be64 <__swbuf_r+0x9c>)
 801be3a:	429c      	cmp	r4, r3
 801be3c:	d101      	bne.n	801be42 <__swbuf_r+0x7a>
 801be3e:	68ac      	ldr	r4, [r5, #8]
 801be40:	e7cf      	b.n	801bde2 <__swbuf_r+0x1a>
 801be42:	4b09      	ldr	r3, [pc, #36]	; (801be68 <__swbuf_r+0xa0>)
 801be44:	429c      	cmp	r4, r3
 801be46:	bf08      	it	eq
 801be48:	68ec      	ldreq	r4, [r5, #12]
 801be4a:	e7ca      	b.n	801bde2 <__swbuf_r+0x1a>
 801be4c:	4621      	mov	r1, r4
 801be4e:	4628      	mov	r0, r5
 801be50:	f000 f80c 	bl	801be6c <__swsetup_r>
 801be54:	2800      	cmp	r0, #0
 801be56:	d0cb      	beq.n	801bdf0 <__swbuf_r+0x28>
 801be58:	f04f 37ff 	mov.w	r7, #4294967295
 801be5c:	e7ea      	b.n	801be34 <__swbuf_r+0x6c>
 801be5e:	bf00      	nop
 801be60:	08020844 	.word	0x08020844
 801be64:	08020864 	.word	0x08020864
 801be68:	08020824 	.word	0x08020824

0801be6c <__swsetup_r>:
 801be6c:	4b32      	ldr	r3, [pc, #200]	; (801bf38 <__swsetup_r+0xcc>)
 801be6e:	b570      	push	{r4, r5, r6, lr}
 801be70:	681d      	ldr	r5, [r3, #0]
 801be72:	4606      	mov	r6, r0
 801be74:	460c      	mov	r4, r1
 801be76:	b125      	cbz	r5, 801be82 <__swsetup_r+0x16>
 801be78:	69ab      	ldr	r3, [r5, #24]
 801be7a:	b913      	cbnz	r3, 801be82 <__swsetup_r+0x16>
 801be7c:	4628      	mov	r0, r5
 801be7e:	f000 f985 	bl	801c18c <__sinit>
 801be82:	4b2e      	ldr	r3, [pc, #184]	; (801bf3c <__swsetup_r+0xd0>)
 801be84:	429c      	cmp	r4, r3
 801be86:	d10f      	bne.n	801bea8 <__swsetup_r+0x3c>
 801be88:	686c      	ldr	r4, [r5, #4]
 801be8a:	89a3      	ldrh	r3, [r4, #12]
 801be8c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801be90:	0719      	lsls	r1, r3, #28
 801be92:	d42c      	bmi.n	801beee <__swsetup_r+0x82>
 801be94:	06dd      	lsls	r5, r3, #27
 801be96:	d411      	bmi.n	801bebc <__swsetup_r+0x50>
 801be98:	2309      	movs	r3, #9
 801be9a:	6033      	str	r3, [r6, #0]
 801be9c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801bea0:	81a3      	strh	r3, [r4, #12]
 801bea2:	f04f 30ff 	mov.w	r0, #4294967295
 801bea6:	e03e      	b.n	801bf26 <__swsetup_r+0xba>
 801bea8:	4b25      	ldr	r3, [pc, #148]	; (801bf40 <__swsetup_r+0xd4>)
 801beaa:	429c      	cmp	r4, r3
 801beac:	d101      	bne.n	801beb2 <__swsetup_r+0x46>
 801beae:	68ac      	ldr	r4, [r5, #8]
 801beb0:	e7eb      	b.n	801be8a <__swsetup_r+0x1e>
 801beb2:	4b24      	ldr	r3, [pc, #144]	; (801bf44 <__swsetup_r+0xd8>)
 801beb4:	429c      	cmp	r4, r3
 801beb6:	bf08      	it	eq
 801beb8:	68ec      	ldreq	r4, [r5, #12]
 801beba:	e7e6      	b.n	801be8a <__swsetup_r+0x1e>
 801bebc:	0758      	lsls	r0, r3, #29
 801bebe:	d512      	bpl.n	801bee6 <__swsetup_r+0x7a>
 801bec0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801bec2:	b141      	cbz	r1, 801bed6 <__swsetup_r+0x6a>
 801bec4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801bec8:	4299      	cmp	r1, r3
 801beca:	d002      	beq.n	801bed2 <__swsetup_r+0x66>
 801becc:	4630      	mov	r0, r6
 801bece:	f7ff fa77 	bl	801b3c0 <_free_r>
 801bed2:	2300      	movs	r3, #0
 801bed4:	6363      	str	r3, [r4, #52]	; 0x34
 801bed6:	89a3      	ldrh	r3, [r4, #12]
 801bed8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801bedc:	81a3      	strh	r3, [r4, #12]
 801bede:	2300      	movs	r3, #0
 801bee0:	6063      	str	r3, [r4, #4]
 801bee2:	6923      	ldr	r3, [r4, #16]
 801bee4:	6023      	str	r3, [r4, #0]
 801bee6:	89a3      	ldrh	r3, [r4, #12]
 801bee8:	f043 0308 	orr.w	r3, r3, #8
 801beec:	81a3      	strh	r3, [r4, #12]
 801beee:	6923      	ldr	r3, [r4, #16]
 801bef0:	b94b      	cbnz	r3, 801bf06 <__swsetup_r+0x9a>
 801bef2:	89a3      	ldrh	r3, [r4, #12]
 801bef4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801bef8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801befc:	d003      	beq.n	801bf06 <__swsetup_r+0x9a>
 801befe:	4621      	mov	r1, r4
 801bf00:	4630      	mov	r0, r6
 801bf02:	f000 fa07 	bl	801c314 <__smakebuf_r>
 801bf06:	89a0      	ldrh	r0, [r4, #12]
 801bf08:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801bf0c:	f010 0301 	ands.w	r3, r0, #1
 801bf10:	d00a      	beq.n	801bf28 <__swsetup_r+0xbc>
 801bf12:	2300      	movs	r3, #0
 801bf14:	60a3      	str	r3, [r4, #8]
 801bf16:	6963      	ldr	r3, [r4, #20]
 801bf18:	425b      	negs	r3, r3
 801bf1a:	61a3      	str	r3, [r4, #24]
 801bf1c:	6923      	ldr	r3, [r4, #16]
 801bf1e:	b943      	cbnz	r3, 801bf32 <__swsetup_r+0xc6>
 801bf20:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801bf24:	d1ba      	bne.n	801be9c <__swsetup_r+0x30>
 801bf26:	bd70      	pop	{r4, r5, r6, pc}
 801bf28:	0781      	lsls	r1, r0, #30
 801bf2a:	bf58      	it	pl
 801bf2c:	6963      	ldrpl	r3, [r4, #20]
 801bf2e:	60a3      	str	r3, [r4, #8]
 801bf30:	e7f4      	b.n	801bf1c <__swsetup_r+0xb0>
 801bf32:	2000      	movs	r0, #0
 801bf34:	e7f7      	b.n	801bf26 <__swsetup_r+0xba>
 801bf36:	bf00      	nop
 801bf38:	20000024 	.word	0x20000024
 801bf3c:	08020844 	.word	0x08020844
 801bf40:	08020864 	.word	0x08020864
 801bf44:	08020824 	.word	0x08020824

0801bf48 <abort>:
 801bf48:	b508      	push	{r3, lr}
 801bf4a:	2006      	movs	r0, #6
 801bf4c:	f000 fa7c 	bl	801c448 <raise>
 801bf50:	2001      	movs	r0, #1
 801bf52:	f7e7 f957 	bl	8003204 <_exit>
	...

0801bf58 <__sflush_r>:
 801bf58:	898a      	ldrh	r2, [r1, #12]
 801bf5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bf5e:	4605      	mov	r5, r0
 801bf60:	0710      	lsls	r0, r2, #28
 801bf62:	460c      	mov	r4, r1
 801bf64:	d458      	bmi.n	801c018 <__sflush_r+0xc0>
 801bf66:	684b      	ldr	r3, [r1, #4]
 801bf68:	2b00      	cmp	r3, #0
 801bf6a:	dc05      	bgt.n	801bf78 <__sflush_r+0x20>
 801bf6c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801bf6e:	2b00      	cmp	r3, #0
 801bf70:	dc02      	bgt.n	801bf78 <__sflush_r+0x20>
 801bf72:	2000      	movs	r0, #0
 801bf74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bf78:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801bf7a:	2e00      	cmp	r6, #0
 801bf7c:	d0f9      	beq.n	801bf72 <__sflush_r+0x1a>
 801bf7e:	2300      	movs	r3, #0
 801bf80:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801bf84:	682f      	ldr	r7, [r5, #0]
 801bf86:	602b      	str	r3, [r5, #0]
 801bf88:	d032      	beq.n	801bff0 <__sflush_r+0x98>
 801bf8a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801bf8c:	89a3      	ldrh	r3, [r4, #12]
 801bf8e:	075a      	lsls	r2, r3, #29
 801bf90:	d505      	bpl.n	801bf9e <__sflush_r+0x46>
 801bf92:	6863      	ldr	r3, [r4, #4]
 801bf94:	1ac0      	subs	r0, r0, r3
 801bf96:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801bf98:	b10b      	cbz	r3, 801bf9e <__sflush_r+0x46>
 801bf9a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801bf9c:	1ac0      	subs	r0, r0, r3
 801bf9e:	2300      	movs	r3, #0
 801bfa0:	4602      	mov	r2, r0
 801bfa2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801bfa4:	6a21      	ldr	r1, [r4, #32]
 801bfa6:	4628      	mov	r0, r5
 801bfa8:	47b0      	blx	r6
 801bfaa:	1c43      	adds	r3, r0, #1
 801bfac:	89a3      	ldrh	r3, [r4, #12]
 801bfae:	d106      	bne.n	801bfbe <__sflush_r+0x66>
 801bfb0:	6829      	ldr	r1, [r5, #0]
 801bfb2:	291d      	cmp	r1, #29
 801bfb4:	d82c      	bhi.n	801c010 <__sflush_r+0xb8>
 801bfb6:	4a2a      	ldr	r2, [pc, #168]	; (801c060 <__sflush_r+0x108>)
 801bfb8:	40ca      	lsrs	r2, r1
 801bfba:	07d6      	lsls	r6, r2, #31
 801bfbc:	d528      	bpl.n	801c010 <__sflush_r+0xb8>
 801bfbe:	2200      	movs	r2, #0
 801bfc0:	6062      	str	r2, [r4, #4]
 801bfc2:	04d9      	lsls	r1, r3, #19
 801bfc4:	6922      	ldr	r2, [r4, #16]
 801bfc6:	6022      	str	r2, [r4, #0]
 801bfc8:	d504      	bpl.n	801bfd4 <__sflush_r+0x7c>
 801bfca:	1c42      	adds	r2, r0, #1
 801bfcc:	d101      	bne.n	801bfd2 <__sflush_r+0x7a>
 801bfce:	682b      	ldr	r3, [r5, #0]
 801bfd0:	b903      	cbnz	r3, 801bfd4 <__sflush_r+0x7c>
 801bfd2:	6560      	str	r0, [r4, #84]	; 0x54
 801bfd4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801bfd6:	602f      	str	r7, [r5, #0]
 801bfd8:	2900      	cmp	r1, #0
 801bfda:	d0ca      	beq.n	801bf72 <__sflush_r+0x1a>
 801bfdc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801bfe0:	4299      	cmp	r1, r3
 801bfe2:	d002      	beq.n	801bfea <__sflush_r+0x92>
 801bfe4:	4628      	mov	r0, r5
 801bfe6:	f7ff f9eb 	bl	801b3c0 <_free_r>
 801bfea:	2000      	movs	r0, #0
 801bfec:	6360      	str	r0, [r4, #52]	; 0x34
 801bfee:	e7c1      	b.n	801bf74 <__sflush_r+0x1c>
 801bff0:	6a21      	ldr	r1, [r4, #32]
 801bff2:	2301      	movs	r3, #1
 801bff4:	4628      	mov	r0, r5
 801bff6:	47b0      	blx	r6
 801bff8:	1c41      	adds	r1, r0, #1
 801bffa:	d1c7      	bne.n	801bf8c <__sflush_r+0x34>
 801bffc:	682b      	ldr	r3, [r5, #0]
 801bffe:	2b00      	cmp	r3, #0
 801c000:	d0c4      	beq.n	801bf8c <__sflush_r+0x34>
 801c002:	2b1d      	cmp	r3, #29
 801c004:	d001      	beq.n	801c00a <__sflush_r+0xb2>
 801c006:	2b16      	cmp	r3, #22
 801c008:	d101      	bne.n	801c00e <__sflush_r+0xb6>
 801c00a:	602f      	str	r7, [r5, #0]
 801c00c:	e7b1      	b.n	801bf72 <__sflush_r+0x1a>
 801c00e:	89a3      	ldrh	r3, [r4, #12]
 801c010:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801c014:	81a3      	strh	r3, [r4, #12]
 801c016:	e7ad      	b.n	801bf74 <__sflush_r+0x1c>
 801c018:	690f      	ldr	r7, [r1, #16]
 801c01a:	2f00      	cmp	r7, #0
 801c01c:	d0a9      	beq.n	801bf72 <__sflush_r+0x1a>
 801c01e:	0793      	lsls	r3, r2, #30
 801c020:	680e      	ldr	r6, [r1, #0]
 801c022:	bf08      	it	eq
 801c024:	694b      	ldreq	r3, [r1, #20]
 801c026:	600f      	str	r7, [r1, #0]
 801c028:	bf18      	it	ne
 801c02a:	2300      	movne	r3, #0
 801c02c:	eba6 0807 	sub.w	r8, r6, r7
 801c030:	608b      	str	r3, [r1, #8]
 801c032:	f1b8 0f00 	cmp.w	r8, #0
 801c036:	dd9c      	ble.n	801bf72 <__sflush_r+0x1a>
 801c038:	6a21      	ldr	r1, [r4, #32]
 801c03a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801c03c:	4643      	mov	r3, r8
 801c03e:	463a      	mov	r2, r7
 801c040:	4628      	mov	r0, r5
 801c042:	47b0      	blx	r6
 801c044:	2800      	cmp	r0, #0
 801c046:	dc06      	bgt.n	801c056 <__sflush_r+0xfe>
 801c048:	89a3      	ldrh	r3, [r4, #12]
 801c04a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801c04e:	81a3      	strh	r3, [r4, #12]
 801c050:	f04f 30ff 	mov.w	r0, #4294967295
 801c054:	e78e      	b.n	801bf74 <__sflush_r+0x1c>
 801c056:	4407      	add	r7, r0
 801c058:	eba8 0800 	sub.w	r8, r8, r0
 801c05c:	e7e9      	b.n	801c032 <__sflush_r+0xda>
 801c05e:	bf00      	nop
 801c060:	20400001 	.word	0x20400001

0801c064 <_fflush_r>:
 801c064:	b538      	push	{r3, r4, r5, lr}
 801c066:	690b      	ldr	r3, [r1, #16]
 801c068:	4605      	mov	r5, r0
 801c06a:	460c      	mov	r4, r1
 801c06c:	b913      	cbnz	r3, 801c074 <_fflush_r+0x10>
 801c06e:	2500      	movs	r5, #0
 801c070:	4628      	mov	r0, r5
 801c072:	bd38      	pop	{r3, r4, r5, pc}
 801c074:	b118      	cbz	r0, 801c07e <_fflush_r+0x1a>
 801c076:	6983      	ldr	r3, [r0, #24]
 801c078:	b90b      	cbnz	r3, 801c07e <_fflush_r+0x1a>
 801c07a:	f000 f887 	bl	801c18c <__sinit>
 801c07e:	4b14      	ldr	r3, [pc, #80]	; (801c0d0 <_fflush_r+0x6c>)
 801c080:	429c      	cmp	r4, r3
 801c082:	d11b      	bne.n	801c0bc <_fflush_r+0x58>
 801c084:	686c      	ldr	r4, [r5, #4]
 801c086:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c08a:	2b00      	cmp	r3, #0
 801c08c:	d0ef      	beq.n	801c06e <_fflush_r+0xa>
 801c08e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801c090:	07d0      	lsls	r0, r2, #31
 801c092:	d404      	bmi.n	801c09e <_fflush_r+0x3a>
 801c094:	0599      	lsls	r1, r3, #22
 801c096:	d402      	bmi.n	801c09e <_fflush_r+0x3a>
 801c098:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801c09a:	f000 f915 	bl	801c2c8 <__retarget_lock_acquire_recursive>
 801c09e:	4628      	mov	r0, r5
 801c0a0:	4621      	mov	r1, r4
 801c0a2:	f7ff ff59 	bl	801bf58 <__sflush_r>
 801c0a6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801c0a8:	07da      	lsls	r2, r3, #31
 801c0aa:	4605      	mov	r5, r0
 801c0ac:	d4e0      	bmi.n	801c070 <_fflush_r+0xc>
 801c0ae:	89a3      	ldrh	r3, [r4, #12]
 801c0b0:	059b      	lsls	r3, r3, #22
 801c0b2:	d4dd      	bmi.n	801c070 <_fflush_r+0xc>
 801c0b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801c0b6:	f000 f908 	bl	801c2ca <__retarget_lock_release_recursive>
 801c0ba:	e7d9      	b.n	801c070 <_fflush_r+0xc>
 801c0bc:	4b05      	ldr	r3, [pc, #20]	; (801c0d4 <_fflush_r+0x70>)
 801c0be:	429c      	cmp	r4, r3
 801c0c0:	d101      	bne.n	801c0c6 <_fflush_r+0x62>
 801c0c2:	68ac      	ldr	r4, [r5, #8]
 801c0c4:	e7df      	b.n	801c086 <_fflush_r+0x22>
 801c0c6:	4b04      	ldr	r3, [pc, #16]	; (801c0d8 <_fflush_r+0x74>)
 801c0c8:	429c      	cmp	r4, r3
 801c0ca:	bf08      	it	eq
 801c0cc:	68ec      	ldreq	r4, [r5, #12]
 801c0ce:	e7da      	b.n	801c086 <_fflush_r+0x22>
 801c0d0:	08020844 	.word	0x08020844
 801c0d4:	08020864 	.word	0x08020864
 801c0d8:	08020824 	.word	0x08020824

0801c0dc <std>:
 801c0dc:	2300      	movs	r3, #0
 801c0de:	b510      	push	{r4, lr}
 801c0e0:	4604      	mov	r4, r0
 801c0e2:	e9c0 3300 	strd	r3, r3, [r0]
 801c0e6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801c0ea:	6083      	str	r3, [r0, #8]
 801c0ec:	8181      	strh	r1, [r0, #12]
 801c0ee:	6643      	str	r3, [r0, #100]	; 0x64
 801c0f0:	81c2      	strh	r2, [r0, #14]
 801c0f2:	6183      	str	r3, [r0, #24]
 801c0f4:	4619      	mov	r1, r3
 801c0f6:	2208      	movs	r2, #8
 801c0f8:	305c      	adds	r0, #92	; 0x5c
 801c0fa:	f7ff f887 	bl	801b20c <memset>
 801c0fe:	4b05      	ldr	r3, [pc, #20]	; (801c114 <std+0x38>)
 801c100:	6263      	str	r3, [r4, #36]	; 0x24
 801c102:	4b05      	ldr	r3, [pc, #20]	; (801c118 <std+0x3c>)
 801c104:	62a3      	str	r3, [r4, #40]	; 0x28
 801c106:	4b05      	ldr	r3, [pc, #20]	; (801c11c <std+0x40>)
 801c108:	62e3      	str	r3, [r4, #44]	; 0x2c
 801c10a:	4b05      	ldr	r3, [pc, #20]	; (801c120 <std+0x44>)
 801c10c:	6224      	str	r4, [r4, #32]
 801c10e:	6323      	str	r3, [r4, #48]	; 0x30
 801c110:	bd10      	pop	{r4, pc}
 801c112:	bf00      	nop
 801c114:	0801c481 	.word	0x0801c481
 801c118:	0801c4a3 	.word	0x0801c4a3
 801c11c:	0801c4db 	.word	0x0801c4db
 801c120:	0801c4ff 	.word	0x0801c4ff

0801c124 <_cleanup_r>:
 801c124:	4901      	ldr	r1, [pc, #4]	; (801c12c <_cleanup_r+0x8>)
 801c126:	f000 b8af 	b.w	801c288 <_fwalk_reent>
 801c12a:	bf00      	nop
 801c12c:	0801c065 	.word	0x0801c065

0801c130 <__sfmoreglue>:
 801c130:	b570      	push	{r4, r5, r6, lr}
 801c132:	1e4a      	subs	r2, r1, #1
 801c134:	2568      	movs	r5, #104	; 0x68
 801c136:	4355      	muls	r5, r2
 801c138:	460e      	mov	r6, r1
 801c13a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801c13e:	f7ff f98f 	bl	801b460 <_malloc_r>
 801c142:	4604      	mov	r4, r0
 801c144:	b140      	cbz	r0, 801c158 <__sfmoreglue+0x28>
 801c146:	2100      	movs	r1, #0
 801c148:	e9c0 1600 	strd	r1, r6, [r0]
 801c14c:	300c      	adds	r0, #12
 801c14e:	60a0      	str	r0, [r4, #8]
 801c150:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801c154:	f7ff f85a 	bl	801b20c <memset>
 801c158:	4620      	mov	r0, r4
 801c15a:	bd70      	pop	{r4, r5, r6, pc}

0801c15c <__sfp_lock_acquire>:
 801c15c:	4801      	ldr	r0, [pc, #4]	; (801c164 <__sfp_lock_acquire+0x8>)
 801c15e:	f000 b8b3 	b.w	801c2c8 <__retarget_lock_acquire_recursive>
 801c162:	bf00      	nop
 801c164:	20010cd4 	.word	0x20010cd4

0801c168 <__sfp_lock_release>:
 801c168:	4801      	ldr	r0, [pc, #4]	; (801c170 <__sfp_lock_release+0x8>)
 801c16a:	f000 b8ae 	b.w	801c2ca <__retarget_lock_release_recursive>
 801c16e:	bf00      	nop
 801c170:	20010cd4 	.word	0x20010cd4

0801c174 <__sinit_lock_acquire>:
 801c174:	4801      	ldr	r0, [pc, #4]	; (801c17c <__sinit_lock_acquire+0x8>)
 801c176:	f000 b8a7 	b.w	801c2c8 <__retarget_lock_acquire_recursive>
 801c17a:	bf00      	nop
 801c17c:	20010ccf 	.word	0x20010ccf

0801c180 <__sinit_lock_release>:
 801c180:	4801      	ldr	r0, [pc, #4]	; (801c188 <__sinit_lock_release+0x8>)
 801c182:	f000 b8a2 	b.w	801c2ca <__retarget_lock_release_recursive>
 801c186:	bf00      	nop
 801c188:	20010ccf 	.word	0x20010ccf

0801c18c <__sinit>:
 801c18c:	b510      	push	{r4, lr}
 801c18e:	4604      	mov	r4, r0
 801c190:	f7ff fff0 	bl	801c174 <__sinit_lock_acquire>
 801c194:	69a3      	ldr	r3, [r4, #24]
 801c196:	b11b      	cbz	r3, 801c1a0 <__sinit+0x14>
 801c198:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c19c:	f7ff bff0 	b.w	801c180 <__sinit_lock_release>
 801c1a0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801c1a4:	6523      	str	r3, [r4, #80]	; 0x50
 801c1a6:	4b13      	ldr	r3, [pc, #76]	; (801c1f4 <__sinit+0x68>)
 801c1a8:	4a13      	ldr	r2, [pc, #76]	; (801c1f8 <__sinit+0x6c>)
 801c1aa:	681b      	ldr	r3, [r3, #0]
 801c1ac:	62a2      	str	r2, [r4, #40]	; 0x28
 801c1ae:	42a3      	cmp	r3, r4
 801c1b0:	bf04      	itt	eq
 801c1b2:	2301      	moveq	r3, #1
 801c1b4:	61a3      	streq	r3, [r4, #24]
 801c1b6:	4620      	mov	r0, r4
 801c1b8:	f000 f820 	bl	801c1fc <__sfp>
 801c1bc:	6060      	str	r0, [r4, #4]
 801c1be:	4620      	mov	r0, r4
 801c1c0:	f000 f81c 	bl	801c1fc <__sfp>
 801c1c4:	60a0      	str	r0, [r4, #8]
 801c1c6:	4620      	mov	r0, r4
 801c1c8:	f000 f818 	bl	801c1fc <__sfp>
 801c1cc:	2200      	movs	r2, #0
 801c1ce:	60e0      	str	r0, [r4, #12]
 801c1d0:	2104      	movs	r1, #4
 801c1d2:	6860      	ldr	r0, [r4, #4]
 801c1d4:	f7ff ff82 	bl	801c0dc <std>
 801c1d8:	68a0      	ldr	r0, [r4, #8]
 801c1da:	2201      	movs	r2, #1
 801c1dc:	2109      	movs	r1, #9
 801c1de:	f7ff ff7d 	bl	801c0dc <std>
 801c1e2:	68e0      	ldr	r0, [r4, #12]
 801c1e4:	2202      	movs	r2, #2
 801c1e6:	2112      	movs	r1, #18
 801c1e8:	f7ff ff78 	bl	801c0dc <std>
 801c1ec:	2301      	movs	r3, #1
 801c1ee:	61a3      	str	r3, [r4, #24]
 801c1f0:	e7d2      	b.n	801c198 <__sinit+0xc>
 801c1f2:	bf00      	nop
 801c1f4:	08020738 	.word	0x08020738
 801c1f8:	0801c125 	.word	0x0801c125

0801c1fc <__sfp>:
 801c1fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c1fe:	4607      	mov	r7, r0
 801c200:	f7ff ffac 	bl	801c15c <__sfp_lock_acquire>
 801c204:	4b1e      	ldr	r3, [pc, #120]	; (801c280 <__sfp+0x84>)
 801c206:	681e      	ldr	r6, [r3, #0]
 801c208:	69b3      	ldr	r3, [r6, #24]
 801c20a:	b913      	cbnz	r3, 801c212 <__sfp+0x16>
 801c20c:	4630      	mov	r0, r6
 801c20e:	f7ff ffbd 	bl	801c18c <__sinit>
 801c212:	3648      	adds	r6, #72	; 0x48
 801c214:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801c218:	3b01      	subs	r3, #1
 801c21a:	d503      	bpl.n	801c224 <__sfp+0x28>
 801c21c:	6833      	ldr	r3, [r6, #0]
 801c21e:	b30b      	cbz	r3, 801c264 <__sfp+0x68>
 801c220:	6836      	ldr	r6, [r6, #0]
 801c222:	e7f7      	b.n	801c214 <__sfp+0x18>
 801c224:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801c228:	b9d5      	cbnz	r5, 801c260 <__sfp+0x64>
 801c22a:	4b16      	ldr	r3, [pc, #88]	; (801c284 <__sfp+0x88>)
 801c22c:	60e3      	str	r3, [r4, #12]
 801c22e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801c232:	6665      	str	r5, [r4, #100]	; 0x64
 801c234:	f000 f847 	bl	801c2c6 <__retarget_lock_init_recursive>
 801c238:	f7ff ff96 	bl	801c168 <__sfp_lock_release>
 801c23c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801c240:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801c244:	6025      	str	r5, [r4, #0]
 801c246:	61a5      	str	r5, [r4, #24]
 801c248:	2208      	movs	r2, #8
 801c24a:	4629      	mov	r1, r5
 801c24c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801c250:	f7fe ffdc 	bl	801b20c <memset>
 801c254:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801c258:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801c25c:	4620      	mov	r0, r4
 801c25e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c260:	3468      	adds	r4, #104	; 0x68
 801c262:	e7d9      	b.n	801c218 <__sfp+0x1c>
 801c264:	2104      	movs	r1, #4
 801c266:	4638      	mov	r0, r7
 801c268:	f7ff ff62 	bl	801c130 <__sfmoreglue>
 801c26c:	4604      	mov	r4, r0
 801c26e:	6030      	str	r0, [r6, #0]
 801c270:	2800      	cmp	r0, #0
 801c272:	d1d5      	bne.n	801c220 <__sfp+0x24>
 801c274:	f7ff ff78 	bl	801c168 <__sfp_lock_release>
 801c278:	230c      	movs	r3, #12
 801c27a:	603b      	str	r3, [r7, #0]
 801c27c:	e7ee      	b.n	801c25c <__sfp+0x60>
 801c27e:	bf00      	nop
 801c280:	08020738 	.word	0x08020738
 801c284:	ffff0001 	.word	0xffff0001

0801c288 <_fwalk_reent>:
 801c288:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c28c:	4606      	mov	r6, r0
 801c28e:	4688      	mov	r8, r1
 801c290:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801c294:	2700      	movs	r7, #0
 801c296:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801c29a:	f1b9 0901 	subs.w	r9, r9, #1
 801c29e:	d505      	bpl.n	801c2ac <_fwalk_reent+0x24>
 801c2a0:	6824      	ldr	r4, [r4, #0]
 801c2a2:	2c00      	cmp	r4, #0
 801c2a4:	d1f7      	bne.n	801c296 <_fwalk_reent+0xe>
 801c2a6:	4638      	mov	r0, r7
 801c2a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c2ac:	89ab      	ldrh	r3, [r5, #12]
 801c2ae:	2b01      	cmp	r3, #1
 801c2b0:	d907      	bls.n	801c2c2 <_fwalk_reent+0x3a>
 801c2b2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801c2b6:	3301      	adds	r3, #1
 801c2b8:	d003      	beq.n	801c2c2 <_fwalk_reent+0x3a>
 801c2ba:	4629      	mov	r1, r5
 801c2bc:	4630      	mov	r0, r6
 801c2be:	47c0      	blx	r8
 801c2c0:	4307      	orrs	r7, r0
 801c2c2:	3568      	adds	r5, #104	; 0x68
 801c2c4:	e7e9      	b.n	801c29a <_fwalk_reent+0x12>

0801c2c6 <__retarget_lock_init_recursive>:
 801c2c6:	4770      	bx	lr

0801c2c8 <__retarget_lock_acquire_recursive>:
 801c2c8:	4770      	bx	lr

0801c2ca <__retarget_lock_release_recursive>:
 801c2ca:	4770      	bx	lr

0801c2cc <__swhatbuf_r>:
 801c2cc:	b570      	push	{r4, r5, r6, lr}
 801c2ce:	460e      	mov	r6, r1
 801c2d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c2d4:	2900      	cmp	r1, #0
 801c2d6:	b096      	sub	sp, #88	; 0x58
 801c2d8:	4614      	mov	r4, r2
 801c2da:	461d      	mov	r5, r3
 801c2dc:	da07      	bge.n	801c2ee <__swhatbuf_r+0x22>
 801c2de:	2300      	movs	r3, #0
 801c2e0:	602b      	str	r3, [r5, #0]
 801c2e2:	89b3      	ldrh	r3, [r6, #12]
 801c2e4:	061a      	lsls	r2, r3, #24
 801c2e6:	d410      	bmi.n	801c30a <__swhatbuf_r+0x3e>
 801c2e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801c2ec:	e00e      	b.n	801c30c <__swhatbuf_r+0x40>
 801c2ee:	466a      	mov	r2, sp
 801c2f0:	f000 f92c 	bl	801c54c <_fstat_r>
 801c2f4:	2800      	cmp	r0, #0
 801c2f6:	dbf2      	blt.n	801c2de <__swhatbuf_r+0x12>
 801c2f8:	9a01      	ldr	r2, [sp, #4]
 801c2fa:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801c2fe:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801c302:	425a      	negs	r2, r3
 801c304:	415a      	adcs	r2, r3
 801c306:	602a      	str	r2, [r5, #0]
 801c308:	e7ee      	b.n	801c2e8 <__swhatbuf_r+0x1c>
 801c30a:	2340      	movs	r3, #64	; 0x40
 801c30c:	2000      	movs	r0, #0
 801c30e:	6023      	str	r3, [r4, #0]
 801c310:	b016      	add	sp, #88	; 0x58
 801c312:	bd70      	pop	{r4, r5, r6, pc}

0801c314 <__smakebuf_r>:
 801c314:	898b      	ldrh	r3, [r1, #12]
 801c316:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801c318:	079d      	lsls	r5, r3, #30
 801c31a:	4606      	mov	r6, r0
 801c31c:	460c      	mov	r4, r1
 801c31e:	d507      	bpl.n	801c330 <__smakebuf_r+0x1c>
 801c320:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801c324:	6023      	str	r3, [r4, #0]
 801c326:	6123      	str	r3, [r4, #16]
 801c328:	2301      	movs	r3, #1
 801c32a:	6163      	str	r3, [r4, #20]
 801c32c:	b002      	add	sp, #8
 801c32e:	bd70      	pop	{r4, r5, r6, pc}
 801c330:	ab01      	add	r3, sp, #4
 801c332:	466a      	mov	r2, sp
 801c334:	f7ff ffca 	bl	801c2cc <__swhatbuf_r>
 801c338:	9900      	ldr	r1, [sp, #0]
 801c33a:	4605      	mov	r5, r0
 801c33c:	4630      	mov	r0, r6
 801c33e:	f7ff f88f 	bl	801b460 <_malloc_r>
 801c342:	b948      	cbnz	r0, 801c358 <__smakebuf_r+0x44>
 801c344:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c348:	059a      	lsls	r2, r3, #22
 801c34a:	d4ef      	bmi.n	801c32c <__smakebuf_r+0x18>
 801c34c:	f023 0303 	bic.w	r3, r3, #3
 801c350:	f043 0302 	orr.w	r3, r3, #2
 801c354:	81a3      	strh	r3, [r4, #12]
 801c356:	e7e3      	b.n	801c320 <__smakebuf_r+0xc>
 801c358:	4b0d      	ldr	r3, [pc, #52]	; (801c390 <__smakebuf_r+0x7c>)
 801c35a:	62b3      	str	r3, [r6, #40]	; 0x28
 801c35c:	89a3      	ldrh	r3, [r4, #12]
 801c35e:	6020      	str	r0, [r4, #0]
 801c360:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801c364:	81a3      	strh	r3, [r4, #12]
 801c366:	9b00      	ldr	r3, [sp, #0]
 801c368:	6163      	str	r3, [r4, #20]
 801c36a:	9b01      	ldr	r3, [sp, #4]
 801c36c:	6120      	str	r0, [r4, #16]
 801c36e:	b15b      	cbz	r3, 801c388 <__smakebuf_r+0x74>
 801c370:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801c374:	4630      	mov	r0, r6
 801c376:	f000 f8fb 	bl	801c570 <_isatty_r>
 801c37a:	b128      	cbz	r0, 801c388 <__smakebuf_r+0x74>
 801c37c:	89a3      	ldrh	r3, [r4, #12]
 801c37e:	f023 0303 	bic.w	r3, r3, #3
 801c382:	f043 0301 	orr.w	r3, r3, #1
 801c386:	81a3      	strh	r3, [r4, #12]
 801c388:	89a0      	ldrh	r0, [r4, #12]
 801c38a:	4305      	orrs	r5, r0
 801c38c:	81a5      	strh	r5, [r4, #12]
 801c38e:	e7cd      	b.n	801c32c <__smakebuf_r+0x18>
 801c390:	0801c125 	.word	0x0801c125

0801c394 <__malloc_lock>:
 801c394:	4801      	ldr	r0, [pc, #4]	; (801c39c <__malloc_lock+0x8>)
 801c396:	f7ff bf97 	b.w	801c2c8 <__retarget_lock_acquire_recursive>
 801c39a:	bf00      	nop
 801c39c:	20010cd0 	.word	0x20010cd0

0801c3a0 <__malloc_unlock>:
 801c3a0:	4801      	ldr	r0, [pc, #4]	; (801c3a8 <__malloc_unlock+0x8>)
 801c3a2:	f7ff bf92 	b.w	801c2ca <__retarget_lock_release_recursive>
 801c3a6:	bf00      	nop
 801c3a8:	20010cd0 	.word	0x20010cd0

0801c3ac <_realloc_r>:
 801c3ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c3ae:	4607      	mov	r7, r0
 801c3b0:	4614      	mov	r4, r2
 801c3b2:	460e      	mov	r6, r1
 801c3b4:	b921      	cbnz	r1, 801c3c0 <_realloc_r+0x14>
 801c3b6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801c3ba:	4611      	mov	r1, r2
 801c3bc:	f7ff b850 	b.w	801b460 <_malloc_r>
 801c3c0:	b922      	cbnz	r2, 801c3cc <_realloc_r+0x20>
 801c3c2:	f7fe fffd 	bl	801b3c0 <_free_r>
 801c3c6:	4625      	mov	r5, r4
 801c3c8:	4628      	mov	r0, r5
 801c3ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c3cc:	f000 f8f2 	bl	801c5b4 <_malloc_usable_size_r>
 801c3d0:	42a0      	cmp	r0, r4
 801c3d2:	d20f      	bcs.n	801c3f4 <_realloc_r+0x48>
 801c3d4:	4621      	mov	r1, r4
 801c3d6:	4638      	mov	r0, r7
 801c3d8:	f7ff f842 	bl	801b460 <_malloc_r>
 801c3dc:	4605      	mov	r5, r0
 801c3de:	2800      	cmp	r0, #0
 801c3e0:	d0f2      	beq.n	801c3c8 <_realloc_r+0x1c>
 801c3e2:	4631      	mov	r1, r6
 801c3e4:	4622      	mov	r2, r4
 801c3e6:	f7fe fee9 	bl	801b1bc <memcpy>
 801c3ea:	4631      	mov	r1, r6
 801c3ec:	4638      	mov	r0, r7
 801c3ee:	f7fe ffe7 	bl	801b3c0 <_free_r>
 801c3f2:	e7e9      	b.n	801c3c8 <_realloc_r+0x1c>
 801c3f4:	4635      	mov	r5, r6
 801c3f6:	e7e7      	b.n	801c3c8 <_realloc_r+0x1c>

0801c3f8 <_raise_r>:
 801c3f8:	291f      	cmp	r1, #31
 801c3fa:	b538      	push	{r3, r4, r5, lr}
 801c3fc:	4604      	mov	r4, r0
 801c3fe:	460d      	mov	r5, r1
 801c400:	d904      	bls.n	801c40c <_raise_r+0x14>
 801c402:	2316      	movs	r3, #22
 801c404:	6003      	str	r3, [r0, #0]
 801c406:	f04f 30ff 	mov.w	r0, #4294967295
 801c40a:	bd38      	pop	{r3, r4, r5, pc}
 801c40c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801c40e:	b112      	cbz	r2, 801c416 <_raise_r+0x1e>
 801c410:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801c414:	b94b      	cbnz	r3, 801c42a <_raise_r+0x32>
 801c416:	4620      	mov	r0, r4
 801c418:	f000 f830 	bl	801c47c <_getpid_r>
 801c41c:	462a      	mov	r2, r5
 801c41e:	4601      	mov	r1, r0
 801c420:	4620      	mov	r0, r4
 801c422:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801c426:	f000 b817 	b.w	801c458 <_kill_r>
 801c42a:	2b01      	cmp	r3, #1
 801c42c:	d00a      	beq.n	801c444 <_raise_r+0x4c>
 801c42e:	1c59      	adds	r1, r3, #1
 801c430:	d103      	bne.n	801c43a <_raise_r+0x42>
 801c432:	2316      	movs	r3, #22
 801c434:	6003      	str	r3, [r0, #0]
 801c436:	2001      	movs	r0, #1
 801c438:	e7e7      	b.n	801c40a <_raise_r+0x12>
 801c43a:	2400      	movs	r4, #0
 801c43c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801c440:	4628      	mov	r0, r5
 801c442:	4798      	blx	r3
 801c444:	2000      	movs	r0, #0
 801c446:	e7e0      	b.n	801c40a <_raise_r+0x12>

0801c448 <raise>:
 801c448:	4b02      	ldr	r3, [pc, #8]	; (801c454 <raise+0xc>)
 801c44a:	4601      	mov	r1, r0
 801c44c:	6818      	ldr	r0, [r3, #0]
 801c44e:	f7ff bfd3 	b.w	801c3f8 <_raise_r>
 801c452:	bf00      	nop
 801c454:	20000024 	.word	0x20000024

0801c458 <_kill_r>:
 801c458:	b538      	push	{r3, r4, r5, lr}
 801c45a:	4d07      	ldr	r5, [pc, #28]	; (801c478 <_kill_r+0x20>)
 801c45c:	2300      	movs	r3, #0
 801c45e:	4604      	mov	r4, r0
 801c460:	4608      	mov	r0, r1
 801c462:	4611      	mov	r1, r2
 801c464:	602b      	str	r3, [r5, #0]
 801c466:	f7e6 febb 	bl	80031e0 <_kill>
 801c46a:	1c43      	adds	r3, r0, #1
 801c46c:	d102      	bne.n	801c474 <_kill_r+0x1c>
 801c46e:	682b      	ldr	r3, [r5, #0]
 801c470:	b103      	cbz	r3, 801c474 <_kill_r+0x1c>
 801c472:	6023      	str	r3, [r4, #0]
 801c474:	bd38      	pop	{r3, r4, r5, pc}
 801c476:	bf00      	nop
 801c478:	20010cc4 	.word	0x20010cc4

0801c47c <_getpid_r>:
 801c47c:	f7e6 bea8 	b.w	80031d0 <_getpid>

0801c480 <__sread>:
 801c480:	b510      	push	{r4, lr}
 801c482:	460c      	mov	r4, r1
 801c484:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c488:	f000 f89c 	bl	801c5c4 <_read_r>
 801c48c:	2800      	cmp	r0, #0
 801c48e:	bfab      	itete	ge
 801c490:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801c492:	89a3      	ldrhlt	r3, [r4, #12]
 801c494:	181b      	addge	r3, r3, r0
 801c496:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801c49a:	bfac      	ite	ge
 801c49c:	6563      	strge	r3, [r4, #84]	; 0x54
 801c49e:	81a3      	strhlt	r3, [r4, #12]
 801c4a0:	bd10      	pop	{r4, pc}

0801c4a2 <__swrite>:
 801c4a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c4a6:	461f      	mov	r7, r3
 801c4a8:	898b      	ldrh	r3, [r1, #12]
 801c4aa:	05db      	lsls	r3, r3, #23
 801c4ac:	4605      	mov	r5, r0
 801c4ae:	460c      	mov	r4, r1
 801c4b0:	4616      	mov	r6, r2
 801c4b2:	d505      	bpl.n	801c4c0 <__swrite+0x1e>
 801c4b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c4b8:	2302      	movs	r3, #2
 801c4ba:	2200      	movs	r2, #0
 801c4bc:	f000 f868 	bl	801c590 <_lseek_r>
 801c4c0:	89a3      	ldrh	r3, [r4, #12]
 801c4c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801c4c6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801c4ca:	81a3      	strh	r3, [r4, #12]
 801c4cc:	4632      	mov	r2, r6
 801c4ce:	463b      	mov	r3, r7
 801c4d0:	4628      	mov	r0, r5
 801c4d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801c4d6:	f000 b817 	b.w	801c508 <_write_r>

0801c4da <__sseek>:
 801c4da:	b510      	push	{r4, lr}
 801c4dc:	460c      	mov	r4, r1
 801c4de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c4e2:	f000 f855 	bl	801c590 <_lseek_r>
 801c4e6:	1c43      	adds	r3, r0, #1
 801c4e8:	89a3      	ldrh	r3, [r4, #12]
 801c4ea:	bf15      	itete	ne
 801c4ec:	6560      	strne	r0, [r4, #84]	; 0x54
 801c4ee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801c4f2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801c4f6:	81a3      	strheq	r3, [r4, #12]
 801c4f8:	bf18      	it	ne
 801c4fa:	81a3      	strhne	r3, [r4, #12]
 801c4fc:	bd10      	pop	{r4, pc}

0801c4fe <__sclose>:
 801c4fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c502:	f000 b813 	b.w	801c52c <_close_r>
	...

0801c508 <_write_r>:
 801c508:	b538      	push	{r3, r4, r5, lr}
 801c50a:	4d07      	ldr	r5, [pc, #28]	; (801c528 <_write_r+0x20>)
 801c50c:	4604      	mov	r4, r0
 801c50e:	4608      	mov	r0, r1
 801c510:	4611      	mov	r1, r2
 801c512:	2200      	movs	r2, #0
 801c514:	602a      	str	r2, [r5, #0]
 801c516:	461a      	mov	r2, r3
 801c518:	f7e6 fe9b 	bl	8003252 <_write>
 801c51c:	1c43      	adds	r3, r0, #1
 801c51e:	d102      	bne.n	801c526 <_write_r+0x1e>
 801c520:	682b      	ldr	r3, [r5, #0]
 801c522:	b103      	cbz	r3, 801c526 <_write_r+0x1e>
 801c524:	6023      	str	r3, [r4, #0]
 801c526:	bd38      	pop	{r3, r4, r5, pc}
 801c528:	20010cc4 	.word	0x20010cc4

0801c52c <_close_r>:
 801c52c:	b538      	push	{r3, r4, r5, lr}
 801c52e:	4d06      	ldr	r5, [pc, #24]	; (801c548 <_close_r+0x1c>)
 801c530:	2300      	movs	r3, #0
 801c532:	4604      	mov	r4, r0
 801c534:	4608      	mov	r0, r1
 801c536:	602b      	str	r3, [r5, #0]
 801c538:	f7e6 fea7 	bl	800328a <_close>
 801c53c:	1c43      	adds	r3, r0, #1
 801c53e:	d102      	bne.n	801c546 <_close_r+0x1a>
 801c540:	682b      	ldr	r3, [r5, #0]
 801c542:	b103      	cbz	r3, 801c546 <_close_r+0x1a>
 801c544:	6023      	str	r3, [r4, #0]
 801c546:	bd38      	pop	{r3, r4, r5, pc}
 801c548:	20010cc4 	.word	0x20010cc4

0801c54c <_fstat_r>:
 801c54c:	b538      	push	{r3, r4, r5, lr}
 801c54e:	4d07      	ldr	r5, [pc, #28]	; (801c56c <_fstat_r+0x20>)
 801c550:	2300      	movs	r3, #0
 801c552:	4604      	mov	r4, r0
 801c554:	4608      	mov	r0, r1
 801c556:	4611      	mov	r1, r2
 801c558:	602b      	str	r3, [r5, #0]
 801c55a:	f7e6 fea2 	bl	80032a2 <_fstat>
 801c55e:	1c43      	adds	r3, r0, #1
 801c560:	d102      	bne.n	801c568 <_fstat_r+0x1c>
 801c562:	682b      	ldr	r3, [r5, #0]
 801c564:	b103      	cbz	r3, 801c568 <_fstat_r+0x1c>
 801c566:	6023      	str	r3, [r4, #0]
 801c568:	bd38      	pop	{r3, r4, r5, pc}
 801c56a:	bf00      	nop
 801c56c:	20010cc4 	.word	0x20010cc4

0801c570 <_isatty_r>:
 801c570:	b538      	push	{r3, r4, r5, lr}
 801c572:	4d06      	ldr	r5, [pc, #24]	; (801c58c <_isatty_r+0x1c>)
 801c574:	2300      	movs	r3, #0
 801c576:	4604      	mov	r4, r0
 801c578:	4608      	mov	r0, r1
 801c57a:	602b      	str	r3, [r5, #0]
 801c57c:	f7e6 fea1 	bl	80032c2 <_isatty>
 801c580:	1c43      	adds	r3, r0, #1
 801c582:	d102      	bne.n	801c58a <_isatty_r+0x1a>
 801c584:	682b      	ldr	r3, [r5, #0]
 801c586:	b103      	cbz	r3, 801c58a <_isatty_r+0x1a>
 801c588:	6023      	str	r3, [r4, #0]
 801c58a:	bd38      	pop	{r3, r4, r5, pc}
 801c58c:	20010cc4 	.word	0x20010cc4

0801c590 <_lseek_r>:
 801c590:	b538      	push	{r3, r4, r5, lr}
 801c592:	4d07      	ldr	r5, [pc, #28]	; (801c5b0 <_lseek_r+0x20>)
 801c594:	4604      	mov	r4, r0
 801c596:	4608      	mov	r0, r1
 801c598:	4611      	mov	r1, r2
 801c59a:	2200      	movs	r2, #0
 801c59c:	602a      	str	r2, [r5, #0]
 801c59e:	461a      	mov	r2, r3
 801c5a0:	f7e6 fe9a 	bl	80032d8 <_lseek>
 801c5a4:	1c43      	adds	r3, r0, #1
 801c5a6:	d102      	bne.n	801c5ae <_lseek_r+0x1e>
 801c5a8:	682b      	ldr	r3, [r5, #0]
 801c5aa:	b103      	cbz	r3, 801c5ae <_lseek_r+0x1e>
 801c5ac:	6023      	str	r3, [r4, #0]
 801c5ae:	bd38      	pop	{r3, r4, r5, pc}
 801c5b0:	20010cc4 	.word	0x20010cc4

0801c5b4 <_malloc_usable_size_r>:
 801c5b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801c5b8:	1f18      	subs	r0, r3, #4
 801c5ba:	2b00      	cmp	r3, #0
 801c5bc:	bfbc      	itt	lt
 801c5be:	580b      	ldrlt	r3, [r1, r0]
 801c5c0:	18c0      	addlt	r0, r0, r3
 801c5c2:	4770      	bx	lr

0801c5c4 <_read_r>:
 801c5c4:	b538      	push	{r3, r4, r5, lr}
 801c5c6:	4d07      	ldr	r5, [pc, #28]	; (801c5e4 <_read_r+0x20>)
 801c5c8:	4604      	mov	r4, r0
 801c5ca:	4608      	mov	r0, r1
 801c5cc:	4611      	mov	r1, r2
 801c5ce:	2200      	movs	r2, #0
 801c5d0:	602a      	str	r2, [r5, #0]
 801c5d2:	461a      	mov	r2, r3
 801c5d4:	f7e6 fe20 	bl	8003218 <_read>
 801c5d8:	1c43      	adds	r3, r0, #1
 801c5da:	d102      	bne.n	801c5e2 <_read_r+0x1e>
 801c5dc:	682b      	ldr	r3, [r5, #0]
 801c5de:	b103      	cbz	r3, 801c5e2 <_read_r+0x1e>
 801c5e0:	6023      	str	r3, [r4, #0]
 801c5e2:	bd38      	pop	{r3, r4, r5, pc}
 801c5e4:	20010cc4 	.word	0x20010cc4

0801c5e8 <_init>:
 801c5e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c5ea:	bf00      	nop
 801c5ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c5ee:	bc08      	pop	{r3}
 801c5f0:	469e      	mov	lr, r3
 801c5f2:	4770      	bx	lr

0801c5f4 <_fini>:
 801c5f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c5f6:	bf00      	nop
 801c5f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c5fa:	bc08      	pop	{r3}
 801c5fc:	469e      	mov	lr, r3
 801c5fe:	4770      	bx	lr
